
bluetooth.elf:     file format elf32-littlenios2
bluetooth.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00021a08 memsz 0x00021a08 flags r-x
    LOAD off    0x00022a28 vaddr 0x08021a28 paddr 0x08023568 align 2**12
         filesz 0x00001b40 memsz 0x00001b40 flags rw-
    LOAD off    0x000250a8 vaddr 0x080250a8 paddr 0x080250a8 align 2**12
         filesz 0x00000000 memsz 0x00000278 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00016e3c  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000aa30  08016ff8  08016ff8  00017ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b40  08021a28  08023568  00022a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000278  080250a8  080250a8  000250a8  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  08025320  08025320  00024568  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00024568  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000fe8  00000000  00000000  00024590  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002e3d0  00000000  00000000  00025578  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b64b  00000000  00000000  00053948  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000e76f  00000000  00000000  0005ef93  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002d80  00000000  00000000  0006d704  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000044da  00000000  00000000  00070484  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001f8ad  00000000  00000000  0007495e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0009420c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001700  00000000  00000000  00094230  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000997c0  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000997c3  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000997cf  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000997d0  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000997d1  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000997dc  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000997e7  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000997f2  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002e  00000000  00000000  000997fd  2**0
                  CONTENTS, READONLY
 26 .jdi          00004b4c  00000000  00000000  0009982b  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006ba24  00000000  00000000  0009e377  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001bc l    d  .text	00000000 .text
08016ff8 l    d  .rodata	00000000 .rodata
08021a28 l    d  .rwdata	00000000 .rwdata
080250a8 l    d  .bss	00000000 .bss
08025320 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../bluetooth_bsp//obj/HAL/src/crt0.o
080001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 NeverLostMain.c
00000000 l    df *ABS*	00000000 graphic.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
08003d88 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atof.c
00000000 l    df *ABS*	00000000 difftime.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtod.c
08021e44 l     O .rwdata	00000014 fpi.2638
08021790 l     O .rodata	00000028 tinytens
08021e30 l     O .rwdata	00000014 fpinan.2674
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
080217fa l     O .rodata	00000010 zeroes.4166
0802180a l     O .rodata	00000010 blanks.4165
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
0802181a l     O .rodata	00000010 zeroes.4181
0802182a l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0800a3dc l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0800bf5c l     F .text	00000008 __fp_lock
0800bf64 l     F .text	00000008 __fp_unlock
0800bf78 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0800c880 l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 impure.c
08021e58 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0802229c l     O .rwdata	00000020 lc_ctype_charset
0802227c l     O .rwdata	00000020 lc_message_charset
080222bc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
08021878 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0802199c l     O .rodata	00000010 zeroes.4110
080219ac l     O .rodata	00000010 blanks.4109
00000000 l    df *ABS*	00000000 vfprintf.c
0801007c l     F .text	000000fc __sprint_r.part.0
080219cc l     O .rodata	00000010 blanks.4125
080219bc l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 alt_close.c
08014254 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
08014374 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
080143a0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
08014694 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
08014788 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0801486c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08014a48 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08023558 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
08014e40 l     F .text	00000038 alt_dev_reg
0802249c l     O .rwdata	00001060 jtag_uart_0
080234fc l     O .rwdata	0000002c character_lcd_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08015144 l     F .text	00000204 altera_avalon_jtag_uart_irq
08015348 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08015968 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08016098 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
080165d4 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0801670c l     F .text	00000050 alt_get_errno
0801675c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
08004718 g     F .text	00000018 putchar
0800e8fc g     F .text	00000074 _mprec_log10
0800e9e8 g     F .text	0000008c __any_on
08011fe0 g     F .text	00000054 _isatty_r
08021884 g     O .rodata	00000028 __mprec_tinytens
08014990 g     F .text	00000078 alt_main
08004a6c g     F .text	00000090 strcpy
08025220 g     O .bss	00000100 alt_irq
08012034 g     F .text	0000005c _lseek_r
08023568 g       *ABS*	00000000 __flash_rwdata_start
08015ad8 g     F .text	0000003c alt_up_character_lcd_send_cmd
08013790 g     F .text	00000084 .hidden __eqdf2
0800d4b4 g     F .text	00000058 _gettimeofday_r
080016d4 g     F .text	0000007c ProgramPalette
08025320 g       *ABS*	00000000 __alt_heap_start
080062a4 g     F .text	00000008 strtok_r
080046d4 g     F .text	0000003c printf
080173f6 g     O .rodata	00000a64 Font10x14
080127e8 g     F .text	0000009c _wcrtomb_r
08001864 g     F .text	00000074 DrawVlineWeighted
0800ed28 g     F .text	0000005c __sseek
0800c2ac g     F .text	00000010 __sinit
08011510 g     F .text	00000154 __swbuf_r
0800d50c g     F .text	0000007c _setlocale_r
0800c118 g     F .text	00000064 __sfmoreglue
08014a28 g     F .text	00000020 __malloc_unlock
08004b94 g     F .text	00001540 _strtod_r
08000234 g     F .text	00000044 getCharRS232_GPS
08012090 g     F .text	0000015c memmove
0800c294 g     F .text	00000018 _cleanup
0800485c g     F .text	000000e4 snprintf
0800dae8 g     F .text	000000a8 _Balloc
0800620c g     F .text	00000098 __strtok_r
0800321c g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
08015a64 g     F .text	00000074 get_DDRAM_addr
08000000 g     F .entry	0000001c __reset
080250a8 g     O .bss	00000004 old_lat
08000020 g       *ABS*	00000000 __flash_exceptions_start
08001d3c g     F .text	000001cc drawcircle
08011ae4 g     F .text	00000058 _fstat_r
080250c0 g     O .bss	00000004 errno
0800eca4 g     F .text	00000008 __seofread
0800106c g     F .text	00000220 updateData
0800f014 g     F .text	00001068 ___svfiprintf_internal_r
080250e4 g     O .bss	00000004 alt_argv
0802b528 g       *ABS*	00000000 _gp
0802231c g     O .rwdata	00000180 alt_fd_list
08004710 g     F .text	00000008 _putchar_r
08016244 g     F .text	00000090 alt_find_dev
0800d88c g     F .text	00000138 memcpy
0800d220 g     F .text	00000294 __hexnan
08015c74 g     F .text	00000050 alt_up_character_lcd_write_fd
08000840 g     F .text	00000078 concat2
08001438 g     F .text	00000190 OutGraphicsCharFont2a
0800bf6c g     F .text	0000000c _cleanup_r
08003c54 g     F .text	000000d0 .hidden __floatsidf
08016694 g     F .text	00000078 alt_io_redirect
08013814 g     F .text	000000e0 .hidden __ltdf2
08016ff8 g       *ABS*	00000000 __DTOR_END__
08000a6c g     F .text	0000004c putCharRS232_HR
0800ebdc g     F .text	00000074 __fpclassifyd
0800e858 g     F .text	000000a4 __ratio
080114ec g     F .text	00000024 __vfiprintf_internal
08015544 g     F .text	0000020c altera_avalon_jtag_uart_read
08003ed8 g     F .text	00000014 malloc
080046a8 g     F .text	0000002c _printf_r
08003ea4 g     F .text	00000008 .hidden __udivsi3
080146e4 g     F .text	000000a4 isatty
080218d4 g     O .rodata	000000c8 __mprec_tens
0801beec g     O .rodata	00005794 Font38x59
0800d588 g     F .text	0000000c __locale_charset
080136d8 g     F .text	000000b8 .hidden __lesf2
080250d0 g     O .bss	00000008 alt_timezone
080129e8 g     F .text	00000074 .hidden __fixunsdfsi
08016b68 g     F .text	0000008c alt_icache_flush
080250bc g     O .bss	00000004 __malloc_top_pad
080017f0 g     F .text	00000074 DrawHlineWeighted
08023538 g     O .rwdata	00000004 __mb_cur_max
0800d5b8 g     F .text	0000000c _localeconv_r
08011b3c g     F .text	000004a4 __sfvwrite_r
0800dee8 g     F .text	0000003c __i2b
08004730 g     F .text	00000054 _sbrk_r
080121ec g     F .text	0000005c _read_r
08023550 g     O .rwdata	00000004 alt_max_fd
080117f4 g     F .text	00000100 _fclose_r
0800bf2c g     F .text	00000030 fflush
08000b04 g     F .text	000000b8 getHR
080250b8 g     O .bss	00000004 __malloc_max_sbrked_mem
080020b4 g     F .text	0000089c .hidden __adddf3
080135ac g     F .text	00000074 .hidden __nesf2
0800e600 g     F .text	0000011c __b2d
0801301c g     F .text	00000590 .hidden __umoddi3
080148bc g     F .text	000000d4 lseek
08023530 g     O .rwdata	00000004 _global_impure_ptr
08000790 g     F .text	000000b0 concat
08012248 g     F .text	000005a0 _realloc_r
08025320 g       *ABS*	00000000 __bss_end
080164e4 g     F .text	000000f0 alt_iic_isr_register
08014d3c g     F .text	00000104 alt_tick
08025120 g     O .bss	00000100 __hexdig
08012a5c g     F .text	000005c0 .hidden __udivdi3
08011908 g     F .text	00000184 _fputwc_r
080218ac g     O .rodata	00000028 __mprec_bigtens
0800dccc g     F .text	00000104 __s2b
080001f8 g     F .text	0000003c initRS232_GPS
08014018 g     F .text	000000a4 .hidden __floatunsidf
0800e3a8 g     F .text	00000060 __mcmp
0800c2cc g     F .text	00000018 __fp_lock_all
08016498 g     F .text	0000004c alt_ic_irq_enabled
08014ca4 g     F .text	00000098 alt_alarm_stop
08017e5a g     O .rodata	0000140a Font16x27
080250f4 g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000d0 alt_irq_handler
080222f4 g     O .rwdata	00000028 alt_dev_null
08001978 g     F .text	000000a0 Drawline
0800128c g     F .text	000001ac OutGraphicsCharFont1
08015f08 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0801607c g     F .text	0000001c alt_dcache_flush_all
0800ddd0 g     F .text	00000068 __hi0bits
080250ac g     O .bss	00000004 old_lng
08003bcc g     F .text	00000088 .hidden __fixdfsi
080060d4 g     F .text	0000001c strtod
08023568 g       *ABS*	00000000 __ram_rwdata_end
08023548 g     O .rwdata	00000008 alt_dev_list
08001be4 g     F .text	000000ac write
0800ea74 g     F .text	000000a0 _putc_r
08003eb4 g     F .text	00000008 atof
08013620 g     F .text	000000b8 .hidden __gtsf2
08000bbc g     F .text	00000054 getHRData
08000ef0 g     F .text	0000017c setData
08021a28 g       *ABS*	00000000 __ram_rodata_end
080143f0 g     F .text	000000b0 fstat
08013814 g     F .text	000000e0 .hidden __ledf2
08000278 g     F .text	0000004c putCharRS232_GPS
08004940 g     F .text	00000088 strcat
0800e120 g     F .text	00000140 __pow5mult
08010190 g     F .text	0000135c ___vfiprintf_internal_r
080250cc g     O .bss	00000004 __nlocale_changed
08003eac g     F .text	00000008 .hidden __umodsi3
08025320 g       *ABS*	00000000 end
08015080 g     F .text	000000c4 altera_avalon_jtag_uart_init
08016ff8 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
080159dc g     F .text	00000088 alt_avalon_timer_sc_init
08003d24 g     F .text	00000064 .hidden __clzsi2
08004784 g     F .text	000000d8 _snprintf_r
08015750 g     F .text	00000218 altera_avalon_jtag_uart_write
080018d8 g     F .text	000000a0 DrawVline
0800c2bc g     F .text	00000004 __sfp_lock_acquire
0800d7a4 g     F .text	000000e8 memchr
08001b48 g     F .text	00000058 waitFor
08015b88 g     F .text	00000078 alt_up_character_lcd_write
0800828c g     F .text	00001ffc ___vfprintf_internal_r
0800c420 g     F .text	000002f0 _free_r
0800d594 g     F .text	00000010 __locale_mb_cur_max
08016dd0 g     F .text	00000194 __call_exitprocs
080250c8 g     O .bss	00000004 __mlocale_changed
080008f4 g     F .text	00000044 getCharRS232_BT
08023528 g     O .rwdata	00000004 __malloc_sbrk_base
080001bc g     F .text	0000003c _start
080250ec g     O .bss	00000004 _alt_tick_rate
0800e260 g     F .text	00000148 __lshift
080250f0 g     O .bss	00000004 _alt_nticks
08014a98 g     F .text	000000fc read
08014eac g     F .text	00000070 alt_sys_init
08015dc0 g     F .text	00000088 alt_up_character_lcd_shift_display
0800ee4c g     F .text	000001c8 __ssprint_r
08001750 g     F .text	000000a0 DrawHline
08016cbc g     F .text	00000114 __register_exitproc
0800ed8c g     F .text	000000c0 strncmp
0800df24 g     F .text	000001fc __multiply
08015e48 g     F .text	0000008c alt_up_character_lcd_erase_pos
080153f0 g     F .text	00000068 altera_avalon_jtag_uart_close
08021a28 g       *ABS*	00000000 __ram_rwdata_start
08016ff8 g       *ABS*	00000000 __ram_rodata_start
080250f8 g     O .bss	00000028 __malloc_current_mallinfo
080135ac g     F .text	00000074 .hidden __eqsf2
0800e71c g     F .text	0000013c __d2b
08014f1c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08016ab4 g     F .text	000000b4 alt_get_fd
080116dc g     F .text	00000054 _close_r
08001f08 g     F .text	000001ac drawSolidcircle
080061f4 g     F .text	00000018 strtok
08016c40 g     F .text	0000007c memcmp
08014fdc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08025320 g       *ABS*	00000000 __alt_stack_base
0801502c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0800a2ac g     F .text	00000130 __swsetup_r
08002950 g     F .text	000008cc .hidden __divdf3
0800c17c g     F .text	00000118 __sfp
0800e970 g     F .text	00000078 __copybits
08021a28 g     O .rwdata	00000408 __malloc_av_
0800c2c8 g     F .text	00000004 __sinit_lock_release
080138f4 g     F .text	00000724 .hidden __muldf3
0800ec50 g     F .text	00000054 __sread
080169a0 g     F .text	00000114 alt_find_file
080160e8 g     F .text	000000a4 alt_dev_llist_insert
08014a08 g     F .text	00000020 __malloc_lock
08014bf4 g     F .text	000000b0 sbrk
080062ac g     F .text	00001f90 ___svfprintf_internal_r
0800bd04 g     F .text	00000228 _fflush_r
08011730 g     F .text	000000c4 _calloc_r
080144a0 g     F .text	000001f4 gettimeofday
080009ec g     F .text	0000003c initRS232_HR
080250a8 g       *ABS*	00000000 __bss_start
0800d9c4 g     F .text	00000124 memset
08000d60 g     F .text	00000190 main
080250e8 g     O .bss	00000004 alt_envp
080250b4 g     O .bss	00000004 __malloc_max_total_mem
08014f7c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08011664 g     F .text	0000001c __swbuf
080136d8 g     F .text	000000b8 .hidden __ltsf2
08001644 g     F .text	00000090 ReadAPixel
08015d38 g     F .text	00000088 alt_up_character_lcd_shift_cursor
0800ed84 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
080118f4 g     F .text	00000014 fclose
080140bc g     F .text	00000198 .hidden __truncdfsf2
0800a5dc g     F .text	00001728 _dtoa_r
08003f00 g     F .text	000007a8 _malloc_r
0801295c g     F .text	00000030 __ascii_wctomb
0800823c g     F .text	00000050 time
08023554 g     O .rwdata	00000004 alt_errno
0800c710 g     F .text	000000b8 _fwalk
0800eb14 g     F .text	000000c8 putc
08003df4 g     F .text	00000054 .hidden __divsi3
08015b48 g     F .text	00000040 alt_up_character_lcd_open_dev
0800c2fc g     F .text	00000124 _malloc_trim_r
08016ff8 g       *ABS*	00000000 __CTOR_END__
08015b14 g     F .text	00000034 alt_up_character_lcd_init
080049c8 g     F .text	000000a4 strcmp
08016ff8 g       *ABS*	00000000 __flash_rodata_start
08016ff8 g       *ABS*	00000000 __DTOR_LIST__
08013790 g     F .text	00000084 .hidden __nedf2
080009a0 g     F .text	0000004c putCharRS232_BT
08014e78 g     F .text	00000034 alt_irq_init
08014b94 g     F .text	00000060 alt_release_fd
08015ed4 g     F .text	00000034 alt_up_character_lcd_cursor_off
08021680 g     O .rodata	00000100 .hidden __clz_tab
080250c4 g     O .bss	00000004 _PathLocale
08003ebc g     F .text	0000001c difftime
080060f0 g     F .text	00000104 strtof
08016bf4 g     F .text	00000014 atexit
080002c4 g     F .text	000004cc getGPSdata
08013620 g     F .text	000000b8 .hidden __gesf2
08011680 g     F .text	0000005c _write_r
0800d5c4 g     F .text	0000001c setlocale
08023534 g     O .rwdata	00000004 _impure_ptr
080250e0 g     O .bss	00000004 alt_argc
080015c8 g     F .text	0000007c WriteAPixel
080161e8 g     F .text	0000005c _do_dtors
0800d5b0 g     F .text	00000008 __locale_cjk_lang
0801715c g     O .rodata	00000299 Font5x7
08000020 g       .exceptions	00000000 alt_irq_entry
08000938 g     F .text	00000068 getCharRS232_BT_TIMED
0800e5a0 g     F .text	00000060 __ulp
0800c2e4 g     F .text	00000018 __fp_unlock_all
08023540 g     O .rwdata	00000008 alt_fs_list
080250d8 g     O .bss	00000008 alt_resettime
08000020 g       *ABS*	00000000 __ram_exceptions_start
0800d5e0 g     F .text	0000000c localeconv
080008b8 g     F .text	0000003c initRS232_BT
08016304 g     F .text	00000050 alt_ic_isr_register
0800c980 g     F .text	00000084 __hexdig_init
080250b0 g     O .bss	00000004 old_hr
08023568 g       *ABS*	00000000 _edata
08025320 g       *ABS*	00000000 _end
080001bc g       *ABS*	00000000 __ram_exceptions_end
08015458 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
080163f4 g     F .text	000000a4 alt_ic_irq_disable
0800ecac g     F .text	0000007c __swrite
0802352c g     O .rwdata	00000004 __malloc_trim_threshold
08016980 g     F .text	00000020 altera_nios2_qsys_irq_init
0800d5a4 g     F .text	0000000c __locale_msgcharset
08016c08 g     F .text	00000038 exit
0800c7c8 g     F .text	000000b8 _fwalk_reent
0800e408 g     F .text	00000198 __mdiff
08001a18 g     F .text	0000008c DrawSolidRectangle
08003e48 g     F .text	0000005c .hidden __modsi3
08000ab8 g     F .text	0000004c waitChar
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
0800c2c0 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
08015c00 g     F .text	00000074 alt_up_character_lcd_string
08000c10 g     F .text	00000090 sendString
08019264 g     O .rodata	00002c88 Font22x40
08016fc4 g     F .text	00000034 _exit
08015f3c g     F .text	00000140 alt_alarm_start
08016f64 g     F .text	00000060 .hidden __muldi3
0800d5ec g     F .text	000001b8 __smakebuf_r
08004afc g     F .text	00000098 strlen
08016828 g     F .text	00000158 open
0800321c g     F .text	000000e0 .hidden __gedf2
0800ca04 g     F .text	0000081c __gethex
08001ba0 g     F .text	00000044 clearScreen
0802353c g     O .rwdata	00000004 __wctomb
08001aa4 g     F .text	000000a4 DrawRectangle
08010178 g     F .text	00000018 __sprint_r
080162d4 g     F .text	00000030 alt_icache_flush_all
08001c90 g     F .text	000000ac writeSmall
08015cc4 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
08023564 g     O .rwdata	00000004 alt_priority_mask
08016354 g     F .text	000000a0 alt_ic_irq_enable
0800a288 g     F .text	00000024 __vfprintf_internal
0801298c g     F .text	0000005c _wctomb_r
080032fc g     F .text	000008d0 .hidden __subdf3
0800de38 g     F .text	000000b0 __lo0bits
0802355c g     O .rwdata	00000008 alt_alarm_list
0801618c g     F .text	0000005c _do_ctors
08012884 g     F .text	000000d8 wcrtomb
080142a4 g     F .text	000000d0 close
080147ec g     F .text	00000080 alt_load
08000a28 g     F .text	00000044 getCharRS232_HR
08011a8c g     F .text	00000058 fputwc
08000ca0 g     F .text	000000c0 readString
08003eec g     F .text	00000014 free
0800c2c4 g     F .text	00000004 __sinit_lock_acquire
0800dbb8 g     F .text	00000114 __multadd
0800db90 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08406f14 	ori	at,at,444
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_sdram-0x8000000>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001426 	beq	r2,zero,800017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	008200b4 	movhi	r2,2050
 8000130:	10948804 	addi	r2,r2,21024
 8000134:	e0fffd17 	ldw	r3,-12(fp)
 8000138:	180690fa 	slli	r3,r3,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	008200b4 	movhi	r2,2050
 8000148:	10948804 	addi	r2,r2,21024
 800014c:	e13ffd17 	ldw	r4,-12(fp)
 8000150:	200890fa 	slli	r4,r4,3
 8000154:	1105883a 	add	r2,r2,r4
 8000158:	10800104 	addi	r2,r2,4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	00000706 	br	8000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800017c:	e0bffc17 	ldw	r2,-16(fp)
 8000180:	1085883a 	add	r2,r2,r2
 8000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000188:	e0bffd17 	ldw	r2,-12(fp)
 800018c:	10800044 	addi	r2,r2,1
 8000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8000194:	003fe106 	br	800011c <__alt_data_end+0xfc00011c>

    active = alt_irq_pending ();
 8000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800019c:	e0bffb17 	ldw	r2,-20(fp)
 80001a0:	103fdb1e 	bne	r2,zero,8000110 <__alt_data_end+0xfc000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a4:	0001883a 	nop
}
 80001a8:	e037883a 	mov	sp,fp
 80001ac:	dfc00117 	ldw	ra,4(sp)
 80001b0:	df000017 	ldw	fp,0(sp)
 80001b4:	dec00204 	addi	sp,sp,8
 80001b8:	f800283a 	ret

Disassembly of section .text:

080001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001bc:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c4:	068200b4 	movhi	gp,2050
    ori gp, gp, %lo(_gp)
 80001c8:	d6ad4a14 	ori	gp,gp,46376
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001cc:	008200b4 	movhi	r2,2050
    ori r2, r2, %lo(__bss_start)
 80001d0:	10942a14 	ori	r2,r2,20648

    movhi r3, %hi(__bss_end)
 80001d4:	00c200b4 	movhi	r3,2050
    ori r3, r3, %lo(__bss_end)
 80001d8:	18d4c814 	ori	r3,r3,21280

    beq r2, r3, 1f
 80001dc:	10c00326 	beq	r2,r3,80001ec <_start+0x30>

0:
    stw zero, (r2)
 80001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e8:	10fffd36 	bltu	r2,r3,80001e0 <__alt_data_end+0xfc0001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001ec:	80147ec0 	call	80147ec <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f0:	80149900 	call	8014990 <alt_main>

080001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f4:	003fff06 	br	80001f4 <__alt_data_end+0xfc0001f4>

080001f8 <initRS232_GPS>:
#define RS232_Baud_GPS (*(volatile unsigned char *)(0x84000214))

typedef struct { char* lat; char* lng; } Coord ;

//initialize
void initRS232_GPS(void) {
 80001f8:	deffff04 	addi	sp,sp,-4
 80001fc:	df000015 	stw	fp,0(sp)
 8000200:	d839883a 	mov	fp,sp
	//8 data bits, 1 stop bit
	RS232_Control_GPS = 0x15;
 8000204:	00a10034 	movhi	r2,33792
 8000208:	10808404 	addi	r2,r2,528
 800020c:	00c00544 	movi	r3,21
 8000210:	10c00005 	stb	r3,0(r2)

	//9600 baud
	RS232_Baud_GPS = 0x05;
 8000214:	00a10034 	movhi	r2,33792
 8000218:	10808504 	addi	r2,r2,532
 800021c:	00c00144 	movi	r3,5
 8000220:	10c00005 	stb	r3,0(r2)
}
 8000224:	e037883a 	mov	sp,fp
 8000228:	df000017 	ldw	fp,0(sp)
 800022c:	dec00104 	addi	sp,sp,4
 8000230:	f800283a 	ret

08000234 <getCharRS232_GPS>:

//read from rx
char getCharRS232_GPS(void) {
 8000234:	deffff04 	addi	sp,sp,-4
 8000238:	df000015 	stw	fp,0(sp)
 800023c:	d839883a 	mov	fp,sp
	while (!(RS232_Status_GPS & 0x01)) {
 8000240:	0001883a 	nop
 8000244:	00a10034 	movhi	r2,33792
 8000248:	10808404 	addi	r2,r2,528
 800024c:	10800003 	ldbu	r2,0(r2)
 8000250:	10803fcc 	andi	r2,r2,255
 8000254:	1080004c 	andi	r2,r2,1
 8000258:	103ffa26 	beq	r2,zero,8000244 <__alt_data_end+0xfc000244>
	};
	return RS232_RxData_GPS;
 800025c:	00a10034 	movhi	r2,33792
 8000260:	10808484 	addi	r2,r2,530
 8000264:	10800003 	ldbu	r2,0(r2)
}
 8000268:	e037883a 	mov	sp,fp
 800026c:	df000017 	ldw	fp,0(sp)
 8000270:	dec00104 	addi	sp,sp,4
 8000274:	f800283a 	ret

08000278 <putCharRS232_GPS>:

//write to tx
void putCharRS232_GPS(int c) {
 8000278:	defffe04 	addi	sp,sp,-8
 800027c:	df000115 	stw	fp,4(sp)
 8000280:	df000104 	addi	fp,sp,4
 8000284:	e13fff15 	stw	r4,-4(fp)
	while (!(0x02 & RS232_Status_GPS)) {
 8000288:	0001883a 	nop
 800028c:	00a10034 	movhi	r2,33792
 8000290:	10808404 	addi	r2,r2,528
 8000294:	10800003 	ldbu	r2,0(r2)
 8000298:	1080008c 	andi	r2,r2,2
 800029c:	10803fcc 	andi	r2,r2,255
 80002a0:	103ffa26 	beq	r2,zero,800028c <__alt_data_end+0xfc00028c>
	};
	RS232_TxData_GPS = c;
 80002a4:	00a10034 	movhi	r2,33792
 80002a8:	10808484 	addi	r2,r2,530
 80002ac:	e0ffff17 	ldw	r3,-4(fp)
 80002b0:	10c00005 	stb	r3,0(r2)
}
 80002b4:	e037883a 	mov	sp,fp
 80002b8:	df000017 	ldw	fp,0(sp)
 80002bc:	dec00104 	addi	sp,sp,4
 80002c0:	f800283a 	ret

080002c4 <getGPSdata>:

Coord getGPSdata() {
 80002c4:	deffd304 	addi	sp,sp,-180
 80002c8:	dfc02c15 	stw	ra,176(sp)
 80002cc:	df002b15 	stw	fp,172(sp)
 80002d0:	ddc02a15 	stw	r23,168(sp)
 80002d4:	dd802915 	stw	r22,164(sp)
 80002d8:	dd402815 	stw	r21,160(sp)
 80002dc:	dd002715 	stw	r20,156(sp)
 80002e0:	dcc02615 	stw	r19,152(sp)
 80002e4:	dc802515 	stw	r18,148(sp)
 80002e8:	dc402415 	stw	r17,144(sp)
 80002ec:	dc002315 	stw	r16,140(sp)
 80002f0:	df002b04 	addi	fp,sp,172
    int size = 500;
 80002f4:	00807d04 	movi	r2,500
 80002f8:	e0bfdb15 	stw	r2,-148(fp)
 80002fc:	d805883a 	mov	r2,sp
 8000300:	e0bff515 	stw	r2,-44(fp)
    Coord c;
    while (1) {
        char data[size];
 8000304:	e0bfdb17 	ldw	r2,-148(fp)
 8000308:	10ffffc4 	addi	r3,r2,-1
 800030c:	e0ffdc15 	stw	r3,-144(fp)
 8000310:	1007883a 	mov	r3,r2
 8000314:	1829883a 	mov	r20,r3
 8000318:	002b883a 	mov	r21,zero
 800031c:	a006d77a 	srli	r3,r20,29
 8000320:	a82290fa 	slli	r17,r21,3
 8000324:	1c62b03a 	or	r17,r3,r17
 8000328:	a02090fa 	slli	r16,r20,3
 800032c:	1007883a 	mov	r3,r2
 8000330:	182d883a 	mov	r22,r3
 8000334:	002f883a 	mov	r23,zero
 8000338:	b006d77a 	srli	r3,r22,29
 800033c:	b82690fa 	slli	r19,r23,3
 8000340:	1ce6b03a 	or	r19,r3,r19
 8000344:	b02490fa 	slli	r18,r22,3
 8000348:	108000c4 	addi	r2,r2,3
 800034c:	1004d0ba 	srli	r2,r2,2
 8000350:	1085883a 	add	r2,r2,r2
 8000354:	1085883a 	add	r2,r2,r2
 8000358:	d8b7c83a 	sub	sp,sp,r2
 800035c:	d8800104 	addi	r2,sp,4
 8000360:	1005883a 	mov	r2,r2
 8000364:	e0bfdd15 	stw	r2,-140(fp)
        char character;
        int index = 0;
 8000368:	e03fd615 	stw	zero,-168(fp)
        const char s[2] = ",";
 800036c:	00800b04 	movi	r2,44
 8000370:	e0bff40d 	sth	r2,-48(fp)
        //get data string
        do {
            character = getCharRS232_GPS();
 8000374:	80002340 	call	8000234 <getCharRS232_GPS>
 8000378:	e0bfde05 	stb	r2,-136(fp)
            printf("%c", character);
 800037c:	e0bfde07 	ldb	r2,-136(fp)
 8000380:	1009883a 	mov	r4,r2
 8000384:	80047180 	call	8004718 <putchar>
            data[index] = character;
 8000388:	e0ffdd17 	ldw	r3,-140(fp)
 800038c:	e0bfd617 	ldw	r2,-168(fp)
 8000390:	1885883a 	add	r2,r3,r2
 8000394:	e0ffde03 	ldbu	r3,-136(fp)
 8000398:	10c00005 	stb	r3,0(r2)
            index++;
 800039c:	e0bfd617 	ldw	r2,-168(fp)
 80003a0:	10800044 	addi	r2,r2,1
 80003a4:	e0bfd615 	stw	r2,-168(fp)
        } while (character != '\n');
 80003a8:	e0bfde07 	ldb	r2,-136(fp)
 80003ac:	10800298 	cmpnei	r2,r2,10
 80003b0:	103ff01e 	bne	r2,zero,8000374 <__alt_data_end+0xfc000374>

        char *token = strtok(data, s);
 80003b4:	e0ffdd17 	ldw	r3,-140(fp)
 80003b8:	e0bff404 	addi	r2,fp,-48
 80003bc:	1809883a 	mov	r4,r3
 80003c0:	100b883a 	mov	r5,r2
 80003c4:	80061f40 	call	80061f4 <strtok>
 80003c8:	e0bfdf15 	stw	r2,-132(fp)

        if (!strcmp(token, "$GPGGA")) {
 80003cc:	e13fdf17 	ldw	r4,-132(fp)
 80003d0:	01420074 	movhi	r5,2049
 80003d4:	295bfe04 	addi	r5,r5,28664
 80003d8:	80049c80 	call	80049c8 <strcmp>
 80003dc:	1000d61e 	bne	r2,zero,8000738 <getGPSdata+0x474>
            printf("message_id: %s \n", token);
 80003e0:	01020074 	movhi	r4,2049
 80003e4:	211c0004 	addi	r4,r4,28672
 80003e8:	e17fdf17 	ldw	r5,-132(fp)
 80003ec:	80046d40 	call	80046d4 <printf>

            token = strtok(NULL, s);
 80003f0:	e0bff404 	addi	r2,fp,-48
 80003f4:	0009883a 	mov	r4,zero
 80003f8:	100b883a 	mov	r5,r2
 80003fc:	80061f40 	call	80061f4 <strtok>
 8000400:	e0bfdf15 	stw	r2,-132(fp)
            double UTC_time = atof(token);
 8000404:	e13fdf17 	ldw	r4,-132(fp)
 8000408:	8003eb40 	call	8003eb4 <atof>
 800040c:	e0bfe015 	stw	r2,-128(fp)
 8000410:	e0ffe115 	stw	r3,-124(fp)
            printf("UTC_time: %f \n", UTC_time);
 8000414:	01020074 	movhi	r4,2049
 8000418:	211c0504 	addi	r4,r4,28692
 800041c:	e17fe017 	ldw	r5,-128(fp)
 8000420:	e1bfe117 	ldw	r6,-124(fp)
 8000424:	80046d40 	call	80046d4 <printf>

            token = strtok(NULL, s);
 8000428:	e0bff404 	addi	r2,fp,-48
 800042c:	0009883a 	mov	r4,zero
 8000430:	100b883a 	mov	r5,r2
 8000434:	80061f40 	call	80061f4 <strtok>
 8000438:	e0bfdf15 	stw	r2,-132(fp)
            char* latitude = token;
 800043c:	e0bfdf17 	ldw	r2,-132(fp)
 8000440:	e0bfe215 	stw	r2,-120(fp)
            printf("latitude: %s \n", latitude);
 8000444:	01020074 	movhi	r4,2049
 8000448:	211c0904 	addi	r4,r4,28708
 800044c:	e17fe217 	ldw	r5,-120(fp)
 8000450:	80046d40 	call	80046d4 <printf>

            token = strtok(NULL, s);
 8000454:	e0bff404 	addi	r2,fp,-48
 8000458:	0009883a 	mov	r4,zero
 800045c:	100b883a 	mov	r5,r2
 8000460:	80061f40 	call	80061f4 <strtok>
 8000464:	e0bfdf15 	stw	r2,-132(fp)
            char* NS_indicator = token;
 8000468:	e0bfdf17 	ldw	r2,-132(fp)
 800046c:	e0bfe315 	stw	r2,-116(fp)

            token = strtok(NULL, s);
 8000470:	e0bff404 	addi	r2,fp,-48
 8000474:	0009883a 	mov	r4,zero
 8000478:	100b883a 	mov	r5,r2
 800047c:	80061f40 	call	80061f4 <strtok>
 8000480:	e0bfdf15 	stw	r2,-132(fp)
            char* longitude = token;
 8000484:	e0bfdf17 	ldw	r2,-132(fp)
 8000488:	e0bfe415 	stw	r2,-112(fp)
            printf("longitude: %s \n", longitude);
 800048c:	01020074 	movhi	r4,2049
 8000490:	211c0d04 	addi	r4,r4,28724
 8000494:	e17fe417 	ldw	r5,-112(fp)
 8000498:	80046d40 	call	80046d4 <printf>

            token = strtok(NULL, s);
 800049c:	e0bff404 	addi	r2,fp,-48
 80004a0:	0009883a 	mov	r4,zero
 80004a4:	100b883a 	mov	r5,r2
 80004a8:	80061f40 	call	80061f4 <strtok>
 80004ac:	e0bfdf15 	stw	r2,-132(fp)
            char* EW_indicator = token;
 80004b0:	e0bfdf17 	ldw	r2,-132(fp)
 80004b4:	e0bfe515 	stw	r2,-108(fp)

            double lat_double = atof(latitude);
 80004b8:	e13fe217 	ldw	r4,-120(fp)
 80004bc:	8003eb40 	call	8003eb4 <atof>
 80004c0:	e0bfd715 	stw	r2,-164(fp)
 80004c4:	e0ffd815 	stw	r3,-160(fp)
            double long_double = atof(longitude);
 80004c8:	e13fe417 	ldw	r4,-112(fp)
 80004cc:	8003eb40 	call	8003eb4 <atof>
 80004d0:	e0bfd915 	stw	r2,-156(fp)
 80004d4:	e0ffda15 	stw	r3,-152(fp)

            if (strcmp(NS_indicator, "S") == 0){
 80004d8:	e13fe317 	ldw	r4,-116(fp)
 80004dc:	01420074 	movhi	r5,2049
 80004e0:	295c1104 	addi	r5,r5,28740
 80004e4:	80049c80 	call	80049c8 <strcmp>
 80004e8:	1000051e 	bne	r2,zero,8000500 <getGPSdata+0x23c>
            	lat_double = lat_double*-1;
 80004ec:	e0bfd717 	ldw	r2,-164(fp)
 80004f0:	e0bfd715 	stw	r2,-164(fp)
 80004f4:	e0bfd817 	ldw	r2,-160(fp)
 80004f8:	10a0003c 	xorhi	r2,r2,32768
 80004fc:	e0bfd815 	stw	r2,-160(fp)
            }

            if (strcmp(EW_indicator, "W") == 0){
 8000500:	e13fe517 	ldw	r4,-108(fp)
 8000504:	01420074 	movhi	r5,2049
 8000508:	295c1204 	addi	r5,r5,28744
 800050c:	80049c80 	call	80049c8 <strcmp>
 8000510:	1000051e 	bne	r2,zero,8000528 <getGPSdata+0x264>
            	long_double = long_double*-1;
 8000514:	e0bfd917 	ldw	r2,-156(fp)
 8000518:	e0bfd915 	stw	r2,-156(fp)
 800051c:	e0bfda17 	ldw	r2,-152(fp)
 8000520:	10a0003c 	xorhi	r2,r2,32768
 8000524:	e0bfda15 	stw	r2,-152(fp)
            }

            int lat_degree = (int) (lat_double/100);
 8000528:	e13fd717 	ldw	r4,-164(fp)
 800052c:	e17fd817 	ldw	r5,-160(fp)
 8000530:	000d883a 	mov	r6,zero
 8000534:	01d01674 	movhi	r7,16473
 8000538:	80029500 	call	8002950 <__divdf3>
 800053c:	1009883a 	mov	r4,r2
 8000540:	180b883a 	mov	r5,r3
 8000544:	2005883a 	mov	r2,r4
 8000548:	2807883a 	mov	r3,r5
 800054c:	1009883a 	mov	r4,r2
 8000550:	180b883a 	mov	r5,r3
 8000554:	8003bcc0 	call	8003bcc <__fixdfsi>
 8000558:	e0bfe615 	stw	r2,-104(fp)
            double lat_min = (lat_double-(lat_degree*100))/60;
 800055c:	e0bfe617 	ldw	r2,-104(fp)
 8000560:	10801924 	muli	r2,r2,100
 8000564:	1009883a 	mov	r4,r2
 8000568:	8003c540 	call	8003c54 <__floatsidf>
 800056c:	100f883a 	mov	r7,r2
 8000570:	1811883a 	mov	r8,r3
 8000574:	e13fd717 	ldw	r4,-164(fp)
 8000578:	e17fd817 	ldw	r5,-160(fp)
 800057c:	380d883a 	mov	r6,r7
 8000580:	400f883a 	mov	r7,r8
 8000584:	80032fc0 	call	80032fc <__subdf3>
 8000588:	1009883a 	mov	r4,r2
 800058c:	180b883a 	mov	r5,r3
 8000590:	2005883a 	mov	r2,r4
 8000594:	2807883a 	mov	r3,r5
 8000598:	1009883a 	mov	r4,r2
 800059c:	180b883a 	mov	r5,r3
 80005a0:	000d883a 	mov	r6,zero
 80005a4:	01d013b4 	movhi	r7,16462
 80005a8:	80029500 	call	8002950 <__divdf3>
 80005ac:	1009883a 	mov	r4,r2
 80005b0:	180b883a 	mov	r5,r3
 80005b4:	e13fe715 	stw	r4,-100(fp)
 80005b8:	e17fe815 	stw	r5,-96(fp)
            double lat_converted = lat_degree+lat_min;
 80005bc:	e13fe617 	ldw	r4,-104(fp)
 80005c0:	8003c540 	call	8003c54 <__floatsidf>
 80005c4:	100b883a 	mov	r5,r2
 80005c8:	180d883a 	mov	r6,r3
 80005cc:	2809883a 	mov	r4,r5
 80005d0:	300b883a 	mov	r5,r6
 80005d4:	e1bfe717 	ldw	r6,-100(fp)
 80005d8:	e1ffe817 	ldw	r7,-96(fp)
 80005dc:	80020b40 	call	80020b4 <__adddf3>
 80005e0:	1009883a 	mov	r4,r2
 80005e4:	180b883a 	mov	r5,r3
 80005e8:	e13fe915 	stw	r4,-92(fp)
 80005ec:	e17fea15 	stw	r5,-88(fp)
            int long_degree = (int) (long_double/100);
 80005f0:	e13fd917 	ldw	r4,-156(fp)
 80005f4:	e17fda17 	ldw	r5,-152(fp)
 80005f8:	000d883a 	mov	r6,zero
 80005fc:	01d01674 	movhi	r7,16473
 8000600:	80029500 	call	8002950 <__divdf3>
 8000604:	1009883a 	mov	r4,r2
 8000608:	180b883a 	mov	r5,r3
 800060c:	2005883a 	mov	r2,r4
 8000610:	2807883a 	mov	r3,r5
 8000614:	1009883a 	mov	r4,r2
 8000618:	180b883a 	mov	r5,r3
 800061c:	8003bcc0 	call	8003bcc <__fixdfsi>
 8000620:	e0bfeb15 	stw	r2,-84(fp)
            double long_min = (long_double-(long_degree*100))/60;
 8000624:	e0bfeb17 	ldw	r2,-84(fp)
 8000628:	10801924 	muli	r2,r2,100
 800062c:	1009883a 	mov	r4,r2
 8000630:	8003c540 	call	8003c54 <__floatsidf>
 8000634:	100f883a 	mov	r7,r2
 8000638:	1811883a 	mov	r8,r3
 800063c:	e13fd917 	ldw	r4,-156(fp)
 8000640:	e17fda17 	ldw	r5,-152(fp)
 8000644:	380d883a 	mov	r6,r7
 8000648:	400f883a 	mov	r7,r8
 800064c:	80032fc0 	call	80032fc <__subdf3>
 8000650:	1009883a 	mov	r4,r2
 8000654:	180b883a 	mov	r5,r3
 8000658:	2005883a 	mov	r2,r4
 800065c:	2807883a 	mov	r3,r5
 8000660:	1009883a 	mov	r4,r2
 8000664:	180b883a 	mov	r5,r3
 8000668:	000d883a 	mov	r6,zero
 800066c:	01d013b4 	movhi	r7,16462
 8000670:	80029500 	call	8002950 <__divdf3>
 8000674:	1009883a 	mov	r4,r2
 8000678:	180b883a 	mov	r5,r3
 800067c:	e13fec15 	stw	r4,-80(fp)
 8000680:	e17fed15 	stw	r5,-76(fp)
            double long_converted = long_degree+long_min;
 8000684:	e13feb17 	ldw	r4,-84(fp)
 8000688:	8003c540 	call	8003c54 <__floatsidf>
 800068c:	100b883a 	mov	r5,r2
 8000690:	180d883a 	mov	r6,r3
 8000694:	2809883a 	mov	r4,r5
 8000698:	300b883a 	mov	r5,r6
 800069c:	e1bfec17 	ldw	r6,-80(fp)
 80006a0:	e1ffed17 	ldw	r7,-76(fp)
 80006a4:	80020b40 	call	80020b4 <__adddf3>
 80006a8:	1009883a 	mov	r4,r2
 80006ac:	180b883a 	mov	r5,r3
 80006b0:	e13fee15 	stw	r4,-72(fp)
 80006b4:	e17fef15 	stw	r5,-68(fp)

            char *lat_char = malloc(100*sizeof(char));
 80006b8:	01001904 	movi	r4,100
 80006bc:	8003ed80 	call	8003ed8 <malloc>
 80006c0:	e0bff015 	stw	r2,-64(fp)
            char *long_char = malloc(100*sizeof(char));
 80006c4:	01001904 	movi	r4,100
 80006c8:	8003ed80 	call	8003ed8 <malloc>
 80006cc:	e0bff115 	stw	r2,-60(fp)
            snprintf(lat_char, 100, "%f", lat_converted);
 80006d0:	e0bfea17 	ldw	r2,-88(fp)
 80006d4:	d8800015 	stw	r2,0(sp)
 80006d8:	e1ffe917 	ldw	r7,-92(fp)
 80006dc:	e13ff017 	ldw	r4,-64(fp)
 80006e0:	01401904 	movi	r5,100
 80006e4:	01820074 	movhi	r6,2049
 80006e8:	319c1304 	addi	r6,r6,28748
 80006ec:	800485c0 	call	800485c <snprintf>
            snprintf(long_char, 100, "%f", long_converted);
 80006f0:	e0bfef17 	ldw	r2,-68(fp)
 80006f4:	d8800015 	stw	r2,0(sp)
 80006f8:	e1ffee17 	ldw	r7,-72(fp)
 80006fc:	e13ff117 	ldw	r4,-60(fp)
 8000700:	01401904 	movi	r5,100
 8000704:	01820074 	movhi	r6,2049
 8000708:	319c1304 	addi	r6,r6,28748
 800070c:	800485c0 	call	800485c <snprintf>

            c.lat = lat_char;
 8000710:	e0bff017 	ldw	r2,-64(fp)
 8000714:	e0bff215 	stw	r2,-56(fp)
            c.lng = long_char;
 8000718:	e0bff117 	ldw	r2,-60(fp)
 800071c:	e0bff315 	stw	r2,-52(fp)

            return c;
 8000720:	e0bff217 	ldw	r2,-56(fp)
 8000724:	e0bff615 	stw	r2,-40(fp)
 8000728:	e0bff317 	ldw	r2,-52(fp)
 800072c:	e0bff715 	stw	r2,-36(fp)
 8000730:	0005883a 	mov	r2,zero
 8000734:	00000106 	br	800073c <getGPSdata+0x478>
 8000738:	00800044 	movi	r2,1
 800073c:	e6fff517 	ldw	sp,-44(fp)
 8000740:	10800060 	cmpeqi	r2,r2,1
 8000744:	10000126 	beq	r2,zero,800074c <getGPSdata+0x488>
        }
    }
 8000748:	003eec06 	br	80002fc <__alt_data_end+0xfc0002fc>
 800074c:	e0fff617 	ldw	r3,-40(fp)
 8000750:	e13ff717 	ldw	r4,-36(fp)
    return c;
}
 8000754:	1805883a 	mov	r2,r3
 8000758:	2007883a 	mov	r3,r4
 800075c:	e6fff804 	addi	sp,fp,-32
 8000760:	dfc00917 	ldw	ra,36(sp)
 8000764:	df000817 	ldw	fp,32(sp)
 8000768:	ddc00717 	ldw	r23,28(sp)
 800076c:	dd800617 	ldw	r22,24(sp)
 8000770:	dd400517 	ldw	r21,20(sp)
 8000774:	dd000417 	ldw	r20,16(sp)
 8000778:	dcc00317 	ldw	r19,12(sp)
 800077c:	dc800217 	ldw	r18,8(sp)
 8000780:	dc400117 	ldw	r17,4(sp)
 8000784:	dc000017 	ldw	r16,0(sp)
 8000788:	dec00a04 	addi	sp,sp,40
 800078c:	f800283a 	ret

08000790 <concat>:


char* concat(const char *s1, const char *s2, const char *s3, const char *s4){
 8000790:	defff804 	addi	sp,sp,-32
 8000794:	dfc00715 	stw	ra,28(sp)
 8000798:	df000615 	stw	fp,24(sp)
 800079c:	dc000515 	stw	r16,20(sp)
 80007a0:	df000604 	addi	fp,sp,24
 80007a4:	e13ffb15 	stw	r4,-20(fp)
 80007a8:	e17ffc15 	stw	r5,-16(fp)
 80007ac:	e1bffd15 	stw	r6,-12(fp)
 80007b0:	e1fffe15 	stw	r7,-8(fp)
    char *result = malloc(strlen(s1)+strlen(s2)+strlen(s3)+strlen(s4)+1);
 80007b4:	e13ffb17 	ldw	r4,-20(fp)
 80007b8:	8004afc0 	call	8004afc <strlen>
 80007bc:	1021883a 	mov	r16,r2
 80007c0:	e13ffc17 	ldw	r4,-16(fp)
 80007c4:	8004afc0 	call	8004afc <strlen>
 80007c8:	80a1883a 	add	r16,r16,r2
 80007cc:	e13ffd17 	ldw	r4,-12(fp)
 80007d0:	8004afc0 	call	8004afc <strlen>
 80007d4:	80a1883a 	add	r16,r16,r2
 80007d8:	e13ffe17 	ldw	r4,-8(fp)
 80007dc:	8004afc0 	call	8004afc <strlen>
 80007e0:	8085883a 	add	r2,r16,r2
 80007e4:	10800044 	addi	r2,r2,1
 80007e8:	1009883a 	mov	r4,r2
 80007ec:	8003ed80 	call	8003ed8 <malloc>
 80007f0:	e0bffa15 	stw	r2,-24(fp)
    strcpy(result, s1);
 80007f4:	e13ffa17 	ldw	r4,-24(fp)
 80007f8:	e17ffb17 	ldw	r5,-20(fp)
 80007fc:	8004a6c0 	call	8004a6c <strcpy>
    strcat(result, s2);
 8000800:	e13ffa17 	ldw	r4,-24(fp)
 8000804:	e17ffc17 	ldw	r5,-16(fp)
 8000808:	80049400 	call	8004940 <strcat>
    strcat(result, s3);
 800080c:	e13ffa17 	ldw	r4,-24(fp)
 8000810:	e17ffd17 	ldw	r5,-12(fp)
 8000814:	80049400 	call	8004940 <strcat>
    strcat(result, s4);
 8000818:	e13ffa17 	ldw	r4,-24(fp)
 800081c:	e17ffe17 	ldw	r5,-8(fp)
 8000820:	80049400 	call	8004940 <strcat>
    return result;
 8000824:	e0bffa17 	ldw	r2,-24(fp)
}
 8000828:	e6ffff04 	addi	sp,fp,-4
 800082c:	dfc00217 	ldw	ra,8(sp)
 8000830:	df000117 	ldw	fp,4(sp)
 8000834:	dc000017 	ldw	r16,0(sp)
 8000838:	dec00304 	addi	sp,sp,12
 800083c:	f800283a 	ret

08000840 <concat2>:

char* concat2(const char *s1, const char *s2){
 8000840:	defffa04 	addi	sp,sp,-24
 8000844:	dfc00515 	stw	ra,20(sp)
 8000848:	df000415 	stw	fp,16(sp)
 800084c:	dc000315 	stw	r16,12(sp)
 8000850:	df000404 	addi	fp,sp,16
 8000854:	e13ffd15 	stw	r4,-12(fp)
 8000858:	e17ffe15 	stw	r5,-8(fp)
    char *result = malloc(strlen(s1)+strlen(s2)+1);
 800085c:	e13ffd17 	ldw	r4,-12(fp)
 8000860:	8004afc0 	call	8004afc <strlen>
 8000864:	1021883a 	mov	r16,r2
 8000868:	e13ffe17 	ldw	r4,-8(fp)
 800086c:	8004afc0 	call	8004afc <strlen>
 8000870:	8085883a 	add	r2,r16,r2
 8000874:	10800044 	addi	r2,r2,1
 8000878:	1009883a 	mov	r4,r2
 800087c:	8003ed80 	call	8003ed8 <malloc>
 8000880:	e0bffc15 	stw	r2,-16(fp)
    strcpy(result, s1);
 8000884:	e13ffc17 	ldw	r4,-16(fp)
 8000888:	e17ffd17 	ldw	r5,-12(fp)
 800088c:	8004a6c0 	call	8004a6c <strcpy>
    strcat(result, s2);
 8000890:	e13ffc17 	ldw	r4,-16(fp)
 8000894:	e17ffe17 	ldw	r5,-8(fp)
 8000898:	80049400 	call	8004940 <strcat>
    return result;
 800089c:	e0bffc17 	ldw	r2,-16(fp)
}
 80008a0:	e6ffff04 	addi	sp,fp,-4
 80008a4:	dfc00217 	ldw	ra,8(sp)
 80008a8:	df000117 	ldw	fp,4(sp)
 80008ac:	dc000017 	ldw	r16,0(sp)
 80008b0:	dec00304 	addi	sp,sp,12
 80008b4:	f800283a 	ret

080008b8 <initRS232_BT>:

void initRS232_BT(void){
 80008b8:	deffff04 	addi	sp,sp,-4
 80008bc:	df000015 	stw	fp,0(sp)
 80008c0:	d839883a 	mov	fp,sp
	//8 data bits, 1 stop bit
	RS232_Control_BT = 0x15;
 80008c4:	00a10034 	movhi	r2,33792
 80008c8:	10808804 	addi	r2,r2,544
 80008cc:	00c00544 	movi	r3,21
 80008d0:	10c00005 	stb	r3,0(r2)

	RS232_Baud_BT = 0x01;
 80008d4:	00a10034 	movhi	r2,33792
 80008d8:	10808904 	addi	r2,r2,548
 80008dc:	00c00044 	movi	r3,1
 80008e0:	10c00005 	stb	r3,0(r2)
}
 80008e4:	e037883a 	mov	sp,fp
 80008e8:	df000017 	ldw	fp,0(sp)
 80008ec:	dec00104 	addi	sp,sp,4
 80008f0:	f800283a 	ret

080008f4 <getCharRS232_BT>:

//read from rx
char getCharRS232_BT(void) {
 80008f4:	deffff04 	addi	sp,sp,-4
 80008f8:	df000015 	stw	fp,0(sp)
 80008fc:	d839883a 	mov	fp,sp
	while (!(RS232_Status_BT & 0x01)) {
 8000900:	0001883a 	nop
 8000904:	00a10034 	movhi	r2,33792
 8000908:	10808804 	addi	r2,r2,544
 800090c:	10800003 	ldbu	r2,0(r2)
 8000910:	10803fcc 	andi	r2,r2,255
 8000914:	1080004c 	andi	r2,r2,1
 8000918:	103ffa26 	beq	r2,zero,8000904 <__alt_data_end+0xfc000904>
	};
	return RS232_RxData_BT;
 800091c:	00a10034 	movhi	r2,33792
 8000920:	10808884 	addi	r2,r2,546
 8000924:	10800003 	ldbu	r2,0(r2)
}
 8000928:	e037883a 	mov	sp,fp
 800092c:	df000017 	ldw	fp,0(sp)
 8000930:	dec00104 	addi	sp,sp,4
 8000934:	f800283a 	ret

08000938 <getCharRS232_BT_TIMED>:


//read from rx
char getCharRS232_BT_TIMED(void) {
 8000938:	defffe04 	addi	sp,sp,-8
 800093c:	df000115 	stw	fp,4(sp)
 8000940:	df000104 	addi	fp,sp,4
	int count = 0;
 8000944:	e03fff15 	stw	zero,-4(fp)
	while (!(RS232_Status_BT & 0x01)) {
 8000948:	00000806 	br	800096c <getCharRS232_BT_TIMED+0x34>
		count++;
 800094c:	e0bfff17 	ldw	r2,-4(fp)
 8000950:	10800044 	addi	r2,r2,1
 8000954:	e0bfff15 	stw	r2,-4(fp)
		if (count == 50)
 8000958:	e0bfff17 	ldw	r2,-4(fp)
 800095c:	10800c98 	cmpnei	r2,r2,50
 8000960:	1000021e 	bne	r2,zero,800096c <getCharRS232_BT_TIMED+0x34>
			return NULL;
 8000964:	0005883a 	mov	r2,zero
 8000968:	00000906 	br	8000990 <getCharRS232_BT_TIMED+0x58>


//read from rx
char getCharRS232_BT_TIMED(void) {
	int count = 0;
	while (!(RS232_Status_BT & 0x01)) {
 800096c:	00a10034 	movhi	r2,33792
 8000970:	10808804 	addi	r2,r2,544
 8000974:	10800003 	ldbu	r2,0(r2)
 8000978:	10803fcc 	andi	r2,r2,255
 800097c:	1080004c 	andi	r2,r2,1
 8000980:	103ff226 	beq	r2,zero,800094c <__alt_data_end+0xfc00094c>
		count++;
		if (count == 50)
			return NULL;
	};
	return RS232_RxData_BT;
 8000984:	00a10034 	movhi	r2,33792
 8000988:	10808884 	addi	r2,r2,546
 800098c:	10800003 	ldbu	r2,0(r2)
}
 8000990:	e037883a 	mov	sp,fp
 8000994:	df000017 	ldw	fp,0(sp)
 8000998:	dec00104 	addi	sp,sp,4
 800099c:	f800283a 	ret

080009a0 <putCharRS232_BT>:

//write to tx
void putCharRS232_BT(int c) {
 80009a0:	defffe04 	addi	sp,sp,-8
 80009a4:	df000115 	stw	fp,4(sp)
 80009a8:	df000104 	addi	fp,sp,4
 80009ac:	e13fff15 	stw	r4,-4(fp)
	while (!(0x02 & RS232_Status_BT)) {
 80009b0:	0001883a 	nop
 80009b4:	00a10034 	movhi	r2,33792
 80009b8:	10808804 	addi	r2,r2,544
 80009bc:	10800003 	ldbu	r2,0(r2)
 80009c0:	1080008c 	andi	r2,r2,2
 80009c4:	10803fcc 	andi	r2,r2,255
 80009c8:	103ffa26 	beq	r2,zero,80009b4 <__alt_data_end+0xfc0009b4>
	};
	RS232_TxData_BT = c;
 80009cc:	00a10034 	movhi	r2,33792
 80009d0:	10808884 	addi	r2,r2,546
 80009d4:	e0ffff17 	ldw	r3,-4(fp)
 80009d8:	10c00005 	stb	r3,0(r2)
}
 80009dc:	e037883a 	mov	sp,fp
 80009e0:	df000017 	ldw	fp,0(sp)
 80009e4:	dec00104 	addi	sp,sp,4
 80009e8:	f800283a 	ret

080009ec <initRS232_HR>:

//initialize
void initRS232_HR(void) {
 80009ec:	deffff04 	addi	sp,sp,-4
 80009f0:	df000015 	stw	fp,0(sp)
 80009f4:	d839883a 	mov	fp,sp
	//8 data bits, 1 stop bit
	RS232_Control_HR = 0x15;
 80009f8:	00a10034 	movhi	r2,33792
 80009fc:	10809404 	addi	r2,r2,592
 8000a00:	00c00544 	movi	r3,21
 8000a04:	10c00005 	stb	r3,0(r2)

	//9600 baud
	RS232_Baud_HR = 0x05;
 8000a08:	00a10034 	movhi	r2,33792
 8000a0c:	10809504 	addi	r2,r2,596
 8000a10:	00c00144 	movi	r3,5
 8000a14:	10c00005 	stb	r3,0(r2)
}
 8000a18:	e037883a 	mov	sp,fp
 8000a1c:	df000017 	ldw	fp,0(sp)
 8000a20:	dec00104 	addi	sp,sp,4
 8000a24:	f800283a 	ret

08000a28 <getCharRS232_HR>:

//read from rx
char getCharRS232_HR(void) {
 8000a28:	deffff04 	addi	sp,sp,-4
 8000a2c:	df000015 	stw	fp,0(sp)
 8000a30:	d839883a 	mov	fp,sp
	while (!(RS232_Status_HR & 0x01)) {
 8000a34:	0001883a 	nop
 8000a38:	00a10034 	movhi	r2,33792
 8000a3c:	10809404 	addi	r2,r2,592
 8000a40:	10800003 	ldbu	r2,0(r2)
 8000a44:	10803fcc 	andi	r2,r2,255
 8000a48:	1080004c 	andi	r2,r2,1
 8000a4c:	103ffa26 	beq	r2,zero,8000a38 <__alt_data_end+0xfc000a38>
	};
	return RS232_RxData_HR;
 8000a50:	00a10034 	movhi	r2,33792
 8000a54:	10809484 	addi	r2,r2,594
 8000a58:	10800003 	ldbu	r2,0(r2)
}
 8000a5c:	e037883a 	mov	sp,fp
 8000a60:	df000017 	ldw	fp,0(sp)
 8000a64:	dec00104 	addi	sp,sp,4
 8000a68:	f800283a 	ret

08000a6c <putCharRS232_HR>:

//write to tx
void putCharRS232_HR(int c) {
 8000a6c:	defffe04 	addi	sp,sp,-8
 8000a70:	df000115 	stw	fp,4(sp)
 8000a74:	df000104 	addi	fp,sp,4
 8000a78:	e13fff15 	stw	r4,-4(fp)
	while (!(0x02 & RS232_Status_HR)) {
 8000a7c:	0001883a 	nop
 8000a80:	00a10034 	movhi	r2,33792
 8000a84:	10809404 	addi	r2,r2,592
 8000a88:	10800003 	ldbu	r2,0(r2)
 8000a8c:	1080008c 	andi	r2,r2,2
 8000a90:	10803fcc 	andi	r2,r2,255
 8000a94:	103ffa26 	beq	r2,zero,8000a80 <__alt_data_end+0xfc000a80>
	};
	RS232_TxData_HR = c;
 8000a98:	00a10034 	movhi	r2,33792
 8000a9c:	10809484 	addi	r2,r2,594
 8000aa0:	e0ffff17 	ldw	r3,-4(fp)
 8000aa4:	10c00005 	stb	r3,0(r2)
}
 8000aa8:	e037883a 	mov	sp,fp
 8000aac:	df000017 	ldw	fp,0(sp)
 8000ab0:	dec00104 	addi	sp,sp,4
 8000ab4:	f800283a 	ret

08000ab8 <waitChar>:

void waitChar(int i){
 8000ab8:	defffc04 	addi	sp,sp,-16
 8000abc:	dfc00315 	stw	ra,12(sp)
 8000ac0:	df000215 	stw	fp,8(sp)
 8000ac4:	df000204 	addi	fp,sp,8
 8000ac8:	e13fff15 	stw	r4,-4(fp)
	int j;
	for (j = 0; j < i; j++)
 8000acc:	e03ffe15 	stw	zero,-8(fp)
 8000ad0:	00000406 	br	8000ae4 <waitChar+0x2c>
		getCharRS232_HR();
 8000ad4:	8000a280 	call	8000a28 <getCharRS232_HR>
	RS232_TxData_HR = c;
}

void waitChar(int i){
	int j;
	for (j = 0; j < i; j++)
 8000ad8:	e0bffe17 	ldw	r2,-8(fp)
 8000adc:	10800044 	addi	r2,r2,1
 8000ae0:	e0bffe15 	stw	r2,-8(fp)
 8000ae4:	e0fffe17 	ldw	r3,-8(fp)
 8000ae8:	e0bfff17 	ldw	r2,-4(fp)
 8000aec:	18bff916 	blt	r3,r2,8000ad4 <__alt_data_end+0xfc000ad4>
		getCharRS232_HR();
}
 8000af0:	e037883a 	mov	sp,fp
 8000af4:	dfc00117 	ldw	ra,4(sp)
 8000af8:	df000017 	ldw	fp,0(sp)
 8000afc:	dec00204 	addi	sp,sp,8
 8000b00:	f800283a 	ret

08000b04 <getHR>:

int getHR(){
 8000b04:	defffc04 	addi	sp,sp,-16
 8000b08:	dfc00315 	stw	ra,12(sp)
 8000b0c:	df000215 	stw	fp,8(sp)
 8000b10:	df000204 	addi	fp,sp,8
	char HR_MSB;
	char HR_LSB;
	while (1){
		char s = getCharRS232_HR();
 8000b14:	8000a280 	call	8000a28 <getCharRS232_HR>
 8000b18:	e0bffe05 	stb	r2,-8(fp)
		if ((!(s&0xFE))&(s&0x01)){
 8000b1c:	e0bffe07 	ldb	r2,-8(fp)
 8000b20:	10803f8c 	andi	r2,r2,254
 8000b24:	1005003a 	cmpeq	r2,r2,zero
 8000b28:	1007883a 	mov	r3,r2
 8000b2c:	e0bffe03 	ldbu	r2,-8(fp)
 8000b30:	10803fcc 	andi	r2,r2,255
 8000b34:	1080004c 	andi	r2,r2,1
 8000b38:	1080004c 	andi	r2,r2,1
 8000b3c:	1884703a 	and	r2,r3,r2
 8000b40:	10803fcc 	andi	r2,r2,255
 8000b44:	10001726 	beq	r2,zero,8000ba4 <getHR+0xa0>
			if (getCharRS232_HR()&0x01){
 8000b48:	8000a280 	call	8000a28 <getCharRS232_HR>
 8000b4c:	10803fcc 	andi	r2,r2,255
 8000b50:	1080004c 	andi	r2,r2,1
 8000b54:	10001326 	beq	r2,zero,8000ba4 <getHR+0xa0>
				waitChar(1);
 8000b58:	01000044 	movi	r4,1
 8000b5c:	8000ab80 	call	8000ab8 <waitChar>
				HR_MSB = getCharRS232_HR();
 8000b60:	8000a280 	call	8000a28 <getCharRS232_HR>
 8000b64:	e0bffe45 	stb	r2,-7(fp)
				waitChar(4);
 8000b68:	01000104 	movi	r4,4
 8000b6c:	8000ab80 	call	8000ab8 <waitChar>
				HR_LSB = getCharRS232_HR();
 8000b70:	8000a280 	call	8000a28 <getCharRS232_HR>
 8000b74:	e0bffe85 	stb	r2,-6(fp)

				int HR = (0x7F&HR_LSB)+((0x03&HR_MSB)<<7);
 8000b78:	e0bffe83 	ldbu	r2,-6(fp)
 8000b7c:	10803fcc 	andi	r2,r2,255
 8000b80:	10c01fcc 	andi	r3,r2,127
 8000b84:	e0bffe43 	ldbu	r2,-7(fp)
 8000b88:	10803fcc 	andi	r2,r2,255
 8000b8c:	108000cc 	andi	r2,r2,3
 8000b90:	100491fa 	slli	r2,r2,7
 8000b94:	1885883a 	add	r2,r3,r2
 8000b98:	e0bfff15 	stw	r2,-4(fp)

				return HR;
 8000b9c:	e0bfff17 	ldw	r2,-4(fp)
 8000ba0:	00000106 	br	8000ba8 <getHR+0xa4>
			}
		}
	}
 8000ba4:	003fdb06 	br	8000b14 <__alt_data_end+0xfc000b14>
	return 0;
}
 8000ba8:	e037883a 	mov	sp,fp
 8000bac:	dfc00117 	ldw	ra,4(sp)
 8000bb0:	df000017 	ldw	fp,0(sp)
 8000bb4:	dec00204 	addi	sp,sp,8
 8000bb8:	f800283a 	ret

08000bbc <getHRData>:

int getHRData(){
 8000bbc:	defffc04 	addi	sp,sp,-16
 8000bc0:	dfc00315 	stw	ra,12(sp)
 8000bc4:	df000215 	stw	fp,8(sp)
 8000bc8:	df000204 	addi	fp,sp,8
	int i;
	int j;
	do{
		i = getHR();
 8000bcc:	8000b040 	call	8000b04 <getHR>
 8000bd0:	e0bffe15 	stw	r2,-8(fp)
		j = getHR();
 8000bd4:	8000b040 	call	8000b04 <getHR>
 8000bd8:	e0bfff15 	stw	r2,-4(fp)
	}
	while(i != j);
 8000bdc:	e0fffe17 	ldw	r3,-8(fp)
 8000be0:	e0bfff17 	ldw	r2,-4(fp)
 8000be4:	18bff91e 	bne	r3,r2,8000bcc <__alt_data_end+0xfc000bcc>
	printf("heart rate data: %d\n", i);
 8000be8:	01020074 	movhi	r4,2049
 8000bec:	211c1404 	addi	r4,r4,28752
 8000bf0:	e17ffe17 	ldw	r5,-8(fp)
 8000bf4:	80046d40 	call	80046d4 <printf>
	return i;
 8000bf8:	e0bffe17 	ldw	r2,-8(fp)
}
 8000bfc:	e037883a 	mov	sp,fp
 8000c00:	dfc00117 	ldw	ra,4(sp)
 8000c04:	df000017 	ldw	fp,0(sp)
 8000c08:	dec00204 	addi	sp,sp,8
 8000c0c:	f800283a 	ret

08000c10 <sendString>:

void sendString(char* string){
 8000c10:	defffc04 	addi	sp,sp,-16
 8000c14:	dfc00315 	stw	ra,12(sp)
 8000c18:	df000215 	stw	fp,8(sp)
 8000c1c:	df000204 	addi	fp,sp,8
 8000c20:	e13fff15 	stw	r4,-4(fp)
	int i = 0;
 8000c24:	e03ffe15 	stw	zero,-8(fp)
	while (string[i] != NULL){
 8000c28:	00000c06 	br	8000c5c <sendString+0x4c>
		putCharRS232_BT(string[i]);
 8000c2c:	e0bffe17 	ldw	r2,-8(fp)
 8000c30:	e0ffff17 	ldw	r3,-4(fp)
 8000c34:	1885883a 	add	r2,r3,r2
 8000c38:	10800003 	ldbu	r2,0(r2)
 8000c3c:	10803fcc 	andi	r2,r2,255
 8000c40:	1080201c 	xori	r2,r2,128
 8000c44:	10bfe004 	addi	r2,r2,-128
 8000c48:	1009883a 	mov	r4,r2
 8000c4c:	80009a00 	call	80009a0 <putCharRS232_BT>
		i++;
 8000c50:	e0bffe17 	ldw	r2,-8(fp)
 8000c54:	10800044 	addi	r2,r2,1
 8000c58:	e0bffe15 	stw	r2,-8(fp)
	return i;
}

void sendString(char* string){
	int i = 0;
	while (string[i] != NULL){
 8000c5c:	e0bffe17 	ldw	r2,-8(fp)
 8000c60:	e0ffff17 	ldw	r3,-4(fp)
 8000c64:	1885883a 	add	r2,r3,r2
 8000c68:	10800003 	ldbu	r2,0(r2)
 8000c6c:	10803fcc 	andi	r2,r2,255
 8000c70:	1080201c 	xori	r2,r2,128
 8000c74:	10bfe004 	addi	r2,r2,-128
 8000c78:	103fec1e 	bne	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>
		putCharRS232_BT(string[i]);
		i++;
	}
	putCharRS232_BT('\r');
 8000c7c:	01000344 	movi	r4,13
 8000c80:	80009a00 	call	80009a0 <putCharRS232_BT>
	putCharRS232_BT('\n');
 8000c84:	01000284 	movi	r4,10
 8000c88:	80009a00 	call	80009a0 <putCharRS232_BT>
}
 8000c8c:	e037883a 	mov	sp,fp
 8000c90:	dfc00117 	ldw	ra,4(sp)
 8000c94:	df000017 	ldw	fp,0(sp)
 8000c98:	dec00204 	addi	sp,sp,8
 8000c9c:	f800283a 	ret

08000ca0 <readString>:

char* readString(){
 8000ca0:	defffb04 	addi	sp,sp,-20
 8000ca4:	dfc00415 	stw	ra,16(sp)
 8000ca8:	df000315 	stw	fp,12(sp)
 8000cac:	df000304 	addi	fp,sp,12
	char *s = malloc(30);
 8000cb0:	01000784 	movi	r4,30
 8000cb4:	8003ed80 	call	8003ed8 <malloc>
 8000cb8:	e0bfff15 	stw	r2,-4(fp)

	int i = 0;
 8000cbc:	e03ffd15 	stw	zero,-12(fp)
	char c = getCharRS232_BT_TIMED();
 8000cc0:	80009380 	call	8000938 <getCharRS232_BT_TIMED>
 8000cc4:	e0bffe05 	stb	r2,-8(fp)
	if (c == NULL){
 8000cc8:	e0bffe07 	ldb	r2,-8(fp)
 8000ccc:	1000081e 	bne	r2,zero,8000cf0 <readString+0x50>
		s[0] = ' ';
 8000cd0:	e0bfff17 	ldw	r2,-4(fp)
 8000cd4:	00c00804 	movi	r3,32
 8000cd8:	10c00005 	stb	r3,0(r2)
		s[1] = '\0';
 8000cdc:	e0bfff17 	ldw	r2,-4(fp)
 8000ce0:	10800044 	addi	r2,r2,1
 8000ce4:	10000005 	stb	zero,0(r2)
		return s;
 8000ce8:	e0bfff17 	ldw	r2,-4(fp)
 8000cec:	00001706 	br	8000d4c <readString+0xac>
	}
	while(c != '\r'){
 8000cf0:	00000d06 	br	8000d28 <readString+0x88>
		s[i] = c;
 8000cf4:	e0bffd17 	ldw	r2,-12(fp)
 8000cf8:	e0ffff17 	ldw	r3,-4(fp)
 8000cfc:	1885883a 	add	r2,r3,r2
 8000d00:	e0fffe03 	ldbu	r3,-8(fp)
 8000d04:	10c00005 	stb	r3,0(r2)
		i++;
 8000d08:	e0bffd17 	ldw	r2,-12(fp)
 8000d0c:	10800044 	addi	r2,r2,1
 8000d10:	e0bffd15 	stw	r2,-12(fp)
		printf("%c", c);
 8000d14:	e0bffe07 	ldb	r2,-8(fp)
 8000d18:	1009883a 	mov	r4,r2
 8000d1c:	80047180 	call	8004718 <putchar>
		c = getCharRS232_BT();
 8000d20:	80008f40 	call	80008f4 <getCharRS232_BT>
 8000d24:	e0bffe05 	stb	r2,-8(fp)
	if (c == NULL){
		s[0] = ' ';
		s[1] = '\0';
		return s;
	}
	while(c != '\r'){
 8000d28:	e0bffe07 	ldb	r2,-8(fp)
 8000d2c:	10800358 	cmpnei	r2,r2,13
 8000d30:	103ff01e 	bne	r2,zero,8000cf4 <__alt_data_end+0xfc000cf4>
		s[i] = c;
		i++;
		printf("%c", c);
		c = getCharRS232_BT();
	}
	getCharRS232_BT();
 8000d34:	80008f40 	call	80008f4 <getCharRS232_BT>
	s[i] = '\0';
 8000d38:	e0bffd17 	ldw	r2,-12(fp)
 8000d3c:	e0ffff17 	ldw	r3,-4(fp)
 8000d40:	1885883a 	add	r2,r3,r2
 8000d44:	10000005 	stb	zero,0(r2)
	return s;
 8000d48:	e0bfff17 	ldw	r2,-4(fp)
}
 8000d4c:	e037883a 	mov	sp,fp
 8000d50:	dfc00117 	ldw	ra,4(sp)
 8000d54:	df000017 	ldw	fp,0(sp)
 8000d58:	dec00204 	addi	sp,sp,8
 8000d5c:	f800283a 	ret

08000d60 <main>:

int main() {
 8000d60:	defff404 	addi	sp,sp,-48
 8000d64:	dfc00b15 	stw	ra,44(sp)
 8000d68:	df000a15 	stw	fp,40(sp)
 8000d6c:	df000a04 	addi	fp,sp,40
	printf("starting initialization");
 8000d70:	01020074 	movhi	r4,2049
 8000d74:	211c1a04 	addi	r4,r4,28776
 8000d78:	80046d40 	call	80046d4 <printf>
	initRS232_BT();
 8000d7c:	80008b80 	call	80008b8 <initRS232_BT>
	initRS232_HR();
 8000d80:	80009ec0 	call	80009ec <initRS232_HR>
	initRS232_GPS();
 8000d84:	80001f80 	call	80001f8 <initRS232_GPS>
	time_t start_t, end_t;
	time(&start_t);
 8000d88:	e0bffa04 	addi	r2,fp,-24
 8000d8c:	1009883a 	mov	r4,r2
 8000d90:	800823c0 	call	800823c <time>
	clearScreen(BLACK);
 8000d94:	0009883a 	mov	r4,zero
 8000d98:	8001ba00 	call	8001ba0 <clearScreen>
	setData();
 8000d9c:	8000ef00 	call	8000ef0 <setData>

	while(1){
		char *key = readString();
 8000da0:	8000ca00 	call	8000ca0 <readString>
 8000da4:	e0bff615 	stw	r2,-40(fp)
		if (!strcmp(key, "HeartRate")){
 8000da8:	e13ff617 	ldw	r4,-40(fp)
 8000dac:	01420074 	movhi	r5,2049
 8000db0:	295c2004 	addi	r5,r5,28800
 8000db4:	80049c80 	call	80049c8 <strcmp>
 8000db8:	10000f1e 	bne	r2,zero,8000df8 <main+0x98>
			char* buffer = malloc(30);
 8000dbc:	01000784 	movi	r4,30
 8000dc0:	8003ed80 	call	8003ed8 <malloc>
 8000dc4:	e0bff715 	stw	r2,-36(fp)
			snprintf(buffer, 30, "%d", getHRData());
 8000dc8:	8000bbc0 	call	8000bbc <getHRData>
 8000dcc:	e13ff717 	ldw	r4,-36(fp)
 8000dd0:	01400784 	movi	r5,30
 8000dd4:	01820074 	movhi	r6,2049
 8000dd8:	319c2304 	addi	r6,r6,28812
 8000ddc:	100f883a 	mov	r7,r2
 8000de0:	800485c0 	call	800485c <snprintf>
			sendString(buffer);
 8000de4:	e13ff717 	ldw	r4,-36(fp)
 8000de8:	8000c100 	call	8000c10 <sendString>
			free(buffer);
 8000dec:	e13ff717 	ldw	r4,-36(fp)
 8000df0:	8003eec0 	call	8003eec <free>
 8000df4:	00002706 	br	8000e94 <main+0x134>
		}
		else if (!strcmp(key, "Latitude")){
 8000df8:	e13ff617 	ldw	r4,-40(fp)
 8000dfc:	01420074 	movhi	r5,2049
 8000e00:	295c2404 	addi	r5,r5,28816
 8000e04:	80049c80 	call	80049c8 <strcmp>
 8000e08:	10000f1e 	bne	r2,zero,8000e48 <main+0xe8>
			Coord c = getGPSdata();
 8000e0c:	80002c40 	call	80002c4 <getGPSdata>
 8000e10:	1009883a 	mov	r4,r2
 8000e14:	180b883a 	mov	r5,r3
 8000e18:	e13ffc15 	stw	r4,-16(fp)
 8000e1c:	e17ffd15 	stw	r5,-12(fp)
			sendString(c.lat);
 8000e20:	e0bffc17 	ldw	r2,-16(fp)
 8000e24:	1009883a 	mov	r4,r2
 8000e28:	8000c100 	call	8000c10 <sendString>
			free(c.lat);
 8000e2c:	e0bffc17 	ldw	r2,-16(fp)
 8000e30:	1009883a 	mov	r4,r2
 8000e34:	8003eec0 	call	8003eec <free>
			free(c.lng);
 8000e38:	e0bffd17 	ldw	r2,-12(fp)
 8000e3c:	1009883a 	mov	r4,r2
 8000e40:	8003eec0 	call	8003eec <free>
 8000e44:	00001306 	br	8000e94 <main+0x134>
		}
		else if (!strcmp(key, "Longitude")){
 8000e48:	e13ff617 	ldw	r4,-40(fp)
 8000e4c:	01420074 	movhi	r5,2049
 8000e50:	295c2704 	addi	r5,r5,28828
 8000e54:	80049c80 	call	80049c8 <strcmp>
 8000e58:	10000e1e 	bne	r2,zero,8000e94 <main+0x134>
			Coord c = getGPSdata();
 8000e5c:	80002c40 	call	80002c4 <getGPSdata>
 8000e60:	1009883a 	mov	r4,r2
 8000e64:	180b883a 	mov	r5,r3
 8000e68:	e13ffe15 	stw	r4,-8(fp)
 8000e6c:	e17fff15 	stw	r5,-4(fp)
			sendString(c.lng);
 8000e70:	e0bfff17 	ldw	r2,-4(fp)
 8000e74:	1009883a 	mov	r4,r2
 8000e78:	8000c100 	call	8000c10 <sendString>
			free(c.lat);
 8000e7c:	e0bffe17 	ldw	r2,-8(fp)
 8000e80:	1009883a 	mov	r4,r2
 8000e84:	8003eec0 	call	8003eec <free>
			free(c.lng);
 8000e88:	e0bfff17 	ldw	r2,-4(fp)
 8000e8c:	1009883a 	mov	r4,r2
 8000e90:	8003eec0 	call	8003eec <free>
		}
		free(key);
 8000e94:	e13ff617 	ldw	r4,-40(fp)
 8000e98:	8003eec0 	call	8003eec <free>
		time(&end_t);
 8000e9c:	e0bffb04 	addi	r2,fp,-20
 8000ea0:	1009883a 	mov	r4,r2
 8000ea4:	800823c0 	call	800823c <time>
		double diff_t = difftime(end_t, start_t);
 8000ea8:	e0fffb17 	ldw	r3,-20(fp)
 8000eac:	e0bffa17 	ldw	r2,-24(fp)
 8000eb0:	1809883a 	mov	r4,r3
 8000eb4:	100b883a 	mov	r5,r2
 8000eb8:	8003ebc0 	call	8003ebc <difftime>
 8000ebc:	e0bff815 	stw	r2,-32(fp)
 8000ec0:	e0fff915 	stw	r3,-28(fp)
		if (diff_t > 2){
 8000ec4:	e13ff817 	ldw	r4,-32(fp)
 8000ec8:	e17ff917 	ldw	r5,-28(fp)
 8000ecc:	000d883a 	mov	r6,zero
 8000ed0:	01d00034 	movhi	r7,16384
 8000ed4:	800321c0 	call	800321c <__gedf2>
 8000ed8:	0080040e 	bge	zero,r2,8000eec <main+0x18c>
			time(&start_t);
 8000edc:	e0bffa04 	addi	r2,fp,-24
 8000ee0:	1009883a 	mov	r4,r2
 8000ee4:	800823c0 	call	800823c <time>
			updateData();
 8000ee8:	800106c0 	call	800106c <updateData>
		}
	}
 8000eec:	003fac06 	br	8000da0 <__alt_data_end+0xfc000da0>

08000ef0 <setData>:

int old_hr;
char *old_lat;
char *old_lng;

void setData(){
 8000ef0:	defff604 	addi	sp,sp,-40
 8000ef4:	dfc00915 	stw	ra,36(sp)
 8000ef8:	df000815 	stw	fp,32(sp)
 8000efc:	df000804 	addi	fp,sp,32
	write(365, 75, "NEVERLOST", 12, WHITE, BLACK);
 8000f00:	00800044 	movi	r2,1
 8000f04:	d8800015 	stw	r2,0(sp)
 8000f08:	d8000115 	stw	zero,4(sp)
 8000f0c:	01005b44 	movi	r4,365
 8000f10:	014012c4 	movi	r5,75
 8000f14:	01820074 	movhi	r6,2049
 8000f18:	319c2a04 	addi	r6,r6,28840
 8000f1c:	01c00304 	movi	r7,12
 8000f20:	8001be40 	call	8001be4 <write>

	Coord c = getGPSdata();
 8000f24:	80002c40 	call	80002c4 <getGPSdata>
 8000f28:	1009883a 	mov	r4,r2
 8000f2c:	180b883a 	mov	r5,r3
 8000f30:	e13ffe15 	stw	r4,-8(fp)
 8000f34:	e17fff15 	stw	r5,-4(fp)
	int hr = getHRData();
 8000f38:	8000bbc0 	call	8000bbc <getHRData>
 8000f3c:	e0bffa15 	stw	r2,-24(fp)

	char* lat = concat2("Latitude: ", c.lat);
 8000f40:	e0bffe17 	ldw	r2,-8(fp)
 8000f44:	01020074 	movhi	r4,2049
 8000f48:	211c2d04 	addi	r4,r4,28852
 8000f4c:	100b883a 	mov	r5,r2
 8000f50:	80008400 	call	8000840 <concat2>
 8000f54:	e0bffb15 	stw	r2,-20(fp)
	write(100, 275, lat, 12, WHITE, BLACK);
 8000f58:	00800044 	movi	r2,1
 8000f5c:	d8800015 	stw	r2,0(sp)
 8000f60:	d8000115 	stw	zero,4(sp)
 8000f64:	01001904 	movi	r4,100
 8000f68:	014044c4 	movi	r5,275
 8000f6c:	e1bffb17 	ldw	r6,-20(fp)
 8000f70:	01c00304 	movi	r7,12
 8000f74:	8001be40 	call	8001be4 <write>
	free(lat);
 8000f78:	e13ffb17 	ldw	r4,-20(fp)
 8000f7c:	8003eec0 	call	8003eec <free>

	char* lng = concat2("Longitude: ", c.lng);
 8000f80:	e0bfff17 	ldw	r2,-4(fp)
 8000f84:	01020074 	movhi	r4,2049
 8000f88:	211c3004 	addi	r4,r4,28864
 8000f8c:	100b883a 	mov	r5,r2
 8000f90:	80008400 	call	8000840 <concat2>
 8000f94:	e0bffc15 	stw	r2,-16(fp)
	write(500, 275, lng, 12, WHITE, BLACK);
 8000f98:	00800044 	movi	r2,1
 8000f9c:	d8800015 	stw	r2,0(sp)
 8000fa0:	d8000115 	stw	zero,4(sp)
 8000fa4:	01007d04 	movi	r4,500
 8000fa8:	014044c4 	movi	r5,275
 8000fac:	e1bffc17 	ldw	r6,-16(fp)
 8000fb0:	01c00304 	movi	r7,12
 8000fb4:	8001be40 	call	8001be4 <write>
	free(lng);
 8000fb8:	e13ffc17 	ldw	r4,-16(fp)
 8000fbc:	8003eec0 	call	8003eec <free>

	char* buffer = malloc(100);
 8000fc0:	01001904 	movi	r4,100
 8000fc4:	8003ed80 	call	8003ed8 <malloc>
 8000fc8:	e0bffd15 	stw	r2,-12(fp)
	snprintf(buffer, 100, "Heart Rate: %d", hr);
 8000fcc:	e13ffd17 	ldw	r4,-12(fp)
 8000fd0:	01401904 	movi	r5,100
 8000fd4:	01820074 	movhi	r6,2049
 8000fd8:	319c3304 	addi	r6,r6,28876
 8000fdc:	e1fffa17 	ldw	r7,-24(fp)
 8000fe0:	800485c0 	call	800485c <snprintf>
	if (hr == 511)
 8000fe4:	e0bffa17 	ldw	r2,-24(fp)
 8000fe8:	10807fd8 	cmpnei	r2,r2,511
 8000fec:	10000a1e 	bne	r2,zero,8001018 <setData+0x128>
		write(100, 175, "Heart Rate: Monitor not connected", 12, WHITE, BLACK);
 8000ff0:	00800044 	movi	r2,1
 8000ff4:	d8800015 	stw	r2,0(sp)
 8000ff8:	d8000115 	stw	zero,4(sp)
 8000ffc:	01001904 	movi	r4,100
 8001000:	01402bc4 	movi	r5,175
 8001004:	01820074 	movhi	r6,2049
 8001008:	319c3704 	addi	r6,r6,28892
 800100c:	01c00304 	movi	r7,12
 8001010:	8001be40 	call	8001be4 <write>
 8001014:	00000806 	br	8001038 <setData+0x148>
	else
		write(100, 175, buffer, 12, WHITE, BLACK);
 8001018:	00800044 	movi	r2,1
 800101c:	d8800015 	stw	r2,0(sp)
 8001020:	d8000115 	stw	zero,4(sp)
 8001024:	01001904 	movi	r4,100
 8001028:	01402bc4 	movi	r5,175
 800102c:	e1bffd17 	ldw	r6,-12(fp)
 8001030:	01c00304 	movi	r7,12
 8001034:	8001be40 	call	8001be4 <write>
	free(buffer);
 8001038:	e13ffd17 	ldw	r4,-12(fp)
 800103c:	8003eec0 	call	8003eec <free>

	old_hr = hr;
 8001040:	e0bffa17 	ldw	r2,-24(fp)
 8001044:	d0a6e215 	stw	r2,-25720(gp)
	old_lat = c.lat;
 8001048:	e0bffe17 	ldw	r2,-8(fp)
 800104c:	d0a6e015 	stw	r2,-25728(gp)
	old_lng = c.lng;
 8001050:	e0bfff17 	ldw	r2,-4(fp)
 8001054:	d0a6e115 	stw	r2,-25724(gp)
}
 8001058:	e037883a 	mov	sp,fp
 800105c:	dfc00117 	ldw	ra,4(sp)
 8001060:	df000017 	ldw	fp,0(sp)
 8001064:	dec00204 	addi	sp,sp,8
 8001068:	f800283a 	ret

0800106c <updateData>:

void updateData(){
 800106c:	defff604 	addi	sp,sp,-40
 8001070:	dfc00915 	stw	ra,36(sp)
 8001074:	df000815 	stw	fp,32(sp)
 8001078:	df000804 	addi	fp,sp,32

	Coord c = getGPSdata();
 800107c:	80002c40 	call	80002c4 <getGPSdata>
 8001080:	1009883a 	mov	r4,r2
 8001084:	180b883a 	mov	r5,r3
 8001088:	e13ffe15 	stw	r4,-8(fp)
 800108c:	e17fff15 	stw	r5,-4(fp)
	int hr = getHRData();
 8001090:	8000bbc0 	call	8000bbc <getHRData>
 8001094:	e0bffa15 	stw	r2,-24(fp)

	if (strcmp(c.lat, old_lat) != 0){
 8001098:	e0fffe17 	ldw	r3,-8(fp)
 800109c:	d0a6e017 	ldw	r2,-25728(gp)
 80010a0:	1809883a 	mov	r4,r3
 80010a4:	100b883a 	mov	r5,r2
 80010a8:	80049c80 	call	80049c8 <strcmp>
 80010ac:	10001e26 	beq	r2,zero,8001128 <updateData+0xbc>
		write(100, 275, "Latitude:            ", 12, WHITE, BLACK);
 80010b0:	00800044 	movi	r2,1
 80010b4:	d8800015 	stw	r2,0(sp)
 80010b8:	d8000115 	stw	zero,4(sp)
 80010bc:	01001904 	movi	r4,100
 80010c0:	014044c4 	movi	r5,275
 80010c4:	01820074 	movhi	r6,2049
 80010c8:	319c4004 	addi	r6,r6,28928
 80010cc:	01c00304 	movi	r7,12
 80010d0:	8001be40 	call	8001be4 <write>
		char* lat = concat2("Latitude: ", c.lat);
 80010d4:	e0bffe17 	ldw	r2,-8(fp)
 80010d8:	01020074 	movhi	r4,2049
 80010dc:	211c2d04 	addi	r4,r4,28852
 80010e0:	100b883a 	mov	r5,r2
 80010e4:	80008400 	call	8000840 <concat2>
 80010e8:	e0bffb15 	stw	r2,-20(fp)
		write(100, 275, lat, 12, WHITE, BLACK);
 80010ec:	00800044 	movi	r2,1
 80010f0:	d8800015 	stw	r2,0(sp)
 80010f4:	d8000115 	stw	zero,4(sp)
 80010f8:	01001904 	movi	r4,100
 80010fc:	014044c4 	movi	r5,275
 8001100:	e1bffb17 	ldw	r6,-20(fp)
 8001104:	01c00304 	movi	r7,12
 8001108:	8001be40 	call	8001be4 <write>
		free(lat);
 800110c:	e13ffb17 	ldw	r4,-20(fp)
 8001110:	8003eec0 	call	8003eec <free>
		free(old_lat);
 8001114:	d0a6e017 	ldw	r2,-25728(gp)
 8001118:	1009883a 	mov	r4,r2
 800111c:	8003eec0 	call	8003eec <free>
		old_lat = c.lat;
 8001120:	e0bffe17 	ldw	r2,-8(fp)
 8001124:	d0a6e015 	stw	r2,-25728(gp)
	}
	if (strcmp(c.lng, old_lng) != 0){
 8001128:	e0ffff17 	ldw	r3,-4(fp)
 800112c:	d0a6e117 	ldw	r2,-25724(gp)
 8001130:	1809883a 	mov	r4,r3
 8001134:	100b883a 	mov	r5,r2
 8001138:	80049c80 	call	80049c8 <strcmp>
 800113c:	10002026 	beq	r2,zero,80011c0 <updateData+0x154>
		old_lng = c.lng;
 8001140:	e0bfff17 	ldw	r2,-4(fp)
 8001144:	d0a6e115 	stw	r2,-25724(gp)
		write(500, 275, "Longitude:           ", 12, WHITE, BLACK);
 8001148:	00800044 	movi	r2,1
 800114c:	d8800015 	stw	r2,0(sp)
 8001150:	d8000115 	stw	zero,4(sp)
 8001154:	01007d04 	movi	r4,500
 8001158:	014044c4 	movi	r5,275
 800115c:	01820074 	movhi	r6,2049
 8001160:	319c4604 	addi	r6,r6,28952
 8001164:	01c00304 	movi	r7,12
 8001168:	8001be40 	call	8001be4 <write>
		char* lng = concat2("Longitude: ", c.lng);
 800116c:	e0bfff17 	ldw	r2,-4(fp)
 8001170:	01020074 	movhi	r4,2049
 8001174:	211c3004 	addi	r4,r4,28864
 8001178:	100b883a 	mov	r5,r2
 800117c:	80008400 	call	8000840 <concat2>
 8001180:	e0bffc15 	stw	r2,-16(fp)
		write(500, 275, lng, 12, WHITE, BLACK);
 8001184:	00800044 	movi	r2,1
 8001188:	d8800015 	stw	r2,0(sp)
 800118c:	d8000115 	stw	zero,4(sp)
 8001190:	01007d04 	movi	r4,500
 8001194:	014044c4 	movi	r5,275
 8001198:	e1bffc17 	ldw	r6,-16(fp)
 800119c:	01c00304 	movi	r7,12
 80011a0:	8001be40 	call	8001be4 <write>
		free(lng);
 80011a4:	e13ffc17 	ldw	r4,-16(fp)
 80011a8:	8003eec0 	call	8003eec <free>
		free(old_lng);
 80011ac:	d0a6e117 	ldw	r2,-25724(gp)
 80011b0:	1009883a 	mov	r4,r2
 80011b4:	8003eec0 	call	8003eec <free>
		old_lng = c.lng;
 80011b8:	e0bfff17 	ldw	r2,-4(fp)
 80011bc:	d0a6e115 	stw	r2,-25724(gp)
	}
	if (old_hr != hr){
 80011c0:	d0e6e217 	ldw	r3,-25720(gp)
 80011c4:	e0bffa17 	ldw	r2,-24(fp)
 80011c8:	18802b26 	beq	r3,r2,8001278 <updateData+0x20c>
		old_hr = hr;
 80011cc:	e0bffa17 	ldw	r2,-24(fp)
 80011d0:	d0a6e215 	stw	r2,-25720(gp)
		write(100, 175, "Heart Rate:                             ", 12, WHITE, BLACK);
 80011d4:	00800044 	movi	r2,1
 80011d8:	d8800015 	stw	r2,0(sp)
 80011dc:	d8000115 	stw	zero,4(sp)
 80011e0:	01001904 	movi	r4,100
 80011e4:	01402bc4 	movi	r5,175
 80011e8:	01820074 	movhi	r6,2049
 80011ec:	319c4c04 	addi	r6,r6,28976
 80011f0:	01c00304 	movi	r7,12
 80011f4:	8001be40 	call	8001be4 <write>
		char* buffer = malloc(100);
 80011f8:	01001904 	movi	r4,100
 80011fc:	8003ed80 	call	8003ed8 <malloc>
 8001200:	e0bffd15 	stw	r2,-12(fp)
		snprintf(buffer, 100, "Heart Rate: %d", hr);
 8001204:	e13ffd17 	ldw	r4,-12(fp)
 8001208:	01401904 	movi	r5,100
 800120c:	01820074 	movhi	r6,2049
 8001210:	319c3304 	addi	r6,r6,28876
 8001214:	e1fffa17 	ldw	r7,-24(fp)
 8001218:	800485c0 	call	800485c <snprintf>
		if (hr == 511)
 800121c:	e0bffa17 	ldw	r2,-24(fp)
 8001220:	10807fd8 	cmpnei	r2,r2,511
 8001224:	10000a1e 	bne	r2,zero,8001250 <updateData+0x1e4>
			write(100, 175, "Heart Rate: Monitor not connected", 12, WHITE, BLACK);
 8001228:	00800044 	movi	r2,1
 800122c:	d8800015 	stw	r2,0(sp)
 8001230:	d8000115 	stw	zero,4(sp)
 8001234:	01001904 	movi	r4,100
 8001238:	01402bc4 	movi	r5,175
 800123c:	01820074 	movhi	r6,2049
 8001240:	319c3704 	addi	r6,r6,28892
 8001244:	01c00304 	movi	r7,12
 8001248:	8001be40 	call	8001be4 <write>
 800124c:	00000806 	br	8001270 <updateData+0x204>
		else
			write(100, 175, buffer, 12, WHITE, BLACK);
 8001250:	00800044 	movi	r2,1
 8001254:	d8800015 	stw	r2,0(sp)
 8001258:	d8000115 	stw	zero,4(sp)
 800125c:	01001904 	movi	r4,100
 8001260:	01402bc4 	movi	r5,175
 8001264:	e1bffd17 	ldw	r6,-12(fp)
 8001268:	01c00304 	movi	r7,12
 800126c:	8001be40 	call	8001be4 <write>
		free(buffer);
 8001270:	e13ffd17 	ldw	r4,-12(fp)
 8001274:	8003eec0 	call	8003eec <free>
	}
}
 8001278:	e037883a 	mov	sp,fp
 800127c:	dfc00117 	ldw	ra,4(sp)
 8001280:	df000017 	ldw	fp,0(sp)
 8001284:	dec00204 	addi	sp,sp,8
 8001288:	f800283a 	ret

0800128c <OutGraphicsCharFont1>:
#define YRES 480
#define TRUE 1
#include "Fonts.h"

void OutGraphicsCharFont1(int x, int y, int fontcolour, int backgroundcolour, int c, int Erase)
{
 800128c:	defff204 	addi	sp,sp,-56
 8001290:	dfc00d15 	stw	ra,52(sp)
 8001294:	df000c15 	stw	fp,48(sp)
 8001298:	ddc00b15 	stw	r23,44(sp)
 800129c:	dd800a15 	stw	r22,40(sp)
 80012a0:	dd400915 	stw	r21,36(sp)
 80012a4:	dd000815 	stw	r20,32(sp)
 80012a8:	dcc00715 	stw	r19,28(sp)
 80012ac:	dc800615 	stw	r18,24(sp)
 80012b0:	dc400515 	stw	r17,20(sp)
 80012b4:	dc000415 	stw	r16,16(sp)
 80012b8:	df000c04 	addi	fp,sp,48
 80012bc:	e13ff415 	stw	r4,-48(fp)
 80012c0:	e17ff515 	stw	r5,-44(fp)
 80012c4:	e1bff615 	stw	r6,-40(fp)
 80012c8:	e1fff715 	stw	r7,-36(fp)
// using register variables (as opposed to stack based ones) may make execution faster
// depends on compiler and CPU

	register int row, column, theX = x, theY = y ;
 80012cc:	e53ff417 	ldw	r20,-48(fp)
 80012d0:	e57ff517 	ldw	r21,-44(fp)
	register int pixels ;
	register char theColour = fontcolour  ;
 80012d4:	e0bff617 	ldw	r2,-40(fp)
 80012d8:	102f883a 	mov	r23,r2
	register int BitMask, theC = c ;
 80012dc:	e4400217 	ldw	r17,8(fp)

// if x,y coord off edge of screen don't bother
// XRES and YRES are #defined to be 800 and 480 respectively
    if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))
 80012e0:	e0bff417 	ldw	r2,-48(fp)
 80012e4:	10bfffcc 	andi	r2,r2,65535
 80012e8:	10a0001c 	xori	r2,r2,32768
 80012ec:	10a00004 	addi	r2,r2,-32768
 80012f0:	1080c808 	cmpgei	r2,r2,800
 80012f4:	1000061e 	bne	r2,zero,8001310 <OutGraphicsCharFont1+0x84>
 80012f8:	e0bff517 	ldw	r2,-44(fp)
 80012fc:	10bfffcc 	andi	r2,r2,65535
 8001300:	10a0001c 	xori	r2,r2,32768
 8001304:	10a00004 	addi	r2,r2,-32768
 8001308:	10807810 	cmplti	r2,r2,480
 800130c:	1000011e 	bne	r2,zero,8001314 <OutGraphicsCharFont1+0x88>
        return ;
 8001310:	00003c06 	br	8001404 <OutGraphicsCharFont1+0x178>


// if printable character subtract hex 20
	if(((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~'))) {
 8001314:	8805883a 	mov	r2,r17
 8001318:	10bfffcc 	andi	r2,r2,65535
 800131c:	10a0001c 	xori	r2,r2,32768
 8001320:	10a00004 	addi	r2,r2,-32768
 8001324:	10800810 	cmplti	r2,r2,32
 8001328:	1000361e 	bne	r2,zero,8001404 <OutGraphicsCharFont1+0x178>
 800132c:	8805883a 	mov	r2,r17
 8001330:	10bfffcc 	andi	r2,r2,65535
 8001334:	10a0001c 	xori	r2,r2,32768
 8001338:	10a00004 	addi	r2,r2,-32768
 800133c:	10801fc8 	cmpgei	r2,r2,127
 8001340:	1000301e 	bne	r2,zero,8001404 <OutGraphicsCharFont1+0x178>
		theC = theC - 0x20 ;
 8001344:	8c7ff804 	addi	r17,r17,-32
		for(row = 0; (char)(row) < (char)(7); row ++)	{
 8001348:	0021883a 	mov	r16,zero
 800134c:	00002706 	br	80013ec <OutGraphicsCharFont1+0x160>

// get the bit pattern for row 0 of the character from the software font
			pixels = Font5x7[theC][row] ;
 8001350:	00820074 	movhi	r2,2049
 8001354:	109c5704 	addi	r2,r2,29020
 8001358:	88c001e4 	muli	r3,r17,7
 800135c:	1c07883a 	add	r3,r3,r16
 8001360:	10c5883a 	add	r2,r2,r3
 8001364:	10800003 	ldbu	r2,0(r2)
 8001368:	15803fcc 	andi	r22,r2,255
			BitMask = 16 ;
 800136c:	04c00404 	movi	r19,16

			for(column = 0; (char)(column) < (char)(5); column ++)	{
 8001370:	0025883a 	mov	r18,zero
 8001374:	00001606 	br	80013d0 <OutGraphicsCharFont1+0x144>

// if a pixel in the character display it
				if((pixels & BitMask))
 8001378:	b4c4703a 	and	r2,r22,r19
 800137c:	10000926 	beq	r2,zero,80013a4 <OutGraphicsCharFont1+0x118>
					WriteAPixel(theX+column, theY+row, theColour) ;
 8001380:	a489883a 	add	r4,r20,r18
 8001384:	ac07883a 	add	r3,r21,r16
 8001388:	b8803fcc 	andi	r2,r23,255
 800138c:	1080201c 	xori	r2,r2,128
 8001390:	10bfe004 	addi	r2,r2,-128
 8001394:	180b883a 	mov	r5,r3
 8001398:	100d883a 	mov	r6,r2
 800139c:	80015c80 	call	80015c8 <WriteAPixel>
 80013a0:	00000906 	br	80013c8 <OutGraphicsCharFont1+0x13c>

				else {
					if(Erase == TRUE)
 80013a4:	e0800317 	ldw	r2,12(fp)
 80013a8:	10800058 	cmpnei	r2,r2,1
 80013ac:	1000061e 	bne	r2,zero,80013c8 <OutGraphicsCharFont1+0x13c>

// if pixel is part of background (not part of character)
// erase the background to value of variable BackGroundColour

						WriteAPixel(theX+column, theY+row, backgroundcolour) ;
 80013b0:	a487883a 	add	r3,r20,r18
 80013b4:	ac05883a 	add	r2,r21,r16
 80013b8:	1809883a 	mov	r4,r3
 80013bc:	100b883a 	mov	r5,r2
 80013c0:	e1bff717 	ldw	r6,-36(fp)
 80013c4:	80015c80 	call	80015c8 <WriteAPixel>
				}
				BitMask = BitMask >> 1 ;
 80013c8:	9827d07a 	srai	r19,r19,1

// get the bit pattern for row 0 of the character from the software font
			pixels = Font5x7[theC][row] ;
			BitMask = 16 ;

			for(column = 0; (char)(column) < (char)(5); column ++)	{
 80013cc:	94800044 	addi	r18,r18,1
 80013d0:	9005883a 	mov	r2,r18
 80013d4:	10803fcc 	andi	r2,r2,255
 80013d8:	1080201c 	xori	r2,r2,128
 80013dc:	10bfe004 	addi	r2,r2,-128
 80013e0:	10800150 	cmplti	r2,r2,5
 80013e4:	103fe41e 	bne	r2,zero,8001378 <__alt_data_end+0xfc001378>


// if printable character subtract hex 20
	if(((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~'))) {
		theC = theC - 0x20 ;
		for(row = 0; (char)(row) < (char)(7); row ++)	{
 80013e8:	84000044 	addi	r16,r16,1
 80013ec:	8005883a 	mov	r2,r16
 80013f0:	10803fcc 	andi	r2,r2,255
 80013f4:	1080201c 	xori	r2,r2,128
 80013f8:	10bfe004 	addi	r2,r2,-128
 80013fc:	108001d0 	cmplti	r2,r2,7
 8001400:	103fd31e 	bne	r2,zero,8001350 <__alt_data_end+0xfc001350>
				}
				BitMask = BitMask >> 1 ;
			}
		}
	}
}
 8001404:	e6fff804 	addi	sp,fp,-32
 8001408:	dfc00917 	ldw	ra,36(sp)
 800140c:	df000817 	ldw	fp,32(sp)
 8001410:	ddc00717 	ldw	r23,28(sp)
 8001414:	dd800617 	ldw	r22,24(sp)
 8001418:	dd400517 	ldw	r21,20(sp)
 800141c:	dd000417 	ldw	r20,16(sp)
 8001420:	dcc00317 	ldw	r19,12(sp)
 8001424:	dc800217 	ldw	r18,8(sp)
 8001428:	dc400117 	ldw	r17,4(sp)
 800142c:	dc000017 	ldw	r16,0(sp)
 8001430:	dec00a04 	addi	sp,sp,40
 8001434:	f800283a 	ret

08001438 <OutGraphicsCharFont2a>:
** OutGraphicsCharFont2(100,100, RED, 'A', TRUE, FALSE, 1, 1) ;	// display upper case 'A' in RED at coords 100,100, erase background
** no scroll, scale x,y= 1,1
**
******************************************************************************************************************************/
void OutGraphicsCharFont2a(int x, int y, int colour, int backgroundcolour, int c, int Erase)
{
 8001438:	defff004 	addi	sp,sp,-64
 800143c:	dfc00f15 	stw	ra,60(sp)
 8001440:	df000e15 	stw	fp,56(sp)
 8001444:	ddc00d15 	stw	r23,52(sp)
 8001448:	dd800c15 	stw	r22,48(sp)
 800144c:	dd400b15 	stw	r21,44(sp)
 8001450:	dd000a15 	stw	r20,40(sp)
 8001454:	dcc00915 	stw	r19,36(sp)
 8001458:	dc800815 	stw	r18,32(sp)
 800145c:	dc400715 	stw	r17,28(sp)
 8001460:	dc000615 	stw	r16,24(sp)
 8001464:	df000e04 	addi	fp,sp,56
 8001468:	e13ff215 	stw	r4,-56(fp)
 800146c:	e17ff315 	stw	r5,-52(fp)
 8001470:	e1bff415 	stw	r6,-48(fp)
 8001474:	e1fff515 	stw	r7,-44(fp)
	register int 	row,
					column,
					theX = x,
 8001478:	e53ff217 	ldw	r20,-56(fp)
					theY = y ;
 800147c:	e57ff317 	ldw	r21,-52(fp)
	register int 	pixels ;
	register char 	theColour = colour  ;
 8001480:	e0bff417 	ldw	r2,-48(fp)
 8001484:	e0bff605 	stb	r2,-40(fp)
	register int 	BitMask,
					theCharacter = c,
 8001488:	e4800217 	ldw	r18,8(fp)
					j,
					theRow, theColumn;

    if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))  // if start off edge of screen don't bother
 800148c:	e0bff217 	ldw	r2,-56(fp)
 8001490:	10bfffcc 	andi	r2,r2,65535
 8001494:	10a0001c 	xori	r2,r2,32768
 8001498:	10a00004 	addi	r2,r2,-32768
 800149c:	1080c808 	cmpgei	r2,r2,800
 80014a0:	1000061e 	bne	r2,zero,80014bc <OutGraphicsCharFont2a+0x84>
 80014a4:	e0bff317 	ldw	r2,-52(fp)
 80014a8:	10bfffcc 	andi	r2,r2,65535
 80014ac:	10a0001c 	xori	r2,r2,32768
 80014b0:	10a00004 	addi	r2,r2,-32768
 80014b4:	10807810 	cmplti	r2,r2,480
 80014b8:	1000011e 	bne	r2,zero,80014c0 <OutGraphicsCharFont2a+0x88>
        return ;
 80014bc:	00003506 	br	8001594 <OutGraphicsCharFont2a+0x15c>

	if(((short)(theCharacter) >= (short)(' ')) && ((short)(theCharacter) <= (short)('~'))) {			// if printable character
 80014c0:	9005883a 	mov	r2,r18
 80014c4:	10bfffcc 	andi	r2,r2,65535
 80014c8:	10a0001c 	xori	r2,r2,32768
 80014cc:	10a00004 	addi	r2,r2,-32768
 80014d0:	10800810 	cmplti	r2,r2,32
 80014d4:	10002f1e 	bne	r2,zero,8001594 <OutGraphicsCharFont2a+0x15c>
 80014d8:	9005883a 	mov	r2,r18
 80014dc:	10bfffcc 	andi	r2,r2,65535
 80014e0:	10a0001c 	xori	r2,r2,32768
 80014e4:	10a00004 	addi	r2,r2,-32768
 80014e8:	10801fc8 	cmpgei	r2,r2,127
 80014ec:	1000291e 	bne	r2,zero,8001594 <OutGraphicsCharFont2a+0x15c>
		theCharacter -= 0x20 ;																			// subtract hex 20 to get index of first printable character (the space character)
 80014f0:	94bff804 	addi	r18,r18,-32
		theRow = FONT2_YPIXELS;
 80014f4:	05800384 	movi	r22,14
		theColumn = FONT2_XPIXELS;
 80014f8:	05c00284 	movi	r23,10

		for(row = 0; row < theRow ; row ++)	{
 80014fc:	0021883a 	mov	r16,zero
 8001500:	00002306 	br	8001590 <OutGraphicsCharFont2a+0x158>
			pixels = Font10x14[theCharacter][row] ;		     								// get the pixels for row 0 of the character to be displayed
 8001504:	00820074 	movhi	r2,2049
 8001508:	109cfd84 	addi	r2,r2,29686
 800150c:	90c003a4 	muli	r3,r18,14
 8001510:	1c07883a 	add	r3,r3,r16
 8001514:	18c7883a 	add	r3,r3,r3
 8001518:	10c5883a 	add	r2,r2,r3
 800151c:	1080000b 	ldhu	r2,0(r2)
 8001520:	10bfffcc 	andi	r2,r2,65535
 8001524:	e0bff715 	stw	r2,-36(fp)
			BitMask = 512 ;							   											// set of hex 200 i.e. bit 7-0 = 0010 0000 0000
 8001528:	04c08004 	movi	r19,512
			for(column = 0; column < theColumn;   )  	{
 800152c:	0023883a 	mov	r17,zero
 8001530:	00001506 	br	8001588 <OutGraphicsCharFont2a+0x150>
				if((pixels & BitMask))														// if valid pixel, then write it
 8001534:	e0fff717 	ldw	r3,-36(fp)
 8001538:	1cc4703a 	and	r2,r3,r19
 800153c:	10000726 	beq	r2,zero,800155c <OutGraphicsCharFont2a+0x124>
					WriteAPixel(theX+column, theY+row, theColour) ;
 8001540:	a449883a 	add	r4,r20,r17
 8001544:	ac07883a 	add	r3,r21,r16
 8001548:	e0bff607 	ldb	r2,-40(fp)
 800154c:	180b883a 	mov	r5,r3
 8001550:	100d883a 	mov	r6,r2
 8001554:	80015c80 	call	80015c8 <WriteAPixel>
 8001558:	00000906 	br	8001580 <OutGraphicsCharFont2a+0x148>
				else {																		// if not a valid pixel, do we erase or leave it along (no erase)
					if(Erase == TRUE)
 800155c:	e0800317 	ldw	r2,12(fp)
 8001560:	10800058 	cmpnei	r2,r2,1
 8001564:	1000061e 	bne	r2,zero,8001580 <OutGraphicsCharFont2a+0x148>
						WriteAPixel(theX+column, theY+row, backgroundcolour) ;
 8001568:	a447883a 	add	r3,r20,r17
 800156c:	ac05883a 	add	r2,r21,r16
 8001570:	1809883a 	mov	r4,r3
 8001574:	100b883a 	mov	r5,r2
 8001578:	e1bff517 	ldw	r6,-44(fp)
 800157c:	80015c80 	call	80015c8 <WriteAPixel>
					// else leave it alone
				}
					column ++ ;
 8001580:	8c400044 	addi	r17,r17,1
				BitMask = BitMask >> 1 ;
 8001584:	9827d07a 	srai	r19,r19,1
		theColumn = FONT2_XPIXELS;

		for(row = 0; row < theRow ; row ++)	{
			pixels = Font10x14[theCharacter][row] ;		     								// get the pixels for row 0 of the character to be displayed
			BitMask = 512 ;							   											// set of hex 200 i.e. bit 7-0 = 0010 0000 0000
			for(column = 0; column < theColumn;   )  	{
 8001588:	8dffea16 	blt	r17,r23,8001534 <__alt_data_end+0xfc001534>
	if(((short)(theCharacter) >= (short)(' ')) && ((short)(theCharacter) <= (short)('~'))) {			// if printable character
		theCharacter -= 0x20 ;																			// subtract hex 20 to get index of first printable character (the space character)
		theRow = FONT2_YPIXELS;
		theColumn = FONT2_XPIXELS;

		for(row = 0; row < theRow ; row ++)	{
 800158c:	84000044 	addi	r16,r16,1
 8001590:	85bfdc16 	blt	r16,r22,8001504 <__alt_data_end+0xfc001504>
					column ++ ;
				BitMask = BitMask >> 1 ;
			}
		}
	}
}
 8001594:	e6fff804 	addi	sp,fp,-32
 8001598:	dfc00917 	ldw	ra,36(sp)
 800159c:	df000817 	ldw	fp,32(sp)
 80015a0:	ddc00717 	ldw	r23,28(sp)
 80015a4:	dd800617 	ldw	r22,24(sp)
 80015a8:	dd400517 	ldw	r21,20(sp)
 80015ac:	dd000417 	ldw	r20,16(sp)
 80015b0:	dcc00317 	ldw	r19,12(sp)
 80015b4:	dc800217 	ldw	r18,8(sp)
 80015b8:	dc400117 	ldw	r17,4(sp)
 80015bc:	dc000017 	ldw	r16,0(sp)
 80015c0:	dec00a04 	addi	sp,sp,40
 80015c4:	f800283a 	ret

080015c8 <WriteAPixel>:
/**********************************************************************
* This function writes a single pixel to the x,y coords specified in the specified colour
* Note colour is a palette number (0-255) not a 24 bit RGB value
**********************************************************************/
void WriteAPixel (int x, int y, int Colour)
{
 80015c8:	defffc04 	addi	sp,sp,-16
 80015cc:	df000315 	stw	fp,12(sp)
 80015d0:	df000304 	addi	fp,sp,12
 80015d4:	e13ffd15 	stw	r4,-12(fp)
 80015d8:	e17ffe15 	stw	r5,-8(fp)
 80015dc:	e1bfff15 	stw	r6,-4(fp)
	WAIT_FOR_GRAPHICS;			// is graphics ready for new command
 80015e0:	0001883a 	nop
 80015e4:	00a10034 	movhi	r2,33792
 80015e8:	1080000b 	ldhu	r2,0(r2)
 80015ec:	10bfffcc 	andi	r2,r2,65535
 80015f0:	1080004c 	andi	r2,r2,1
 80015f4:	103ffb26 	beq	r2,zero,80015e4 <__alt_data_end+0xfc0015e4>

	GraphicsX1Reg = x;			// write coords to x1, y1
 80015f8:	00a10034 	movhi	r2,33792
 80015fc:	10800084 	addi	r2,r2,2
 8001600:	e0fffd17 	ldw	r3,-12(fp)
 8001604:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 8001608:	00a10034 	movhi	r2,33792
 800160c:	10800104 	addi	r2,r2,4
 8001610:	e0fffe17 	ldw	r3,-8(fp)
 8001614:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;		// set pixel colour with a palette number
 8001618:	00a10034 	movhi	r2,33792
 800161c:	10800384 	addi	r2,r2,14
 8001620:	e0ffff17 	ldw	r3,-4(fp)
 8001624:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = PutAPixel;		// give graphics a "write pixel" command
 8001628:	00a10034 	movhi	r2,33792
 800162c:	00c00284 	movi	r3,10
 8001630:	10c0000d 	sth	r3,0(r2)
}
 8001634:	e037883a 	mov	sp,fp
 8001638:	df000017 	ldw	fp,0(sp)
 800163c:	dec00104 	addi	sp,sp,4
 8001640:	f800283a 	ret

08001644 <ReadAPixel>:
/*****************************************************************************************
* This function read a single pixel from x,y coords specified and returns its colour
* Note returned colour is a palette number (0-255) not a 24 bit RGB value
******************************************************************************************/
int ReadAPixel (int x, int y)
{
 8001644:	defffd04 	addi	sp,sp,-12
 8001648:	df000215 	stw	fp,8(sp)
 800164c:	df000204 	addi	fp,sp,8
 8001650:	e13ffe15 	stw	r4,-8(fp)
 8001654:	e17fff15 	stw	r5,-4(fp)
	WAIT_FOR_GRAPHICS;			// is graphics ready for new command
 8001658:	0001883a 	nop
 800165c:	00a10034 	movhi	r2,33792
 8001660:	1080000b 	ldhu	r2,0(r2)
 8001664:	10bfffcc 	andi	r2,r2,65535
 8001668:	1080004c 	andi	r2,r2,1
 800166c:	103ffb26 	beq	r2,zero,800165c <__alt_data_end+0xfc00165c>

	GraphicsX1Reg = x;			// write coords to x1, y1
 8001670:	00a10034 	movhi	r2,33792
 8001674:	10800084 	addi	r2,r2,2
 8001678:	e0fffe17 	ldw	r3,-8(fp)
 800167c:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 8001680:	00a10034 	movhi	r2,33792
 8001684:	10800104 	addi	r2,r2,4
 8001688:	e0ffff17 	ldw	r3,-4(fp)
 800168c:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = GetAPixel;		// give graphics a "get pixel" command
 8001690:	00a10034 	movhi	r2,33792
 8001694:	00c002c4 	movi	r3,11
 8001698:	10c0000d 	sth	r3,0(r2)

	WAIT_FOR_GRAPHICS;			// is graphics done reading pixel
 800169c:	0001883a 	nop
 80016a0:	00a10034 	movhi	r2,33792
 80016a4:	1080000b 	ldhu	r2,0(r2)
 80016a8:	10bfffcc 	andi	r2,r2,65535
 80016ac:	1080004c 	andi	r2,r2,1
 80016b0:	103ffb26 	beq	r2,zero,80016a0 <__alt_data_end+0xfc0016a0>
	return (int)(GraphicsColourReg) ;		// return the palette number (colour)
 80016b4:	00a10034 	movhi	r2,33792
 80016b8:	10800384 	addi	r2,r2,14
 80016bc:	1080000b 	ldhu	r2,0(r2)
 80016c0:	10bfffcc 	andi	r2,r2,65535
}
 80016c4:	e037883a 	mov	sp,fp
 80016c8:	df000017 	ldw	fp,0(sp)
 80016cc:	dec00104 	addi	sp,sp,4
 80016d0:	f800283a 	ret

080016d4 <ProgramPalette>:
** subroutine to program a hardware (graphics chip) palette number with an RGB value
** e.g. ProgramPalette(RED, 0x00FF0000) ;
****************************************************************************************************/

void ProgramPalette(int PaletteNumber, int RGB)
{
 80016d4:	defffd04 	addi	sp,sp,-12
 80016d8:	df000215 	stw	fp,8(sp)
 80016dc:	df000204 	addi	fp,sp,8
 80016e0:	e13ffe15 	stw	r4,-8(fp)
 80016e4:	e17fff15 	stw	r5,-4(fp)
    WAIT_FOR_GRAPHICS;
 80016e8:	0001883a 	nop
 80016ec:	00a10034 	movhi	r2,33792
 80016f0:	1080000b 	ldhu	r2,0(r2)
 80016f4:	10bfffcc 	andi	r2,r2,65535
 80016f8:	1080004c 	andi	r2,r2,1
 80016fc:	103ffb26 	beq	r2,zero,80016ec <__alt_data_end+0xfc0016ec>
    GraphicsColourReg = PaletteNumber;
 8001700:	00a10034 	movhi	r2,33792
 8001704:	10800384 	addi	r2,r2,14
 8001708:	e0fffe17 	ldw	r3,-8(fp)
 800170c:	10c0000d 	sth	r3,0(r2)
    GraphicsX1Reg = RGB >> 16   ;          // program red value in ls.8 bit of X1 reg
 8001710:	00a10034 	movhi	r2,33792
 8001714:	10800084 	addi	r2,r2,2
 8001718:	e0ffff17 	ldw	r3,-4(fp)
 800171c:	1807d43a 	srai	r3,r3,16
 8001720:	10c0000d 	sth	r3,0(r2)
    GraphicsY1Reg = RGB ;                	 // program green and blue into 16 bit of Y1 reg
 8001724:	00a10034 	movhi	r2,33792
 8001728:	10800104 	addi	r2,r2,4
 800172c:	e0ffff17 	ldw	r3,-4(fp)
 8001730:	10c0000d 	sth	r3,0(r2)
    GraphicsCommandReg = ProgramPaletteColour;	// issue command
 8001734:	00a10034 	movhi	r2,33792
 8001738:	00c00404 	movi	r3,16
 800173c:	10c0000d 	sth	r3,0(r2)
}
 8001740:	e037883a 	mov	sp,fp
 8001744:	df000017 	ldw	fp,0(sp)
 8001748:	dec00104 	addi	sp,sp,4
 800174c:	f800283a 	ret

08001750 <DrawHline>:

void DrawHline(int x1, int y1, int x2, int y2, int color)
{
 8001750:	defffb04 	addi	sp,sp,-20
 8001754:	df000415 	stw	fp,16(sp)
 8001758:	df000404 	addi	fp,sp,16
 800175c:	e13ffc15 	stw	r4,-16(fp)
 8001760:	e17ffd15 	stw	r5,-12(fp)
 8001764:	e1bffe15 	stw	r6,-8(fp)
 8001768:	e1ffff15 	stw	r7,-4(fp)
    WAIT_FOR_GRAPHICS;
 800176c:	0001883a 	nop
 8001770:	00a10034 	movhi	r2,33792
 8001774:	1080000b 	ldhu	r2,0(r2)
 8001778:	10bfffcc 	andi	r2,r2,65535
 800177c:	1080004c 	andi	r2,r2,1
 8001780:	103ffb26 	beq	r2,zero,8001770 <__alt_data_end+0xfc001770>

	GraphicsX1Reg = x1;			// write coords to x1, y1
 8001784:	00a10034 	movhi	r2,33792
 8001788:	10800084 	addi	r2,r2,2
 800178c:	e0fffc17 	ldw	r3,-16(fp)
 8001790:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 8001794:	00a10034 	movhi	r2,33792
 8001798:	10800104 	addi	r2,r2,4
 800179c:	e0fffd17 	ldw	r3,-12(fp)
 80017a0:	10c0000d 	sth	r3,0(r2)

	GraphicsX2Reg = x2;			// write coords to x1, y1
 80017a4:	00a10034 	movhi	r2,33792
 80017a8:	10800184 	addi	r2,r2,6
 80017ac:	e0fffe17 	ldw	r3,-8(fp)
 80017b0:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y2;
 80017b4:	00a10034 	movhi	r2,33792
 80017b8:	10800204 	addi	r2,r2,8
 80017bc:	e0ffff17 	ldw	r3,-4(fp)
 80017c0:	10c0000d 	sth	r3,0(r2)

	GraphicsColourReg = color;		// set pixel colour with a palette number
 80017c4:	00a10034 	movhi	r2,33792
 80017c8:	10800384 	addi	r2,r2,14
 80017cc:	e0c00117 	ldw	r3,4(fp)
 80017d0:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawHLine;		// give graphics a "write pixel" command
 80017d4:	00a10034 	movhi	r2,33792
 80017d8:	00c00044 	movi	r3,1
 80017dc:	10c0000d 	sth	r3,0(r2)
}
 80017e0:	e037883a 	mov	sp,fp
 80017e4:	df000017 	ldw	fp,0(sp)
 80017e8:	dec00104 	addi	sp,sp,4
 80017ec:	f800283a 	ret

080017f0 <DrawHlineWeighted>:

void DrawHlineWeighted(int x1, int y1, int x2, int y2, int color){
 80017f0:	defff804 	addi	sp,sp,-32
 80017f4:	dfc00715 	stw	ra,28(sp)
 80017f8:	df000615 	stw	fp,24(sp)
 80017fc:	df000604 	addi	fp,sp,24
 8001800:	e13ffc15 	stw	r4,-16(fp)
 8001804:	e17ffd15 	stw	r5,-12(fp)
 8001808:	e1bffe15 	stw	r6,-8(fp)
 800180c:	e1ffff15 	stw	r7,-4(fp)
	int y;
	for (y = y1; y <= y2; y++){
 8001810:	e0bffd17 	ldw	r2,-12(fp)
 8001814:	e0bffb15 	stw	r2,-20(fp)
 8001818:	00000a06 	br	8001844 <DrawHlineWeighted+0x54>
		DrawHline(x1, y, x2, y, color);
 800181c:	e0800217 	ldw	r2,8(fp)
 8001820:	d8800015 	stw	r2,0(sp)
 8001824:	e13ffc17 	ldw	r4,-16(fp)
 8001828:	e17ffb17 	ldw	r5,-20(fp)
 800182c:	e1bffe17 	ldw	r6,-8(fp)
 8001830:	e1fffb17 	ldw	r7,-20(fp)
 8001834:	80017500 	call	8001750 <DrawHline>
	GraphicsCommandReg = DrawHLine;		// give graphics a "write pixel" command
}

void DrawHlineWeighted(int x1, int y1, int x2, int y2, int color){
	int y;
	for (y = y1; y <= y2; y++){
 8001838:	e0bffb17 	ldw	r2,-20(fp)
 800183c:	10800044 	addi	r2,r2,1
 8001840:	e0bffb15 	stw	r2,-20(fp)
 8001844:	e0bffb17 	ldw	r2,-20(fp)
 8001848:	e0ffff17 	ldw	r3,-4(fp)
 800184c:	18bff30e 	bge	r3,r2,800181c <__alt_data_end+0xfc00181c>
		DrawHline(x1, y, x2, y, color);
	}
}
 8001850:	e037883a 	mov	sp,fp
 8001854:	dfc00117 	ldw	ra,4(sp)
 8001858:	df000017 	ldw	fp,0(sp)
 800185c:	dec00204 	addi	sp,sp,8
 8001860:	f800283a 	ret

08001864 <DrawVlineWeighted>:

void DrawVlineWeighted(int x1, int y1, int x2, int y2, int color){
 8001864:	defff804 	addi	sp,sp,-32
 8001868:	dfc00715 	stw	ra,28(sp)
 800186c:	df000615 	stw	fp,24(sp)
 8001870:	df000604 	addi	fp,sp,24
 8001874:	e13ffc15 	stw	r4,-16(fp)
 8001878:	e17ffd15 	stw	r5,-12(fp)
 800187c:	e1bffe15 	stw	r6,-8(fp)
 8001880:	e1ffff15 	stw	r7,-4(fp)
	int x;
	for (x = x1; x <= x2; x++){
 8001884:	e0bffc17 	ldw	r2,-16(fp)
 8001888:	e0bffb15 	stw	r2,-20(fp)
 800188c:	00000a06 	br	80018b8 <DrawVlineWeighted+0x54>
		DrawVline(x, y1, x, y2, color);
 8001890:	e0800217 	ldw	r2,8(fp)
 8001894:	d8800015 	stw	r2,0(sp)
 8001898:	e13ffb17 	ldw	r4,-20(fp)
 800189c:	e17ffd17 	ldw	r5,-12(fp)
 80018a0:	e1bffb17 	ldw	r6,-20(fp)
 80018a4:	e1ffff17 	ldw	r7,-4(fp)
 80018a8:	80018d80 	call	80018d8 <DrawVline>
	}
}

void DrawVlineWeighted(int x1, int y1, int x2, int y2, int color){
	int x;
	for (x = x1; x <= x2; x++){
 80018ac:	e0bffb17 	ldw	r2,-20(fp)
 80018b0:	10800044 	addi	r2,r2,1
 80018b4:	e0bffb15 	stw	r2,-20(fp)
 80018b8:	e0bffb17 	ldw	r2,-20(fp)
 80018bc:	e0fffe17 	ldw	r3,-8(fp)
 80018c0:	18bff30e 	bge	r3,r2,8001890 <__alt_data_end+0xfc001890>
		DrawVline(x, y1, x, y2, color);
	}
}
 80018c4:	e037883a 	mov	sp,fp
 80018c8:	dfc00117 	ldw	ra,4(sp)
 80018cc:	df000017 	ldw	fp,0(sp)
 80018d0:	dec00204 	addi	sp,sp,8
 80018d4:	f800283a 	ret

080018d8 <DrawVline>:

void DrawVline(int x1, int y1, int x2, int y2, int color)
{
 80018d8:	defffb04 	addi	sp,sp,-20
 80018dc:	df000415 	stw	fp,16(sp)
 80018e0:	df000404 	addi	fp,sp,16
 80018e4:	e13ffc15 	stw	r4,-16(fp)
 80018e8:	e17ffd15 	stw	r5,-12(fp)
 80018ec:	e1bffe15 	stw	r6,-8(fp)
 80018f0:	e1ffff15 	stw	r7,-4(fp)
    WAIT_FOR_GRAPHICS;
 80018f4:	0001883a 	nop
 80018f8:	00a10034 	movhi	r2,33792
 80018fc:	1080000b 	ldhu	r2,0(r2)
 8001900:	10bfffcc 	andi	r2,r2,65535
 8001904:	1080004c 	andi	r2,r2,1
 8001908:	103ffb26 	beq	r2,zero,80018f8 <__alt_data_end+0xfc0018f8>

	GraphicsX1Reg = x1;			// write coords to x1, y1
 800190c:	00a10034 	movhi	r2,33792
 8001910:	10800084 	addi	r2,r2,2
 8001914:	e0fffc17 	ldw	r3,-16(fp)
 8001918:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 800191c:	00a10034 	movhi	r2,33792
 8001920:	10800104 	addi	r2,r2,4
 8001924:	e0fffd17 	ldw	r3,-12(fp)
 8001928:	10c0000d 	sth	r3,0(r2)

	GraphicsX2Reg = x2;			// write coords to x1, y1
 800192c:	00a10034 	movhi	r2,33792
 8001930:	10800184 	addi	r2,r2,6
 8001934:	e0fffe17 	ldw	r3,-8(fp)
 8001938:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y2;
 800193c:	00a10034 	movhi	r2,33792
 8001940:	10800204 	addi	r2,r2,8
 8001944:	e0ffff17 	ldw	r3,-4(fp)
 8001948:	10c0000d 	sth	r3,0(r2)

	GraphicsColourReg = color;		// set pixel colour with a palette number
 800194c:	00a10034 	movhi	r2,33792
 8001950:	10800384 	addi	r2,r2,14
 8001954:	e0c00117 	ldw	r3,4(fp)
 8001958:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawVLine;		// give graphics a "write pixel" command
 800195c:	00a10034 	movhi	r2,33792
 8001960:	00c00084 	movi	r3,2
 8001964:	10c0000d 	sth	r3,0(r2)
}
 8001968:	e037883a 	mov	sp,fp
 800196c:	df000017 	ldw	fp,0(sp)
 8001970:	dec00104 	addi	sp,sp,4
 8001974:	f800283a 	ret

08001978 <Drawline>:

void Drawline(int x1, int y1, int x2, int y2, int color)
{
 8001978:	defffb04 	addi	sp,sp,-20
 800197c:	df000415 	stw	fp,16(sp)
 8001980:	df000404 	addi	fp,sp,16
 8001984:	e13ffc15 	stw	r4,-16(fp)
 8001988:	e17ffd15 	stw	r5,-12(fp)
 800198c:	e1bffe15 	stw	r6,-8(fp)
 8001990:	e1ffff15 	stw	r7,-4(fp)
    WAIT_FOR_GRAPHICS;
 8001994:	0001883a 	nop
 8001998:	00a10034 	movhi	r2,33792
 800199c:	1080000b 	ldhu	r2,0(r2)
 80019a0:	10bfffcc 	andi	r2,r2,65535
 80019a4:	1080004c 	andi	r2,r2,1
 80019a8:	103ffb26 	beq	r2,zero,8001998 <__alt_data_end+0xfc001998>

	GraphicsX1Reg = x1;			// write coords to x1, y1
 80019ac:	00a10034 	movhi	r2,33792
 80019b0:	10800084 	addi	r2,r2,2
 80019b4:	e0fffc17 	ldw	r3,-16(fp)
 80019b8:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 80019bc:	00a10034 	movhi	r2,33792
 80019c0:	10800104 	addi	r2,r2,4
 80019c4:	e0fffd17 	ldw	r3,-12(fp)
 80019c8:	10c0000d 	sth	r3,0(r2)

	GraphicsX2Reg = x2;			// write coords to x1, y1
 80019cc:	00a10034 	movhi	r2,33792
 80019d0:	10800184 	addi	r2,r2,6
 80019d4:	e0fffe17 	ldw	r3,-8(fp)
 80019d8:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y2;
 80019dc:	00a10034 	movhi	r2,33792
 80019e0:	10800204 	addi	r2,r2,8
 80019e4:	e0ffff17 	ldw	r3,-4(fp)
 80019e8:	10c0000d 	sth	r3,0(r2)

	GraphicsColourReg = color;		// set pixel colour with a palette number
 80019ec:	00a10034 	movhi	r2,33792
 80019f0:	10800384 	addi	r2,r2,14
 80019f4:	e0c00117 	ldw	r3,4(fp)
 80019f8:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawLine;		// give graphics a "write pixel" command
 80019fc:	00a10034 	movhi	r2,33792
 8001a00:	00c000c4 	movi	r3,3
 8001a04:	10c0000d 	sth	r3,0(r2)
}
 8001a08:	e037883a 	mov	sp,fp
 8001a0c:	df000017 	ldw	fp,0(sp)
 8001a10:	dec00104 	addi	sp,sp,4
 8001a14:	f800283a 	ret

08001a18 <DrawSolidRectangle>:

void DrawSolidRectangle(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4, int color){
 8001a18:	defff804 	addi	sp,sp,-32
 8001a1c:	dfc00715 	stw	ra,28(sp)
 8001a20:	df000615 	stw	fp,24(sp)
 8001a24:	df000604 	addi	fp,sp,24
 8001a28:	e13ffc15 	stw	r4,-16(fp)
 8001a2c:	e17ffd15 	stw	r5,-12(fp)
 8001a30:	e1bffe15 	stw	r6,-8(fp)
 8001a34:	e1ffff15 	stw	r7,-4(fp)
    int i;
    for(i=0; i<y3-y1; i++){
 8001a38:	e03ffb15 	stw	zero,-20(fp)
 8001a3c:	00000f06 	br	8001a7c <DrawSolidRectangle+0x64>
        DrawHline(x1,y1+i,x2,y2+i,color);
 8001a40:	e0fffd17 	ldw	r3,-12(fp)
 8001a44:	e0bffb17 	ldw	r2,-20(fp)
 8001a48:	188b883a 	add	r5,r3,r2
 8001a4c:	e0ffff17 	ldw	r3,-4(fp)
 8001a50:	e0bffb17 	ldw	r2,-20(fp)
 8001a54:	1887883a 	add	r3,r3,r2
 8001a58:	e0800617 	ldw	r2,24(fp)
 8001a5c:	d8800015 	stw	r2,0(sp)
 8001a60:	e13ffc17 	ldw	r4,-16(fp)
 8001a64:	e1bffe17 	ldw	r6,-8(fp)
 8001a68:	180f883a 	mov	r7,r3
 8001a6c:	80017500 	call	8001750 <DrawHline>
	GraphicsCommandReg = DrawLine;		// give graphics a "write pixel" command
}

void DrawSolidRectangle(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4, int color){
    int i;
    for(i=0; i<y3-y1; i++){
 8001a70:	e0bffb17 	ldw	r2,-20(fp)
 8001a74:	10800044 	addi	r2,r2,1
 8001a78:	e0bffb15 	stw	r2,-20(fp)
 8001a7c:	e0c00317 	ldw	r3,12(fp)
 8001a80:	e0bffd17 	ldw	r2,-12(fp)
 8001a84:	1885c83a 	sub	r2,r3,r2
 8001a88:	e0fffb17 	ldw	r3,-20(fp)
 8001a8c:	18bfec16 	blt	r3,r2,8001a40 <__alt_data_end+0xfc001a40>
        DrawHline(x1,y1+i,x2,y2+i,color);
    }
}
 8001a90:	e037883a 	mov	sp,fp
 8001a94:	dfc00117 	ldw	ra,4(sp)
 8001a98:	df000017 	ldw	fp,0(sp)
 8001a9c:	dec00204 	addi	sp,sp,8
 8001aa0:	f800283a 	ret

08001aa4 <DrawRectangle>:

void DrawRectangle(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4, int color){
 8001aa4:	defff904 	addi	sp,sp,-28
 8001aa8:	dfc00615 	stw	ra,24(sp)
 8001aac:	df000515 	stw	fp,20(sp)
 8001ab0:	df000504 	addi	fp,sp,20
 8001ab4:	e13ffc15 	stw	r4,-16(fp)
 8001ab8:	e17ffd15 	stw	r5,-12(fp)
 8001abc:	e1bffe15 	stw	r6,-8(fp)
 8001ac0:	e1ffff15 	stw	r7,-4(fp)
    DrawHline(x1,y1,x2,y2,color);
 8001ac4:	e0800617 	ldw	r2,24(fp)
 8001ac8:	d8800015 	stw	r2,0(sp)
 8001acc:	e13ffc17 	ldw	r4,-16(fp)
 8001ad0:	e17ffd17 	ldw	r5,-12(fp)
 8001ad4:	e1bffe17 	ldw	r6,-8(fp)
 8001ad8:	e1ffff17 	ldw	r7,-4(fp)
 8001adc:	80017500 	call	8001750 <DrawHline>
    DrawHline(x3,y3,x4,y4,color);
 8001ae0:	e0800617 	ldw	r2,24(fp)
 8001ae4:	d8800015 	stw	r2,0(sp)
 8001ae8:	e1000217 	ldw	r4,8(fp)
 8001aec:	e1400317 	ldw	r5,12(fp)
 8001af0:	e1800417 	ldw	r6,16(fp)
 8001af4:	e1c00517 	ldw	r7,20(fp)
 8001af8:	80017500 	call	8001750 <DrawHline>
    DrawVline(x1,y1,x3,y3,color);
 8001afc:	e0800617 	ldw	r2,24(fp)
 8001b00:	d8800015 	stw	r2,0(sp)
 8001b04:	e13ffc17 	ldw	r4,-16(fp)
 8001b08:	e17ffd17 	ldw	r5,-12(fp)
 8001b0c:	e1800217 	ldw	r6,8(fp)
 8001b10:	e1c00317 	ldw	r7,12(fp)
 8001b14:	80018d80 	call	80018d8 <DrawVline>
    DrawVline(x2,y2,x4,y4,color);
 8001b18:	e0800617 	ldw	r2,24(fp)
 8001b1c:	d8800015 	stw	r2,0(sp)
 8001b20:	e13ffe17 	ldw	r4,-8(fp)
 8001b24:	e17fff17 	ldw	r5,-4(fp)
 8001b28:	e1800417 	ldw	r6,16(fp)
 8001b2c:	e1c00517 	ldw	r7,20(fp)
 8001b30:	80018d80 	call	80018d8 <DrawVline>
}
 8001b34:	e037883a 	mov	sp,fp
 8001b38:	dfc00117 	ldw	ra,4(sp)
 8001b3c:	df000017 	ldw	fp,0(sp)
 8001b40:	dec00204 	addi	sp,sp,8
 8001b44:	f800283a 	ret

08001b48 <waitFor>:

void waitFor (unsigned int secs) {
 8001b48:	defffc04 	addi	sp,sp,-16
 8001b4c:	dfc00315 	stw	ra,12(sp)
 8001b50:	df000215 	stw	fp,8(sp)
 8001b54:	df000204 	addi	fp,sp,8
 8001b58:	e13fff15 	stw	r4,-4(fp)
    unsigned int retTime = time(0) + secs;
 8001b5c:	0009883a 	mov	r4,zero
 8001b60:	800823c0 	call	800823c <time>
 8001b64:	1007883a 	mov	r3,r2
 8001b68:	e0bfff17 	ldw	r2,-4(fp)
 8001b6c:	1885883a 	add	r2,r3,r2
 8001b70:	e0bffe15 	stw	r2,-8(fp)
    while (time(0) < retTime);
 8001b74:	0001883a 	nop
 8001b78:	0009883a 	mov	r4,zero
 8001b7c:	800823c0 	call	800823c <time>
 8001b80:	1007883a 	mov	r3,r2
 8001b84:	e0bffe17 	ldw	r2,-8(fp)
 8001b88:	18bffb36 	bltu	r3,r2,8001b78 <__alt_data_end+0xfc001b78>
}
 8001b8c:	e037883a 	mov	sp,fp
 8001b90:	dfc00117 	ldw	ra,4(sp)
 8001b94:	df000017 	ldw	fp,0(sp)
 8001b98:	dec00204 	addi	sp,sp,8
 8001b9c:	f800283a 	ret

08001ba0 <clearScreen>:

void clearScreen(int colour){
 8001ba0:	defffc04 	addi	sp,sp,-16
 8001ba4:	dfc00315 	stw	ra,12(sp)
 8001ba8:	df000215 	stw	fp,8(sp)
 8001bac:	df000204 	addi	fp,sp,8
 8001bb0:	e13fff15 	stw	r4,-4(fp)
	DrawHlineWeighted(0, 0, 800, 480, colour);
 8001bb4:	e0bfff17 	ldw	r2,-4(fp)
 8001bb8:	d8800015 	stw	r2,0(sp)
 8001bbc:	0009883a 	mov	r4,zero
 8001bc0:	000b883a 	mov	r5,zero
 8001bc4:	0180c804 	movi	r6,800
 8001bc8:	01c07804 	movi	r7,480
 8001bcc:	80017f00 	call	80017f0 <DrawHlineWeighted>
}
 8001bd0:	e037883a 	mov	sp,fp
 8001bd4:	dfc00117 	ldw	ra,4(sp)
 8001bd8:	df000017 	ldw	fp,0(sp)
 8001bdc:	dec00204 	addi	sp,sp,8
 8001be0:	f800283a 	ret

08001be4 <write>:

void write(int x, int y, char *string, int spacing, int color, int backgroundcolor){
 8001be4:	defff604 	addi	sp,sp,-40
 8001be8:	dfc00915 	stw	ra,36(sp)
 8001bec:	df000815 	stw	fp,32(sp)
 8001bf0:	dc000715 	stw	r16,28(sp)
 8001bf4:	df000804 	addi	fp,sp,32
 8001bf8:	e13ffb15 	stw	r4,-20(fp)
 8001bfc:	e17ffc15 	stw	r5,-16(fp)
 8001c00:	e1bffd15 	stw	r6,-12(fp)
 8001c04:	e1fffe15 	stw	r7,-8(fp)
	int i;
	for (i = 0; i < strlen(string); i++){
 8001c08:	e03ffa15 	stw	zero,-24(fp)
 8001c0c:	00001606 	br	8001c68 <write+0x84>
		OutGraphicsCharFont2a(x+(i*spacing), y, color, backgroundcolor, string[i], 1);
 8001c10:	e0fffa17 	ldw	r3,-24(fp)
 8001c14:	e0bffe17 	ldw	r2,-8(fp)
 8001c18:	1887383a 	mul	r3,r3,r2
 8001c1c:	e0bffb17 	ldw	r2,-20(fp)
 8001c20:	1889883a 	add	r4,r3,r2
 8001c24:	e0bffa17 	ldw	r2,-24(fp)
 8001c28:	e0fffd17 	ldw	r3,-12(fp)
 8001c2c:	1885883a 	add	r2,r3,r2
 8001c30:	10800003 	ldbu	r2,0(r2)
 8001c34:	10803fcc 	andi	r2,r2,255
 8001c38:	1080201c 	xori	r2,r2,128
 8001c3c:	10bfe004 	addi	r2,r2,-128
 8001c40:	d8800015 	stw	r2,0(sp)
 8001c44:	00800044 	movi	r2,1
 8001c48:	d8800115 	stw	r2,4(sp)
 8001c4c:	e17ffc17 	ldw	r5,-16(fp)
 8001c50:	e1800217 	ldw	r6,8(fp)
 8001c54:	e1c00317 	ldw	r7,12(fp)
 8001c58:	80014380 	call	8001438 <OutGraphicsCharFont2a>
	DrawHlineWeighted(0, 0, 800, 480, colour);
}

void write(int x, int y, char *string, int spacing, int color, int backgroundcolor){
	int i;
	for (i = 0; i < strlen(string); i++){
 8001c5c:	e0bffa17 	ldw	r2,-24(fp)
 8001c60:	10800044 	addi	r2,r2,1
 8001c64:	e0bffa15 	stw	r2,-24(fp)
 8001c68:	e43ffa17 	ldw	r16,-24(fp)
 8001c6c:	e13ffd17 	ldw	r4,-12(fp)
 8001c70:	8004afc0 	call	8004afc <strlen>
 8001c74:	80bfe636 	bltu	r16,r2,8001c10 <__alt_data_end+0xfc001c10>
		OutGraphicsCharFont2a(x+(i*spacing), y, color, backgroundcolor, string[i], 1);
	}
}
 8001c78:	e6ffff04 	addi	sp,fp,-4
 8001c7c:	dfc00217 	ldw	ra,8(sp)
 8001c80:	df000117 	ldw	fp,4(sp)
 8001c84:	dc000017 	ldw	r16,0(sp)
 8001c88:	dec00304 	addi	sp,sp,12
 8001c8c:	f800283a 	ret

08001c90 <writeSmall>:

void writeSmall(int x, int y, char *string, int spacing, int color, int backgroundcolor){
 8001c90:	defff604 	addi	sp,sp,-40
 8001c94:	dfc00915 	stw	ra,36(sp)
 8001c98:	df000815 	stw	fp,32(sp)
 8001c9c:	dc000715 	stw	r16,28(sp)
 8001ca0:	df000804 	addi	fp,sp,32
 8001ca4:	e13ffb15 	stw	r4,-20(fp)
 8001ca8:	e17ffc15 	stw	r5,-16(fp)
 8001cac:	e1bffd15 	stw	r6,-12(fp)
 8001cb0:	e1fffe15 	stw	r7,-8(fp)
	int i;
	for (i = 0; i < strlen(string); i++){
 8001cb4:	e03ffa15 	stw	zero,-24(fp)
 8001cb8:	00001606 	br	8001d14 <writeSmall+0x84>
		OutGraphicsCharFont1(x+(i*spacing), y, color, backgroundcolor, string[i], 1);
 8001cbc:	e0fffa17 	ldw	r3,-24(fp)
 8001cc0:	e0bffe17 	ldw	r2,-8(fp)
 8001cc4:	1887383a 	mul	r3,r3,r2
 8001cc8:	e0bffb17 	ldw	r2,-20(fp)
 8001ccc:	1889883a 	add	r4,r3,r2
 8001cd0:	e0bffa17 	ldw	r2,-24(fp)
 8001cd4:	e0fffd17 	ldw	r3,-12(fp)
 8001cd8:	1885883a 	add	r2,r3,r2
 8001cdc:	10800003 	ldbu	r2,0(r2)
 8001ce0:	10803fcc 	andi	r2,r2,255
 8001ce4:	1080201c 	xori	r2,r2,128
 8001ce8:	10bfe004 	addi	r2,r2,-128
 8001cec:	d8800015 	stw	r2,0(sp)
 8001cf0:	00800044 	movi	r2,1
 8001cf4:	d8800115 	stw	r2,4(sp)
 8001cf8:	e17ffc17 	ldw	r5,-16(fp)
 8001cfc:	e1800217 	ldw	r6,8(fp)
 8001d00:	e1c00317 	ldw	r7,12(fp)
 8001d04:	800128c0 	call	800128c <OutGraphicsCharFont1>
	}
}

void writeSmall(int x, int y, char *string, int spacing, int color, int backgroundcolor){
	int i;
	for (i = 0; i < strlen(string); i++){
 8001d08:	e0bffa17 	ldw	r2,-24(fp)
 8001d0c:	10800044 	addi	r2,r2,1
 8001d10:	e0bffa15 	stw	r2,-24(fp)
 8001d14:	e43ffa17 	ldw	r16,-24(fp)
 8001d18:	e13ffd17 	ldw	r4,-12(fp)
 8001d1c:	8004afc0 	call	8004afc <strlen>
 8001d20:	80bfe636 	bltu	r16,r2,8001cbc <__alt_data_end+0xfc001cbc>
		OutGraphicsCharFont1(x+(i*spacing), y, color, backgroundcolor, string[i], 1);
	}
}
 8001d24:	e6ffff04 	addi	sp,fp,-4
 8001d28:	dfc00217 	ldw	ra,8(sp)
 8001d2c:	df000117 	ldw	fp,4(sp)
 8001d30:	dc000017 	ldw	r16,0(sp)
 8001d34:	dec00304 	addi	sp,sp,12
 8001d38:	f800283a 	ret

08001d3c <drawcircle>:

void drawcircle(int x0, int y0, int radius, int colour)
{
 8001d3c:	defff704 	addi	sp,sp,-36
 8001d40:	dfc00815 	stw	ra,32(sp)
 8001d44:	df000715 	stw	fp,28(sp)
 8001d48:	df000704 	addi	fp,sp,28
 8001d4c:	e13ffc15 	stw	r4,-16(fp)
 8001d50:	e17ffd15 	stw	r5,-12(fp)
 8001d54:	e1bffe15 	stw	r6,-8(fp)
 8001d58:	e1ffff15 	stw	r7,-4(fp)
    int x = radius;
 8001d5c:	e0bffe17 	ldw	r2,-8(fp)
 8001d60:	e0bff915 	stw	r2,-28(fp)
    int y = 0;
 8001d64:	e03ffa15 	stw	zero,-24(fp)
    int err = 0;
 8001d68:	e03ffb15 	stw	zero,-20(fp)

    while (x >= y)
 8001d6c:	00005e06 	br	8001ee8 <drawcircle+0x1ac>
    {
    	WriteAPixel(x0 + x, y0 + y, colour);
 8001d70:	e0fffc17 	ldw	r3,-16(fp)
 8001d74:	e0bff917 	ldw	r2,-28(fp)
 8001d78:	1889883a 	add	r4,r3,r2
 8001d7c:	e0fffd17 	ldw	r3,-12(fp)
 8001d80:	e0bffa17 	ldw	r2,-24(fp)
 8001d84:	1885883a 	add	r2,r3,r2
 8001d88:	100b883a 	mov	r5,r2
 8001d8c:	e1bfff17 	ldw	r6,-4(fp)
 8001d90:	80015c80 	call	80015c8 <WriteAPixel>
    	WriteAPixel(x0 + y, y0 + x, colour);
 8001d94:	e0fffc17 	ldw	r3,-16(fp)
 8001d98:	e0bffa17 	ldw	r2,-24(fp)
 8001d9c:	1889883a 	add	r4,r3,r2
 8001da0:	e0fffd17 	ldw	r3,-12(fp)
 8001da4:	e0bff917 	ldw	r2,-28(fp)
 8001da8:	1885883a 	add	r2,r3,r2
 8001dac:	100b883a 	mov	r5,r2
 8001db0:	e1bfff17 	ldw	r6,-4(fp)
 8001db4:	80015c80 	call	80015c8 <WriteAPixel>
    	WriteAPixel(x0 - y, y0 + x, colour);
 8001db8:	e0fffc17 	ldw	r3,-16(fp)
 8001dbc:	e0bffa17 	ldw	r2,-24(fp)
 8001dc0:	1889c83a 	sub	r4,r3,r2
 8001dc4:	e0fffd17 	ldw	r3,-12(fp)
 8001dc8:	e0bff917 	ldw	r2,-28(fp)
 8001dcc:	1885883a 	add	r2,r3,r2
 8001dd0:	100b883a 	mov	r5,r2
 8001dd4:	e1bfff17 	ldw	r6,-4(fp)
 8001dd8:	80015c80 	call	80015c8 <WriteAPixel>
    	WriteAPixel(x0 - x, y0 + y, colour);
 8001ddc:	e0fffc17 	ldw	r3,-16(fp)
 8001de0:	e0bff917 	ldw	r2,-28(fp)
 8001de4:	1889c83a 	sub	r4,r3,r2
 8001de8:	e0fffd17 	ldw	r3,-12(fp)
 8001dec:	e0bffa17 	ldw	r2,-24(fp)
 8001df0:	1885883a 	add	r2,r3,r2
 8001df4:	100b883a 	mov	r5,r2
 8001df8:	e1bfff17 	ldw	r6,-4(fp)
 8001dfc:	80015c80 	call	80015c8 <WriteAPixel>
    	WriteAPixel(x0 - x, y0 - y, colour);
 8001e00:	e0fffc17 	ldw	r3,-16(fp)
 8001e04:	e0bff917 	ldw	r2,-28(fp)
 8001e08:	1889c83a 	sub	r4,r3,r2
 8001e0c:	e0fffd17 	ldw	r3,-12(fp)
 8001e10:	e0bffa17 	ldw	r2,-24(fp)
 8001e14:	1885c83a 	sub	r2,r3,r2
 8001e18:	100b883a 	mov	r5,r2
 8001e1c:	e1bfff17 	ldw	r6,-4(fp)
 8001e20:	80015c80 	call	80015c8 <WriteAPixel>
    	WriteAPixel(x0 - y, y0 - x, colour);
 8001e24:	e0fffc17 	ldw	r3,-16(fp)
 8001e28:	e0bffa17 	ldw	r2,-24(fp)
 8001e2c:	1889c83a 	sub	r4,r3,r2
 8001e30:	e0fffd17 	ldw	r3,-12(fp)
 8001e34:	e0bff917 	ldw	r2,-28(fp)
 8001e38:	1885c83a 	sub	r2,r3,r2
 8001e3c:	100b883a 	mov	r5,r2
 8001e40:	e1bfff17 	ldw	r6,-4(fp)
 8001e44:	80015c80 	call	80015c8 <WriteAPixel>
    	WriteAPixel(x0 + y, y0 - x, colour);
 8001e48:	e0fffc17 	ldw	r3,-16(fp)
 8001e4c:	e0bffa17 	ldw	r2,-24(fp)
 8001e50:	1889883a 	add	r4,r3,r2
 8001e54:	e0fffd17 	ldw	r3,-12(fp)
 8001e58:	e0bff917 	ldw	r2,-28(fp)
 8001e5c:	1885c83a 	sub	r2,r3,r2
 8001e60:	100b883a 	mov	r5,r2
 8001e64:	e1bfff17 	ldw	r6,-4(fp)
 8001e68:	80015c80 	call	80015c8 <WriteAPixel>
    	WriteAPixel(x0 + x, y0 - y, colour);
 8001e6c:	e0fffc17 	ldw	r3,-16(fp)
 8001e70:	e0bff917 	ldw	r2,-28(fp)
 8001e74:	1889883a 	add	r4,r3,r2
 8001e78:	e0fffd17 	ldw	r3,-12(fp)
 8001e7c:	e0bffa17 	ldw	r2,-24(fp)
 8001e80:	1885c83a 	sub	r2,r3,r2
 8001e84:	100b883a 	mov	r5,r2
 8001e88:	e1bfff17 	ldw	r6,-4(fp)
 8001e8c:	80015c80 	call	80015c8 <WriteAPixel>

        if (err <= 0)
 8001e90:	e0bffb17 	ldw	r2,-20(fp)
 8001e94:	00800916 	blt	zero,r2,8001ebc <drawcircle+0x180>
        {
            y += 1;
 8001e98:	e0bffa17 	ldw	r2,-24(fp)
 8001e9c:	10800044 	addi	r2,r2,1
 8001ea0:	e0bffa15 	stw	r2,-24(fp)
            err += 2*y + 1;
 8001ea4:	e0bffa17 	ldw	r2,-24(fp)
 8001ea8:	1085883a 	add	r2,r2,r2
 8001eac:	10800044 	addi	r2,r2,1
 8001eb0:	e0fffb17 	ldw	r3,-20(fp)
 8001eb4:	1885883a 	add	r2,r3,r2
 8001eb8:	e0bffb15 	stw	r2,-20(fp)
        }
        if (err > 0)
 8001ebc:	e0bffb17 	ldw	r2,-20(fp)
 8001ec0:	0080090e 	bge	zero,r2,8001ee8 <drawcircle+0x1ac>
        {
            x -= 1;
 8001ec4:	e0bff917 	ldw	r2,-28(fp)
 8001ec8:	10bfffc4 	addi	r2,r2,-1
 8001ecc:	e0bff915 	stw	r2,-28(fp)
            err -= 2*x + 1;
 8001ed0:	e0bff917 	ldw	r2,-28(fp)
 8001ed4:	1085883a 	add	r2,r2,r2
 8001ed8:	0084303a 	nor	r2,zero,r2
 8001edc:	e0fffb17 	ldw	r3,-20(fp)
 8001ee0:	1885883a 	add	r2,r3,r2
 8001ee4:	e0bffb15 	stw	r2,-20(fp)
{
    int x = radius;
    int y = 0;
    int err = 0;

    while (x >= y)
 8001ee8:	e0fff917 	ldw	r3,-28(fp)
 8001eec:	e0bffa17 	ldw	r2,-24(fp)
 8001ef0:	18bf9f0e 	bge	r3,r2,8001d70 <__alt_data_end+0xfc001d70>
        {
            x -= 1;
            err -= 2*x + 1;
        }
    }
}
 8001ef4:	e037883a 	mov	sp,fp
 8001ef8:	dfc00117 	ldw	ra,4(sp)
 8001efc:	df000017 	ldw	fp,0(sp)
 8001f00:	dec00204 	addi	sp,sp,8
 8001f04:	f800283a 	ret

08001f08 <drawSolidcircle>:

void drawSolidcircle(int x0, int y0, int radius, int colour)
{
 8001f08:	defff604 	addi	sp,sp,-40
 8001f0c:	dfc00915 	stw	ra,36(sp)
 8001f10:	df000815 	stw	fp,32(sp)
 8001f14:	df000804 	addi	fp,sp,32
 8001f18:	e13ffc15 	stw	r4,-16(fp)
 8001f1c:	e17ffd15 	stw	r5,-12(fp)
 8001f20:	e1bffe15 	stw	r6,-8(fp)
 8001f24:	e1ffff15 	stw	r7,-4(fp)
    int x = radius;
 8001f28:	e0bffe17 	ldw	r2,-8(fp)
 8001f2c:	e0bff915 	stw	r2,-28(fp)
    int y = 0;
 8001f30:	e03ffa15 	stw	zero,-24(fp)
    int err = 0;
 8001f34:	e03ffb15 	stw	zero,-20(fp)

    while (x >= y)
 8001f38:	00005606 	br	8002094 <drawSolidcircle+0x18c>
    {
    	Drawline(x0 + x, y0 + y, x0 - x, y0 + y, colour);
 8001f3c:	e0fffc17 	ldw	r3,-16(fp)
 8001f40:	e0bff917 	ldw	r2,-28(fp)
 8001f44:	1889883a 	add	r4,r3,r2
 8001f48:	e0fffd17 	ldw	r3,-12(fp)
 8001f4c:	e0bffa17 	ldw	r2,-24(fp)
 8001f50:	188b883a 	add	r5,r3,r2
 8001f54:	e0fffc17 	ldw	r3,-16(fp)
 8001f58:	e0bff917 	ldw	r2,-28(fp)
 8001f5c:	188dc83a 	sub	r6,r3,r2
 8001f60:	e0fffd17 	ldw	r3,-12(fp)
 8001f64:	e0bffa17 	ldw	r2,-24(fp)
 8001f68:	1887883a 	add	r3,r3,r2
 8001f6c:	e0bfff17 	ldw	r2,-4(fp)
 8001f70:	d8800015 	stw	r2,0(sp)
 8001f74:	180f883a 	mov	r7,r3
 8001f78:	80019780 	call	8001978 <Drawline>
    	Drawline(x0 - y, y0 + x, x0 + y, y0 + x, colour);
 8001f7c:	e0fffc17 	ldw	r3,-16(fp)
 8001f80:	e0bffa17 	ldw	r2,-24(fp)
 8001f84:	1889c83a 	sub	r4,r3,r2
 8001f88:	e0fffd17 	ldw	r3,-12(fp)
 8001f8c:	e0bff917 	ldw	r2,-28(fp)
 8001f90:	188b883a 	add	r5,r3,r2
 8001f94:	e0fffc17 	ldw	r3,-16(fp)
 8001f98:	e0bffa17 	ldw	r2,-24(fp)
 8001f9c:	188d883a 	add	r6,r3,r2
 8001fa0:	e0fffd17 	ldw	r3,-12(fp)
 8001fa4:	e0bff917 	ldw	r2,-28(fp)
 8001fa8:	1887883a 	add	r3,r3,r2
 8001fac:	e0bfff17 	ldw	r2,-4(fp)
 8001fb0:	d8800015 	stw	r2,0(sp)
 8001fb4:	180f883a 	mov	r7,r3
 8001fb8:	80019780 	call	8001978 <Drawline>
    	Drawline(x0 + x, y0 - y, x0 - x, y0 - y, colour);
 8001fbc:	e0fffc17 	ldw	r3,-16(fp)
 8001fc0:	e0bff917 	ldw	r2,-28(fp)
 8001fc4:	1889883a 	add	r4,r3,r2
 8001fc8:	e0fffd17 	ldw	r3,-12(fp)
 8001fcc:	e0bffa17 	ldw	r2,-24(fp)
 8001fd0:	188bc83a 	sub	r5,r3,r2
 8001fd4:	e0fffc17 	ldw	r3,-16(fp)
 8001fd8:	e0bff917 	ldw	r2,-28(fp)
 8001fdc:	188dc83a 	sub	r6,r3,r2
 8001fe0:	e0fffd17 	ldw	r3,-12(fp)
 8001fe4:	e0bffa17 	ldw	r2,-24(fp)
 8001fe8:	1887c83a 	sub	r3,r3,r2
 8001fec:	e0bfff17 	ldw	r2,-4(fp)
 8001ff0:	d8800015 	stw	r2,0(sp)
 8001ff4:	180f883a 	mov	r7,r3
 8001ff8:	80019780 	call	8001978 <Drawline>
    	Drawline(x0 + y, y0 - x, x0 - y, y0 - x, colour);
 8001ffc:	e0fffc17 	ldw	r3,-16(fp)
 8002000:	e0bffa17 	ldw	r2,-24(fp)
 8002004:	1889883a 	add	r4,r3,r2
 8002008:	e0fffd17 	ldw	r3,-12(fp)
 800200c:	e0bff917 	ldw	r2,-28(fp)
 8002010:	188bc83a 	sub	r5,r3,r2
 8002014:	e0fffc17 	ldw	r3,-16(fp)
 8002018:	e0bffa17 	ldw	r2,-24(fp)
 800201c:	188dc83a 	sub	r6,r3,r2
 8002020:	e0fffd17 	ldw	r3,-12(fp)
 8002024:	e0bff917 	ldw	r2,-28(fp)
 8002028:	1887c83a 	sub	r3,r3,r2
 800202c:	e0bfff17 	ldw	r2,-4(fp)
 8002030:	d8800015 	stw	r2,0(sp)
 8002034:	180f883a 	mov	r7,r3
 8002038:	80019780 	call	8001978 <Drawline>


        if (err <= 0)
 800203c:	e0bffb17 	ldw	r2,-20(fp)
 8002040:	00800916 	blt	zero,r2,8002068 <drawSolidcircle+0x160>
        {
            y += 1;
 8002044:	e0bffa17 	ldw	r2,-24(fp)
 8002048:	10800044 	addi	r2,r2,1
 800204c:	e0bffa15 	stw	r2,-24(fp)
            err += 2*y + 1;
 8002050:	e0bffa17 	ldw	r2,-24(fp)
 8002054:	1085883a 	add	r2,r2,r2
 8002058:	10800044 	addi	r2,r2,1
 800205c:	e0fffb17 	ldw	r3,-20(fp)
 8002060:	1885883a 	add	r2,r3,r2
 8002064:	e0bffb15 	stw	r2,-20(fp)
        }
        if (err > 0)
 8002068:	e0bffb17 	ldw	r2,-20(fp)
 800206c:	0080090e 	bge	zero,r2,8002094 <drawSolidcircle+0x18c>
        {
            x -= 1;
 8002070:	e0bff917 	ldw	r2,-28(fp)
 8002074:	10bfffc4 	addi	r2,r2,-1
 8002078:	e0bff915 	stw	r2,-28(fp)
            err -= 2*x + 1;
 800207c:	e0bff917 	ldw	r2,-28(fp)
 8002080:	1085883a 	add	r2,r2,r2
 8002084:	0084303a 	nor	r2,zero,r2
 8002088:	e0fffb17 	ldw	r3,-20(fp)
 800208c:	1885883a 	add	r2,r3,r2
 8002090:	e0bffb15 	stw	r2,-20(fp)
{
    int x = radius;
    int y = 0;
    int err = 0;

    while (x >= y)
 8002094:	e0fff917 	ldw	r3,-28(fp)
 8002098:	e0bffa17 	ldw	r2,-24(fp)
 800209c:	18bfa70e 	bge	r3,r2,8001f3c <__alt_data_end+0xfc001f3c>
        {
            x -= 1;
            err -= 2*x + 1;
        }
    }
}
 80020a0:	e037883a 	mov	sp,fp
 80020a4:	dfc00117 	ldw	ra,4(sp)
 80020a8:	df000017 	ldw	fp,0(sp)
 80020ac:	dec00204 	addi	sp,sp,8
 80020b0:	f800283a 	ret

080020b4 <__adddf3>:
 80020b4:	02000434 	movhi	r8,16
 80020b8:	423fffc4 	addi	r8,r8,-1
 80020bc:	defffb04 	addi	sp,sp,-20
 80020c0:	2a12703a 	and	r9,r5,r8
 80020c4:	2806d7fa 	srli	r3,r5,31
 80020c8:	3a10703a 	and	r8,r7,r8
 80020cc:	3804d53a 	srli	r2,r7,20
 80020d0:	3014d77a 	srli	r10,r6,29
 80020d4:	dc000015 	stw	r16,0(sp)
 80020d8:	481290fa 	slli	r9,r9,3
 80020dc:	2820d53a 	srli	r16,r5,20
 80020e0:	401090fa 	slli	r8,r8,3
 80020e4:	200ad77a 	srli	r5,r4,29
 80020e8:	380ed7fa 	srli	r7,r7,31
 80020ec:	dc800215 	stw	r18,8(sp)
 80020f0:	dc400115 	stw	r17,4(sp)
 80020f4:	dfc00415 	stw	ra,16(sp)
 80020f8:	dcc00315 	stw	r19,12(sp)
 80020fc:	1c803fcc 	andi	r18,r3,255
 8002100:	8401ffcc 	andi	r16,r16,2047
 8002104:	494ab03a 	or	r5,r9,r5
 8002108:	202290fa 	slli	r17,r4,3
 800210c:	1081ffcc 	andi	r2,r2,2047
 8002110:	4290b03a 	or	r8,r8,r10
 8002114:	300c90fa 	slli	r6,r6,3
 8002118:	91c07026 	beq	r18,r7,80022dc <__adddf3+0x228>
 800211c:	8087c83a 	sub	r3,r16,r2
 8002120:	00c0b30e 	bge	zero,r3,80023f0 <__adddf3+0x33c>
 8002124:	10002a1e 	bne	r2,zero,80021d0 <__adddf3+0x11c>
 8002128:	4184b03a 	or	r2,r8,r6
 800212c:	1000991e 	bne	r2,zero,8002394 <__adddf3+0x2e0>
 8002130:	888001cc 	andi	r2,r17,7
 8002134:	10005b26 	beq	r2,zero,80022a4 <__adddf3+0x1f0>
 8002138:	88c003cc 	andi	r3,r17,15
 800213c:	00800104 	movi	r2,4
 8002140:	18805826 	beq	r3,r2,80022a4 <__adddf3+0x1f0>
 8002144:	89800104 	addi	r6,r17,4
 8002148:	3463803a 	cmpltu	r17,r6,r17
 800214c:	2c4b883a 	add	r5,r5,r17
 8002150:	2880202c 	andhi	r2,r5,128
 8002154:	9007883a 	mov	r3,r18
 8002158:	3023883a 	mov	r17,r6
 800215c:	10005426 	beq	r2,zero,80022b0 <__adddf3+0x1fc>
 8002160:	84000044 	addi	r16,r16,1
 8002164:	0081ffc4 	movi	r2,2047
 8002168:	8080c126 	beq	r16,r2,8002470 <__adddf3+0x3bc>
 800216c:	013fe034 	movhi	r4,65408
 8002170:	213fffc4 	addi	r4,r4,-1
 8002174:	290a703a 	and	r5,r5,r4
 8002178:	2804977a 	slli	r2,r5,29
 800217c:	280a927a 	slli	r5,r5,9
 8002180:	8822d0fa 	srli	r17,r17,3
 8002184:	8401ffcc 	andi	r16,r16,2047
 8002188:	2808d33a 	srli	r4,r5,12
 800218c:	1444b03a 	or	r2,r2,r17
 8002190:	8401ffcc 	andi	r16,r16,2047
 8002194:	800a953a 	slli	r5,r16,20
 8002198:	18c03fcc 	andi	r3,r3,255
 800219c:	04000434 	movhi	r16,16
 80021a0:	180697fa 	slli	r3,r3,31
 80021a4:	843fffc4 	addi	r16,r16,-1
 80021a8:	2420703a 	and	r16,r4,r16
 80021ac:	8160b03a 	or	r16,r16,r5
 80021b0:	80c6b03a 	or	r3,r16,r3
 80021b4:	dfc00417 	ldw	ra,16(sp)
 80021b8:	dcc00317 	ldw	r19,12(sp)
 80021bc:	dc800217 	ldw	r18,8(sp)
 80021c0:	dc400117 	ldw	r17,4(sp)
 80021c4:	dc000017 	ldw	r16,0(sp)
 80021c8:	dec00504 	addi	sp,sp,20
 80021cc:	f800283a 	ret
 80021d0:	0081ffc4 	movi	r2,2047
 80021d4:	80bfd626 	beq	r16,r2,8002130 <__alt_data_end+0xfc002130>
 80021d8:	42002034 	orhi	r8,r8,128
 80021dc:	00800e04 	movi	r2,56
 80021e0:	10c0a616 	blt	r2,r3,800247c <__adddf3+0x3c8>
 80021e4:	008007c4 	movi	r2,31
 80021e8:	10c0c916 	blt	r2,r3,8002510 <__adddf3+0x45c>
 80021ec:	00800804 	movi	r2,32
 80021f0:	10c5c83a 	sub	r2,r2,r3
 80021f4:	408e983a 	sll	r7,r8,r2
 80021f8:	30c8d83a 	srl	r4,r6,r3
 80021fc:	3084983a 	sll	r2,r6,r2
 8002200:	40c6d83a 	srl	r3,r8,r3
 8002204:	390cb03a 	or	r6,r7,r4
 8002208:	1004c03a 	cmpne	r2,r2,zero
 800220c:	308cb03a 	or	r6,r6,r2
 8002210:	898dc83a 	sub	r6,r17,r6
 8002214:	89a3803a 	cmpltu	r17,r17,r6
 8002218:	28cbc83a 	sub	r5,r5,r3
 800221c:	2c4bc83a 	sub	r5,r5,r17
 8002220:	3023883a 	mov	r17,r6
 8002224:	2880202c 	andhi	r2,r5,128
 8002228:	10006d26 	beq	r2,zero,80023e0 <__adddf3+0x32c>
 800222c:	04c02034 	movhi	r19,128
 8002230:	9cffffc4 	addi	r19,r19,-1
 8002234:	2ce6703a 	and	r19,r5,r19
 8002238:	98007e26 	beq	r19,zero,8002434 <__adddf3+0x380>
 800223c:	9809883a 	mov	r4,r19
 8002240:	8003d240 	call	8003d24 <__clzsi2>
 8002244:	10fffe04 	addi	r3,r2,-8
 8002248:	010007c4 	movi	r4,31
 800224c:	20c07f16 	blt	r4,r3,800244c <__adddf3+0x398>
 8002250:	01400a04 	movi	r5,40
 8002254:	2885c83a 	sub	r2,r5,r2
 8002258:	888ad83a 	srl	r5,r17,r2
 800225c:	98e6983a 	sll	r19,r19,r3
 8002260:	88e2983a 	sll	r17,r17,r3
 8002264:	2ce6b03a 	or	r19,r5,r19
 8002268:	1c007c16 	blt	r3,r16,800245c <__adddf3+0x3a8>
 800226c:	1c21c83a 	sub	r16,r3,r16
 8002270:	81400044 	addi	r5,r16,1
 8002274:	00c007c4 	movi	r3,31
 8002278:	19409816 	blt	r3,r5,80024dc <__adddf3+0x428>
 800227c:	1c21c83a 	sub	r16,r3,r16
 8002280:	8c08983a 	sll	r4,r17,r16
 8002284:	8946d83a 	srl	r3,r17,r5
 8002288:	9c20983a 	sll	r16,r19,r16
 800228c:	2008c03a 	cmpne	r4,r4,zero
 8002290:	994ad83a 	srl	r5,r19,r5
 8002294:	1c06b03a 	or	r3,r3,r16
 8002298:	1922b03a 	or	r17,r3,r4
 800229c:	0021883a 	mov	r16,zero
 80022a0:	003fa306 	br	8002130 <__alt_data_end+0xfc002130>
 80022a4:	2880202c 	andhi	r2,r5,128
 80022a8:	9007883a 	mov	r3,r18
 80022ac:	103fac1e 	bne	r2,zero,8002160 <__alt_data_end+0xfc002160>
 80022b0:	2804977a 	slli	r2,r5,29
 80022b4:	8822d0fa 	srli	r17,r17,3
 80022b8:	0101ffc4 	movi	r4,2047
 80022bc:	280ad0fa 	srli	r5,r5,3
 80022c0:	1444b03a 	or	r2,r2,r17
 80022c4:	81002c26 	beq	r16,r4,8002378 <__adddf3+0x2c4>
 80022c8:	8120703a 	and	r16,r16,r4
 80022cc:	01000434 	movhi	r4,16
 80022d0:	213fffc4 	addi	r4,r4,-1
 80022d4:	2908703a 	and	r4,r5,r4
 80022d8:	003fad06 	br	8002190 <__alt_data_end+0xfc002190>
 80022dc:	8089c83a 	sub	r4,r16,r2
 80022e0:	01006a0e 	bge	zero,r4,800248c <__adddf3+0x3d8>
 80022e4:	10003326 	beq	r2,zero,80023b4 <__adddf3+0x300>
 80022e8:	0081ffc4 	movi	r2,2047
 80022ec:	80bf9026 	beq	r16,r2,8002130 <__alt_data_end+0xfc002130>
 80022f0:	42002034 	orhi	r8,r8,128
 80022f4:	00800e04 	movi	r2,56
 80022f8:	1100b116 	blt	r2,r4,80025c0 <__adddf3+0x50c>
 80022fc:	008007c4 	movi	r2,31
 8002300:	1100e216 	blt	r2,r4,800268c <__adddf3+0x5d8>
 8002304:	00800804 	movi	r2,32
 8002308:	1105c83a 	sub	r2,r2,r4
 800230c:	4092983a 	sll	r9,r8,r2
 8002310:	310ed83a 	srl	r7,r6,r4
 8002314:	3084983a 	sll	r2,r6,r2
 8002318:	4110d83a 	srl	r8,r8,r4
 800231c:	49ccb03a 	or	r6,r9,r7
 8002320:	1004c03a 	cmpne	r2,r2,zero
 8002324:	308cb03a 	or	r6,r6,r2
 8002328:	344d883a 	add	r6,r6,r17
 800232c:	3463803a 	cmpltu	r17,r6,r17
 8002330:	414b883a 	add	r5,r8,r5
 8002334:	2c4b883a 	add	r5,r5,r17
 8002338:	3023883a 	mov	r17,r6
 800233c:	2880202c 	andhi	r2,r5,128
 8002340:	10002726 	beq	r2,zero,80023e0 <__adddf3+0x32c>
 8002344:	84000044 	addi	r16,r16,1
 8002348:	0081ffc4 	movi	r2,2047
 800234c:	8080ae26 	beq	r16,r2,8002608 <__adddf3+0x554>
 8002350:	00bfe034 	movhi	r2,65408
 8002354:	10bfffc4 	addi	r2,r2,-1
 8002358:	288a703a 	and	r5,r5,r2
 800235c:	880cd07a 	srli	r6,r17,1
 8002360:	280897fa 	slli	r4,r5,31
 8002364:	88c0004c 	andi	r3,r17,1
 8002368:	30e2b03a 	or	r17,r6,r3
 800236c:	280ad07a 	srli	r5,r5,1
 8002370:	8922b03a 	or	r17,r17,r4
 8002374:	003f6e06 	br	8002130 <__alt_data_end+0xfc002130>
 8002378:	1148b03a 	or	r4,r2,r5
 800237c:	20003c26 	beq	r4,zero,8002470 <__adddf3+0x3bc>
 8002380:	29000234 	orhi	r4,r5,8
 8002384:	01400434 	movhi	r5,16
 8002388:	297fffc4 	addi	r5,r5,-1
 800238c:	2148703a 	and	r4,r4,r5
 8002390:	003f7f06 	br	8002190 <__alt_data_end+0xfc002190>
 8002394:	18ffffc4 	addi	r3,r3,-1
 8002398:	18004d1e 	bne	r3,zero,80024d0 <__adddf3+0x41c>
 800239c:	898dc83a 	sub	r6,r17,r6
 80023a0:	89a3803a 	cmpltu	r17,r17,r6
 80023a4:	2a0bc83a 	sub	r5,r5,r8
 80023a8:	2c4bc83a 	sub	r5,r5,r17
 80023ac:	3023883a 	mov	r17,r6
 80023b0:	003f9c06 	br	8002224 <__alt_data_end+0xfc002224>
 80023b4:	4184b03a 	or	r2,r8,r6
 80023b8:	103f5d26 	beq	r2,zero,8002130 <__alt_data_end+0xfc002130>
 80023bc:	213fffc4 	addi	r4,r4,-1
 80023c0:	203fd926 	beq	r4,zero,8002328 <__alt_data_end+0xfc002328>
 80023c4:	0081ffc4 	movi	r2,2047
 80023c8:	80bfca1e 	bne	r16,r2,80022f4 <__alt_data_end+0xfc0022f4>
 80023cc:	003f5806 	br	8002130 <__alt_data_end+0xfc002130>
 80023d0:	10c8b03a 	or	r4,r2,r3
 80023d4:	20008b26 	beq	r4,zero,8002604 <__adddf3+0x550>
 80023d8:	100b883a 	mov	r5,r2
 80023dc:	1823883a 	mov	r17,r3
 80023e0:	888001cc 	andi	r2,r17,7
 80023e4:	103f541e 	bne	r2,zero,8002138 <__alt_data_end+0xfc002138>
 80023e8:	9007883a 	mov	r3,r18
 80023ec:	003fb006 	br	80022b0 <__alt_data_end+0xfc0022b0>
 80023f0:	1800531e 	bne	r3,zero,8002540 <__adddf3+0x48c>
 80023f4:	80800044 	addi	r2,r16,1
 80023f8:	1081ffcc 	andi	r2,r2,2047
 80023fc:	00c00044 	movi	r3,1
 8002400:	1880990e 	bge	r3,r2,8002668 <__adddf3+0x5b4>
 8002404:	8985c83a 	sub	r2,r17,r6
 8002408:	8887803a 	cmpltu	r3,r17,r2
 800240c:	2a27c83a 	sub	r19,r5,r8
 8002410:	98e7c83a 	sub	r19,r19,r3
 8002414:	98c0202c 	andhi	r3,r19,128
 8002418:	18006226 	beq	r3,zero,80025a4 <__adddf3+0x4f0>
 800241c:	3463c83a 	sub	r17,r6,r17
 8002420:	4151c83a 	sub	r8,r8,r5
 8002424:	344d803a 	cmpltu	r6,r6,r17
 8002428:	41a7c83a 	sub	r19,r8,r6
 800242c:	3825883a 	mov	r18,r7
 8002430:	983f821e 	bne	r19,zero,800223c <__alt_data_end+0xfc00223c>
 8002434:	8809883a 	mov	r4,r17
 8002438:	8003d240 	call	8003d24 <__clzsi2>
 800243c:	10800804 	addi	r2,r2,32
 8002440:	10fffe04 	addi	r3,r2,-8
 8002444:	010007c4 	movi	r4,31
 8002448:	20ff810e 	bge	r4,r3,8002250 <__alt_data_end+0xfc002250>
 800244c:	14fff604 	addi	r19,r2,-40
 8002450:	8ce6983a 	sll	r19,r17,r19
 8002454:	0023883a 	mov	r17,zero
 8002458:	1c3f840e 	bge	r3,r16,800226c <__alt_data_end+0xfc00226c>
 800245c:	017fe034 	movhi	r5,65408
 8002460:	297fffc4 	addi	r5,r5,-1
 8002464:	80e1c83a 	sub	r16,r16,r3
 8002468:	994a703a 	and	r5,r19,r5
 800246c:	003f3006 	br	8002130 <__alt_data_end+0xfc002130>
 8002470:	0009883a 	mov	r4,zero
 8002474:	0005883a 	mov	r2,zero
 8002478:	003f4506 	br	8002190 <__alt_data_end+0xfc002190>
 800247c:	418cb03a 	or	r6,r8,r6
 8002480:	300cc03a 	cmpne	r6,r6,zero
 8002484:	0007883a 	mov	r3,zero
 8002488:	003f6106 	br	8002210 <__alt_data_end+0xfc002210>
 800248c:	2000921e 	bne	r4,zero,80026d8 <__adddf3+0x624>
 8002490:	80800044 	addi	r2,r16,1
 8002494:	11c1ffcc 	andi	r7,r2,2047
 8002498:	01000044 	movi	r4,1
 800249c:	21c0610e 	bge	r4,r7,8002624 <__adddf3+0x570>
 80024a0:	0101ffc4 	movi	r4,2047
 80024a4:	1100a326 	beq	r2,r4,8002734 <__adddf3+0x680>
 80024a8:	344d883a 	add	r6,r6,r17
 80024ac:	3463803a 	cmpltu	r17,r6,r17
 80024b0:	414b883a 	add	r5,r8,r5
 80024b4:	2c4b883a 	add	r5,r5,r17
 80024b8:	282297fa 	slli	r17,r5,31
 80024bc:	300cd07a 	srli	r6,r6,1
 80024c0:	280ad07a 	srli	r5,r5,1
 80024c4:	1021883a 	mov	r16,r2
 80024c8:	89a2b03a 	or	r17,r17,r6
 80024cc:	003f1806 	br	8002130 <__alt_data_end+0xfc002130>
 80024d0:	0081ffc4 	movi	r2,2047
 80024d4:	80bf411e 	bne	r16,r2,80021dc <__alt_data_end+0xfc0021dc>
 80024d8:	003f1506 	br	8002130 <__alt_data_end+0xfc002130>
 80024dc:	80bff844 	addi	r2,r16,-31
 80024e0:	00c00804 	movi	r3,32
 80024e4:	9884d83a 	srl	r2,r19,r2
 80024e8:	28c04a26 	beq	r5,r3,8002614 <__adddf3+0x560>
 80024ec:	00c00fc4 	movi	r3,63
 80024f0:	1c21c83a 	sub	r16,r3,r16
 80024f4:	9c26983a 	sll	r19,r19,r16
 80024f8:	9c62b03a 	or	r17,r19,r17
 80024fc:	8822c03a 	cmpne	r17,r17,zero
 8002500:	88a2b03a 	or	r17,r17,r2
 8002504:	000b883a 	mov	r5,zero
 8002508:	0021883a 	mov	r16,zero
 800250c:	003fb406 	br	80023e0 <__alt_data_end+0xfc0023e0>
 8002510:	18bff804 	addi	r2,r3,-32
 8002514:	01000804 	movi	r4,32
 8002518:	4084d83a 	srl	r2,r8,r2
 800251c:	19003f26 	beq	r3,r4,800261c <__adddf3+0x568>
 8002520:	01001004 	movi	r4,64
 8002524:	20c7c83a 	sub	r3,r4,r3
 8002528:	40d0983a 	sll	r8,r8,r3
 800252c:	418cb03a 	or	r6,r8,r6
 8002530:	300cc03a 	cmpne	r6,r6,zero
 8002534:	308cb03a 	or	r6,r6,r2
 8002538:	0007883a 	mov	r3,zero
 800253c:	003f3406 	br	8002210 <__alt_data_end+0xfc002210>
 8002540:	80002326 	beq	r16,zero,80025d0 <__adddf3+0x51c>
 8002544:	0101ffc4 	movi	r4,2047
 8002548:	11005e26 	beq	r2,r4,80026c4 <__adddf3+0x610>
 800254c:	00c7c83a 	sub	r3,zero,r3
 8002550:	29402034 	orhi	r5,r5,128
 8002554:	01000e04 	movi	r4,56
 8002558:	20c07216 	blt	r4,r3,8002724 <__adddf3+0x670>
 800255c:	010007c4 	movi	r4,31
 8002560:	20c0ce16 	blt	r4,r3,800289c <__adddf3+0x7e8>
 8002564:	01000804 	movi	r4,32
 8002568:	20c9c83a 	sub	r4,r4,r3
 800256c:	2914983a 	sll	r10,r5,r4
 8002570:	88d2d83a 	srl	r9,r17,r3
 8002574:	8908983a 	sll	r4,r17,r4
 8002578:	28c6d83a 	srl	r3,r5,r3
 800257c:	5262b03a 	or	r17,r10,r9
 8002580:	2008c03a 	cmpne	r4,r4,zero
 8002584:	8922b03a 	or	r17,r17,r4
 8002588:	3463c83a 	sub	r17,r6,r17
 800258c:	40c7c83a 	sub	r3,r8,r3
 8002590:	344d803a 	cmpltu	r6,r6,r17
 8002594:	198bc83a 	sub	r5,r3,r6
 8002598:	1021883a 	mov	r16,r2
 800259c:	3825883a 	mov	r18,r7
 80025a0:	003f2006 	br	8002224 <__alt_data_end+0xfc002224>
 80025a4:	9886b03a 	or	r3,r19,r2
 80025a8:	1800141e 	bne	r3,zero,80025fc <__adddf3+0x548>
 80025ac:	0007883a 	mov	r3,zero
 80025b0:	000b883a 	mov	r5,zero
 80025b4:	0023883a 	mov	r17,zero
 80025b8:	0021883a 	mov	r16,zero
 80025bc:	003f3c06 	br	80022b0 <__alt_data_end+0xfc0022b0>
 80025c0:	418cb03a 	or	r6,r8,r6
 80025c4:	300cc03a 	cmpne	r6,r6,zero
 80025c8:	0011883a 	mov	r8,zero
 80025cc:	003f5606 	br	8002328 <__alt_data_end+0xfc002328>
 80025d0:	2c48b03a 	or	r4,r5,r17
 80025d4:	20003b26 	beq	r4,zero,80026c4 <__adddf3+0x610>
 80025d8:	00c6303a 	nor	r3,zero,r3
 80025dc:	1800371e 	bne	r3,zero,80026bc <__adddf3+0x608>
 80025e0:	3463c83a 	sub	r17,r6,r17
 80025e4:	414bc83a 	sub	r5,r8,r5
 80025e8:	344d803a 	cmpltu	r6,r6,r17
 80025ec:	298bc83a 	sub	r5,r5,r6
 80025f0:	1021883a 	mov	r16,r2
 80025f4:	3825883a 	mov	r18,r7
 80025f8:	003f0a06 	br	8002224 <__alt_data_end+0xfc002224>
 80025fc:	1023883a 	mov	r17,r2
 8002600:	003f0d06 	br	8002238 <__alt_data_end+0xfc002238>
 8002604:	0007883a 	mov	r3,zero
 8002608:	000b883a 	mov	r5,zero
 800260c:	0023883a 	mov	r17,zero
 8002610:	003f2706 	br	80022b0 <__alt_data_end+0xfc0022b0>
 8002614:	0027883a 	mov	r19,zero
 8002618:	003fb706 	br	80024f8 <__alt_data_end+0xfc0024f8>
 800261c:	0011883a 	mov	r8,zero
 8002620:	003fc206 	br	800252c <__alt_data_end+0xfc00252c>
 8002624:	2c44b03a 	or	r2,r5,r17
 8002628:	8000871e 	bne	r16,zero,8002848 <__adddf3+0x794>
 800262c:	1000b126 	beq	r2,zero,80028f4 <__adddf3+0x840>
 8002630:	4184b03a 	or	r2,r8,r6
 8002634:	103ebe26 	beq	r2,zero,8002130 <__alt_data_end+0xfc002130>
 8002638:	3445883a 	add	r2,r6,r17
 800263c:	1463803a 	cmpltu	r17,r2,r17
 8002640:	414b883a 	add	r5,r8,r5
 8002644:	2c4b883a 	add	r5,r5,r17
 8002648:	28c0202c 	andhi	r3,r5,128
 800264c:	1023883a 	mov	r17,r2
 8002650:	183f6326 	beq	r3,zero,80023e0 <__alt_data_end+0xfc0023e0>
 8002654:	00bfe034 	movhi	r2,65408
 8002658:	10bfffc4 	addi	r2,r2,-1
 800265c:	2021883a 	mov	r16,r4
 8002660:	288a703a 	and	r5,r5,r2
 8002664:	003eb206 	br	8002130 <__alt_data_end+0xfc002130>
 8002668:	2c44b03a 	or	r2,r5,r17
 800266c:	8000251e 	bne	r16,zero,8002704 <__adddf3+0x650>
 8002670:	10004b1e 	bne	r2,zero,80027a0 <__adddf3+0x6ec>
 8002674:	4184b03a 	or	r2,r8,r6
 8002678:	103fe226 	beq	r2,zero,8002604 <__alt_data_end+0xfc002604>
 800267c:	400b883a 	mov	r5,r8
 8002680:	3023883a 	mov	r17,r6
 8002684:	3825883a 	mov	r18,r7
 8002688:	003ea906 	br	8002130 <__alt_data_end+0xfc002130>
 800268c:	20bff804 	addi	r2,r4,-32
 8002690:	01c00804 	movi	r7,32
 8002694:	4084d83a 	srl	r2,r8,r2
 8002698:	21c07e26 	beq	r4,r7,8002894 <__adddf3+0x7e0>
 800269c:	01c01004 	movi	r7,64
 80026a0:	3909c83a 	sub	r4,r7,r4
 80026a4:	4110983a 	sll	r8,r8,r4
 80026a8:	418cb03a 	or	r6,r8,r6
 80026ac:	300cc03a 	cmpne	r6,r6,zero
 80026b0:	308cb03a 	or	r6,r6,r2
 80026b4:	0011883a 	mov	r8,zero
 80026b8:	003f1b06 	br	8002328 <__alt_data_end+0xfc002328>
 80026bc:	0101ffc4 	movi	r4,2047
 80026c0:	113fa41e 	bne	r2,r4,8002554 <__alt_data_end+0xfc002554>
 80026c4:	400b883a 	mov	r5,r8
 80026c8:	3023883a 	mov	r17,r6
 80026cc:	1021883a 	mov	r16,r2
 80026d0:	3825883a 	mov	r18,r7
 80026d4:	003e9606 	br	8002130 <__alt_data_end+0xfc002130>
 80026d8:	80001a1e 	bne	r16,zero,8002744 <__adddf3+0x690>
 80026dc:	2c4eb03a 	or	r7,r5,r17
 80026e0:	38005526 	beq	r7,zero,8002838 <__adddf3+0x784>
 80026e4:	0108303a 	nor	r4,zero,r4
 80026e8:	2000511e 	bne	r4,zero,8002830 <__adddf3+0x77c>
 80026ec:	89a3883a 	add	r17,r17,r6
 80026f0:	414b883a 	add	r5,r8,r5
 80026f4:	898d803a 	cmpltu	r6,r17,r6
 80026f8:	298b883a 	add	r5,r5,r6
 80026fc:	1021883a 	mov	r16,r2
 8002700:	003f0e06 	br	800233c <__alt_data_end+0xfc00233c>
 8002704:	1000341e 	bne	r2,zero,80027d8 <__adddf3+0x724>
 8002708:	4184b03a 	or	r2,r8,r6
 800270c:	10006f26 	beq	r2,zero,80028cc <__adddf3+0x818>
 8002710:	400b883a 	mov	r5,r8
 8002714:	3023883a 	mov	r17,r6
 8002718:	3825883a 	mov	r18,r7
 800271c:	0401ffc4 	movi	r16,2047
 8002720:	003e8306 	br	8002130 <__alt_data_end+0xfc002130>
 8002724:	2c62b03a 	or	r17,r5,r17
 8002728:	8822c03a 	cmpne	r17,r17,zero
 800272c:	0007883a 	mov	r3,zero
 8002730:	003f9506 	br	8002588 <__alt_data_end+0xfc002588>
 8002734:	1021883a 	mov	r16,r2
 8002738:	000b883a 	mov	r5,zero
 800273c:	0023883a 	mov	r17,zero
 8002740:	003edb06 	br	80022b0 <__alt_data_end+0xfc0022b0>
 8002744:	01c1ffc4 	movi	r7,2047
 8002748:	11c03b26 	beq	r2,r7,8002838 <__adddf3+0x784>
 800274c:	0109c83a 	sub	r4,zero,r4
 8002750:	29402034 	orhi	r5,r5,128
 8002754:	01c00e04 	movi	r7,56
 8002758:	39006216 	blt	r7,r4,80028e4 <__adddf3+0x830>
 800275c:	01c007c4 	movi	r7,31
 8002760:	39006b16 	blt	r7,r4,8002910 <__adddf3+0x85c>
 8002764:	01c00804 	movi	r7,32
 8002768:	390fc83a 	sub	r7,r7,r4
 800276c:	29d4983a 	sll	r10,r5,r7
 8002770:	8912d83a 	srl	r9,r17,r4
 8002774:	89ce983a 	sll	r7,r17,r7
 8002778:	2908d83a 	srl	r4,r5,r4
 800277c:	5262b03a 	or	r17,r10,r9
 8002780:	380ac03a 	cmpne	r5,r7,zero
 8002784:	8962b03a 	or	r17,r17,r5
 8002788:	89a3883a 	add	r17,r17,r6
 800278c:	2211883a 	add	r8,r4,r8
 8002790:	898d803a 	cmpltu	r6,r17,r6
 8002794:	418b883a 	add	r5,r8,r6
 8002798:	1021883a 	mov	r16,r2
 800279c:	003ee706 	br	800233c <__alt_data_end+0xfc00233c>
 80027a0:	4184b03a 	or	r2,r8,r6
 80027a4:	103e6226 	beq	r2,zero,8002130 <__alt_data_end+0xfc002130>
 80027a8:	8987c83a 	sub	r3,r17,r6
 80027ac:	88c9803a 	cmpltu	r4,r17,r3
 80027b0:	2a05c83a 	sub	r2,r5,r8
 80027b4:	1105c83a 	sub	r2,r2,r4
 80027b8:	1100202c 	andhi	r4,r2,128
 80027bc:	203f0426 	beq	r4,zero,80023d0 <__alt_data_end+0xfc0023d0>
 80027c0:	3463c83a 	sub	r17,r6,r17
 80027c4:	414bc83a 	sub	r5,r8,r5
 80027c8:	344d803a 	cmpltu	r6,r6,r17
 80027cc:	298bc83a 	sub	r5,r5,r6
 80027d0:	3825883a 	mov	r18,r7
 80027d4:	003e5606 	br	8002130 <__alt_data_end+0xfc002130>
 80027d8:	4184b03a 	or	r2,r8,r6
 80027dc:	10002b26 	beq	r2,zero,800288c <__adddf3+0x7d8>
 80027e0:	2804d0fa 	srli	r2,r5,3
 80027e4:	8822d0fa 	srli	r17,r17,3
 80027e8:	280a977a 	slli	r5,r5,29
 80027ec:	10c0022c 	andhi	r3,r2,8
 80027f0:	2c62b03a 	or	r17,r5,r17
 80027f4:	18000826 	beq	r3,zero,8002818 <__adddf3+0x764>
 80027f8:	4008d0fa 	srli	r4,r8,3
 80027fc:	20c0022c 	andhi	r3,r4,8
 8002800:	1800051e 	bne	r3,zero,8002818 <__adddf3+0x764>
 8002804:	300cd0fa 	srli	r6,r6,3
 8002808:	4010977a 	slli	r8,r8,29
 800280c:	2005883a 	mov	r2,r4
 8002810:	3825883a 	mov	r18,r7
 8002814:	41a2b03a 	or	r17,r8,r6
 8002818:	880ad77a 	srli	r5,r17,29
 800281c:	100490fa 	slli	r2,r2,3
 8002820:	882290fa 	slli	r17,r17,3
 8002824:	0401ffc4 	movi	r16,2047
 8002828:	288ab03a 	or	r5,r5,r2
 800282c:	003e4006 	br	8002130 <__alt_data_end+0xfc002130>
 8002830:	01c1ffc4 	movi	r7,2047
 8002834:	11ffc71e 	bne	r2,r7,8002754 <__alt_data_end+0xfc002754>
 8002838:	400b883a 	mov	r5,r8
 800283c:	3023883a 	mov	r17,r6
 8002840:	1021883a 	mov	r16,r2
 8002844:	003e3a06 	br	8002130 <__alt_data_end+0xfc002130>
 8002848:	10002d26 	beq	r2,zero,8002900 <__adddf3+0x84c>
 800284c:	4184b03a 	or	r2,r8,r6
 8002850:	10000e26 	beq	r2,zero,800288c <__adddf3+0x7d8>
 8002854:	2804d0fa 	srli	r2,r5,3
 8002858:	8822d0fa 	srli	r17,r17,3
 800285c:	280a977a 	slli	r5,r5,29
 8002860:	10c0022c 	andhi	r3,r2,8
 8002864:	2c62b03a 	or	r17,r5,r17
 8002868:	183feb26 	beq	r3,zero,8002818 <__alt_data_end+0xfc002818>
 800286c:	4008d0fa 	srli	r4,r8,3
 8002870:	20c0022c 	andhi	r3,r4,8
 8002874:	183fe81e 	bne	r3,zero,8002818 <__alt_data_end+0xfc002818>
 8002878:	300cd0fa 	srli	r6,r6,3
 800287c:	4010977a 	slli	r8,r8,29
 8002880:	2005883a 	mov	r2,r4
 8002884:	41a2b03a 	or	r17,r8,r6
 8002888:	003fe306 	br	8002818 <__alt_data_end+0xfc002818>
 800288c:	0401ffc4 	movi	r16,2047
 8002890:	003e2706 	br	8002130 <__alt_data_end+0xfc002130>
 8002894:	0011883a 	mov	r8,zero
 8002898:	003f8306 	br	80026a8 <__alt_data_end+0xfc0026a8>
 800289c:	193ff804 	addi	r4,r3,-32
 80028a0:	02400804 	movi	r9,32
 80028a4:	2908d83a 	srl	r4,r5,r4
 80028a8:	1a402526 	beq	r3,r9,8002940 <__adddf3+0x88c>
 80028ac:	02401004 	movi	r9,64
 80028b0:	48c7c83a 	sub	r3,r9,r3
 80028b4:	28ca983a 	sll	r5,r5,r3
 80028b8:	2c62b03a 	or	r17,r5,r17
 80028bc:	8822c03a 	cmpne	r17,r17,zero
 80028c0:	8922b03a 	or	r17,r17,r4
 80028c4:	0007883a 	mov	r3,zero
 80028c8:	003f2f06 	br	8002588 <__alt_data_end+0xfc002588>
 80028cc:	01402034 	movhi	r5,128
 80028d0:	0007883a 	mov	r3,zero
 80028d4:	297fffc4 	addi	r5,r5,-1
 80028d8:	047ffe04 	movi	r17,-8
 80028dc:	0401ffc4 	movi	r16,2047
 80028e0:	003e7306 	br	80022b0 <__alt_data_end+0xfc0022b0>
 80028e4:	2c62b03a 	or	r17,r5,r17
 80028e8:	8822c03a 	cmpne	r17,r17,zero
 80028ec:	0009883a 	mov	r4,zero
 80028f0:	003fa506 	br	8002788 <__alt_data_end+0xfc002788>
 80028f4:	400b883a 	mov	r5,r8
 80028f8:	3023883a 	mov	r17,r6
 80028fc:	003e0c06 	br	8002130 <__alt_data_end+0xfc002130>
 8002900:	400b883a 	mov	r5,r8
 8002904:	3023883a 	mov	r17,r6
 8002908:	0401ffc4 	movi	r16,2047
 800290c:	003e0806 	br	8002130 <__alt_data_end+0xfc002130>
 8002910:	21fff804 	addi	r7,r4,-32
 8002914:	02400804 	movi	r9,32
 8002918:	29ced83a 	srl	r7,r5,r7
 800291c:	22400a26 	beq	r4,r9,8002948 <__adddf3+0x894>
 8002920:	02401004 	movi	r9,64
 8002924:	4909c83a 	sub	r4,r9,r4
 8002928:	290a983a 	sll	r5,r5,r4
 800292c:	2c62b03a 	or	r17,r5,r17
 8002930:	8822c03a 	cmpne	r17,r17,zero
 8002934:	89e2b03a 	or	r17,r17,r7
 8002938:	0009883a 	mov	r4,zero
 800293c:	003f9206 	br	8002788 <__alt_data_end+0xfc002788>
 8002940:	000b883a 	mov	r5,zero
 8002944:	003fdc06 	br	80028b8 <__alt_data_end+0xfc0028b8>
 8002948:	000b883a 	mov	r5,zero
 800294c:	003ff706 	br	800292c <__alt_data_end+0xfc00292c>

08002950 <__divdf3>:
 8002950:	defff204 	addi	sp,sp,-56
 8002954:	dd000815 	stw	r20,32(sp)
 8002958:	2828d53a 	srli	r20,r5,20
 800295c:	dd800a15 	stw	r22,40(sp)
 8002960:	282cd7fa 	srli	r22,r5,31
 8002964:	dc000415 	stw	r16,16(sp)
 8002968:	04000434 	movhi	r16,16
 800296c:	df000c15 	stw	fp,48(sp)
 8002970:	dcc00715 	stw	r19,28(sp)
 8002974:	dc800615 	stw	r18,24(sp)
 8002978:	dc400515 	stw	r17,20(sp)
 800297c:	843fffc4 	addi	r16,r16,-1
 8002980:	dfc00d15 	stw	ra,52(sp)
 8002984:	ddc00b15 	stw	r23,44(sp)
 8002988:	dd400915 	stw	r21,36(sp)
 800298c:	a501ffcc 	andi	r20,r20,2047
 8002990:	2025883a 	mov	r18,r4
 8002994:	2027883a 	mov	r19,r4
 8002998:	2c22703a 	and	r17,r5,r16
 800299c:	b7003fcc 	andi	fp,r22,255
 80029a0:	a0005e26 	beq	r20,zero,8002b1c <__divdf3+0x1cc>
 80029a4:	0081ffc4 	movi	r2,2047
 80029a8:	a0803526 	beq	r20,r2,8002a80 <__divdf3+0x130>
 80029ac:	8c000434 	orhi	r16,r17,16
 80029b0:	2004d77a 	srli	r2,r4,29
 80029b4:	802090fa 	slli	r16,r16,3
 80029b8:	202690fa 	slli	r19,r4,3
 80029bc:	a53f0044 	addi	r20,r20,-1023
 80029c0:	80a2b03a 	or	r17,r16,r2
 80029c4:	0025883a 	mov	r18,zero
 80029c8:	0011883a 	mov	r8,zero
 80029cc:	380ad53a 	srli	r5,r7,20
 80029d0:	382ed7fa 	srli	r23,r7,31
 80029d4:	04000434 	movhi	r16,16
 80029d8:	843fffc4 	addi	r16,r16,-1
 80029dc:	2941ffcc 	andi	r5,r5,2047
 80029e0:	302b883a 	mov	r21,r6
 80029e4:	3c20703a 	and	r16,r7,r16
 80029e8:	ba403fcc 	andi	r9,r23,255
 80029ec:	28006726 	beq	r5,zero,8002b8c <__divdf3+0x23c>
 80029f0:	0081ffc4 	movi	r2,2047
 80029f4:	28805f26 	beq	r5,r2,8002b74 <__divdf3+0x224>
 80029f8:	84000434 	orhi	r16,r16,16
 80029fc:	3004d77a 	srli	r2,r6,29
 8002a00:	802090fa 	slli	r16,r16,3
 8002a04:	302a90fa 	slli	r21,r6,3
 8002a08:	297f0044 	addi	r5,r5,-1023
 8002a0c:	80a0b03a 	or	r16,r16,r2
 8002a10:	000f883a 	mov	r7,zero
 8002a14:	3c86b03a 	or	r3,r7,r18
 8002a18:	180690ba 	slli	r3,r3,2
 8002a1c:	00820034 	movhi	r2,2048
 8002a20:	108a9004 	addi	r2,r2,10816
 8002a24:	1887883a 	add	r3,r3,r2
 8002a28:	18c00017 	ldw	r3,0(r3)
 8002a2c:	b5c8f03a 	xor	r4,r22,r23
 8002a30:	200d883a 	mov	r6,r4
 8002a34:	24803fcc 	andi	r18,r4,255
 8002a38:	a169c83a 	sub	r20,r20,r5
 8002a3c:	1800683a 	jmp	r3
 8002a40:	08002c88 	cmpgei	zero,at,178
 8002a44:	08002ab8 	rdprs	zero,at,170
 8002a48:	08002c4c 	andi	zero,at,177
 8002a4c:	08002a9c 	xori	zero,at,170
 8002a50:	08002c4c 	andi	zero,at,177
 8002a54:	08002c20 	cmpeqi	zero,at,176
 8002a58:	08002c4c 	andi	zero,at,177
 8002a5c:	08002a9c 	xori	zero,at,170
 8002a60:	08002ab8 	rdprs	zero,at,170
 8002a64:	08002ab8 	rdprs	zero,at,170
 8002a68:	08002c20 	cmpeqi	zero,at,176
 8002a6c:	08002a9c 	xori	zero,at,170
 8002a70:	08002aac 	andhi	zero,at,170
 8002a74:	08002aac 	andhi	zero,at,170
 8002a78:	08002aac 	andhi	zero,at,170
 8002a7c:	08002c5c 	xori	zero,at,177
 8002a80:	8904b03a 	or	r2,r17,r4
 8002a84:	1000631e 	bne	r2,zero,8002c14 <__divdf3+0x2c4>
 8002a88:	04800204 	movi	r18,8
 8002a8c:	0023883a 	mov	r17,zero
 8002a90:	0027883a 	mov	r19,zero
 8002a94:	02000084 	movi	r8,2
 8002a98:	003fcc06 	br	80029cc <__alt_data_end+0xfc0029cc>
 8002a9c:	8023883a 	mov	r17,r16
 8002aa0:	a827883a 	mov	r19,r21
 8002aa4:	4839883a 	mov	fp,r9
 8002aa8:	3811883a 	mov	r8,r7
 8002aac:	00800084 	movi	r2,2
 8002ab0:	40812a1e 	bne	r8,r2,8002f5c <__divdf3+0x60c>
 8002ab4:	e025883a 	mov	r18,fp
 8002ab8:	9180004c 	andi	r6,r18,1
 8002abc:	0101ffc4 	movi	r4,2047
 8002ac0:	000b883a 	mov	r5,zero
 8002ac4:	0027883a 	mov	r19,zero
 8002ac8:	2008953a 	slli	r4,r4,20
 8002acc:	30c03fcc 	andi	r3,r6,255
 8002ad0:	04000434 	movhi	r16,16
 8002ad4:	180697fa 	slli	r3,r3,31
 8002ad8:	843fffc4 	addi	r16,r16,-1
 8002adc:	2c20703a 	and	r16,r5,r16
 8002ae0:	8120b03a 	or	r16,r16,r4
 8002ae4:	80c6b03a 	or	r3,r16,r3
 8002ae8:	9805883a 	mov	r2,r19
 8002aec:	dfc00d17 	ldw	ra,52(sp)
 8002af0:	df000c17 	ldw	fp,48(sp)
 8002af4:	ddc00b17 	ldw	r23,44(sp)
 8002af8:	dd800a17 	ldw	r22,40(sp)
 8002afc:	dd400917 	ldw	r21,36(sp)
 8002b00:	dd000817 	ldw	r20,32(sp)
 8002b04:	dcc00717 	ldw	r19,28(sp)
 8002b08:	dc800617 	ldw	r18,24(sp)
 8002b0c:	dc400517 	ldw	r17,20(sp)
 8002b10:	dc000417 	ldw	r16,16(sp)
 8002b14:	dec00e04 	addi	sp,sp,56
 8002b18:	f800283a 	ret
 8002b1c:	8904b03a 	or	r2,r17,r4
 8002b20:	10003726 	beq	r2,zero,8002c00 <__divdf3+0x2b0>
 8002b24:	88011c26 	beq	r17,zero,8002f98 <__divdf3+0x648>
 8002b28:	8809883a 	mov	r4,r17
 8002b2c:	d9800315 	stw	r6,12(sp)
 8002b30:	d9c00115 	stw	r7,4(sp)
 8002b34:	8003d240 	call	8003d24 <__clzsi2>
 8002b38:	d9800317 	ldw	r6,12(sp)
 8002b3c:	d9c00117 	ldw	r7,4(sp)
 8002b40:	1007883a 	mov	r3,r2
 8002b44:	01000a04 	movi	r4,40
 8002b48:	1cfffe04 	addi	r19,r3,-8
 8002b4c:	20c9c83a 	sub	r4,r4,r3
 8002b50:	8cca983a 	sll	r5,r17,r19
 8002b54:	9108d83a 	srl	r4,r18,r4
 8002b58:	94e6983a 	sll	r19,r18,r19
 8002b5c:	2162b03a 	or	r17,r4,r5
 8002b60:	053f0344 	movi	r20,-1011
 8002b64:	a0e9c83a 	sub	r20,r20,r3
 8002b68:	0025883a 	mov	r18,zero
 8002b6c:	0011883a 	mov	r8,zero
 8002b70:	003f9606 	br	80029cc <__alt_data_end+0xfc0029cc>
 8002b74:	8184b03a 	or	r2,r16,r6
 8002b78:	10001f1e 	bne	r2,zero,8002bf8 <__divdf3+0x2a8>
 8002b7c:	0021883a 	mov	r16,zero
 8002b80:	002b883a 	mov	r21,zero
 8002b84:	01c00084 	movi	r7,2
 8002b88:	003fa206 	br	8002a14 <__alt_data_end+0xfc002a14>
 8002b8c:	8184b03a 	or	r2,r16,r6
 8002b90:	10001526 	beq	r2,zero,8002be8 <__divdf3+0x298>
 8002b94:	80010c26 	beq	r16,zero,8002fc8 <__divdf3+0x678>
 8002b98:	8009883a 	mov	r4,r16
 8002b9c:	d9800315 	stw	r6,12(sp)
 8002ba0:	da000215 	stw	r8,8(sp)
 8002ba4:	da400015 	stw	r9,0(sp)
 8002ba8:	8003d240 	call	8003d24 <__clzsi2>
 8002bac:	d9800317 	ldw	r6,12(sp)
 8002bb0:	da000217 	ldw	r8,8(sp)
 8002bb4:	da400017 	ldw	r9,0(sp)
 8002bb8:	1007883a 	mov	r3,r2
 8002bbc:	01000a04 	movi	r4,40
 8002bc0:	1d7ffe04 	addi	r21,r3,-8
 8002bc4:	20c9c83a 	sub	r4,r4,r3
 8002bc8:	8560983a 	sll	r16,r16,r21
 8002bcc:	3108d83a 	srl	r4,r6,r4
 8002bd0:	356a983a 	sll	r21,r6,r21
 8002bd4:	2420b03a 	or	r16,r4,r16
 8002bd8:	017f0344 	movi	r5,-1011
 8002bdc:	28cbc83a 	sub	r5,r5,r3
 8002be0:	000f883a 	mov	r7,zero
 8002be4:	003f8b06 	br	8002a14 <__alt_data_end+0xfc002a14>
 8002be8:	0021883a 	mov	r16,zero
 8002bec:	002b883a 	mov	r21,zero
 8002bf0:	01c00044 	movi	r7,1
 8002bf4:	003f8706 	br	8002a14 <__alt_data_end+0xfc002a14>
 8002bf8:	01c000c4 	movi	r7,3
 8002bfc:	003f8506 	br	8002a14 <__alt_data_end+0xfc002a14>
 8002c00:	04800104 	movi	r18,4
 8002c04:	0023883a 	mov	r17,zero
 8002c08:	0027883a 	mov	r19,zero
 8002c0c:	02000044 	movi	r8,1
 8002c10:	003f6e06 	br	80029cc <__alt_data_end+0xfc0029cc>
 8002c14:	04800304 	movi	r18,12
 8002c18:	020000c4 	movi	r8,3
 8002c1c:	003f6b06 	br	80029cc <__alt_data_end+0xfc0029cc>
 8002c20:	01400434 	movhi	r5,16
 8002c24:	000d883a 	mov	r6,zero
 8002c28:	297fffc4 	addi	r5,r5,-1
 8002c2c:	04ffffc4 	movi	r19,-1
 8002c30:	0101ffc4 	movi	r4,2047
 8002c34:	003fa406 	br	8002ac8 <__alt_data_end+0xfc002ac8>
 8002c38:	043f0084 	movi	r16,-1022
 8002c3c:	8521c83a 	sub	r16,r16,r20
 8002c40:	00800e04 	movi	r2,56
 8002c44:	1401200e 	bge	r2,r16,80030c8 <__divdf3+0x778>
 8002c48:	9180004c 	andi	r6,r18,1
 8002c4c:	0009883a 	mov	r4,zero
 8002c50:	000b883a 	mov	r5,zero
 8002c54:	0027883a 	mov	r19,zero
 8002c58:	003f9b06 	br	8002ac8 <__alt_data_end+0xfc002ac8>
 8002c5c:	8880022c 	andhi	r2,r17,8
 8002c60:	1000c726 	beq	r2,zero,8002f80 <__divdf3+0x630>
 8002c64:	8080022c 	andhi	r2,r16,8
 8002c68:	1000c51e 	bne	r2,zero,8002f80 <__divdf3+0x630>
 8002c6c:	00800434 	movhi	r2,16
 8002c70:	81400234 	orhi	r5,r16,8
 8002c74:	10bfffc4 	addi	r2,r2,-1
 8002c78:	b80d883a 	mov	r6,r23
 8002c7c:	288a703a 	and	r5,r5,r2
 8002c80:	a827883a 	mov	r19,r21
 8002c84:	003fea06 	br	8002c30 <__alt_data_end+0xfc002c30>
 8002c88:	8440ea36 	bltu	r16,r17,8003034 <__divdf3+0x6e4>
 8002c8c:	8c00e826 	beq	r17,r16,8003030 <__divdf3+0x6e0>
 8002c90:	a53fffc4 	addi	r20,r20,-1
 8002c94:	882d883a 	mov	r22,r17
 8002c98:	000d883a 	mov	r6,zero
 8002c9c:	a804d63a 	srli	r2,r21,24
 8002ca0:	8020923a 	slli	r16,r16,8
 8002ca4:	b009883a 	mov	r4,r22
 8002ca8:	d9800315 	stw	r6,12(sp)
 8002cac:	1420b03a 	or	r16,r2,r16
 8002cb0:	802ed43a 	srli	r23,r16,16
 8002cb4:	873fffcc 	andi	fp,r16,65535
 8002cb8:	a82a923a 	slli	r21,r21,8
 8002cbc:	b80b883a 	mov	r5,r23
 8002cc0:	8003ea40 	call	8003ea4 <__udivsi3>
 8002cc4:	b009883a 	mov	r4,r22
 8002cc8:	b80b883a 	mov	r5,r23
 8002ccc:	1023883a 	mov	r17,r2
 8002cd0:	8003eac0 	call	8003eac <__umodsi3>
 8002cd4:	1004943a 	slli	r2,r2,16
 8002cd8:	9808d43a 	srli	r4,r19,16
 8002cdc:	8f2d383a 	mul	r22,r17,fp
 8002ce0:	d9800317 	ldw	r6,12(sp)
 8002ce4:	1106b03a 	or	r3,r2,r4
 8002ce8:	1d80062e 	bgeu	r3,r22,8002d04 <__divdf3+0x3b4>
 8002cec:	1c07883a 	add	r3,r3,r16
 8002cf0:	88bfffc4 	addi	r2,r17,-1
 8002cf4:	1c00dc36 	bltu	r3,r16,8003068 <__divdf3+0x718>
 8002cf8:	1d80db2e 	bgeu	r3,r22,8003068 <__divdf3+0x718>
 8002cfc:	8c7fff84 	addi	r17,r17,-2
 8002d00:	1c07883a 	add	r3,r3,r16
 8002d04:	1dadc83a 	sub	r22,r3,r22
 8002d08:	b009883a 	mov	r4,r22
 8002d0c:	b80b883a 	mov	r5,r23
 8002d10:	d9800315 	stw	r6,12(sp)
 8002d14:	8003ea40 	call	8003ea4 <__udivsi3>
 8002d18:	b009883a 	mov	r4,r22
 8002d1c:	b80b883a 	mov	r5,r23
 8002d20:	d8800015 	stw	r2,0(sp)
 8002d24:	8003eac0 	call	8003eac <__umodsi3>
 8002d28:	da400017 	ldw	r9,0(sp)
 8002d2c:	1004943a 	slli	r2,r2,16
 8002d30:	9cffffcc 	andi	r19,r19,65535
 8002d34:	4f07383a 	mul	r3,r9,fp
 8002d38:	14c8b03a 	or	r4,r2,r19
 8002d3c:	d9800317 	ldw	r6,12(sp)
 8002d40:	20c0062e 	bgeu	r4,r3,8002d5c <__divdf3+0x40c>
 8002d44:	2409883a 	add	r4,r4,r16
 8002d48:	48bfffc4 	addi	r2,r9,-1
 8002d4c:	2400c436 	bltu	r4,r16,8003060 <__divdf3+0x710>
 8002d50:	20c0c32e 	bgeu	r4,r3,8003060 <__divdf3+0x710>
 8002d54:	4a7fff84 	addi	r9,r9,-2
 8002d58:	2409883a 	add	r4,r4,r16
 8002d5c:	8822943a 	slli	r17,r17,16
 8002d60:	a80ed43a 	srli	r7,r21,16
 8002d64:	aa3fffcc 	andi	r8,r21,65535
 8002d68:	4c62b03a 	or	r17,r9,r17
 8002d6c:	8816d43a 	srli	r11,r17,16
 8002d70:	897fffcc 	andi	r5,r17,65535
 8002d74:	2a15383a 	mul	r10,r5,r8
 8002d78:	5a19383a 	mul	r12,r11,r8
 8002d7c:	29cb383a 	mul	r5,r5,r7
 8002d80:	5012d43a 	srli	r9,r10,16
 8002d84:	20c5c83a 	sub	r2,r4,r3
 8002d88:	614b883a 	add	r5,r12,r5
 8002d8c:	2a4b883a 	add	r5,r5,r9
 8002d90:	59c7383a 	mul	r3,r11,r7
 8002d94:	2b00022e 	bgeu	r5,r12,8002da0 <__divdf3+0x450>
 8002d98:	01000074 	movhi	r4,1
 8002d9c:	1907883a 	add	r3,r3,r4
 8002da0:	2808d43a 	srli	r4,r5,16
 8002da4:	280a943a 	slli	r5,r5,16
 8002da8:	54ffffcc 	andi	r19,r10,65535
 8002dac:	1907883a 	add	r3,r3,r4
 8002db0:	2ccb883a 	add	r5,r5,r19
 8002db4:	10c09336 	bltu	r2,r3,8003004 <__divdf3+0x6b4>
 8002db8:	10c0ad26 	beq	r2,r3,8003070 <__divdf3+0x720>
 8002dbc:	10c7c83a 	sub	r3,r2,r3
 8002dc0:	3167c83a 	sub	r19,r6,r5
 8002dc4:	34ed803a 	cmpltu	r22,r6,r19
 8002dc8:	1dadc83a 	sub	r22,r3,r22
 8002dcc:	b400b226 	beq	r22,r16,8003098 <__divdf3+0x748>
 8002dd0:	b009883a 	mov	r4,r22
 8002dd4:	b80b883a 	mov	r5,r23
 8002dd8:	d9c00115 	stw	r7,4(sp)
 8002ddc:	da000215 	stw	r8,8(sp)
 8002de0:	8003ea40 	call	8003ea4 <__udivsi3>
 8002de4:	b009883a 	mov	r4,r22
 8002de8:	b80b883a 	mov	r5,r23
 8002dec:	d8800315 	stw	r2,12(sp)
 8002df0:	8003eac0 	call	8003eac <__umodsi3>
 8002df4:	d9800317 	ldw	r6,12(sp)
 8002df8:	1004943a 	slli	r2,r2,16
 8002dfc:	9808d43a 	srli	r4,r19,16
 8002e00:	372d383a 	mul	r22,r6,fp
 8002e04:	d9c00117 	ldw	r7,4(sp)
 8002e08:	1106b03a 	or	r3,r2,r4
 8002e0c:	da000217 	ldw	r8,8(sp)
 8002e10:	1d80062e 	bgeu	r3,r22,8002e2c <__divdf3+0x4dc>
 8002e14:	1c07883a 	add	r3,r3,r16
 8002e18:	30bfffc4 	addi	r2,r6,-1
 8002e1c:	1c00a036 	bltu	r3,r16,80030a0 <__divdf3+0x750>
 8002e20:	1d809f2e 	bgeu	r3,r22,80030a0 <__divdf3+0x750>
 8002e24:	31bfff84 	addi	r6,r6,-2
 8002e28:	1c07883a 	add	r3,r3,r16
 8002e2c:	1dadc83a 	sub	r22,r3,r22
 8002e30:	b009883a 	mov	r4,r22
 8002e34:	b80b883a 	mov	r5,r23
 8002e38:	d9800315 	stw	r6,12(sp)
 8002e3c:	d9c00115 	stw	r7,4(sp)
 8002e40:	da000215 	stw	r8,8(sp)
 8002e44:	8003ea40 	call	8003ea4 <__udivsi3>
 8002e48:	b009883a 	mov	r4,r22
 8002e4c:	b80b883a 	mov	r5,r23
 8002e50:	d8800015 	stw	r2,0(sp)
 8002e54:	8003eac0 	call	8003eac <__umodsi3>
 8002e58:	da400017 	ldw	r9,0(sp)
 8002e5c:	1004943a 	slli	r2,r2,16
 8002e60:	993fffcc 	andi	r4,r19,65535
 8002e64:	4f39383a 	mul	fp,r9,fp
 8002e68:	1106b03a 	or	r3,r2,r4
 8002e6c:	d9800317 	ldw	r6,12(sp)
 8002e70:	d9c00117 	ldw	r7,4(sp)
 8002e74:	da000217 	ldw	r8,8(sp)
 8002e78:	1f00062e 	bgeu	r3,fp,8002e94 <__divdf3+0x544>
 8002e7c:	1c07883a 	add	r3,r3,r16
 8002e80:	48bfffc4 	addi	r2,r9,-1
 8002e84:	1c008836 	bltu	r3,r16,80030a8 <__divdf3+0x758>
 8002e88:	1f00872e 	bgeu	r3,fp,80030a8 <__divdf3+0x758>
 8002e8c:	4a7fff84 	addi	r9,r9,-2
 8002e90:	1c07883a 	add	r3,r3,r16
 8002e94:	3008943a 	slli	r4,r6,16
 8002e98:	1f07c83a 	sub	r3,r3,fp
 8002e9c:	4926b03a 	or	r19,r9,r4
 8002ea0:	993fffcc 	andi	r4,r19,65535
 8002ea4:	980cd43a 	srli	r6,r19,16
 8002ea8:	220b383a 	mul	r5,r4,r8
 8002eac:	21c5383a 	mul	r2,r4,r7
 8002eb0:	3211383a 	mul	r8,r6,r8
 8002eb4:	2808d43a 	srli	r4,r5,16
 8002eb8:	31cf383a 	mul	r7,r6,r7
 8002ebc:	4085883a 	add	r2,r8,r2
 8002ec0:	1105883a 	add	r2,r2,r4
 8002ec4:	1200022e 	bgeu	r2,r8,8002ed0 <__divdf3+0x580>
 8002ec8:	01000074 	movhi	r4,1
 8002ecc:	390f883a 	add	r7,r7,r4
 8002ed0:	1008d43a 	srli	r4,r2,16
 8002ed4:	1004943a 	slli	r2,r2,16
 8002ed8:	297fffcc 	andi	r5,r5,65535
 8002edc:	390f883a 	add	r7,r7,r4
 8002ee0:	1145883a 	add	r2,r2,r5
 8002ee4:	19c06536 	bltu	r3,r7,800307c <__divdf3+0x72c>
 8002ee8:	19c09f26 	beq	r3,r7,8003168 <__divdf3+0x818>
 8002eec:	9cc00054 	ori	r19,r19,1
 8002ef0:	a100ffc4 	addi	r4,r20,1023
 8002ef4:	013f500e 	bge	zero,r4,8002c38 <__alt_data_end+0xfc002c38>
 8002ef8:	988001cc 	andi	r2,r19,7
 8002efc:	10000726 	beq	r2,zero,8002f1c <__divdf3+0x5cc>
 8002f00:	98c003cc 	andi	r3,r19,15
 8002f04:	00800104 	movi	r2,4
 8002f08:	18800426 	beq	r3,r2,8002f1c <__divdf3+0x5cc>
 8002f0c:	9885883a 	add	r2,r19,r2
 8002f10:	14e1803a 	cmpltu	r16,r2,r19
 8002f14:	8c23883a 	add	r17,r17,r16
 8002f18:	1027883a 	mov	r19,r2
 8002f1c:	8880402c 	andhi	r2,r17,256
 8002f20:	10000426 	beq	r2,zero,8002f34 <__divdf3+0x5e4>
 8002f24:	00bfc034 	movhi	r2,65280
 8002f28:	10bfffc4 	addi	r2,r2,-1
 8002f2c:	a1010004 	addi	r4,r20,1024
 8002f30:	88a2703a 	and	r17,r17,r2
 8002f34:	0081ff84 	movi	r2,2046
 8002f38:	113edf16 	blt	r2,r4,8002ab8 <__alt_data_end+0xfc002ab8>
 8002f3c:	9826d0fa 	srli	r19,r19,3
 8002f40:	8804977a 	slli	r2,r17,29
 8002f44:	8820927a 	slli	r16,r17,9
 8002f48:	2101ffcc 	andi	r4,r4,2047
 8002f4c:	14e6b03a 	or	r19,r2,r19
 8002f50:	800ad33a 	srli	r5,r16,12
 8002f54:	9180004c 	andi	r6,r18,1
 8002f58:	003edb06 	br	8002ac8 <__alt_data_end+0xfc002ac8>
 8002f5c:	008000c4 	movi	r2,3
 8002f60:	4080a826 	beq	r8,r2,8003204 <__divdf3+0x8b4>
 8002f64:	00800044 	movi	r2,1
 8002f68:	4080551e 	bne	r8,r2,80030c0 <__divdf3+0x770>
 8002f6c:	e00d883a 	mov	r6,fp
 8002f70:	0009883a 	mov	r4,zero
 8002f74:	000b883a 	mov	r5,zero
 8002f78:	0027883a 	mov	r19,zero
 8002f7c:	003ed206 	br	8002ac8 <__alt_data_end+0xfc002ac8>
 8002f80:	00800434 	movhi	r2,16
 8002f84:	89400234 	orhi	r5,r17,8
 8002f88:	10bfffc4 	addi	r2,r2,-1
 8002f8c:	b00d883a 	mov	r6,r22
 8002f90:	288a703a 	and	r5,r5,r2
 8002f94:	003f2606 	br	8002c30 <__alt_data_end+0xfc002c30>
 8002f98:	d9800315 	stw	r6,12(sp)
 8002f9c:	d9c00115 	stw	r7,4(sp)
 8002fa0:	8003d240 	call	8003d24 <__clzsi2>
 8002fa4:	10c00804 	addi	r3,r2,32
 8002fa8:	010009c4 	movi	r4,39
 8002fac:	d9800317 	ldw	r6,12(sp)
 8002fb0:	d9c00117 	ldw	r7,4(sp)
 8002fb4:	20fee30e 	bge	r4,r3,8002b44 <__alt_data_end+0xfc002b44>
 8002fb8:	117ffe04 	addi	r5,r2,-8
 8002fbc:	9162983a 	sll	r17,r18,r5
 8002fc0:	0027883a 	mov	r19,zero
 8002fc4:	003ee606 	br	8002b60 <__alt_data_end+0xfc002b60>
 8002fc8:	3009883a 	mov	r4,r6
 8002fcc:	d9800315 	stw	r6,12(sp)
 8002fd0:	da000215 	stw	r8,8(sp)
 8002fd4:	da400015 	stw	r9,0(sp)
 8002fd8:	8003d240 	call	8003d24 <__clzsi2>
 8002fdc:	10c00804 	addi	r3,r2,32
 8002fe0:	010009c4 	movi	r4,39
 8002fe4:	d9800317 	ldw	r6,12(sp)
 8002fe8:	da000217 	ldw	r8,8(sp)
 8002fec:	da400017 	ldw	r9,0(sp)
 8002ff0:	20fef20e 	bge	r4,r3,8002bbc <__alt_data_end+0xfc002bbc>
 8002ff4:	10bffe04 	addi	r2,r2,-8
 8002ff8:	a8a0983a 	sll	r16,r21,r2
 8002ffc:	002b883a 	mov	r21,zero
 8003000:	003ef506 	br	8002bd8 <__alt_data_end+0xfc002bd8>
 8003004:	354d883a 	add	r6,r6,r21
 8003008:	3549803a 	cmpltu	r4,r6,r21
 800300c:	2409883a 	add	r4,r4,r16
 8003010:	2089883a 	add	r4,r4,r2
 8003014:	88bfffc4 	addi	r2,r17,-1
 8003018:	81000c2e 	bgeu	r16,r4,800304c <__divdf3+0x6fc>
 800301c:	20c04436 	bltu	r4,r3,8003130 <__divdf3+0x7e0>
 8003020:	19006f26 	beq	r3,r4,80031e0 <__divdf3+0x890>
 8003024:	20c7c83a 	sub	r3,r4,r3
 8003028:	1023883a 	mov	r17,r2
 800302c:	003f6406 	br	8002dc0 <__alt_data_end+0xfc002dc0>
 8003030:	9d7f1736 	bltu	r19,r21,8002c90 <__alt_data_end+0xfc002c90>
 8003034:	9806d07a 	srli	r3,r19,1
 8003038:	880497fa 	slli	r2,r17,31
 800303c:	980c97fa 	slli	r6,r19,31
 8003040:	882cd07a 	srli	r22,r17,1
 8003044:	18a6b03a 	or	r19,r3,r2
 8003048:	003f1406 	br	8002c9c <__alt_data_end+0xfc002c9c>
 800304c:	243ff51e 	bne	r4,r16,8003024 <__alt_data_end+0xfc003024>
 8003050:	357ff22e 	bgeu	r6,r21,800301c <__alt_data_end+0xfc00301c>
 8003054:	80c7c83a 	sub	r3,r16,r3
 8003058:	1023883a 	mov	r17,r2
 800305c:	003f5806 	br	8002dc0 <__alt_data_end+0xfc002dc0>
 8003060:	1013883a 	mov	r9,r2
 8003064:	003f3d06 	br	8002d5c <__alt_data_end+0xfc002d5c>
 8003068:	1023883a 	mov	r17,r2
 800306c:	003f2506 	br	8002d04 <__alt_data_end+0xfc002d04>
 8003070:	317fe436 	bltu	r6,r5,8003004 <__alt_data_end+0xfc003004>
 8003074:	0007883a 	mov	r3,zero
 8003078:	003f5106 	br	8002dc0 <__alt_data_end+0xfc002dc0>
 800307c:	1c07883a 	add	r3,r3,r16
 8003080:	993fffc4 	addi	r4,r19,-1
 8003084:	1c000a2e 	bgeu	r3,r16,80030b0 <__divdf3+0x760>
 8003088:	2027883a 	mov	r19,r4
 800308c:	19ff971e 	bne	r3,r7,8002eec <__alt_data_end+0xfc002eec>
 8003090:	a8bf961e 	bne	r21,r2,8002eec <__alt_data_end+0xfc002eec>
 8003094:	003f9606 	br	8002ef0 <__alt_data_end+0xfc002ef0>
 8003098:	04ffffc4 	movi	r19,-1
 800309c:	003f9406 	br	8002ef0 <__alt_data_end+0xfc002ef0>
 80030a0:	100d883a 	mov	r6,r2
 80030a4:	003f6106 	br	8002e2c <__alt_data_end+0xfc002e2c>
 80030a8:	1013883a 	mov	r9,r2
 80030ac:	003f7906 	br	8002e94 <__alt_data_end+0xfc002e94>
 80030b0:	19c02636 	bltu	r3,r7,800314c <__divdf3+0x7fc>
 80030b4:	38c04d26 	beq	r7,r3,80031ec <__divdf3+0x89c>
 80030b8:	2027883a 	mov	r19,r4
 80030bc:	003f8b06 	br	8002eec <__alt_data_end+0xfc002eec>
 80030c0:	e025883a 	mov	r18,fp
 80030c4:	003f8a06 	br	8002ef0 <__alt_data_end+0xfc002ef0>
 80030c8:	008007c4 	movi	r2,31
 80030cc:	14002a16 	blt	r2,r16,8003178 <__divdf3+0x828>
 80030d0:	a5010784 	addi	r20,r20,1054
 80030d4:	8d04983a 	sll	r2,r17,r20
 80030d8:	9c06d83a 	srl	r3,r19,r16
 80030dc:	9d28983a 	sll	r20,r19,r20
 80030e0:	8c20d83a 	srl	r16,r17,r16
 80030e4:	1886b03a 	or	r3,r3,r2
 80030e8:	a004c03a 	cmpne	r2,r20,zero
 80030ec:	1884b03a 	or	r2,r3,r2
 80030f0:	10c001cc 	andi	r3,r2,7
 80030f4:	18000726 	beq	r3,zero,8003114 <__divdf3+0x7c4>
 80030f8:	110003cc 	andi	r4,r2,15
 80030fc:	00c00104 	movi	r3,4
 8003100:	20c00426 	beq	r4,r3,8003114 <__divdf3+0x7c4>
 8003104:	10c00104 	addi	r3,r2,4
 8003108:	1885803a 	cmpltu	r2,r3,r2
 800310c:	80a1883a 	add	r16,r16,r2
 8003110:	1805883a 	mov	r2,r3
 8003114:	80c0202c 	andhi	r3,r16,128
 8003118:	18002d26 	beq	r3,zero,80031d0 <__divdf3+0x880>
 800311c:	9180004c 	andi	r6,r18,1
 8003120:	01000044 	movi	r4,1
 8003124:	000b883a 	mov	r5,zero
 8003128:	0027883a 	mov	r19,zero
 800312c:	003e6606 	br	8002ac8 <__alt_data_end+0xfc002ac8>
 8003130:	354d883a 	add	r6,r6,r21
 8003134:	356d803a 	cmpltu	r22,r6,r21
 8003138:	b42d883a 	add	r22,r22,r16
 800313c:	b12d883a 	add	r22,r22,r4
 8003140:	8c7fff84 	addi	r17,r17,-2
 8003144:	b0c7c83a 	sub	r3,r22,r3
 8003148:	003f1d06 	br	8002dc0 <__alt_data_end+0xfc002dc0>
 800314c:	ad4b883a 	add	r5,r21,r21
 8003150:	2d6b803a 	cmpltu	r21,r5,r21
 8003154:	ac2b883a 	add	r21,r21,r16
 8003158:	1d47883a 	add	r3,r3,r21
 800315c:	993fff84 	addi	r4,r19,-2
 8003160:	282b883a 	mov	r21,r5
 8003164:	003fc806 	br	8003088 <__alt_data_end+0xfc003088>
 8003168:	103fc41e 	bne	r2,zero,800307c <__alt_data_end+0xfc00307c>
 800316c:	002b883a 	mov	r21,zero
 8003170:	a8bf5e1e 	bne	r21,r2,8002eec <__alt_data_end+0xfc002eec>
 8003174:	003f5e06 	br	8002ef0 <__alt_data_end+0xfc002ef0>
 8003178:	00bef884 	movi	r2,-1054
 800317c:	1505c83a 	sub	r2,r2,r20
 8003180:	00c00804 	movi	r3,32
 8003184:	8884d83a 	srl	r2,r17,r2
 8003188:	80c01c26 	beq	r16,r3,80031fc <__divdf3+0x8ac>
 800318c:	a0c10f84 	addi	r3,r20,1086
 8003190:	88c6983a 	sll	r3,r17,r3
 8003194:	1cc6b03a 	or	r3,r3,r19
 8003198:	1806c03a 	cmpne	r3,r3,zero
 800319c:	1884b03a 	or	r2,r3,r2
 80031a0:	140001cc 	andi	r16,r2,7
 80031a4:	8000061e 	bne	r16,zero,80031c0 <__divdf3+0x870>
 80031a8:	000b883a 	mov	r5,zero
 80031ac:	1004d0fa 	srli	r2,r2,3
 80031b0:	9180004c 	andi	r6,r18,1
 80031b4:	0009883a 	mov	r4,zero
 80031b8:	1426b03a 	or	r19,r2,r16
 80031bc:	003e4206 	br	8002ac8 <__alt_data_end+0xfc002ac8>
 80031c0:	110003cc 	andi	r4,r2,15
 80031c4:	00c00104 	movi	r3,4
 80031c8:	0021883a 	mov	r16,zero
 80031cc:	20ffcd1e 	bne	r4,r3,8003104 <__alt_data_end+0xfc003104>
 80031d0:	800a927a 	slli	r5,r16,9
 80031d4:	8020977a 	slli	r16,r16,29
 80031d8:	280ad33a 	srli	r5,r5,12
 80031dc:	003ff306 	br	80031ac <__alt_data_end+0xfc0031ac>
 80031e0:	317fd336 	bltu	r6,r5,8003130 <__alt_data_end+0xfc003130>
 80031e4:	1023883a 	mov	r17,r2
 80031e8:	003fa206 	br	8003074 <__alt_data_end+0xfc003074>
 80031ec:	a8bfd736 	bltu	r21,r2,800314c <__alt_data_end+0xfc00314c>
 80031f0:	2027883a 	mov	r19,r4
 80031f4:	a8bf3d1e 	bne	r21,r2,8002eec <__alt_data_end+0xfc002eec>
 80031f8:	003f3d06 	br	8002ef0 <__alt_data_end+0xfc002ef0>
 80031fc:	0007883a 	mov	r3,zero
 8003200:	003fe406 	br	8003194 <__alt_data_end+0xfc003194>
 8003204:	00800434 	movhi	r2,16
 8003208:	89400234 	orhi	r5,r17,8
 800320c:	10bfffc4 	addi	r2,r2,-1
 8003210:	e00d883a 	mov	r6,fp
 8003214:	288a703a 	and	r5,r5,r2
 8003218:	003e8506 	br	8002c30 <__alt_data_end+0xfc002c30>

0800321c <__gedf2>:
 800321c:	2804d53a 	srli	r2,r5,20
 8003220:	3806d53a 	srli	r3,r7,20
 8003224:	02000434 	movhi	r8,16
 8003228:	423fffc4 	addi	r8,r8,-1
 800322c:	0241ffc4 	movi	r9,2047
 8003230:	1081ffcc 	andi	r2,r2,2047
 8003234:	2a14703a 	and	r10,r5,r8
 8003238:	1a46703a 	and	r3,r3,r9
 800323c:	3a10703a 	and	r8,r7,r8
 8003240:	280ad7fa 	srli	r5,r5,31
 8003244:	380ed7fa 	srli	r7,r7,31
 8003248:	12400b26 	beq	r2,r9,8003278 <__gedf2+0x5c>
 800324c:	1a401626 	beq	r3,r9,80032a8 <__gedf2+0x8c>
 8003250:	10000c1e 	bne	r2,zero,8003284 <__gedf2+0x68>
 8003254:	5112b03a 	or	r9,r10,r4
 8003258:	4813003a 	cmpeq	r9,r9,zero
 800325c:	4817883a 	mov	r11,r9
 8003260:	18000c1e 	bne	r3,zero,8003294 <__gedf2+0x78>
 8003264:	4198b03a 	or	r12,r8,r6
 8003268:	60000a1e 	bne	r12,zero,8003294 <__gedf2+0x78>
 800326c:	48001326 	beq	r9,zero,80032bc <__gedf2+0xa0>
 8003270:	0005883a 	mov	r2,zero
 8003274:	f800283a 	ret
 8003278:	5112b03a 	or	r9,r10,r4
 800327c:	4800191e 	bne	r9,zero,80032e4 <__gedf2+0xc8>
 8003280:	18800926 	beq	r3,r2,80032a8 <__gedf2+0x8c>
 8003284:	18000b1e 	bne	r3,zero,80032b4 <__gedf2+0x98>
 8003288:	4192b03a 	or	r9,r8,r6
 800328c:	0017883a 	mov	r11,zero
 8003290:	48000a26 	beq	r9,zero,80032bc <__gedf2+0xa0>
 8003294:	39c03fcc 	andi	r7,r7,255
 8003298:	58000726 	beq	r11,zero,80032b8 <__gedf2+0x9c>
 800329c:	3800081e 	bne	r7,zero,80032c0 <__gedf2+0xa4>
 80032a0:	00bfffc4 	movi	r2,-1
 80032a4:	f800283a 	ret
 80032a8:	4192b03a 	or	r9,r8,r6
 80032ac:	48000d1e 	bne	r9,zero,80032e4 <__gedf2+0xc8>
 80032b0:	103fe826 	beq	r2,zero,8003254 <__alt_data_end+0xfc003254>
 80032b4:	39c03fcc 	andi	r7,r7,255
 80032b8:	29c00326 	beq	r5,r7,80032c8 <__gedf2+0xac>
 80032bc:	283ff81e 	bne	r5,zero,80032a0 <__alt_data_end+0xfc0032a0>
 80032c0:	00800044 	movi	r2,1
 80032c4:	f800283a 	ret
 80032c8:	18bffc16 	blt	r3,r2,80032bc <__alt_data_end+0xfc0032bc>
 80032cc:	10c00316 	blt	r2,r3,80032dc <__gedf2+0xc0>
 80032d0:	42bffa36 	bltu	r8,r10,80032bc <__alt_data_end+0xfc0032bc>
 80032d4:	52000526 	beq	r10,r8,80032ec <__gedf2+0xd0>
 80032d8:	523fe52e 	bgeu	r10,r8,8003270 <__alt_data_end+0xfc003270>
 80032dc:	283ff026 	beq	r5,zero,80032a0 <__alt_data_end+0xfc0032a0>
 80032e0:	003ff706 	br	80032c0 <__alt_data_end+0xfc0032c0>
 80032e4:	00bfff84 	movi	r2,-2
 80032e8:	f800283a 	ret
 80032ec:	313ff336 	bltu	r6,r4,80032bc <__alt_data_end+0xfc0032bc>
 80032f0:	21bfdf2e 	bgeu	r4,r6,8003270 <__alt_data_end+0xfc003270>
 80032f4:	283fea26 	beq	r5,zero,80032a0 <__alt_data_end+0xfc0032a0>
 80032f8:	003ff106 	br	80032c0 <__alt_data_end+0xfc0032c0>

080032fc <__subdf3>:
 80032fc:	00c00434 	movhi	r3,16
 8003300:	18ffffc4 	addi	r3,r3,-1
 8003304:	defffb04 	addi	sp,sp,-20
 8003308:	28d2703a 	and	r9,r5,r3
 800330c:	3814d53a 	srli	r10,r7,20
 8003310:	38c6703a 	and	r3,r7,r3
 8003314:	3004d77a 	srli	r2,r6,29
 8003318:	dc800215 	stw	r18,8(sp)
 800331c:	dc000015 	stw	r16,0(sp)
 8003320:	2824d7fa 	srli	r18,r5,31
 8003324:	2820d53a 	srli	r16,r5,20
 8003328:	481290fa 	slli	r9,r9,3
 800332c:	200ad77a 	srli	r5,r4,29
 8003330:	180690fa 	slli	r3,r3,3
 8003334:	dc400115 	stw	r17,4(sp)
 8003338:	dfc00415 	stw	ra,16(sp)
 800333c:	202290fa 	slli	r17,r4,3
 8003340:	dcc00315 	stw	r19,12(sp)
 8003344:	5281ffcc 	andi	r10,r10,2047
 8003348:	0101ffc4 	movi	r4,2047
 800334c:	9011883a 	mov	r8,r18
 8003350:	8401ffcc 	andi	r16,r16,2047
 8003354:	94803fcc 	andi	r18,r18,255
 8003358:	494ab03a 	or	r5,r9,r5
 800335c:	380ed7fa 	srli	r7,r7,31
 8003360:	1886b03a 	or	r3,r3,r2
 8003364:	300c90fa 	slli	r6,r6,3
 8003368:	51009026 	beq	r10,r4,80035ac <__subdf3+0x2b0>
 800336c:	39c0005c 	xori	r7,r7,1
 8003370:	8285c83a 	sub	r2,r16,r10
 8003374:	91c06f26 	beq	r18,r7,8003534 <__subdf3+0x238>
 8003378:	0080b10e 	bge	zero,r2,8003640 <__subdf3+0x344>
 800337c:	50002a1e 	bne	r10,zero,8003428 <__subdf3+0x12c>
 8003380:	1988b03a 	or	r4,r3,r6
 8003384:	2000941e 	bne	r4,zero,80035d8 <__subdf3+0x2dc>
 8003388:	888001cc 	andi	r2,r17,7
 800338c:	10005b26 	beq	r2,zero,80034fc <__subdf3+0x200>
 8003390:	88c003cc 	andi	r3,r17,15
 8003394:	00800104 	movi	r2,4
 8003398:	18805826 	beq	r3,r2,80034fc <__subdf3+0x200>
 800339c:	88c00104 	addi	r3,r17,4
 80033a0:	1c63803a 	cmpltu	r17,r3,r17
 80033a4:	2c4b883a 	add	r5,r5,r17
 80033a8:	2880202c 	andhi	r2,r5,128
 80033ac:	9200004c 	andi	r8,r18,1
 80033b0:	1823883a 	mov	r17,r3
 80033b4:	10005426 	beq	r2,zero,8003508 <__subdf3+0x20c>
 80033b8:	84000044 	addi	r16,r16,1
 80033bc:	0081ffc4 	movi	r2,2047
 80033c0:	8080bf26 	beq	r16,r2,80036c0 <__subdf3+0x3c4>
 80033c4:	013fe034 	movhi	r4,65408
 80033c8:	213fffc4 	addi	r4,r4,-1
 80033cc:	290a703a 	and	r5,r5,r4
 80033d0:	2804977a 	slli	r2,r5,29
 80033d4:	280a927a 	slli	r5,r5,9
 80033d8:	8822d0fa 	srli	r17,r17,3
 80033dc:	8401ffcc 	andi	r16,r16,2047
 80033e0:	2808d33a 	srli	r4,r5,12
 80033e4:	1444b03a 	or	r2,r2,r17
 80033e8:	8401ffcc 	andi	r16,r16,2047
 80033ec:	800a953a 	slli	r5,r16,20
 80033f0:	40c03fcc 	andi	r3,r8,255
 80033f4:	04000434 	movhi	r16,16
 80033f8:	180697fa 	slli	r3,r3,31
 80033fc:	843fffc4 	addi	r16,r16,-1
 8003400:	2420703a 	and	r16,r4,r16
 8003404:	8160b03a 	or	r16,r16,r5
 8003408:	80c6b03a 	or	r3,r16,r3
 800340c:	dfc00417 	ldw	ra,16(sp)
 8003410:	dcc00317 	ldw	r19,12(sp)
 8003414:	dc800217 	ldw	r18,8(sp)
 8003418:	dc400117 	ldw	r17,4(sp)
 800341c:	dc000017 	ldw	r16,0(sp)
 8003420:	dec00504 	addi	sp,sp,20
 8003424:	f800283a 	ret
 8003428:	0101ffc4 	movi	r4,2047
 800342c:	813fd626 	beq	r16,r4,8003388 <__alt_data_end+0xfc003388>
 8003430:	18c02034 	orhi	r3,r3,128
 8003434:	01000e04 	movi	r4,56
 8003438:	2080a416 	blt	r4,r2,80036cc <__subdf3+0x3d0>
 800343c:	010007c4 	movi	r4,31
 8003440:	2080c716 	blt	r4,r2,8003760 <__subdf3+0x464>
 8003444:	01000804 	movi	r4,32
 8003448:	2089c83a 	sub	r4,r4,r2
 800344c:	1910983a 	sll	r8,r3,r4
 8003450:	308ed83a 	srl	r7,r6,r2
 8003454:	3108983a 	sll	r4,r6,r4
 8003458:	1884d83a 	srl	r2,r3,r2
 800345c:	41ccb03a 	or	r6,r8,r7
 8003460:	2008c03a 	cmpne	r4,r4,zero
 8003464:	310cb03a 	or	r6,r6,r4
 8003468:	898dc83a 	sub	r6,r17,r6
 800346c:	89a3803a 	cmpltu	r17,r17,r6
 8003470:	288bc83a 	sub	r5,r5,r2
 8003474:	2c4bc83a 	sub	r5,r5,r17
 8003478:	3023883a 	mov	r17,r6
 800347c:	2880202c 	andhi	r2,r5,128
 8003480:	10006b26 	beq	r2,zero,8003630 <__subdf3+0x334>
 8003484:	04c02034 	movhi	r19,128
 8003488:	9cffffc4 	addi	r19,r19,-1
 800348c:	2ce6703a 	and	r19,r5,r19
 8003490:	98007c26 	beq	r19,zero,8003684 <__subdf3+0x388>
 8003494:	9809883a 	mov	r4,r19
 8003498:	8003d240 	call	8003d24 <__clzsi2>
 800349c:	10fffe04 	addi	r3,r2,-8
 80034a0:	010007c4 	movi	r4,31
 80034a4:	20c07d16 	blt	r4,r3,800369c <__subdf3+0x3a0>
 80034a8:	01400a04 	movi	r5,40
 80034ac:	2885c83a 	sub	r2,r5,r2
 80034b0:	888ad83a 	srl	r5,r17,r2
 80034b4:	98e6983a 	sll	r19,r19,r3
 80034b8:	88e2983a 	sll	r17,r17,r3
 80034bc:	2ce6b03a 	or	r19,r5,r19
 80034c0:	1c007a16 	blt	r3,r16,80036ac <__subdf3+0x3b0>
 80034c4:	1c21c83a 	sub	r16,r3,r16
 80034c8:	81400044 	addi	r5,r16,1
 80034cc:	00c007c4 	movi	r3,31
 80034d0:	19409616 	blt	r3,r5,800372c <__subdf3+0x430>
 80034d4:	1c21c83a 	sub	r16,r3,r16
 80034d8:	8c08983a 	sll	r4,r17,r16
 80034dc:	8946d83a 	srl	r3,r17,r5
 80034e0:	9c20983a 	sll	r16,r19,r16
 80034e4:	2008c03a 	cmpne	r4,r4,zero
 80034e8:	994ad83a 	srl	r5,r19,r5
 80034ec:	1c06b03a 	or	r3,r3,r16
 80034f0:	1922b03a 	or	r17,r3,r4
 80034f4:	0021883a 	mov	r16,zero
 80034f8:	003fa306 	br	8003388 <__alt_data_end+0xfc003388>
 80034fc:	2880202c 	andhi	r2,r5,128
 8003500:	9200004c 	andi	r8,r18,1
 8003504:	103fac1e 	bne	r2,zero,80033b8 <__alt_data_end+0xfc0033b8>
 8003508:	2804977a 	slli	r2,r5,29
 800350c:	8822d0fa 	srli	r17,r17,3
 8003510:	00c1ffc4 	movi	r3,2047
 8003514:	280ad0fa 	srli	r5,r5,3
 8003518:	1444b03a 	or	r2,r2,r17
 800351c:	80c02726 	beq	r16,r3,80035bc <__subdf3+0x2c0>
 8003520:	01000434 	movhi	r4,16
 8003524:	213fffc4 	addi	r4,r4,-1
 8003528:	80e0703a 	and	r16,r16,r3
 800352c:	2908703a 	and	r4,r5,r4
 8003530:	003fad06 	br	80033e8 <__alt_data_end+0xfc0033e8>
 8003534:	0080690e 	bge	zero,r2,80036dc <__subdf3+0x3e0>
 8003538:	50002f26 	beq	r10,zero,80035f8 <__subdf3+0x2fc>
 800353c:	0101ffc4 	movi	r4,2047
 8003540:	813f9126 	beq	r16,r4,8003388 <__alt_data_end+0xfc003388>
 8003544:	18c02034 	orhi	r3,r3,128
 8003548:	01000e04 	movi	r4,56
 800354c:	2080b00e 	bge	r4,r2,8003810 <__subdf3+0x514>
 8003550:	198cb03a 	or	r6,r3,r6
 8003554:	300ec03a 	cmpne	r7,r6,zero
 8003558:	0005883a 	mov	r2,zero
 800355c:	3c4f883a 	add	r7,r7,r17
 8003560:	3c63803a 	cmpltu	r17,r7,r17
 8003564:	114b883a 	add	r5,r2,r5
 8003568:	2c4b883a 	add	r5,r5,r17
 800356c:	3823883a 	mov	r17,r7
 8003570:	2880202c 	andhi	r2,r5,128
 8003574:	10002e26 	beq	r2,zero,8003630 <__subdf3+0x334>
 8003578:	84000044 	addi	r16,r16,1
 800357c:	0081ffc4 	movi	r2,2047
 8003580:	8080de26 	beq	r16,r2,80038fc <__subdf3+0x600>
 8003584:	00bfe034 	movhi	r2,65408
 8003588:	10bfffc4 	addi	r2,r2,-1
 800358c:	288a703a 	and	r5,r5,r2
 8003590:	880cd07a 	srli	r6,r17,1
 8003594:	280897fa 	slli	r4,r5,31
 8003598:	88c0004c 	andi	r3,r17,1
 800359c:	30e2b03a 	or	r17,r6,r3
 80035a0:	280ad07a 	srli	r5,r5,1
 80035a4:	8922b03a 	or	r17,r17,r4
 80035a8:	003f7706 	br	8003388 <__alt_data_end+0xfc003388>
 80035ac:	1984b03a 	or	r2,r3,r6
 80035b0:	103f6e26 	beq	r2,zero,800336c <__alt_data_end+0xfc00336c>
 80035b4:	39c03fcc 	andi	r7,r7,255
 80035b8:	003f6d06 	br	8003370 <__alt_data_end+0xfc003370>
 80035bc:	1146b03a 	or	r3,r2,r5
 80035c0:	18003f26 	beq	r3,zero,80036c0 <__subdf3+0x3c4>
 80035c4:	00c00434 	movhi	r3,16
 80035c8:	29000234 	orhi	r4,r5,8
 80035cc:	18ffffc4 	addi	r3,r3,-1
 80035d0:	20c8703a 	and	r4,r4,r3
 80035d4:	003f8406 	br	80033e8 <__alt_data_end+0xfc0033e8>
 80035d8:	10bfffc4 	addi	r2,r2,-1
 80035dc:	1000501e 	bne	r2,zero,8003720 <__subdf3+0x424>
 80035e0:	898fc83a 	sub	r7,r17,r6
 80035e4:	89e3803a 	cmpltu	r17,r17,r7
 80035e8:	28cbc83a 	sub	r5,r5,r3
 80035ec:	2c4bc83a 	sub	r5,r5,r17
 80035f0:	3823883a 	mov	r17,r7
 80035f4:	003fa106 	br	800347c <__alt_data_end+0xfc00347c>
 80035f8:	1988b03a 	or	r4,r3,r6
 80035fc:	203f6226 	beq	r4,zero,8003388 <__alt_data_end+0xfc003388>
 8003600:	10bfffc4 	addi	r2,r2,-1
 8003604:	10009b1e 	bne	r2,zero,8003874 <__subdf3+0x578>
 8003608:	344d883a 	add	r6,r6,r17
 800360c:	3463803a 	cmpltu	r17,r6,r17
 8003610:	194b883a 	add	r5,r3,r5
 8003614:	2c4b883a 	add	r5,r5,r17
 8003618:	3023883a 	mov	r17,r6
 800361c:	003fd406 	br	8003570 <__alt_data_end+0xfc003570>
 8003620:	1106b03a 	or	r3,r2,r4
 8003624:	1800b426 	beq	r3,zero,80038f8 <__subdf3+0x5fc>
 8003628:	100b883a 	mov	r5,r2
 800362c:	2023883a 	mov	r17,r4
 8003630:	888001cc 	andi	r2,r17,7
 8003634:	103f561e 	bne	r2,zero,8003390 <__alt_data_end+0xfc003390>
 8003638:	9200004c 	andi	r8,r18,1
 800363c:	003fb206 	br	8003508 <__alt_data_end+0xfc003508>
 8003640:	1000531e 	bne	r2,zero,8003790 <__subdf3+0x494>
 8003644:	80800044 	addi	r2,r16,1
 8003648:	1081ffcc 	andi	r2,r2,2047
 800364c:	01000044 	movi	r4,1
 8003650:	2080a00e 	bge	r4,r2,80038d4 <__subdf3+0x5d8>
 8003654:	8985c83a 	sub	r2,r17,r6
 8003658:	8889803a 	cmpltu	r4,r17,r2
 800365c:	28e7c83a 	sub	r19,r5,r3
 8003660:	9927c83a 	sub	r19,r19,r4
 8003664:	9900202c 	andhi	r4,r19,128
 8003668:	20006226 	beq	r4,zero,80037f4 <__subdf3+0x4f8>
 800366c:	3463c83a 	sub	r17,r6,r17
 8003670:	194bc83a 	sub	r5,r3,r5
 8003674:	344d803a 	cmpltu	r6,r6,r17
 8003678:	29a7c83a 	sub	r19,r5,r6
 800367c:	3825883a 	mov	r18,r7
 8003680:	983f841e 	bne	r19,zero,8003494 <__alt_data_end+0xfc003494>
 8003684:	8809883a 	mov	r4,r17
 8003688:	8003d240 	call	8003d24 <__clzsi2>
 800368c:	10800804 	addi	r2,r2,32
 8003690:	10fffe04 	addi	r3,r2,-8
 8003694:	010007c4 	movi	r4,31
 8003698:	20ff830e 	bge	r4,r3,80034a8 <__alt_data_end+0xfc0034a8>
 800369c:	14fff604 	addi	r19,r2,-40
 80036a0:	8ce6983a 	sll	r19,r17,r19
 80036a4:	0023883a 	mov	r17,zero
 80036a8:	1c3f860e 	bge	r3,r16,80034c4 <__alt_data_end+0xfc0034c4>
 80036ac:	017fe034 	movhi	r5,65408
 80036b0:	297fffc4 	addi	r5,r5,-1
 80036b4:	80e1c83a 	sub	r16,r16,r3
 80036b8:	994a703a 	and	r5,r19,r5
 80036bc:	003f3206 	br	8003388 <__alt_data_end+0xfc003388>
 80036c0:	0009883a 	mov	r4,zero
 80036c4:	0005883a 	mov	r2,zero
 80036c8:	003f4706 	br	80033e8 <__alt_data_end+0xfc0033e8>
 80036cc:	198cb03a 	or	r6,r3,r6
 80036d0:	300cc03a 	cmpne	r6,r6,zero
 80036d4:	0005883a 	mov	r2,zero
 80036d8:	003f6306 	br	8003468 <__alt_data_end+0xfc003468>
 80036dc:	10009d1e 	bne	r2,zero,8003954 <__subdf3+0x658>
 80036e0:	81c00044 	addi	r7,r16,1
 80036e4:	3881ffcc 	andi	r2,r7,2047
 80036e8:	02400044 	movi	r9,1
 80036ec:	4880680e 	bge	r9,r2,8003890 <__subdf3+0x594>
 80036f0:	0081ffc4 	movi	r2,2047
 80036f4:	3880ae26 	beq	r7,r2,80039b0 <__subdf3+0x6b4>
 80036f8:	344d883a 	add	r6,r6,r17
 80036fc:	3463803a 	cmpltu	r17,r6,r17
 8003700:	194b883a 	add	r5,r3,r5
 8003704:	2c4b883a 	add	r5,r5,r17
 8003708:	282297fa 	slli	r17,r5,31
 800370c:	300cd07a 	srli	r6,r6,1
 8003710:	280ad07a 	srli	r5,r5,1
 8003714:	3821883a 	mov	r16,r7
 8003718:	89a2b03a 	or	r17,r17,r6
 800371c:	003f1a06 	br	8003388 <__alt_data_end+0xfc003388>
 8003720:	0101ffc4 	movi	r4,2047
 8003724:	813f431e 	bne	r16,r4,8003434 <__alt_data_end+0xfc003434>
 8003728:	003f1706 	br	8003388 <__alt_data_end+0xfc003388>
 800372c:	80bff844 	addi	r2,r16,-31
 8003730:	00c00804 	movi	r3,32
 8003734:	9884d83a 	srl	r2,r19,r2
 8003738:	28c05126 	beq	r5,r3,8003880 <__subdf3+0x584>
 800373c:	00c00fc4 	movi	r3,63
 8003740:	1c21c83a 	sub	r16,r3,r16
 8003744:	9c26983a 	sll	r19,r19,r16
 8003748:	9c62b03a 	or	r17,r19,r17
 800374c:	8822c03a 	cmpne	r17,r17,zero
 8003750:	88a2b03a 	or	r17,r17,r2
 8003754:	000b883a 	mov	r5,zero
 8003758:	0021883a 	mov	r16,zero
 800375c:	003fb406 	br	8003630 <__alt_data_end+0xfc003630>
 8003760:	113ff804 	addi	r4,r2,-32
 8003764:	01c00804 	movi	r7,32
 8003768:	1908d83a 	srl	r4,r3,r4
 800376c:	11c04626 	beq	r2,r7,8003888 <__subdf3+0x58c>
 8003770:	01c01004 	movi	r7,64
 8003774:	3885c83a 	sub	r2,r7,r2
 8003778:	1884983a 	sll	r2,r3,r2
 800377c:	118cb03a 	or	r6,r2,r6
 8003780:	300cc03a 	cmpne	r6,r6,zero
 8003784:	310cb03a 	or	r6,r6,r4
 8003788:	0005883a 	mov	r2,zero
 800378c:	003f3606 	br	8003468 <__alt_data_end+0xfc003468>
 8003790:	80002b26 	beq	r16,zero,8003840 <__subdf3+0x544>
 8003794:	0101ffc4 	movi	r4,2047
 8003798:	51006926 	beq	r10,r4,8003940 <__subdf3+0x644>
 800379c:	0085c83a 	sub	r2,zero,r2
 80037a0:	29402034 	orhi	r5,r5,128
 80037a4:	01000e04 	movi	r4,56
 80037a8:	20807d16 	blt	r4,r2,80039a0 <__subdf3+0x6a4>
 80037ac:	010007c4 	movi	r4,31
 80037b0:	2080d916 	blt	r4,r2,8003b18 <__subdf3+0x81c>
 80037b4:	01000804 	movi	r4,32
 80037b8:	2089c83a 	sub	r4,r4,r2
 80037bc:	2912983a 	sll	r9,r5,r4
 80037c0:	8890d83a 	srl	r8,r17,r2
 80037c4:	8908983a 	sll	r4,r17,r4
 80037c8:	2884d83a 	srl	r2,r5,r2
 80037cc:	4a22b03a 	or	r17,r9,r8
 80037d0:	2008c03a 	cmpne	r4,r4,zero
 80037d4:	8922b03a 	or	r17,r17,r4
 80037d8:	3463c83a 	sub	r17,r6,r17
 80037dc:	1885c83a 	sub	r2,r3,r2
 80037e0:	344d803a 	cmpltu	r6,r6,r17
 80037e4:	118bc83a 	sub	r5,r2,r6
 80037e8:	5021883a 	mov	r16,r10
 80037ec:	3825883a 	mov	r18,r7
 80037f0:	003f2206 	br	800347c <__alt_data_end+0xfc00347c>
 80037f4:	9886b03a 	or	r3,r19,r2
 80037f8:	18001c1e 	bne	r3,zero,800386c <__subdf3+0x570>
 80037fc:	0011883a 	mov	r8,zero
 8003800:	000b883a 	mov	r5,zero
 8003804:	0023883a 	mov	r17,zero
 8003808:	0021883a 	mov	r16,zero
 800380c:	003f3e06 	br	8003508 <__alt_data_end+0xfc003508>
 8003810:	010007c4 	movi	r4,31
 8003814:	20803c16 	blt	r4,r2,8003908 <__subdf3+0x60c>
 8003818:	01000804 	movi	r4,32
 800381c:	2089c83a 	sub	r4,r4,r2
 8003820:	1912983a 	sll	r9,r3,r4
 8003824:	308ed83a 	srl	r7,r6,r2
 8003828:	3108983a 	sll	r4,r6,r4
 800382c:	1884d83a 	srl	r2,r3,r2
 8003830:	49ceb03a 	or	r7,r9,r7
 8003834:	2008c03a 	cmpne	r4,r4,zero
 8003838:	390eb03a 	or	r7,r7,r4
 800383c:	003f4706 	br	800355c <__alt_data_end+0xfc00355c>
 8003840:	2c48b03a 	or	r4,r5,r17
 8003844:	20003e26 	beq	r4,zero,8003940 <__subdf3+0x644>
 8003848:	0084303a 	nor	r2,zero,r2
 800384c:	10003a1e 	bne	r2,zero,8003938 <__subdf3+0x63c>
 8003850:	3463c83a 	sub	r17,r6,r17
 8003854:	194bc83a 	sub	r5,r3,r5
 8003858:	344d803a 	cmpltu	r6,r6,r17
 800385c:	298bc83a 	sub	r5,r5,r6
 8003860:	5021883a 	mov	r16,r10
 8003864:	3825883a 	mov	r18,r7
 8003868:	003f0406 	br	800347c <__alt_data_end+0xfc00347c>
 800386c:	1023883a 	mov	r17,r2
 8003870:	003f0706 	br	8003490 <__alt_data_end+0xfc003490>
 8003874:	0101ffc4 	movi	r4,2047
 8003878:	813f331e 	bne	r16,r4,8003548 <__alt_data_end+0xfc003548>
 800387c:	003ec206 	br	8003388 <__alt_data_end+0xfc003388>
 8003880:	0027883a 	mov	r19,zero
 8003884:	003fb006 	br	8003748 <__alt_data_end+0xfc003748>
 8003888:	0005883a 	mov	r2,zero
 800388c:	003fbb06 	br	800377c <__alt_data_end+0xfc00377c>
 8003890:	2c44b03a 	or	r2,r5,r17
 8003894:	80008b1e 	bne	r16,zero,8003ac4 <__subdf3+0x7c8>
 8003898:	1000b526 	beq	r2,zero,8003b70 <__subdf3+0x874>
 800389c:	1984b03a 	or	r2,r3,r6
 80038a0:	103eb926 	beq	r2,zero,8003388 <__alt_data_end+0xfc003388>
 80038a4:	3449883a 	add	r4,r6,r17
 80038a8:	2463803a 	cmpltu	r17,r4,r17
 80038ac:	194b883a 	add	r5,r3,r5
 80038b0:	2c4b883a 	add	r5,r5,r17
 80038b4:	2880202c 	andhi	r2,r5,128
 80038b8:	2023883a 	mov	r17,r4
 80038bc:	103f5c26 	beq	r2,zero,8003630 <__alt_data_end+0xfc003630>
 80038c0:	00bfe034 	movhi	r2,65408
 80038c4:	10bfffc4 	addi	r2,r2,-1
 80038c8:	4821883a 	mov	r16,r9
 80038cc:	288a703a 	and	r5,r5,r2
 80038d0:	003ead06 	br	8003388 <__alt_data_end+0xfc003388>
 80038d4:	2c44b03a 	or	r2,r5,r17
 80038d8:	8000291e 	bne	r16,zero,8003980 <__subdf3+0x684>
 80038dc:	10004f1e 	bne	r2,zero,8003a1c <__subdf3+0x720>
 80038e0:	1984b03a 	or	r2,r3,r6
 80038e4:	10000426 	beq	r2,zero,80038f8 <__subdf3+0x5fc>
 80038e8:	180b883a 	mov	r5,r3
 80038ec:	3023883a 	mov	r17,r6
 80038f0:	3825883a 	mov	r18,r7
 80038f4:	003ea406 	br	8003388 <__alt_data_end+0xfc003388>
 80038f8:	0011883a 	mov	r8,zero
 80038fc:	000b883a 	mov	r5,zero
 8003900:	0023883a 	mov	r17,zero
 8003904:	003f0006 	br	8003508 <__alt_data_end+0xfc003508>
 8003908:	11fff804 	addi	r7,r2,-32
 800390c:	19c8d83a 	srl	r4,r3,r7
 8003910:	01c00804 	movi	r7,32
 8003914:	11c07e26 	beq	r2,r7,8003b10 <__subdf3+0x814>
 8003918:	01c01004 	movi	r7,64
 800391c:	3885c83a 	sub	r2,r7,r2
 8003920:	1884983a 	sll	r2,r3,r2
 8003924:	118cb03a 	or	r6,r2,r6
 8003928:	300ec03a 	cmpne	r7,r6,zero
 800392c:	390eb03a 	or	r7,r7,r4
 8003930:	0005883a 	mov	r2,zero
 8003934:	003f0906 	br	800355c <__alt_data_end+0xfc00355c>
 8003938:	0101ffc4 	movi	r4,2047
 800393c:	513f991e 	bne	r10,r4,80037a4 <__alt_data_end+0xfc0037a4>
 8003940:	180b883a 	mov	r5,r3
 8003944:	3023883a 	mov	r17,r6
 8003948:	5021883a 	mov	r16,r10
 800394c:	3825883a 	mov	r18,r7
 8003950:	003e8d06 	br	8003388 <__alt_data_end+0xfc003388>
 8003954:	80001a1e 	bne	r16,zero,80039c0 <__subdf3+0x6c4>
 8003958:	2c48b03a 	or	r4,r5,r17
 800395c:	20005526 	beq	r4,zero,8003ab4 <__subdf3+0x7b8>
 8003960:	0084303a 	nor	r2,zero,r2
 8003964:	1000511e 	bne	r2,zero,8003aac <__subdf3+0x7b0>
 8003968:	89a3883a 	add	r17,r17,r6
 800396c:	194b883a 	add	r5,r3,r5
 8003970:	898d803a 	cmpltu	r6,r17,r6
 8003974:	298b883a 	add	r5,r5,r6
 8003978:	5021883a 	mov	r16,r10
 800397c:	003efc06 	br	8003570 <__alt_data_end+0xfc003570>
 8003980:	1000341e 	bne	r2,zero,8003a54 <__subdf3+0x758>
 8003984:	1984b03a 	or	r2,r3,r6
 8003988:	10006f26 	beq	r2,zero,8003b48 <__subdf3+0x84c>
 800398c:	180b883a 	mov	r5,r3
 8003990:	3023883a 	mov	r17,r6
 8003994:	3825883a 	mov	r18,r7
 8003998:	0401ffc4 	movi	r16,2047
 800399c:	003e7a06 	br	8003388 <__alt_data_end+0xfc003388>
 80039a0:	2c62b03a 	or	r17,r5,r17
 80039a4:	8822c03a 	cmpne	r17,r17,zero
 80039a8:	0005883a 	mov	r2,zero
 80039ac:	003f8a06 	br	80037d8 <__alt_data_end+0xfc0037d8>
 80039b0:	3821883a 	mov	r16,r7
 80039b4:	000b883a 	mov	r5,zero
 80039b8:	0023883a 	mov	r17,zero
 80039bc:	003ed206 	br	8003508 <__alt_data_end+0xfc003508>
 80039c0:	0101ffc4 	movi	r4,2047
 80039c4:	51003b26 	beq	r10,r4,8003ab4 <__subdf3+0x7b8>
 80039c8:	0085c83a 	sub	r2,zero,r2
 80039cc:	29402034 	orhi	r5,r5,128
 80039d0:	01000e04 	movi	r4,56
 80039d4:	20806216 	blt	r4,r2,8003b60 <__subdf3+0x864>
 80039d8:	010007c4 	movi	r4,31
 80039dc:	20806b16 	blt	r4,r2,8003b8c <__subdf3+0x890>
 80039e0:	01000804 	movi	r4,32
 80039e4:	2089c83a 	sub	r4,r4,r2
 80039e8:	2912983a 	sll	r9,r5,r4
 80039ec:	888ed83a 	srl	r7,r17,r2
 80039f0:	8908983a 	sll	r4,r17,r4
 80039f4:	2884d83a 	srl	r2,r5,r2
 80039f8:	49e2b03a 	or	r17,r9,r7
 80039fc:	2008c03a 	cmpne	r4,r4,zero
 8003a00:	8922b03a 	or	r17,r17,r4
 8003a04:	89a3883a 	add	r17,r17,r6
 8003a08:	10c5883a 	add	r2,r2,r3
 8003a0c:	898d803a 	cmpltu	r6,r17,r6
 8003a10:	118b883a 	add	r5,r2,r6
 8003a14:	5021883a 	mov	r16,r10
 8003a18:	003ed506 	br	8003570 <__alt_data_end+0xfc003570>
 8003a1c:	1984b03a 	or	r2,r3,r6
 8003a20:	103e5926 	beq	r2,zero,8003388 <__alt_data_end+0xfc003388>
 8003a24:	8989c83a 	sub	r4,r17,r6
 8003a28:	8911803a 	cmpltu	r8,r17,r4
 8003a2c:	28c5c83a 	sub	r2,r5,r3
 8003a30:	1205c83a 	sub	r2,r2,r8
 8003a34:	1200202c 	andhi	r8,r2,128
 8003a38:	403ef926 	beq	r8,zero,8003620 <__alt_data_end+0xfc003620>
 8003a3c:	3463c83a 	sub	r17,r6,r17
 8003a40:	194bc83a 	sub	r5,r3,r5
 8003a44:	344d803a 	cmpltu	r6,r6,r17
 8003a48:	298bc83a 	sub	r5,r5,r6
 8003a4c:	3825883a 	mov	r18,r7
 8003a50:	003e4d06 	br	8003388 <__alt_data_end+0xfc003388>
 8003a54:	1984b03a 	or	r2,r3,r6
 8003a58:	10002b26 	beq	r2,zero,8003b08 <__subdf3+0x80c>
 8003a5c:	2808d0fa 	srli	r4,r5,3
 8003a60:	8822d0fa 	srli	r17,r17,3
 8003a64:	280a977a 	slli	r5,r5,29
 8003a68:	2080022c 	andhi	r2,r4,8
 8003a6c:	2c62b03a 	or	r17,r5,r17
 8003a70:	10000826 	beq	r2,zero,8003a94 <__subdf3+0x798>
 8003a74:	1810d0fa 	srli	r8,r3,3
 8003a78:	4080022c 	andhi	r2,r8,8
 8003a7c:	1000051e 	bne	r2,zero,8003a94 <__subdf3+0x798>
 8003a80:	300cd0fa 	srli	r6,r6,3
 8003a84:	1804977a 	slli	r2,r3,29
 8003a88:	4009883a 	mov	r4,r8
 8003a8c:	3825883a 	mov	r18,r7
 8003a90:	11a2b03a 	or	r17,r2,r6
 8003a94:	880ad77a 	srli	r5,r17,29
 8003a98:	200890fa 	slli	r4,r4,3
 8003a9c:	882290fa 	slli	r17,r17,3
 8003aa0:	0401ffc4 	movi	r16,2047
 8003aa4:	290ab03a 	or	r5,r5,r4
 8003aa8:	003e3706 	br	8003388 <__alt_data_end+0xfc003388>
 8003aac:	0101ffc4 	movi	r4,2047
 8003ab0:	513fc71e 	bne	r10,r4,80039d0 <__alt_data_end+0xfc0039d0>
 8003ab4:	180b883a 	mov	r5,r3
 8003ab8:	3023883a 	mov	r17,r6
 8003abc:	5021883a 	mov	r16,r10
 8003ac0:	003e3106 	br	8003388 <__alt_data_end+0xfc003388>
 8003ac4:	10002d26 	beq	r2,zero,8003b7c <__subdf3+0x880>
 8003ac8:	1984b03a 	or	r2,r3,r6
 8003acc:	10000e26 	beq	r2,zero,8003b08 <__subdf3+0x80c>
 8003ad0:	2808d0fa 	srli	r4,r5,3
 8003ad4:	8822d0fa 	srli	r17,r17,3
 8003ad8:	280a977a 	slli	r5,r5,29
 8003adc:	2080022c 	andhi	r2,r4,8
 8003ae0:	2c62b03a 	or	r17,r5,r17
 8003ae4:	103feb26 	beq	r2,zero,8003a94 <__alt_data_end+0xfc003a94>
 8003ae8:	180ed0fa 	srli	r7,r3,3
 8003aec:	3880022c 	andhi	r2,r7,8
 8003af0:	103fe81e 	bne	r2,zero,8003a94 <__alt_data_end+0xfc003a94>
 8003af4:	300cd0fa 	srli	r6,r6,3
 8003af8:	1804977a 	slli	r2,r3,29
 8003afc:	3809883a 	mov	r4,r7
 8003b00:	11a2b03a 	or	r17,r2,r6
 8003b04:	003fe306 	br	8003a94 <__alt_data_end+0xfc003a94>
 8003b08:	0401ffc4 	movi	r16,2047
 8003b0c:	003e1e06 	br	8003388 <__alt_data_end+0xfc003388>
 8003b10:	0005883a 	mov	r2,zero
 8003b14:	003f8306 	br	8003924 <__alt_data_end+0xfc003924>
 8003b18:	113ff804 	addi	r4,r2,-32
 8003b1c:	02000804 	movi	r8,32
 8003b20:	2908d83a 	srl	r4,r5,r4
 8003b24:	12002526 	beq	r2,r8,8003bbc <__subdf3+0x8c0>
 8003b28:	02001004 	movi	r8,64
 8003b2c:	4085c83a 	sub	r2,r8,r2
 8003b30:	288a983a 	sll	r5,r5,r2
 8003b34:	2c62b03a 	or	r17,r5,r17
 8003b38:	8822c03a 	cmpne	r17,r17,zero
 8003b3c:	8922b03a 	or	r17,r17,r4
 8003b40:	0005883a 	mov	r2,zero
 8003b44:	003f2406 	br	80037d8 <__alt_data_end+0xfc0037d8>
 8003b48:	01402034 	movhi	r5,128
 8003b4c:	0011883a 	mov	r8,zero
 8003b50:	297fffc4 	addi	r5,r5,-1
 8003b54:	047ffe04 	movi	r17,-8
 8003b58:	0401ffc4 	movi	r16,2047
 8003b5c:	003e6a06 	br	8003508 <__alt_data_end+0xfc003508>
 8003b60:	2c62b03a 	or	r17,r5,r17
 8003b64:	8822c03a 	cmpne	r17,r17,zero
 8003b68:	0005883a 	mov	r2,zero
 8003b6c:	003fa506 	br	8003a04 <__alt_data_end+0xfc003a04>
 8003b70:	180b883a 	mov	r5,r3
 8003b74:	3023883a 	mov	r17,r6
 8003b78:	003e0306 	br	8003388 <__alt_data_end+0xfc003388>
 8003b7c:	180b883a 	mov	r5,r3
 8003b80:	3023883a 	mov	r17,r6
 8003b84:	0401ffc4 	movi	r16,2047
 8003b88:	003dff06 	br	8003388 <__alt_data_end+0xfc003388>
 8003b8c:	113ff804 	addi	r4,r2,-32
 8003b90:	01c00804 	movi	r7,32
 8003b94:	2908d83a 	srl	r4,r5,r4
 8003b98:	11c00a26 	beq	r2,r7,8003bc4 <__subdf3+0x8c8>
 8003b9c:	01c01004 	movi	r7,64
 8003ba0:	3885c83a 	sub	r2,r7,r2
 8003ba4:	288a983a 	sll	r5,r5,r2
 8003ba8:	2c62b03a 	or	r17,r5,r17
 8003bac:	8822c03a 	cmpne	r17,r17,zero
 8003bb0:	8922b03a 	or	r17,r17,r4
 8003bb4:	0005883a 	mov	r2,zero
 8003bb8:	003f9206 	br	8003a04 <__alt_data_end+0xfc003a04>
 8003bbc:	000b883a 	mov	r5,zero
 8003bc0:	003fdc06 	br	8003b34 <__alt_data_end+0xfc003b34>
 8003bc4:	000b883a 	mov	r5,zero
 8003bc8:	003ff706 	br	8003ba8 <__alt_data_end+0xfc003ba8>

08003bcc <__fixdfsi>:
 8003bcc:	2806d53a 	srli	r3,r5,20
 8003bd0:	00800434 	movhi	r2,16
 8003bd4:	10bfffc4 	addi	r2,r2,-1
 8003bd8:	18c1ffcc 	andi	r3,r3,2047
 8003bdc:	0180ff84 	movi	r6,1022
 8003be0:	2884703a 	and	r2,r5,r2
 8003be4:	280ad7fa 	srli	r5,r5,31
 8003be8:	30c0130e 	bge	r6,r3,8003c38 <__fixdfsi+0x6c>
 8003bec:	01810744 	movi	r6,1053
 8003bf0:	30c00d16 	blt	r6,r3,8003c28 <__fixdfsi+0x5c>
 8003bf4:	01810cc4 	movi	r6,1075
 8003bf8:	30cdc83a 	sub	r6,r6,r3
 8003bfc:	01c007c4 	movi	r7,31
 8003c00:	10800434 	orhi	r2,r2,16
 8003c04:	39800e0e 	bge	r7,r6,8003c40 <__fixdfsi+0x74>
 8003c08:	010104c4 	movi	r4,1043
 8003c0c:	20c7c83a 	sub	r3,r4,r3
 8003c10:	10c6d83a 	srl	r3,r2,r3
 8003c14:	29403fcc 	andi	r5,r5,255
 8003c18:	0145c83a 	sub	r2,zero,r5
 8003c1c:	1884f03a 	xor	r2,r3,r2
 8003c20:	1145883a 	add	r2,r2,r5
 8003c24:	f800283a 	ret
 8003c28:	00a00034 	movhi	r2,32768
 8003c2c:	10bfffc4 	addi	r2,r2,-1
 8003c30:	2885883a 	add	r2,r5,r2
 8003c34:	f800283a 	ret
 8003c38:	0005883a 	mov	r2,zero
 8003c3c:	f800283a 	ret
 8003c40:	18fefb44 	addi	r3,r3,-1043
 8003c44:	2188d83a 	srl	r4,r4,r6
 8003c48:	10c6983a 	sll	r3,r2,r3
 8003c4c:	20c6b03a 	or	r3,r4,r3
 8003c50:	003ff006 	br	8003c14 <__alt_data_end+0xfc003c14>

08003c54 <__floatsidf>:
 8003c54:	defffd04 	addi	sp,sp,-12
 8003c58:	dc400115 	stw	r17,4(sp)
 8003c5c:	dfc00215 	stw	ra,8(sp)
 8003c60:	dc000015 	stw	r16,0(sp)
 8003c64:	2023883a 	mov	r17,r4
 8003c68:	20001426 	beq	r4,zero,8003cbc <__floatsidf+0x68>
 8003c6c:	2020d7fa 	srli	r16,r4,31
 8003c70:	80000126 	beq	r16,zero,8003c78 <__floatsidf+0x24>
 8003c74:	0123c83a 	sub	r17,zero,r4
 8003c78:	8809883a 	mov	r4,r17
 8003c7c:	8003d240 	call	8003d24 <__clzsi2>
 8003c80:	01410784 	movi	r5,1054
 8003c84:	00c00284 	movi	r3,10
 8003c88:	288bc83a 	sub	r5,r5,r2
 8003c8c:	18801c16 	blt	r3,r2,8003d00 <__floatsidf+0xac>
 8003c90:	00c002c4 	movi	r3,11
 8003c94:	1887c83a 	sub	r3,r3,r2
 8003c98:	88c8d83a 	srl	r4,r17,r3
 8003c9c:	00c00434 	movhi	r3,16
 8003ca0:	18ffffc4 	addi	r3,r3,-1
 8003ca4:	10800544 	addi	r2,r2,21
 8003ca8:	20c8703a 	and	r4,r4,r3
 8003cac:	8884983a 	sll	r2,r17,r2
 8003cb0:	28c1ffcc 	andi	r3,r5,2047
 8003cb4:	800d883a 	mov	r6,r16
 8003cb8:	00000406 	br	8003ccc <__floatsidf+0x78>
 8003cbc:	000d883a 	mov	r6,zero
 8003cc0:	0007883a 	mov	r3,zero
 8003cc4:	0009883a 	mov	r4,zero
 8003cc8:	0005883a 	mov	r2,zero
 8003ccc:	180a953a 	slli	r5,r3,20
 8003cd0:	31803fcc 	andi	r6,r6,255
 8003cd4:	00c00434 	movhi	r3,16
 8003cd8:	300c97fa 	slli	r6,r6,31
 8003cdc:	18ffffc4 	addi	r3,r3,-1
 8003ce0:	20c6703a 	and	r3,r4,r3
 8003ce4:	1946b03a 	or	r3,r3,r5
 8003ce8:	1986b03a 	or	r3,r3,r6
 8003cec:	dfc00217 	ldw	ra,8(sp)
 8003cf0:	dc400117 	ldw	r17,4(sp)
 8003cf4:	dc000017 	ldw	r16,0(sp)
 8003cf8:	dec00304 	addi	sp,sp,12
 8003cfc:	f800283a 	ret
 8003d00:	10fffd44 	addi	r3,r2,-11
 8003d04:	88c8983a 	sll	r4,r17,r3
 8003d08:	00800434 	movhi	r2,16
 8003d0c:	10bfffc4 	addi	r2,r2,-1
 8003d10:	2088703a 	and	r4,r4,r2
 8003d14:	28c1ffcc 	andi	r3,r5,2047
 8003d18:	800d883a 	mov	r6,r16
 8003d1c:	0005883a 	mov	r2,zero
 8003d20:	003fea06 	br	8003ccc <__alt_data_end+0xfc003ccc>

08003d24 <__clzsi2>:
 8003d24:	00bfffd4 	movui	r2,65535
 8003d28:	11000b36 	bltu	r2,r4,8003d58 <__clzsi2+0x34>
 8003d2c:	00803fc4 	movi	r2,255
 8003d30:	1100122e 	bgeu	r2,r4,8003d7c <__clzsi2+0x58>
 8003d34:	00c00204 	movi	r3,8
 8003d38:	01400604 	movi	r5,24
 8003d3c:	20c8d83a 	srl	r4,r4,r3
 8003d40:	008200b4 	movhi	r2,2050
 8003d44:	1085a004 	addi	r2,r2,5760
 8003d48:	1109883a 	add	r4,r2,r4
 8003d4c:	20800003 	ldbu	r2,0(r4)
 8003d50:	2885c83a 	sub	r2,r5,r2
 8003d54:	f800283a 	ret
 8003d58:	00804034 	movhi	r2,256
 8003d5c:	10bfffc4 	addi	r2,r2,-1
 8003d60:	11000336 	bltu	r2,r4,8003d70 <__clzsi2+0x4c>
 8003d64:	00c00404 	movi	r3,16
 8003d68:	180b883a 	mov	r5,r3
 8003d6c:	003ff306 	br	8003d3c <__alt_data_end+0xfc003d3c>
 8003d70:	00c00604 	movi	r3,24
 8003d74:	01400204 	movi	r5,8
 8003d78:	003ff006 	br	8003d3c <__alt_data_end+0xfc003d3c>
 8003d7c:	0007883a 	mov	r3,zero
 8003d80:	01400804 	movi	r5,32
 8003d84:	003fed06 	br	8003d3c <__alt_data_end+0xfc003d3c>

08003d88 <udivmodsi4>:
 8003d88:	2900182e 	bgeu	r5,r4,8003dec <udivmodsi4+0x64>
 8003d8c:	28001716 	blt	r5,zero,8003dec <udivmodsi4+0x64>
 8003d90:	00800804 	movi	r2,32
 8003d94:	00c00044 	movi	r3,1
 8003d98:	00000206 	br	8003da4 <udivmodsi4+0x1c>
 8003d9c:	10001126 	beq	r2,zero,8003de4 <udivmodsi4+0x5c>
 8003da0:	28000516 	blt	r5,zero,8003db8 <udivmodsi4+0x30>
 8003da4:	294b883a 	add	r5,r5,r5
 8003da8:	10bfffc4 	addi	r2,r2,-1
 8003dac:	18c7883a 	add	r3,r3,r3
 8003db0:	293ffa36 	bltu	r5,r4,8003d9c <__alt_data_end+0xfc003d9c>
 8003db4:	18000b26 	beq	r3,zero,8003de4 <udivmodsi4+0x5c>
 8003db8:	0005883a 	mov	r2,zero
 8003dbc:	21400236 	bltu	r4,r5,8003dc8 <udivmodsi4+0x40>
 8003dc0:	2149c83a 	sub	r4,r4,r5
 8003dc4:	10c4b03a 	or	r2,r2,r3
 8003dc8:	1806d07a 	srli	r3,r3,1
 8003dcc:	280ad07a 	srli	r5,r5,1
 8003dd0:	183ffa1e 	bne	r3,zero,8003dbc <__alt_data_end+0xfc003dbc>
 8003dd4:	3000011e 	bne	r6,zero,8003ddc <udivmodsi4+0x54>
 8003dd8:	f800283a 	ret
 8003ddc:	2005883a 	mov	r2,r4
 8003de0:	f800283a 	ret
 8003de4:	0005883a 	mov	r2,zero
 8003de8:	003ffa06 	br	8003dd4 <__alt_data_end+0xfc003dd4>
 8003dec:	00c00044 	movi	r3,1
 8003df0:	003ff106 	br	8003db8 <__alt_data_end+0xfc003db8>

08003df4 <__divsi3>:
 8003df4:	defffe04 	addi	sp,sp,-8
 8003df8:	dfc00115 	stw	ra,4(sp)
 8003dfc:	dc000015 	stw	r16,0(sp)
 8003e00:	20000b16 	blt	r4,zero,8003e30 <__divsi3+0x3c>
 8003e04:	0021883a 	mov	r16,zero
 8003e08:	28000c16 	blt	r5,zero,8003e3c <__divsi3+0x48>
 8003e0c:	000d883a 	mov	r6,zero
 8003e10:	8003d880 	call	8003d88 <udivmodsi4>
 8003e14:	0407c83a 	sub	r3,zero,r16
 8003e18:	1884f03a 	xor	r2,r3,r2
 8003e1c:	1405883a 	add	r2,r2,r16
 8003e20:	dfc00117 	ldw	ra,4(sp)
 8003e24:	dc000017 	ldw	r16,0(sp)
 8003e28:	dec00204 	addi	sp,sp,8
 8003e2c:	f800283a 	ret
 8003e30:	0109c83a 	sub	r4,zero,r4
 8003e34:	04000044 	movi	r16,1
 8003e38:	283ff40e 	bge	r5,zero,8003e0c <__alt_data_end+0xfc003e0c>
 8003e3c:	014bc83a 	sub	r5,zero,r5
 8003e40:	8400005c 	xori	r16,r16,1
 8003e44:	003ff106 	br	8003e0c <__alt_data_end+0xfc003e0c>

08003e48 <__modsi3>:
 8003e48:	defffd04 	addi	sp,sp,-12
 8003e4c:	dfc00215 	stw	ra,8(sp)
 8003e50:	dc400115 	stw	r17,4(sp)
 8003e54:	dc000015 	stw	r16,0(sp)
 8003e58:	20000c16 	blt	r4,zero,8003e8c <__modsi3+0x44>
 8003e5c:	0023883a 	mov	r17,zero
 8003e60:	0021883a 	mov	r16,zero
 8003e64:	28000d16 	blt	r5,zero,8003e9c <__modsi3+0x54>
 8003e68:	01800044 	movi	r6,1
 8003e6c:	8003d880 	call	8003d88 <udivmodsi4>
 8003e70:	1404f03a 	xor	r2,r2,r16
 8003e74:	8885883a 	add	r2,r17,r2
 8003e78:	dfc00217 	ldw	ra,8(sp)
 8003e7c:	dc400117 	ldw	r17,4(sp)
 8003e80:	dc000017 	ldw	r16,0(sp)
 8003e84:	dec00304 	addi	sp,sp,12
 8003e88:	f800283a 	ret
 8003e8c:	0109c83a 	sub	r4,zero,r4
 8003e90:	04400044 	movi	r17,1
 8003e94:	043fffc4 	movi	r16,-1
 8003e98:	283ff30e 	bge	r5,zero,8003e68 <__alt_data_end+0xfc003e68>
 8003e9c:	014bc83a 	sub	r5,zero,r5
 8003ea0:	003ff106 	br	8003e68 <__alt_data_end+0xfc003e68>

08003ea4 <__udivsi3>:
 8003ea4:	000d883a 	mov	r6,zero
 8003ea8:	8003d881 	jmpi	8003d88 <udivmodsi4>

08003eac <__umodsi3>:
 8003eac:	01800044 	movi	r6,1
 8003eb0:	8003d881 	jmpi	8003d88 <udivmodsi4>

08003eb4 <atof>:
 8003eb4:	000b883a 	mov	r5,zero
 8003eb8:	80060d41 	jmpi	80060d4 <strtod>

08003ebc <difftime>:
 8003ebc:	deffff04 	addi	sp,sp,-4
 8003ec0:	2149c83a 	sub	r4,r4,r5
 8003ec4:	dfc00015 	stw	ra,0(sp)
 8003ec8:	8003c540 	call	8003c54 <__floatsidf>
 8003ecc:	dfc00017 	ldw	ra,0(sp)
 8003ed0:	dec00104 	addi	sp,sp,4
 8003ed4:	f800283a 	ret

08003ed8 <malloc>:
 8003ed8:	008200b4 	movhi	r2,2050
 8003edc:	108d4d04 	addi	r2,r2,13620
 8003ee0:	200b883a 	mov	r5,r4
 8003ee4:	11000017 	ldw	r4,0(r2)
 8003ee8:	8003f001 	jmpi	8003f00 <_malloc_r>

08003eec <free>:
 8003eec:	008200b4 	movhi	r2,2050
 8003ef0:	108d4d04 	addi	r2,r2,13620
 8003ef4:	200b883a 	mov	r5,r4
 8003ef8:	11000017 	ldw	r4,0(r2)
 8003efc:	800c4201 	jmpi	800c420 <_free_r>

08003f00 <_malloc_r>:
 8003f00:	defff504 	addi	sp,sp,-44
 8003f04:	dc800315 	stw	r18,12(sp)
 8003f08:	dfc00a15 	stw	ra,40(sp)
 8003f0c:	df000915 	stw	fp,36(sp)
 8003f10:	ddc00815 	stw	r23,32(sp)
 8003f14:	dd800715 	stw	r22,28(sp)
 8003f18:	dd400615 	stw	r21,24(sp)
 8003f1c:	dd000515 	stw	r20,20(sp)
 8003f20:	dcc00415 	stw	r19,16(sp)
 8003f24:	dc400215 	stw	r17,8(sp)
 8003f28:	dc000115 	stw	r16,4(sp)
 8003f2c:	288002c4 	addi	r2,r5,11
 8003f30:	00c00584 	movi	r3,22
 8003f34:	2025883a 	mov	r18,r4
 8003f38:	18802a2e 	bgeu	r3,r2,8003fe4 <_malloc_r+0xe4>
 8003f3c:	047ffe04 	movi	r17,-8
 8003f40:	1462703a 	and	r17,r2,r17
 8003f44:	88009e16 	blt	r17,zero,80041c0 <_malloc_r+0x2c0>
 8003f48:	89409d36 	bltu	r17,r5,80041c0 <_malloc_r+0x2c0>
 8003f4c:	8014a080 	call	8014a08 <__malloc_lock>
 8003f50:	00807dc4 	movi	r2,503
 8003f54:	14402736 	bltu	r2,r17,8003ff4 <_malloc_r+0xf4>
 8003f58:	8806d0fa 	srli	r3,r17,3
 8003f5c:	04c200b4 	movhi	r19,2050
 8003f60:	9cc68a04 	addi	r19,r19,6696
 8003f64:	18c5883a 	add	r2,r3,r3
 8003f68:	1085883a 	add	r2,r2,r2
 8003f6c:	1085883a 	add	r2,r2,r2
 8003f70:	9885883a 	add	r2,r19,r2
 8003f74:	14000317 	ldw	r16,12(r2)
 8003f78:	80814a26 	beq	r16,r2,80044a4 <_malloc_r+0x5a4>
 8003f7c:	80c00117 	ldw	r3,4(r16)
 8003f80:	81000317 	ldw	r4,12(r16)
 8003f84:	00bfff04 	movi	r2,-4
 8003f88:	1884703a 	and	r2,r3,r2
 8003f8c:	81400217 	ldw	r5,8(r16)
 8003f90:	8085883a 	add	r2,r16,r2
 8003f94:	10c00117 	ldw	r3,4(r2)
 8003f98:	29000315 	stw	r4,12(r5)
 8003f9c:	21400215 	stw	r5,8(r4)
 8003fa0:	18c00054 	ori	r3,r3,1
 8003fa4:	10c00115 	stw	r3,4(r2)
 8003fa8:	9009883a 	mov	r4,r18
 8003fac:	8014a280 	call	8014a28 <__malloc_unlock>
 8003fb0:	80800204 	addi	r2,r16,8
 8003fb4:	dfc00a17 	ldw	ra,40(sp)
 8003fb8:	df000917 	ldw	fp,36(sp)
 8003fbc:	ddc00817 	ldw	r23,32(sp)
 8003fc0:	dd800717 	ldw	r22,28(sp)
 8003fc4:	dd400617 	ldw	r21,24(sp)
 8003fc8:	dd000517 	ldw	r20,20(sp)
 8003fcc:	dcc00417 	ldw	r19,16(sp)
 8003fd0:	dc800317 	ldw	r18,12(sp)
 8003fd4:	dc400217 	ldw	r17,8(sp)
 8003fd8:	dc000117 	ldw	r16,4(sp)
 8003fdc:	dec00b04 	addi	sp,sp,44
 8003fe0:	f800283a 	ret
 8003fe4:	04400404 	movi	r17,16
 8003fe8:	89407536 	bltu	r17,r5,80041c0 <_malloc_r+0x2c0>
 8003fec:	8014a080 	call	8014a08 <__malloc_lock>
 8003ff0:	003fd906 	br	8003f58 <__alt_data_end+0xfc003f58>
 8003ff4:	8806d27a 	srli	r3,r17,9
 8003ff8:	18007526 	beq	r3,zero,80041d0 <_malloc_r+0x2d0>
 8003ffc:	00800104 	movi	r2,4
 8004000:	10c0ef36 	bltu	r2,r3,80043c0 <_malloc_r+0x4c0>
 8004004:	8806d1ba 	srli	r3,r17,6
 8004008:	19c00e04 	addi	r7,r3,56
 800400c:	39cb883a 	add	r5,r7,r7
 8004010:	04c200b4 	movhi	r19,2050
 8004014:	294b883a 	add	r5,r5,r5
 8004018:	9cc68a04 	addi	r19,r19,6696
 800401c:	294b883a 	add	r5,r5,r5
 8004020:	994b883a 	add	r5,r19,r5
 8004024:	2c000317 	ldw	r16,12(r5)
 8004028:	2c000e26 	beq	r5,r16,8004064 <_malloc_r+0x164>
 800402c:	80800117 	ldw	r2,4(r16)
 8004030:	01bfff04 	movi	r6,-4
 8004034:	010003c4 	movi	r4,15
 8004038:	1184703a 	and	r2,r2,r6
 800403c:	1447c83a 	sub	r3,r2,r17
 8004040:	20c00716 	blt	r4,r3,8004060 <_malloc_r+0x160>
 8004044:	1800650e 	bge	r3,zero,80041dc <_malloc_r+0x2dc>
 8004048:	84000317 	ldw	r16,12(r16)
 800404c:	2c000526 	beq	r5,r16,8004064 <_malloc_r+0x164>
 8004050:	80800117 	ldw	r2,4(r16)
 8004054:	1184703a 	and	r2,r2,r6
 8004058:	1447c83a 	sub	r3,r2,r17
 800405c:	20fff90e 	bge	r4,r3,8004044 <__alt_data_end+0xfc004044>
 8004060:	39ffffc4 	addi	r7,r7,-1
 8004064:	38c00044 	addi	r3,r7,1
 8004068:	018200b4 	movhi	r6,2050
 800406c:	9c000417 	ldw	r16,16(r19)
 8004070:	31868a04 	addi	r6,r6,6696
 8004074:	32400204 	addi	r9,r6,8
 8004078:	82410326 	beq	r16,r9,8004488 <_malloc_r+0x588>
 800407c:	81000117 	ldw	r4,4(r16)
 8004080:	00bfff04 	movi	r2,-4
 8004084:	208e703a 	and	r7,r4,r2
 8004088:	3c45c83a 	sub	r2,r7,r17
 800408c:	010003c4 	movi	r4,15
 8004090:	2080ee16 	blt	r4,r2,800444c <_malloc_r+0x54c>
 8004094:	32400515 	stw	r9,20(r6)
 8004098:	32400415 	stw	r9,16(r6)
 800409c:	1000510e 	bge	r2,zero,80041e4 <_malloc_r+0x2e4>
 80040a0:	00807fc4 	movi	r2,511
 80040a4:	11c0ce36 	bltu	r2,r7,80043e0 <_malloc_r+0x4e0>
 80040a8:	3808d0fa 	srli	r4,r7,3
 80040ac:	01c00044 	movi	r7,1
 80040b0:	30800117 	ldw	r2,4(r6)
 80040b4:	210b883a 	add	r5,r4,r4
 80040b8:	294b883a 	add	r5,r5,r5
 80040bc:	2009d0ba 	srai	r4,r4,2
 80040c0:	294b883a 	add	r5,r5,r5
 80040c4:	298b883a 	add	r5,r5,r6
 80040c8:	2a000217 	ldw	r8,8(r5)
 80040cc:	3908983a 	sll	r4,r7,r4
 80040d0:	81400315 	stw	r5,12(r16)
 80040d4:	82000215 	stw	r8,8(r16)
 80040d8:	2088b03a 	or	r4,r4,r2
 80040dc:	2c000215 	stw	r16,8(r5)
 80040e0:	31000115 	stw	r4,4(r6)
 80040e4:	44000315 	stw	r16,12(r8)
 80040e8:	1805d0ba 	srai	r2,r3,2
 80040ec:	01400044 	movi	r5,1
 80040f0:	288a983a 	sll	r5,r5,r2
 80040f4:	21404336 	bltu	r4,r5,8004204 <_malloc_r+0x304>
 80040f8:	2144703a 	and	r2,r4,r5
 80040fc:	10000a1e 	bne	r2,zero,8004128 <_malloc_r+0x228>
 8004100:	00bfff04 	movi	r2,-4
 8004104:	294b883a 	add	r5,r5,r5
 8004108:	1886703a 	and	r3,r3,r2
 800410c:	2144703a 	and	r2,r4,r5
 8004110:	18c00104 	addi	r3,r3,4
 8004114:	1000041e 	bne	r2,zero,8004128 <_malloc_r+0x228>
 8004118:	294b883a 	add	r5,r5,r5
 800411c:	2144703a 	and	r2,r4,r5
 8004120:	18c00104 	addi	r3,r3,4
 8004124:	103ffc26 	beq	r2,zero,8004118 <__alt_data_end+0xfc004118>
 8004128:	023fff04 	movi	r8,-4
 800412c:	01c003c4 	movi	r7,15
 8004130:	18c5883a 	add	r2,r3,r3
 8004134:	1085883a 	add	r2,r2,r2
 8004138:	1085883a 	add	r2,r2,r2
 800413c:	9895883a 	add	r10,r19,r2
 8004140:	52c00304 	addi	r11,r10,12
 8004144:	1819883a 	mov	r12,r3
 8004148:	5c000017 	ldw	r16,0(r11)
 800414c:	59bffd04 	addi	r6,r11,-12
 8004150:	8180041e 	bne	r16,r6,8004164 <_malloc_r+0x264>
 8004154:	0000ce06 	br	8004490 <_malloc_r+0x590>
 8004158:	2000d70e 	bge	r4,zero,80044b8 <_malloc_r+0x5b8>
 800415c:	84000317 	ldw	r16,12(r16)
 8004160:	8180cb26 	beq	r16,r6,8004490 <_malloc_r+0x590>
 8004164:	80800117 	ldw	r2,4(r16)
 8004168:	1204703a 	and	r2,r2,r8
 800416c:	1449c83a 	sub	r4,r2,r17
 8004170:	393ff90e 	bge	r7,r4,8004158 <__alt_data_end+0xfc004158>
 8004174:	80800317 	ldw	r2,12(r16)
 8004178:	80c00217 	ldw	r3,8(r16)
 800417c:	89400054 	ori	r5,r17,1
 8004180:	81400115 	stw	r5,4(r16)
 8004184:	18800315 	stw	r2,12(r3)
 8004188:	10c00215 	stw	r3,8(r2)
 800418c:	8463883a 	add	r17,r16,r17
 8004190:	9c400515 	stw	r17,20(r19)
 8004194:	9c400415 	stw	r17,16(r19)
 8004198:	20800054 	ori	r2,r4,1
 800419c:	88800115 	stw	r2,4(r17)
 80041a0:	8a400315 	stw	r9,12(r17)
 80041a4:	8a400215 	stw	r9,8(r17)
 80041a8:	8923883a 	add	r17,r17,r4
 80041ac:	89000015 	stw	r4,0(r17)
 80041b0:	9009883a 	mov	r4,r18
 80041b4:	8014a280 	call	8014a28 <__malloc_unlock>
 80041b8:	80800204 	addi	r2,r16,8
 80041bc:	003f7d06 	br	8003fb4 <__alt_data_end+0xfc003fb4>
 80041c0:	00800304 	movi	r2,12
 80041c4:	90800015 	stw	r2,0(r18)
 80041c8:	0005883a 	mov	r2,zero
 80041cc:	003f7906 	br	8003fb4 <__alt_data_end+0xfc003fb4>
 80041d0:	01401f84 	movi	r5,126
 80041d4:	01c00fc4 	movi	r7,63
 80041d8:	003f8d06 	br	8004010 <__alt_data_end+0xfc004010>
 80041dc:	81000317 	ldw	r4,12(r16)
 80041e0:	003f6a06 	br	8003f8c <__alt_data_end+0xfc003f8c>
 80041e4:	81c5883a 	add	r2,r16,r7
 80041e8:	10c00117 	ldw	r3,4(r2)
 80041ec:	9009883a 	mov	r4,r18
 80041f0:	18c00054 	ori	r3,r3,1
 80041f4:	10c00115 	stw	r3,4(r2)
 80041f8:	8014a280 	call	8014a28 <__malloc_unlock>
 80041fc:	80800204 	addi	r2,r16,8
 8004200:	003f6c06 	br	8003fb4 <__alt_data_end+0xfc003fb4>
 8004204:	9c000217 	ldw	r16,8(r19)
 8004208:	00bfff04 	movi	r2,-4
 800420c:	85800117 	ldw	r22,4(r16)
 8004210:	b0ac703a 	and	r22,r22,r2
 8004214:	b4400336 	bltu	r22,r17,8004224 <_malloc_r+0x324>
 8004218:	b445c83a 	sub	r2,r22,r17
 800421c:	00c003c4 	movi	r3,15
 8004220:	18805d16 	blt	r3,r2,8004398 <_malloc_r+0x498>
 8004224:	05c200b4 	movhi	r23,2050
 8004228:	008200b4 	movhi	r2,2050
 800422c:	bdcd4a04 	addi	r23,r23,13608
 8004230:	10942f04 	addi	r2,r2,20668
 8004234:	15400017 	ldw	r21,0(r2)
 8004238:	b9000017 	ldw	r4,0(r23)
 800423c:	00ffffc4 	movi	r3,-1
 8004240:	858d883a 	add	r6,r16,r22
 8004244:	8d6b883a 	add	r21,r17,r21
 8004248:	20c0e426 	beq	r4,r3,80045dc <_malloc_r+0x6dc>
 800424c:	ad4403c4 	addi	r21,r21,4111
 8004250:	00fc0004 	movi	r3,-4096
 8004254:	a8ea703a 	and	r21,r21,r3
 8004258:	9009883a 	mov	r4,r18
 800425c:	a80b883a 	mov	r5,r21
 8004260:	d9800015 	stw	r6,0(sp)
 8004264:	80047300 	call	8004730 <_sbrk_r>
 8004268:	00ffffc4 	movi	r3,-1
 800426c:	1029883a 	mov	r20,r2
 8004270:	d9800017 	ldw	r6,0(sp)
 8004274:	10c0a426 	beq	r2,r3,8004508 <_malloc_r+0x608>
 8004278:	1180a236 	bltu	r2,r6,8004504 <_malloc_r+0x604>
 800427c:	070200b4 	movhi	fp,2050
 8004280:	e7143e04 	addi	fp,fp,20728
 8004284:	e0c00017 	ldw	r3,0(fp)
 8004288:	a8c7883a 	add	r3,r21,r3
 800428c:	e0c00015 	stw	r3,0(fp)
 8004290:	3500da26 	beq	r6,r20,80045fc <_malloc_r+0x6fc>
 8004294:	b9000017 	ldw	r4,0(r23)
 8004298:	00bfffc4 	movi	r2,-1
 800429c:	2080e426 	beq	r4,r2,8004630 <_malloc_r+0x730>
 80042a0:	a185c83a 	sub	r2,r20,r6
 80042a4:	1885883a 	add	r2,r3,r2
 80042a8:	e0800015 	stw	r2,0(fp)
 80042ac:	a0c001cc 	andi	r3,r20,7
 80042b0:	1800b526 	beq	r3,zero,8004588 <_malloc_r+0x688>
 80042b4:	a0e9c83a 	sub	r20,r20,r3
 80042b8:	00840204 	movi	r2,4104
 80042bc:	a5000204 	addi	r20,r20,8
 80042c0:	10c7c83a 	sub	r3,r2,r3
 80042c4:	a545883a 	add	r2,r20,r21
 80042c8:	1083ffcc 	andi	r2,r2,4095
 80042cc:	18abc83a 	sub	r21,r3,r2
 80042d0:	9009883a 	mov	r4,r18
 80042d4:	a80b883a 	mov	r5,r21
 80042d8:	80047300 	call	8004730 <_sbrk_r>
 80042dc:	00ffffc4 	movi	r3,-1
 80042e0:	10c0d026 	beq	r2,r3,8004624 <_malloc_r+0x724>
 80042e4:	1507c83a 	sub	r3,r2,r20
 80042e8:	a8c7883a 	add	r3,r21,r3
 80042ec:	18c00054 	ori	r3,r3,1
 80042f0:	e0800017 	ldw	r2,0(fp)
 80042f4:	9d000215 	stw	r20,8(r19)
 80042f8:	a0c00115 	stw	r3,4(r20)
 80042fc:	a887883a 	add	r3,r21,r2
 8004300:	e0c00015 	stw	r3,0(fp)
 8004304:	84c00e26 	beq	r16,r19,8004340 <_malloc_r+0x440>
 8004308:	018003c4 	movi	r6,15
 800430c:	3580a02e 	bgeu	r6,r22,8004590 <_malloc_r+0x690>
 8004310:	81400117 	ldw	r5,4(r16)
 8004314:	013ffe04 	movi	r4,-8
 8004318:	b0bffd04 	addi	r2,r22,-12
 800431c:	1104703a 	and	r2,r2,r4
 8004320:	2900004c 	andi	r4,r5,1
 8004324:	1108b03a 	or	r4,r2,r4
 8004328:	81000115 	stw	r4,4(r16)
 800432c:	01400144 	movi	r5,5
 8004330:	8089883a 	add	r4,r16,r2
 8004334:	21400115 	stw	r5,4(r4)
 8004338:	21400215 	stw	r5,8(r4)
 800433c:	3080c036 	bltu	r6,r2,8004640 <_malloc_r+0x740>
 8004340:	008200b4 	movhi	r2,2050
 8004344:	10942e04 	addi	r2,r2,20664
 8004348:	11000017 	ldw	r4,0(r2)
 800434c:	20c0012e 	bgeu	r4,r3,8004354 <_malloc_r+0x454>
 8004350:	10c00015 	stw	r3,0(r2)
 8004354:	008200b4 	movhi	r2,2050
 8004358:	10942d04 	addi	r2,r2,20660
 800435c:	11000017 	ldw	r4,0(r2)
 8004360:	9c000217 	ldw	r16,8(r19)
 8004364:	20c0012e 	bgeu	r4,r3,800436c <_malloc_r+0x46c>
 8004368:	10c00015 	stw	r3,0(r2)
 800436c:	80c00117 	ldw	r3,4(r16)
 8004370:	00bfff04 	movi	r2,-4
 8004374:	1886703a 	and	r3,r3,r2
 8004378:	1c45c83a 	sub	r2,r3,r17
 800437c:	1c400236 	bltu	r3,r17,8004388 <_malloc_r+0x488>
 8004380:	00c003c4 	movi	r3,15
 8004384:	18800416 	blt	r3,r2,8004398 <_malloc_r+0x498>
 8004388:	9009883a 	mov	r4,r18
 800438c:	8014a280 	call	8014a28 <__malloc_unlock>
 8004390:	0005883a 	mov	r2,zero
 8004394:	003f0706 	br	8003fb4 <__alt_data_end+0xfc003fb4>
 8004398:	88c00054 	ori	r3,r17,1
 800439c:	80c00115 	stw	r3,4(r16)
 80043a0:	8463883a 	add	r17,r16,r17
 80043a4:	10800054 	ori	r2,r2,1
 80043a8:	9c400215 	stw	r17,8(r19)
 80043ac:	88800115 	stw	r2,4(r17)
 80043b0:	9009883a 	mov	r4,r18
 80043b4:	8014a280 	call	8014a28 <__malloc_unlock>
 80043b8:	80800204 	addi	r2,r16,8
 80043bc:	003efd06 	br	8003fb4 <__alt_data_end+0xfc003fb4>
 80043c0:	00800504 	movi	r2,20
 80043c4:	10c0482e 	bgeu	r2,r3,80044e8 <_malloc_r+0x5e8>
 80043c8:	00801504 	movi	r2,84
 80043cc:	10c06836 	bltu	r2,r3,8004570 <_malloc_r+0x670>
 80043d0:	8806d33a 	srli	r3,r17,12
 80043d4:	19c01b84 	addi	r7,r3,110
 80043d8:	39cb883a 	add	r5,r7,r7
 80043dc:	003f0c06 	br	8004010 <__alt_data_end+0xfc004010>
 80043e0:	3804d27a 	srli	r2,r7,9
 80043e4:	01000104 	movi	r4,4
 80043e8:	2080422e 	bgeu	r4,r2,80044f4 <_malloc_r+0x5f4>
 80043ec:	01000504 	movi	r4,20
 80043f0:	20807c36 	bltu	r4,r2,80045e4 <_malloc_r+0x6e4>
 80043f4:	110016c4 	addi	r4,r2,91
 80043f8:	210b883a 	add	r5,r4,r4
 80043fc:	294b883a 	add	r5,r5,r5
 8004400:	294b883a 	add	r5,r5,r5
 8004404:	994b883a 	add	r5,r19,r5
 8004408:	28800217 	ldw	r2,8(r5)
 800440c:	020200b4 	movhi	r8,2050
 8004410:	42068a04 	addi	r8,r8,6696
 8004414:	11406326 	beq	r2,r5,80045a4 <_malloc_r+0x6a4>
 8004418:	01bfff04 	movi	r6,-4
 800441c:	11000117 	ldw	r4,4(r2)
 8004420:	2188703a 	and	r4,r4,r6
 8004424:	3900022e 	bgeu	r7,r4,8004430 <_malloc_r+0x530>
 8004428:	10800217 	ldw	r2,8(r2)
 800442c:	28bffb1e 	bne	r5,r2,800441c <__alt_data_end+0xfc00441c>
 8004430:	11800317 	ldw	r6,12(r2)
 8004434:	99000117 	ldw	r4,4(r19)
 8004438:	81800315 	stw	r6,12(r16)
 800443c:	80800215 	stw	r2,8(r16)
 8004440:	34000215 	stw	r16,8(r6)
 8004444:	14000315 	stw	r16,12(r2)
 8004448:	003f2706 	br	80040e8 <__alt_data_end+0xfc0040e8>
 800444c:	88c00054 	ori	r3,r17,1
 8004450:	80c00115 	stw	r3,4(r16)
 8004454:	8463883a 	add	r17,r16,r17
 8004458:	34400515 	stw	r17,20(r6)
 800445c:	34400415 	stw	r17,16(r6)
 8004460:	10c00054 	ori	r3,r2,1
 8004464:	8a400315 	stw	r9,12(r17)
 8004468:	8a400215 	stw	r9,8(r17)
 800446c:	88c00115 	stw	r3,4(r17)
 8004470:	88a3883a 	add	r17,r17,r2
 8004474:	88800015 	stw	r2,0(r17)
 8004478:	9009883a 	mov	r4,r18
 800447c:	8014a280 	call	8014a28 <__malloc_unlock>
 8004480:	80800204 	addi	r2,r16,8
 8004484:	003ecb06 	br	8003fb4 <__alt_data_end+0xfc003fb4>
 8004488:	31000117 	ldw	r4,4(r6)
 800448c:	003f1606 	br	80040e8 <__alt_data_end+0xfc0040e8>
 8004490:	63000044 	addi	r12,r12,1
 8004494:	608000cc 	andi	r2,r12,3
 8004498:	5ac00204 	addi	r11,r11,8
 800449c:	103f2a1e 	bne	r2,zero,8004148 <__alt_data_end+0xfc004148>
 80044a0:	00002106 	br	8004528 <_malloc_r+0x628>
 80044a4:	80800204 	addi	r2,r16,8
 80044a8:	84000517 	ldw	r16,20(r16)
 80044ac:	143eb31e 	bne	r2,r16,8003f7c <__alt_data_end+0xfc003f7c>
 80044b0:	18c00084 	addi	r3,r3,2
 80044b4:	003eec06 	br	8004068 <__alt_data_end+0xfc004068>
 80044b8:	8085883a 	add	r2,r16,r2
 80044bc:	10c00117 	ldw	r3,4(r2)
 80044c0:	81000317 	ldw	r4,12(r16)
 80044c4:	81400217 	ldw	r5,8(r16)
 80044c8:	18c00054 	ori	r3,r3,1
 80044cc:	10c00115 	stw	r3,4(r2)
 80044d0:	29000315 	stw	r4,12(r5)
 80044d4:	21400215 	stw	r5,8(r4)
 80044d8:	9009883a 	mov	r4,r18
 80044dc:	8014a280 	call	8014a28 <__malloc_unlock>
 80044e0:	80800204 	addi	r2,r16,8
 80044e4:	003eb306 	br	8003fb4 <__alt_data_end+0xfc003fb4>
 80044e8:	19c016c4 	addi	r7,r3,91
 80044ec:	39cb883a 	add	r5,r7,r7
 80044f0:	003ec706 	br	8004010 <__alt_data_end+0xfc004010>
 80044f4:	3804d1ba 	srli	r2,r7,6
 80044f8:	11000e04 	addi	r4,r2,56
 80044fc:	210b883a 	add	r5,r4,r4
 8004500:	003fbe06 	br	80043fc <__alt_data_end+0xfc0043fc>
 8004504:	84ff5d26 	beq	r16,r19,800427c <__alt_data_end+0xfc00427c>
 8004508:	9c000217 	ldw	r16,8(r19)
 800450c:	00bfff04 	movi	r2,-4
 8004510:	80c00117 	ldw	r3,4(r16)
 8004514:	1886703a 	and	r3,r3,r2
 8004518:	003f9706 	br	8004378 <__alt_data_end+0xfc004378>
 800451c:	52800017 	ldw	r10,0(r10)
 8004520:	18ffffc4 	addi	r3,r3,-1
 8004524:	50805c1e 	bne	r10,r2,8004698 <_malloc_r+0x798>
 8004528:	190000cc 	andi	r4,r3,3
 800452c:	50bffe04 	addi	r2,r10,-8
 8004530:	203ffa1e 	bne	r4,zero,800451c <__alt_data_end+0xfc00451c>
 8004534:	98800117 	ldw	r2,4(r19)
 8004538:	0146303a 	nor	r3,zero,r5
 800453c:	1884703a 	and	r2,r3,r2
 8004540:	98800115 	stw	r2,4(r19)
 8004544:	294b883a 	add	r5,r5,r5
 8004548:	117f2e36 	bltu	r2,r5,8004204 <__alt_data_end+0xfc004204>
 800454c:	283f2d26 	beq	r5,zero,8004204 <__alt_data_end+0xfc004204>
 8004550:	1146703a 	and	r3,r2,r5
 8004554:	1800521e 	bne	r3,zero,80046a0 <_malloc_r+0x7a0>
 8004558:	6007883a 	mov	r3,r12
 800455c:	294b883a 	add	r5,r5,r5
 8004560:	1148703a 	and	r4,r2,r5
 8004564:	18c00104 	addi	r3,r3,4
 8004568:	203ffc26 	beq	r4,zero,800455c <__alt_data_end+0xfc00455c>
 800456c:	003ef006 	br	8004130 <__alt_data_end+0xfc004130>
 8004570:	00805504 	movi	r2,340
 8004574:	10c01336 	bltu	r2,r3,80045c4 <_malloc_r+0x6c4>
 8004578:	8806d3fa 	srli	r3,r17,15
 800457c:	19c01dc4 	addi	r7,r3,119
 8004580:	39cb883a 	add	r5,r7,r7
 8004584:	003ea206 	br	8004010 <__alt_data_end+0xfc004010>
 8004588:	00c40004 	movi	r3,4096
 800458c:	003f4d06 	br	80042c4 <__alt_data_end+0xfc0042c4>
 8004590:	00800044 	movi	r2,1
 8004594:	a0800115 	stw	r2,4(r20)
 8004598:	a021883a 	mov	r16,r20
 800459c:	0007883a 	mov	r3,zero
 80045a0:	003f7506 	br	8004378 <__alt_data_end+0xfc004378>
 80045a4:	200bd0ba 	srai	r5,r4,2
 80045a8:	01800044 	movi	r6,1
 80045ac:	41000117 	ldw	r4,4(r8)
 80045b0:	314a983a 	sll	r5,r6,r5
 80045b4:	100d883a 	mov	r6,r2
 80045b8:	2908b03a 	or	r4,r5,r4
 80045bc:	41000115 	stw	r4,4(r8)
 80045c0:	003f9d06 	br	8004438 <__alt_data_end+0xfc004438>
 80045c4:	00815504 	movi	r2,1364
 80045c8:	10c01336 	bltu	r2,r3,8004618 <_malloc_r+0x718>
 80045cc:	8806d4ba 	srli	r3,r17,18
 80045d0:	19c01f04 	addi	r7,r3,124
 80045d4:	39cb883a 	add	r5,r7,r7
 80045d8:	003e8d06 	br	8004010 <__alt_data_end+0xfc004010>
 80045dc:	ad400404 	addi	r21,r21,16
 80045e0:	003f1d06 	br	8004258 <__alt_data_end+0xfc004258>
 80045e4:	01001504 	movi	r4,84
 80045e8:	20801c36 	bltu	r4,r2,800465c <_malloc_r+0x75c>
 80045ec:	3804d33a 	srli	r2,r7,12
 80045f0:	11001b84 	addi	r4,r2,110
 80045f4:	210b883a 	add	r5,r4,r4
 80045f8:	003f8006 	br	80043fc <__alt_data_end+0xfc0043fc>
 80045fc:	3083ffcc 	andi	r2,r6,4095
 8004600:	103f241e 	bne	r2,zero,8004294 <__alt_data_end+0xfc004294>
 8004604:	99000217 	ldw	r4,8(r19)
 8004608:	ad85883a 	add	r2,r21,r22
 800460c:	10800054 	ori	r2,r2,1
 8004610:	20800115 	stw	r2,4(r4)
 8004614:	003f4a06 	br	8004340 <__alt_data_end+0xfc004340>
 8004618:	01403f04 	movi	r5,252
 800461c:	01c01f84 	movi	r7,126
 8004620:	003e7b06 	br	8004010 <__alt_data_end+0xfc004010>
 8004624:	00c00044 	movi	r3,1
 8004628:	002b883a 	mov	r21,zero
 800462c:	003f3006 	br	80042f0 <__alt_data_end+0xfc0042f0>
 8004630:	008200b4 	movhi	r2,2050
 8004634:	108d4a04 	addi	r2,r2,13608
 8004638:	15000015 	stw	r20,0(r2)
 800463c:	003f1b06 	br	80042ac <__alt_data_end+0xfc0042ac>
 8004640:	9009883a 	mov	r4,r18
 8004644:	81400204 	addi	r5,r16,8
 8004648:	800c4200 	call	800c420 <_free_r>
 800464c:	008200b4 	movhi	r2,2050
 8004650:	10943e04 	addi	r2,r2,20728
 8004654:	10c00017 	ldw	r3,0(r2)
 8004658:	003f3906 	br	8004340 <__alt_data_end+0xfc004340>
 800465c:	01005504 	movi	r4,340
 8004660:	20800436 	bltu	r4,r2,8004674 <_malloc_r+0x774>
 8004664:	3804d3fa 	srli	r2,r7,15
 8004668:	11001dc4 	addi	r4,r2,119
 800466c:	210b883a 	add	r5,r4,r4
 8004670:	003f6206 	br	80043fc <__alt_data_end+0xfc0043fc>
 8004674:	01015504 	movi	r4,1364
 8004678:	20800436 	bltu	r4,r2,800468c <_malloc_r+0x78c>
 800467c:	3804d4ba 	srli	r2,r7,18
 8004680:	11001f04 	addi	r4,r2,124
 8004684:	210b883a 	add	r5,r4,r4
 8004688:	003f5c06 	br	80043fc <__alt_data_end+0xfc0043fc>
 800468c:	01403f04 	movi	r5,252
 8004690:	01001f84 	movi	r4,126
 8004694:	003f5906 	br	80043fc <__alt_data_end+0xfc0043fc>
 8004698:	98800117 	ldw	r2,4(r19)
 800469c:	003fa906 	br	8004544 <__alt_data_end+0xfc004544>
 80046a0:	6007883a 	mov	r3,r12
 80046a4:	003ea206 	br	8004130 <__alt_data_end+0xfc004130>

080046a8 <_printf_r>:
 80046a8:	defffd04 	addi	sp,sp,-12
 80046ac:	dfc00015 	stw	ra,0(sp)
 80046b0:	d9800115 	stw	r6,4(sp)
 80046b4:	d9c00215 	stw	r7,8(sp)
 80046b8:	280d883a 	mov	r6,r5
 80046bc:	21400217 	ldw	r5,8(r4)
 80046c0:	d9c00104 	addi	r7,sp,4
 80046c4:	800828c0 	call	800828c <___vfprintf_internal_r>
 80046c8:	dfc00017 	ldw	ra,0(sp)
 80046cc:	dec00304 	addi	sp,sp,12
 80046d0:	f800283a 	ret

080046d4 <printf>:
 80046d4:	defffc04 	addi	sp,sp,-16
 80046d8:	dfc00015 	stw	ra,0(sp)
 80046dc:	d9400115 	stw	r5,4(sp)
 80046e0:	d9800215 	stw	r6,8(sp)
 80046e4:	d9c00315 	stw	r7,12(sp)
 80046e8:	008200b4 	movhi	r2,2050
 80046ec:	108d4d04 	addi	r2,r2,13620
 80046f0:	10800017 	ldw	r2,0(r2)
 80046f4:	200b883a 	mov	r5,r4
 80046f8:	d9800104 	addi	r6,sp,4
 80046fc:	11000217 	ldw	r4,8(r2)
 8004700:	800a2880 	call	800a288 <__vfprintf_internal>
 8004704:	dfc00017 	ldw	ra,0(sp)
 8004708:	dec00404 	addi	sp,sp,16
 800470c:	f800283a 	ret

08004710 <_putchar_r>:
 8004710:	21800217 	ldw	r6,8(r4)
 8004714:	800ea741 	jmpi	800ea74 <_putc_r>

08004718 <putchar>:
 8004718:	008200b4 	movhi	r2,2050
 800471c:	108d4d04 	addi	r2,r2,13620
 8004720:	200b883a 	mov	r5,r4
 8004724:	11000017 	ldw	r4,0(r2)
 8004728:	21800217 	ldw	r6,8(r4)
 800472c:	800ea741 	jmpi	800ea74 <_putc_r>

08004730 <_sbrk_r>:
 8004730:	defffd04 	addi	sp,sp,-12
 8004734:	dc000015 	stw	r16,0(sp)
 8004738:	040200b4 	movhi	r16,2050
 800473c:	dc400115 	stw	r17,4(sp)
 8004740:	84143004 	addi	r16,r16,20672
 8004744:	2023883a 	mov	r17,r4
 8004748:	2809883a 	mov	r4,r5
 800474c:	dfc00215 	stw	ra,8(sp)
 8004750:	80000015 	stw	zero,0(r16)
 8004754:	8014bf40 	call	8014bf4 <sbrk>
 8004758:	00ffffc4 	movi	r3,-1
 800475c:	10c00526 	beq	r2,r3,8004774 <_sbrk_r+0x44>
 8004760:	dfc00217 	ldw	ra,8(sp)
 8004764:	dc400117 	ldw	r17,4(sp)
 8004768:	dc000017 	ldw	r16,0(sp)
 800476c:	dec00304 	addi	sp,sp,12
 8004770:	f800283a 	ret
 8004774:	80c00017 	ldw	r3,0(r16)
 8004778:	183ff926 	beq	r3,zero,8004760 <__alt_data_end+0xfc004760>
 800477c:	88c00015 	stw	r3,0(r17)
 8004780:	003ff706 	br	8004760 <__alt_data_end+0xfc004760>

08004784 <_snprintf_r>:
 8004784:	3005883a 	mov	r2,r6
 8004788:	30003016 	blt	r6,zero,800484c <_snprintf_r+0xc8>
 800478c:	deffe404 	addi	sp,sp,-112
 8004790:	00c08204 	movi	r3,520
 8004794:	dc001a15 	stw	r16,104(sp)
 8004798:	dfc01b15 	stw	ra,108(sp)
 800479c:	d8c0030d 	sth	r3,12(sp)
 80047a0:	d9400015 	stw	r5,0(sp)
 80047a4:	d9400415 	stw	r5,16(sp)
 80047a8:	380d883a 	mov	r6,r7
 80047ac:	2021883a 	mov	r16,r4
 80047b0:	10001026 	beq	r2,zero,80047f4 <_snprintf_r+0x70>
 80047b4:	10bfffc4 	addi	r2,r2,-1
 80047b8:	d8800215 	stw	r2,8(sp)
 80047bc:	d8800515 	stw	r2,20(sp)
 80047c0:	d80b883a 	mov	r5,sp
 80047c4:	00bfffc4 	movi	r2,-1
 80047c8:	d9c01c04 	addi	r7,sp,112
 80047cc:	d880038d 	sth	r2,14(sp)
 80047d0:	80062ac0 	call	80062ac <___svfprintf_internal_r>
 80047d4:	00ffffc4 	movi	r3,-1
 80047d8:	10c01916 	blt	r2,r3,8004840 <_snprintf_r+0xbc>
 80047dc:	d8c00017 	ldw	r3,0(sp)
 80047e0:	18000005 	stb	zero,0(r3)
 80047e4:	dfc01b17 	ldw	ra,108(sp)
 80047e8:	dc001a17 	ldw	r16,104(sp)
 80047ec:	dec01c04 	addi	sp,sp,112
 80047f0:	f800283a 	ret
 80047f4:	00bfffc4 	movi	r2,-1
 80047f8:	d80b883a 	mov	r5,sp
 80047fc:	d9c01c04 	addi	r7,sp,112
 8004800:	d8000215 	stw	zero,8(sp)
 8004804:	d8000515 	stw	zero,20(sp)
 8004808:	d880038d 	sth	r2,14(sp)
 800480c:	80062ac0 	call	80062ac <___svfprintf_internal_r>
 8004810:	00ffffc4 	movi	r3,-1
 8004814:	10c00416 	blt	r2,r3,8004828 <_snprintf_r+0xa4>
 8004818:	dfc01b17 	ldw	ra,108(sp)
 800481c:	dc001a17 	ldw	r16,104(sp)
 8004820:	dec01c04 	addi	sp,sp,112
 8004824:	f800283a 	ret
 8004828:	00c022c4 	movi	r3,139
 800482c:	80c00015 	stw	r3,0(r16)
 8004830:	dfc01b17 	ldw	ra,108(sp)
 8004834:	dc001a17 	ldw	r16,104(sp)
 8004838:	dec01c04 	addi	sp,sp,112
 800483c:	f800283a 	ret
 8004840:	00c022c4 	movi	r3,139
 8004844:	80c00015 	stw	r3,0(r16)
 8004848:	003fe406 	br	80047dc <__alt_data_end+0xfc0047dc>
 800484c:	008022c4 	movi	r2,139
 8004850:	20800015 	stw	r2,0(r4)
 8004854:	00bfffc4 	movi	r2,-1
 8004858:	f800283a 	ret

0800485c <snprintf>:
 800485c:	deffe304 	addi	sp,sp,-116
 8004860:	dfc01b15 	stw	ra,108(sp)
 8004864:	dc001a15 	stw	r16,104(sp)
 8004868:	d9c01c15 	stw	r7,112(sp)
 800486c:	008200b4 	movhi	r2,2050
 8004870:	108d4d04 	addi	r2,r2,13620
 8004874:	14000017 	ldw	r16,0(r2)
 8004878:	28002d16 	blt	r5,zero,8004930 <snprintf+0xd4>
 800487c:	00c08204 	movi	r3,520
 8004880:	d8c0030d 	sth	r3,12(sp)
 8004884:	d9000015 	stw	r4,0(sp)
 8004888:	d9000415 	stw	r4,16(sp)
 800488c:	28001126 	beq	r5,zero,80048d4 <snprintf+0x78>
 8004890:	28bfffc4 	addi	r2,r5,-1
 8004894:	d8800215 	stw	r2,8(sp)
 8004898:	d8800515 	stw	r2,20(sp)
 800489c:	8009883a 	mov	r4,r16
 80048a0:	00bfffc4 	movi	r2,-1
 80048a4:	d80b883a 	mov	r5,sp
 80048a8:	d9c01c04 	addi	r7,sp,112
 80048ac:	d880038d 	sth	r2,14(sp)
 80048b0:	80062ac0 	call	80062ac <___svfprintf_internal_r>
 80048b4:	00ffffc4 	movi	r3,-1
 80048b8:	10c01a16 	blt	r2,r3,8004924 <snprintf+0xc8>
 80048bc:	d8c00017 	ldw	r3,0(sp)
 80048c0:	18000005 	stb	zero,0(r3)
 80048c4:	dfc01b17 	ldw	ra,108(sp)
 80048c8:	dc001a17 	ldw	r16,104(sp)
 80048cc:	dec01d04 	addi	sp,sp,116
 80048d0:	f800283a 	ret
 80048d4:	00bfffc4 	movi	r2,-1
 80048d8:	8009883a 	mov	r4,r16
 80048dc:	d80b883a 	mov	r5,sp
 80048e0:	d9c01c04 	addi	r7,sp,112
 80048e4:	d8000215 	stw	zero,8(sp)
 80048e8:	d8000515 	stw	zero,20(sp)
 80048ec:	d880038d 	sth	r2,14(sp)
 80048f0:	80062ac0 	call	80062ac <___svfprintf_internal_r>
 80048f4:	00ffffc4 	movi	r3,-1
 80048f8:	10c00416 	blt	r2,r3,800490c <snprintf+0xb0>
 80048fc:	dfc01b17 	ldw	ra,108(sp)
 8004900:	dc001a17 	ldw	r16,104(sp)
 8004904:	dec01d04 	addi	sp,sp,116
 8004908:	f800283a 	ret
 800490c:	00c022c4 	movi	r3,139
 8004910:	80c00015 	stw	r3,0(r16)
 8004914:	dfc01b17 	ldw	ra,108(sp)
 8004918:	dc001a17 	ldw	r16,104(sp)
 800491c:	dec01d04 	addi	sp,sp,116
 8004920:	f800283a 	ret
 8004924:	00c022c4 	movi	r3,139
 8004928:	80c00015 	stw	r3,0(r16)
 800492c:	003fe306 	br	80048bc <__alt_data_end+0xfc0048bc>
 8004930:	008022c4 	movi	r2,139
 8004934:	80800015 	stw	r2,0(r16)
 8004938:	00bfffc4 	movi	r2,-1
 800493c:	003fef06 	br	80048fc <__alt_data_end+0xfc0048fc>

08004940 <strcat>:
 8004940:	defffe04 	addi	sp,sp,-8
 8004944:	dc000015 	stw	r16,0(sp)
 8004948:	dfc00115 	stw	ra,4(sp)
 800494c:	208000cc 	andi	r2,r4,3
 8004950:	2021883a 	mov	r16,r4
 8004954:	1000111e 	bne	r2,zero,800499c <strcat+0x5c>
 8004958:	20800017 	ldw	r2,0(r4)
 800495c:	027fbff4 	movhi	r9,65279
 8004960:	4a7fbfc4 	addi	r9,r9,-257
 8004964:	0086303a 	nor	r3,zero,r2
 8004968:	02202074 	movhi	r8,32897
 800496c:	1245883a 	add	r2,r2,r9
 8004970:	42202004 	addi	r8,r8,-32640
 8004974:	10c4703a 	and	r2,r2,r3
 8004978:	1204703a 	and	r2,r2,r8
 800497c:	1000071e 	bne	r2,zero,800499c <strcat+0x5c>
 8004980:	21000104 	addi	r4,r4,4
 8004984:	21800017 	ldw	r6,0(r4)
 8004988:	324f883a 	add	r7,r6,r9
 800498c:	018c303a 	nor	r6,zero,r6
 8004990:	398c703a 	and	r6,r7,r6
 8004994:	320c703a 	and	r6,r6,r8
 8004998:	303ff926 	beq	r6,zero,8004980 <__alt_data_end+0xfc004980>
 800499c:	20800007 	ldb	r2,0(r4)
 80049a0:	10000326 	beq	r2,zero,80049b0 <strcat+0x70>
 80049a4:	21000044 	addi	r4,r4,1
 80049a8:	21800007 	ldb	r6,0(r4)
 80049ac:	303ffd1e 	bne	r6,zero,80049a4 <__alt_data_end+0xfc0049a4>
 80049b0:	8004a6c0 	call	8004a6c <strcpy>
 80049b4:	8005883a 	mov	r2,r16
 80049b8:	dfc00117 	ldw	ra,4(sp)
 80049bc:	dc000017 	ldw	r16,0(sp)
 80049c0:	dec00204 	addi	sp,sp,8
 80049c4:	f800283a 	ret

080049c8 <strcmp>:
 80049c8:	2144b03a 	or	r2,r4,r5
 80049cc:	108000cc 	andi	r2,r2,3
 80049d0:	1000171e 	bne	r2,zero,8004a30 <strcmp+0x68>
 80049d4:	20800017 	ldw	r2,0(r4)
 80049d8:	28c00017 	ldw	r3,0(r5)
 80049dc:	10c0141e 	bne	r2,r3,8004a30 <strcmp+0x68>
 80049e0:	027fbff4 	movhi	r9,65279
 80049e4:	4a7fbfc4 	addi	r9,r9,-257
 80049e8:	0086303a 	nor	r3,zero,r2
 80049ec:	02202074 	movhi	r8,32897
 80049f0:	1245883a 	add	r2,r2,r9
 80049f4:	42202004 	addi	r8,r8,-32640
 80049f8:	10c4703a 	and	r2,r2,r3
 80049fc:	1204703a 	and	r2,r2,r8
 8004a00:	10000226 	beq	r2,zero,8004a0c <strcmp+0x44>
 8004a04:	00001706 	br	8004a64 <strcmp+0x9c>
 8004a08:	1000161e 	bne	r2,zero,8004a64 <strcmp+0x9c>
 8004a0c:	21000104 	addi	r4,r4,4
 8004a10:	20c00017 	ldw	r3,0(r4)
 8004a14:	29400104 	addi	r5,r5,4
 8004a18:	29800017 	ldw	r6,0(r5)
 8004a1c:	1a4f883a 	add	r7,r3,r9
 8004a20:	00c4303a 	nor	r2,zero,r3
 8004a24:	3884703a 	and	r2,r7,r2
 8004a28:	1204703a 	and	r2,r2,r8
 8004a2c:	19bff626 	beq	r3,r6,8004a08 <__alt_data_end+0xfc004a08>
 8004a30:	20800007 	ldb	r2,0(r4)
 8004a34:	1000051e 	bne	r2,zero,8004a4c <strcmp+0x84>
 8004a38:	00000606 	br	8004a54 <strcmp+0x8c>
 8004a3c:	21000044 	addi	r4,r4,1
 8004a40:	20800007 	ldb	r2,0(r4)
 8004a44:	29400044 	addi	r5,r5,1
 8004a48:	10000226 	beq	r2,zero,8004a54 <strcmp+0x8c>
 8004a4c:	28c00007 	ldb	r3,0(r5)
 8004a50:	10fffa26 	beq	r2,r3,8004a3c <__alt_data_end+0xfc004a3c>
 8004a54:	20800003 	ldbu	r2,0(r4)
 8004a58:	28c00003 	ldbu	r3,0(r5)
 8004a5c:	10c5c83a 	sub	r2,r2,r3
 8004a60:	f800283a 	ret
 8004a64:	0005883a 	mov	r2,zero
 8004a68:	f800283a 	ret

08004a6c <strcpy>:
 8004a6c:	2906b03a 	or	r3,r5,r4
 8004a70:	18c000cc 	andi	r3,r3,3
 8004a74:	2005883a 	mov	r2,r4
 8004a78:	1800161e 	bne	r3,zero,8004ad4 <strcpy+0x68>
 8004a7c:	29c00017 	ldw	r7,0(r5)
 8004a80:	02ffbff4 	movhi	r11,65279
 8004a84:	5affbfc4 	addi	r11,r11,-257
 8004a88:	02a02074 	movhi	r10,32897
 8004a8c:	01c8303a 	nor	r4,zero,r7
 8004a90:	3ac7883a 	add	r3,r7,r11
 8004a94:	52a02004 	addi	r10,r10,-32640
 8004a98:	20c6703a 	and	r3,r4,r3
 8004a9c:	1a86703a 	and	r3,r3,r10
 8004aa0:	18000c1e 	bne	r3,zero,8004ad4 <strcpy+0x68>
 8004aa4:	1011883a 	mov	r8,r2
 8004aa8:	41c00015 	stw	r7,0(r8)
 8004aac:	29400104 	addi	r5,r5,4
 8004ab0:	29c00017 	ldw	r7,0(r5)
 8004ab4:	41800104 	addi	r6,r8,4
 8004ab8:	3011883a 	mov	r8,r6
 8004abc:	01d2303a 	nor	r9,zero,r7
 8004ac0:	3ac7883a 	add	r3,r7,r11
 8004ac4:	48c6703a 	and	r3,r9,r3
 8004ac8:	1a86703a 	and	r3,r3,r10
 8004acc:	183ff626 	beq	r3,zero,8004aa8 <__alt_data_end+0xfc004aa8>
 8004ad0:	00000106 	br	8004ad8 <strcpy+0x6c>
 8004ad4:	100d883a 	mov	r6,r2
 8004ad8:	28c00003 	ldbu	r3,0(r5)
 8004adc:	31800044 	addi	r6,r6,1
 8004ae0:	29400044 	addi	r5,r5,1
 8004ae4:	30ffffc5 	stb	r3,-1(r6)
 8004ae8:	18c03fcc 	andi	r3,r3,255
 8004aec:	18c0201c 	xori	r3,r3,128
 8004af0:	18ffe004 	addi	r3,r3,-128
 8004af4:	183ff81e 	bne	r3,zero,8004ad8 <__alt_data_end+0xfc004ad8>
 8004af8:	f800283a 	ret

08004afc <strlen>:
 8004afc:	208000cc 	andi	r2,r4,3
 8004b00:	10002026 	beq	r2,zero,8004b84 <strlen+0x88>
 8004b04:	20800007 	ldb	r2,0(r4)
 8004b08:	10002026 	beq	r2,zero,8004b8c <strlen+0x90>
 8004b0c:	2005883a 	mov	r2,r4
 8004b10:	00000206 	br	8004b1c <strlen+0x20>
 8004b14:	10c00007 	ldb	r3,0(r2)
 8004b18:	18001826 	beq	r3,zero,8004b7c <strlen+0x80>
 8004b1c:	10800044 	addi	r2,r2,1
 8004b20:	10c000cc 	andi	r3,r2,3
 8004b24:	183ffb1e 	bne	r3,zero,8004b14 <__alt_data_end+0xfc004b14>
 8004b28:	10c00017 	ldw	r3,0(r2)
 8004b2c:	01ffbff4 	movhi	r7,65279
 8004b30:	39ffbfc4 	addi	r7,r7,-257
 8004b34:	00ca303a 	nor	r5,zero,r3
 8004b38:	01a02074 	movhi	r6,32897
 8004b3c:	19c7883a 	add	r3,r3,r7
 8004b40:	31a02004 	addi	r6,r6,-32640
 8004b44:	1946703a 	and	r3,r3,r5
 8004b48:	1986703a 	and	r3,r3,r6
 8004b4c:	1800091e 	bne	r3,zero,8004b74 <strlen+0x78>
 8004b50:	10800104 	addi	r2,r2,4
 8004b54:	10c00017 	ldw	r3,0(r2)
 8004b58:	19cb883a 	add	r5,r3,r7
 8004b5c:	00c6303a 	nor	r3,zero,r3
 8004b60:	28c6703a 	and	r3,r5,r3
 8004b64:	1986703a 	and	r3,r3,r6
 8004b68:	183ff926 	beq	r3,zero,8004b50 <__alt_data_end+0xfc004b50>
 8004b6c:	00000106 	br	8004b74 <strlen+0x78>
 8004b70:	10800044 	addi	r2,r2,1
 8004b74:	10c00007 	ldb	r3,0(r2)
 8004b78:	183ffd1e 	bne	r3,zero,8004b70 <__alt_data_end+0xfc004b70>
 8004b7c:	1105c83a 	sub	r2,r2,r4
 8004b80:	f800283a 	ret
 8004b84:	2005883a 	mov	r2,r4
 8004b88:	003fe706 	br	8004b28 <__alt_data_end+0xfc004b28>
 8004b8c:	0005883a 	mov	r2,zero
 8004b90:	f800283a 	ret

08004b94 <_strtod_r>:
 8004b94:	deffe104 	addi	sp,sp,-124
 8004b98:	dd801b15 	stw	r22,108(sp)
 8004b9c:	dc001515 	stw	r16,84(sp)
 8004ba0:	d9400615 	stw	r5,24(sp)
 8004ba4:	dfc01e15 	stw	ra,120(sp)
 8004ba8:	df001d15 	stw	fp,116(sp)
 8004bac:	ddc01c15 	stw	r23,112(sp)
 8004bb0:	dd401a15 	stw	r21,104(sp)
 8004bb4:	dd001915 	stw	r20,100(sp)
 8004bb8:	dcc01815 	stw	r19,96(sp)
 8004bbc:	dc801715 	stw	r18,92(sp)
 8004bc0:	dc401615 	stw	r17,88(sp)
 8004bc4:	2021883a 	mov	r16,r4
 8004bc8:	2809883a 	mov	r4,r5
 8004bcc:	20800003 	ldbu	r2,0(r4)
 8004bd0:	01c20034 	movhi	r7,2048
 8004bd4:	282d883a 	mov	r22,r5
 8004bd8:	d9800c15 	stw	r6,48(sp)
 8004bdc:	d8000815 	stw	zero,32(sp)
 8004be0:	d8000715 	stw	zero,28(sp)
 8004be4:	01400b44 	movi	r5,45
 8004be8:	10c03fcc 	andi	r3,r2,255
 8004bec:	39d30104 	addi	r7,r7,19460
 8004bf0:	28c0bc36 	bltu	r5,r3,8004ee4 <_strtod_r+0x350>
 8004bf4:	180690ba 	slli	r3,r3,2
 8004bf8:	19c7883a 	add	r3,r3,r7
 8004bfc:	18c00017 	ldw	r3,0(r3)
 8004c00:	1800683a 	jmp	r3
 8004c04:	08004cc4 	addi	zero,at,307
 8004c08:	08004ee4 	muli	zero,at,315
 8004c0c:	08004ee4 	muli	zero,at,315
 8004c10:	08004ee4 	muli	zero,at,315
 8004c14:	08004ee4 	muli	zero,at,315
 8004c18:	08004ee4 	muli	zero,at,315
 8004c1c:	08004ee4 	muli	zero,at,315
 8004c20:	08004ee4 	muli	zero,at,315
 8004c24:	08004ee4 	muli	zero,at,315
 8004c28:	08004ed0 	cmplti	zero,at,315
 8004c2c:	08004ed0 	cmplti	zero,at,315
 8004c30:	08004ed0 	cmplti	zero,at,315
 8004c34:	08004ed0 	cmplti	zero,at,315
 8004c38:	08004ed0 	cmplti	zero,at,315
 8004c3c:	08004ee4 	muli	zero,at,315
 8004c40:	08004ee4 	muli	zero,at,315
 8004c44:	08004ee4 	muli	zero,at,315
 8004c48:	08004ee4 	muli	zero,at,315
 8004c4c:	08004ee4 	muli	zero,at,315
 8004c50:	08004ee4 	muli	zero,at,315
 8004c54:	08004ee4 	muli	zero,at,315
 8004c58:	08004ee4 	muli	zero,at,315
 8004c5c:	08004ee4 	muli	zero,at,315
 8004c60:	08004ee4 	muli	zero,at,315
 8004c64:	08004ee4 	muli	zero,at,315
 8004c68:	08004ee4 	muli	zero,at,315
 8004c6c:	08004ee4 	muli	zero,at,315
 8004c70:	08004ee4 	muli	zero,at,315
 8004c74:	08004ee4 	muli	zero,at,315
 8004c78:	08004ee4 	muli	zero,at,315
 8004c7c:	08004ee4 	muli	zero,at,315
 8004c80:	08004ee4 	muli	zero,at,315
 8004c84:	08004ed0 	cmplti	zero,at,315
 8004c88:	08004ee4 	muli	zero,at,315
 8004c8c:	08004ee4 	muli	zero,at,315
 8004c90:	08004ee4 	muli	zero,at,315
 8004c94:	08004ee4 	muli	zero,at,315
 8004c98:	08004ee4 	muli	zero,at,315
 8004c9c:	08004ee4 	muli	zero,at,315
 8004ca0:	08004ee4 	muli	zero,at,315
 8004ca4:	08004ee4 	muli	zero,at,315
 8004ca8:	08004ee4 	muli	zero,at,315
 8004cac:	08004ee4 	muli	zero,at,315
 8004cb0:	08004d24 	muli	zero,at,308
 8004cb4:	08004ee4 	muli	zero,at,315
 8004cb8:	08004ec4 	addi	zero,at,315
 8004cbc:	00801244 	movi	r2,73
 8004cc0:	98849c26 	beq	r19,r2,8005f34 <_strtod_r+0x13a0>
 8004cc4:	002b883a 	mov	r21,zero
 8004cc8:	0023883a 	mov	r17,zero
 8004ccc:	d8800c17 	ldw	r2,48(sp)
 8004cd0:	10000626 	beq	r2,zero,8004cec <_strtod_r+0x158>
 8004cd4:	d8001015 	stw	zero,64(sp)
 8004cd8:	d8800c17 	ldw	r2,48(sp)
 8004cdc:	15800015 	stw	r22,0(r2)
 8004ce0:	d8c01017 	ldw	r3,64(sp)
 8004ce4:	18000126 	beq	r3,zero,8004cec <_strtod_r+0x158>
 8004ce8:	8c60003c 	xorhi	r17,r17,32768
 8004cec:	a805883a 	mov	r2,r21
 8004cf0:	8807883a 	mov	r3,r17
 8004cf4:	dfc01e17 	ldw	ra,120(sp)
 8004cf8:	df001d17 	ldw	fp,116(sp)
 8004cfc:	ddc01c17 	ldw	r23,112(sp)
 8004d00:	dd801b17 	ldw	r22,108(sp)
 8004d04:	dd401a17 	ldw	r21,104(sp)
 8004d08:	dd001917 	ldw	r20,100(sp)
 8004d0c:	dcc01817 	ldw	r19,96(sp)
 8004d10:	dc801717 	ldw	r18,92(sp)
 8004d14:	dc401617 	ldw	r17,88(sp)
 8004d18:	dc001517 	ldw	r16,84(sp)
 8004d1c:	dec01f04 	addi	sp,sp,124
 8004d20:	f800283a 	ret
 8004d24:	d8001015 	stw	zero,64(sp)
 8004d28:	24800044 	addi	r18,r4,1
 8004d2c:	dc800615 	stw	r18,24(sp)
 8004d30:	20800043 	ldbu	r2,1(r4)
 8004d34:	10c03fcc 	andi	r3,r2,255
 8004d38:	18c0201c 	xori	r3,r3,128
 8004d3c:	18ffe004 	addi	r3,r3,-128
 8004d40:	183fe026 	beq	r3,zero,8004cc4 <__alt_data_end+0xfc004cc4>
 8004d44:	11403fcc 	andi	r5,r2,255
 8004d48:	2940201c 	xori	r5,r5,128
 8004d4c:	297fe004 	addi	r5,r5,-128
 8004d50:	00c00c04 	movi	r3,48
 8004d54:	28c0f226 	beq	r5,r3,8005120 <_strtod_r+0x58c>
 8004d58:	0023883a 	mov	r17,zero
 8004d5c:	10fff404 	addi	r3,r2,-48
 8004d60:	18c03fcc 	andi	r3,r3,255
 8004d64:	01800244 	movi	r6,9
 8004d68:	30c3d336 	bltu	r6,r3,8005cb8 <_strtod_r+0x1124>
 8004d6c:	91000044 	addi	r4,r18,1
 8004d70:	002b883a 	mov	r21,zero
 8004d74:	002f883a 	mov	r23,zero
 8004d78:	0029883a 	mov	r20,zero
 8004d7c:	02000204 	movi	r8,8
 8004d80:	024003c4 	movi	r9,15
 8004d84:	45005a16 	blt	r8,r20,8004ef0 <_strtod_r+0x35c>
 8004d88:	bdc002a4 	muli	r23,r23,10
 8004d8c:	10803fcc 	andi	r2,r2,255
 8004d90:	1080201c 	xori	r2,r2,128
 8004d94:	10bfe004 	addi	r2,r2,-128
 8004d98:	b885883a 	add	r2,r23,r2
 8004d9c:	15fff404 	addi	r23,r2,-48
 8004da0:	d9000615 	stw	r4,24(sp)
 8004da4:	20800003 	ldbu	r2,0(r4)
 8004da8:	2039883a 	mov	fp,r4
 8004dac:	a5000044 	addi	r20,r20,1
 8004db0:	10fff404 	addi	r3,r2,-48
 8004db4:	18c03fcc 	andi	r3,r3,255
 8004db8:	21000044 	addi	r4,r4,1
 8004dbc:	30fff12e 	bgeu	r6,r3,8004d84 <__alt_data_end+0xfc004d84>
 8004dc0:	14c03fcc 	andi	r19,r2,255
 8004dc4:	9cc0201c 	xori	r19,r19,128
 8004dc8:	9cffe004 	addi	r19,r19,-128
 8004dcc:	8009883a 	mov	r4,r16
 8004dd0:	800d5b80 	call	800d5b8 <_localeconv_r>
 8004dd4:	11400017 	ldw	r5,0(r2)
 8004dd8:	8009883a 	mov	r4,r16
 8004ddc:	d9401315 	stw	r5,76(sp)
 8004de0:	800d5b80 	call	800d5b8 <_localeconv_r>
 8004de4:	11000017 	ldw	r4,0(r2)
 8004de8:	8004afc0 	call	8004afc <strlen>
 8004dec:	d9401317 	ldw	r5,76(sp)
 8004df0:	e009883a 	mov	r4,fp
 8004df4:	100d883a 	mov	r6,r2
 8004df8:	800ed8c0 	call	800ed8c <strncmp>
 8004dfc:	1000d926 	beq	r2,zero,8005164 <_strtod_r+0x5d0>
 8004e00:	a039883a 	mov	fp,r20
 8004e04:	000b883a 	mov	r5,zero
 8004e08:	0011883a 	mov	r8,zero
 8004e0c:	0013883a 	mov	r9,zero
 8004e10:	00801944 	movi	r2,101
 8004e14:	98804426 	beq	r19,r2,8004f28 <_strtod_r+0x394>
 8004e18:	00801144 	movi	r2,69
 8004e1c:	98804226 	beq	r19,r2,8004f28 <_strtod_r+0x394>
 8004e20:	000f883a 	mov	r7,zero
 8004e24:	e0007f1e 	bne	fp,zero,8005024 <_strtod_r+0x490>
 8004e28:	2800391e 	bne	r5,zero,8004f10 <_strtod_r+0x37c>
 8004e2c:	8800381e 	bne	r17,zero,8004f10 <_strtod_r+0x37c>
 8004e30:	4800b71e 	bne	r9,zero,8005110 <_strtod_r+0x57c>
 8004e34:	00801384 	movi	r2,78
 8004e38:	98800526 	beq	r19,r2,8004e50 <_strtod_r+0x2bc>
 8004e3c:	14ff9f0e 	bge	r2,r19,8004cbc <__alt_data_end+0xfc004cbc>
 8004e40:	00801a44 	movi	r2,105
 8004e44:	98843b26 	beq	r19,r2,8005f34 <_strtod_r+0x13a0>
 8004e48:	00801b84 	movi	r2,110
 8004e4c:	98bf9d1e 	bne	r19,r2,8004cc4 <__alt_data_end+0xfc004cc4>
 8004e50:	014200b4 	movhi	r5,2050
 8004e54:	d9000617 	ldw	r4,24(sp)
 8004e58:	2945e304 	addi	r5,r5,6028
 8004e5c:	01c00644 	movi	r7,25
 8004e60:	00000b06 	br	8004e90 <_strtod_r+0x2fc>
 8004e64:	21000044 	addi	r4,r4,1
 8004e68:	20800003 	ldbu	r2,0(r4)
 8004e6c:	10ffefc4 	addi	r3,r2,-65
 8004e70:	10803fcc 	andi	r2,r2,255
 8004e74:	1080201c 	xori	r2,r2,128
 8004e78:	18c03fcc 	andi	r3,r3,255
 8004e7c:	10bfe004 	addi	r2,r2,-128
 8004e80:	38c00136 	bltu	r7,r3,8004e88 <_strtod_r+0x2f4>
 8004e84:	10800804 	addi	r2,r2,32
 8004e88:	29400044 	addi	r5,r5,1
 8004e8c:	11bf8d1e 	bne	r2,r6,8004cc4 <__alt_data_end+0xfc004cc4>
 8004e90:	29800007 	ldb	r6,0(r5)
 8004e94:	303ff31e 	bne	r6,zero,8004e64 <__alt_data_end+0xfc004e64>
 8004e98:	20800044 	addi	r2,r4,1
 8004e9c:	d8800615 	stw	r2,24(sp)
 8004ea0:	20c00047 	ldb	r3,1(r4)
 8004ea4:	00800a04 	movi	r2,40
 8004ea8:	18846d26 	beq	r3,r2,8006060 <_strtod_r+0x14cc>
 8004eac:	013ffe34 	movhi	r4,65528
 8004eb0:	d9000715 	stw	r4,28(sp)
 8004eb4:	d8000815 	stw	zero,32(sp)
 8004eb8:	dd400817 	ldw	r21,32(sp)
 8004ebc:	dc400717 	ldw	r17,28(sp)
 8004ec0:	00001506 	br	8004f18 <_strtod_r+0x384>
 8004ec4:	00800044 	movi	r2,1
 8004ec8:	d8801015 	stw	r2,64(sp)
 8004ecc:	003f9606 	br	8004d28 <__alt_data_end+0xfc004d28>
 8004ed0:	21000044 	addi	r4,r4,1
 8004ed4:	d9000615 	stw	r4,24(sp)
 8004ed8:	20800003 	ldbu	r2,0(r4)
 8004edc:	10c03fcc 	andi	r3,r2,255
 8004ee0:	28ff442e 	bgeu	r5,r3,8004bf4 <__alt_data_end+0xfc004bf4>
 8004ee4:	2025883a 	mov	r18,r4
 8004ee8:	d8001015 	stw	zero,64(sp)
 8004eec:	003f9506 	br	8004d44 <__alt_data_end+0xfc004d44>
 8004ef0:	4d3fab16 	blt	r9,r20,8004da0 <__alt_data_end+0xfc004da0>
 8004ef4:	ad4002a4 	muli	r21,r21,10
 8004ef8:	10c03fcc 	andi	r3,r2,255
 8004efc:	18c0201c 	xori	r3,r3,128
 8004f00:	18ffe004 	addi	r3,r3,-128
 8004f04:	a8eb883a 	add	r21,r21,r3
 8004f08:	ad7ff404 	addi	r21,r21,-48
 8004f0c:	003fa406 	br	8004da0 <__alt_data_end+0xfc004da0>
 8004f10:	002b883a 	mov	r21,zero
 8004f14:	0023883a 	mov	r17,zero
 8004f18:	d9000c17 	ldw	r4,48(sp)
 8004f1c:	203f7026 	beq	r4,zero,8004ce0 <__alt_data_end+0xfc004ce0>
 8004f20:	dd800617 	ldw	r22,24(sp)
 8004f24:	003f6c06 	br	8004cd8 <__alt_data_end+0xfc004cd8>
 8004f28:	e0007726 	beq	fp,zero,8005108 <_strtod_r+0x574>
 8004f2c:	dd800617 	ldw	r22,24(sp)
 8004f30:	00c00ac4 	movi	r3,43
 8004f34:	b0800044 	addi	r2,r22,1
 8004f38:	d8800615 	stw	r2,24(sp)
 8004f3c:	b0800047 	ldb	r2,1(r22)
 8004f40:	10c25726 	beq	r2,r3,80058a0 <_strtod_r+0xd0c>
 8004f44:	00c00b44 	movi	r3,45
 8004f48:	10c25026 	beq	r2,r3,800588c <_strtod_r+0xcf8>
 8004f4c:	1027883a 	mov	r19,r2
 8004f50:	000f883a 	mov	r7,zero
 8004f54:	98fff404 	addi	r3,r19,-48
 8004f58:	01000244 	movi	r4,9
 8004f5c:	9805883a 	mov	r2,r19
 8004f60:	20c23836 	bltu	r4,r3,8005844 <_strtod_r+0xcb0>
 8004f64:	00c00c04 	movi	r3,48
 8004f68:	98c0071e 	bne	r19,r3,8004f88 <_strtod_r+0x3f4>
 8004f6c:	d8c00617 	ldw	r3,24(sp)
 8004f70:	18c00044 	addi	r3,r3,1
 8004f74:	d8c00615 	stw	r3,24(sp)
 8004f78:	18800007 	ldb	r2,0(r3)
 8004f7c:	18c00044 	addi	r3,r3,1
 8004f80:	14fffc26 	beq	r2,r19,8004f74 <__alt_data_end+0xfc004f74>
 8004f84:	1027883a 	mov	r19,r2
 8004f88:	10bff3c4 	addi	r2,r2,-49
 8004f8c:	00c00204 	movi	r3,8
 8004f90:	18bfa336 	bltu	r3,r2,8004e20 <__alt_data_end+0xfc004e20>
 8004f94:	db000617 	ldw	r12,24(sp)
 8004f98:	98bff404 	addi	r2,r19,-48
 8004f9c:	02c00244 	movi	r11,9
 8004fa0:	62800044 	addi	r10,r12,1
 8004fa4:	da800615 	stw	r10,24(sp)
 8004fa8:	64c00043 	ldbu	r19,1(r12)
 8004fac:	98fff404 	addi	r3,r19,-48
 8004fb0:	9cc03fcc 	andi	r19,r19,255
 8004fb4:	9cc0201c 	xori	r19,r19,128
 8004fb8:	18c03fcc 	andi	r3,r3,255
 8004fbc:	9cffe004 	addi	r19,r19,-128
 8004fc0:	58c00e36 	bltu	r11,r3,8004ffc <_strtod_r+0x468>
 8004fc4:	61000084 	addi	r4,r12,2
 8004fc8:	d9000615 	stw	r4,24(sp)
 8004fcc:	108002a4 	muli	r2,r2,10
 8004fd0:	21800003 	ldbu	r6,0(r4)
 8004fd4:	2015883a 	mov	r10,r4
 8004fd8:	14e7883a 	add	r19,r2,r19
 8004fdc:	30fff404 	addi	r3,r6,-48
 8004fe0:	98bff404 	addi	r2,r19,-48
 8004fe4:	34c03fcc 	andi	r19,r6,255
 8004fe8:	9cc0201c 	xori	r19,r19,128
 8004fec:	18c03fcc 	andi	r3,r3,255
 8004ff0:	9cffe004 	addi	r19,r19,-128
 8004ff4:	21000044 	addi	r4,r4,1
 8004ff8:	58fff32e 	bgeu	r11,r3,8004fc8 <__alt_data_end+0xfc004fc8>
 8004ffc:	5315c83a 	sub	r10,r10,r12
 8005000:	00c00204 	movi	r3,8
 8005004:	1a832a16 	blt	r3,r10,8005cb0 <_strtod_r+0x111c>
 8005008:	00d387c4 	movi	r3,19999
 800500c:	1880010e 	bge	r3,r2,8005014 <_strtod_r+0x480>
 8005010:	1805883a 	mov	r2,r3
 8005014:	01c7c83a 	sub	r3,zero,r7
 8005018:	10c4f03a 	xor	r2,r2,r3
 800501c:	11cf883a 	add	r7,r2,r7
 8005020:	e03f8126 	beq	fp,zero,8004e28 <__alt_data_end+0xfc004e28>
 8005024:	3a11c83a 	sub	r8,r7,r8
 8005028:	da000e15 	stw	r8,56(sp)
 800502c:	a000011e 	bne	r20,zero,8005034 <_strtod_r+0x4a0>
 8005030:	e029883a 	mov	r20,fp
 8005034:	00800404 	movi	r2,16
 8005038:	e023883a 	mov	r17,fp
 800503c:	1700010e 	bge	r2,fp,8005044 <_strtod_r+0x4b0>
 8005040:	1023883a 	mov	r17,r2
 8005044:	b809883a 	mov	r4,r23
 8005048:	80140180 	call	8014018 <__floatunsidf>
 800504c:	d8800815 	stw	r2,32(sp)
 8005050:	d8c00715 	stw	r3,28(sp)
 8005054:	00800244 	movi	r2,9
 8005058:	1440150e 	bge	r2,r17,80050b0 <_strtod_r+0x51c>
 800505c:	88bffdc4 	addi	r2,r17,-9
 8005060:	100490fa 	slli	r2,r2,3
 8005064:	180b883a 	mov	r5,r3
 8005068:	00c200b4 	movhi	r3,2050
 800506c:	18c63504 	addi	r3,r3,6356
 8005070:	1885883a 	add	r2,r3,r2
 8005074:	d9000817 	ldw	r4,32(sp)
 8005078:	11800017 	ldw	r6,0(r2)
 800507c:	11c00117 	ldw	r7,4(r2)
 8005080:	80138f40 	call	80138f4 <__muldf3>
 8005084:	a809883a 	mov	r4,r21
 8005088:	102d883a 	mov	r22,r2
 800508c:	1827883a 	mov	r19,r3
 8005090:	80140180 	call	8014018 <__floatunsidf>
 8005094:	b009883a 	mov	r4,r22
 8005098:	980b883a 	mov	r5,r19
 800509c:	100d883a 	mov	r6,r2
 80050a0:	180f883a 	mov	r7,r3
 80050a4:	80020b40 	call	80020b4 <__adddf3>
 80050a8:	d8800815 	stw	r2,32(sp)
 80050ac:	d8c00715 	stw	r3,28(sp)
 80050b0:	008003c4 	movi	r2,15
 80050b4:	17004916 	blt	r2,fp,80051dc <_strtod_r+0x648>
 80050b8:	d8c00e17 	ldw	r3,56(sp)
 80050bc:	183f7e26 	beq	r3,zero,8004eb8 <__alt_data_end+0xfc004eb8>
 80050c0:	d9000e17 	ldw	r4,56(sp)
 80050c4:	0103730e 	bge	zero,r4,8005e94 <_strtod_r+0x1300>
 80050c8:	00c00584 	movi	r3,22
 80050cc:	19030216 	blt	r3,r4,8005cd8 <_strtod_r+0x1144>
 80050d0:	200490fa 	slli	r2,r4,3
 80050d4:	00c200b4 	movhi	r3,2050
 80050d8:	18c63504 	addi	r3,r3,6356
 80050dc:	1885883a 	add	r2,r3,r2
 80050e0:	d9800817 	ldw	r6,32(sp)
 80050e4:	d9c00717 	ldw	r7,28(sp)
 80050e8:	11000017 	ldw	r4,0(r2)
 80050ec:	11400117 	ldw	r5,4(r2)
 80050f0:	80138f40 	call	80138f4 <__muldf3>
 80050f4:	102b883a 	mov	r21,r2
 80050f8:	1823883a 	mov	r17,r3
 80050fc:	003f8606 	br	8004f18 <__alt_data_end+0xfc004f18>
 8005100:	0011883a 	mov	r8,zero
 8005104:	02400044 	movi	r9,1
 8005108:	2800031e 	bne	r5,zero,8005118 <_strtod_r+0x584>
 800510c:	8800021e 	bne	r17,zero,8005118 <_strtod_r+0x584>
 8005110:	002b883a 	mov	r21,zero
 8005114:	003eed06 	br	8004ccc <__alt_data_end+0xfc004ccc>
 8005118:	0039883a 	mov	fp,zero
 800511c:	003f8306 	br	8004f2c <__alt_data_end+0xfc004f2c>
 8005120:	90800047 	ldb	r2,1(r18)
 8005124:	00c01604 	movi	r3,88
 8005128:	10c21d26 	beq	r2,r3,80059a0 <_strtod_r+0xe0c>
 800512c:	00c01e04 	movi	r3,120
 8005130:	10c21b26 	beq	r2,r3,80059a0 <_strtod_r+0xe0c>
 8005134:	90c00044 	addi	r3,r18,1
 8005138:	1825883a 	mov	r18,r3
 800513c:	d8c00615 	stw	r3,24(sp)
 8005140:	18c00044 	addi	r3,r3,1
 8005144:	18bfffc3 	ldbu	r2,-1(r3)
 8005148:	11003fcc 	andi	r4,r2,255
 800514c:	2100201c 	xori	r4,r4,128
 8005150:	213fe004 	addi	r4,r4,-128
 8005154:	217ff826 	beq	r4,r5,8005138 <__alt_data_end+0xfc005138>
 8005158:	203f6d26 	beq	r4,zero,8004f10 <__alt_data_end+0xfc004f10>
 800515c:	04400044 	movi	r17,1
 8005160:	003efe06 	br	8004d5c <__alt_data_end+0xfc004d5c>
 8005164:	8009883a 	mov	r4,r16
 8005168:	800d5b80 	call	800d5b8 <_localeconv_r>
 800516c:	11000017 	ldw	r4,0(r2)
 8005170:	8004afc0 	call	8004afc <strlen>
 8005174:	d9000617 	ldw	r4,24(sp)
 8005178:	2085883a 	add	r2,r4,r2
 800517c:	d8800615 	stw	r2,24(sp)
 8005180:	14c00007 	ldb	r19,0(r2)
 8005184:	a001b21e 	bne	r20,zero,8005850 <_strtod_r+0xcbc>
 8005188:	00c00c04 	movi	r3,48
 800518c:	98c3931e 	bne	r19,r3,8005fdc <_strtod_r+0x1448>
 8005190:	10c00044 	addi	r3,r2,1
 8005194:	9809883a 	mov	r4,r19
 8005198:	d8c00615 	stw	r3,24(sp)
 800519c:	1cc00007 	ldb	r19,0(r3)
 80051a0:	188bc83a 	sub	r5,r3,r2
 80051a4:	18c00044 	addi	r3,r3,1
 80051a8:	993ffb26 	beq	r19,r4,8005198 <__alt_data_end+0xfc005198>
 80051ac:	98bff3c4 	addi	r2,r19,-49
 80051b0:	00c00204 	movi	r3,8
 80051b4:	1881ee36 	bltu	r3,r2,8005970 <_strtod_r+0xddc>
 80051b8:	dc800617 	ldw	r18,24(sp)
 80051bc:	9cfff404 	addi	r19,r19,-48
 80051c0:	2a000044 	addi	r8,r5,1
 80051c4:	9009883a 	mov	r4,r18
 80051c8:	07000044 	movi	fp,1
 80051cc:	b88002a4 	muli	r2,r23,10
 80051d0:	000b883a 	mov	r5,zero
 80051d4:	98af883a 	add	r23,r19,r2
 80051d8:	0001a806 	br	800587c <_strtod_r+0xce8>
 80051dc:	d9000e17 	ldw	r4,56(sp)
 80051e0:	e463c83a 	sub	r17,fp,r17
 80051e4:	2463883a 	add	r17,r4,r17
 80051e8:	0442670e 	bge	zero,r17,8005b88 <_strtod_r+0xff4>
 80051ec:	888003cc 	andi	r2,r17,15
 80051f0:	10000b26 	beq	r2,zero,8005220 <_strtod_r+0x68c>
 80051f4:	100490fa 	slli	r2,r2,3
 80051f8:	00c200b4 	movhi	r3,2050
 80051fc:	18c63504 	addi	r3,r3,6356
 8005200:	1885883a 	add	r2,r3,r2
 8005204:	d9800817 	ldw	r6,32(sp)
 8005208:	d9c00717 	ldw	r7,28(sp)
 800520c:	11000017 	ldw	r4,0(r2)
 8005210:	11400117 	ldw	r5,4(r2)
 8005214:	80138f40 	call	80138f4 <__muldf3>
 8005218:	d8800815 	stw	r2,32(sp)
 800521c:	d8c00715 	stw	r3,28(sp)
 8005220:	04fffc04 	movi	r19,-16
 8005224:	8ce2703a 	and	r17,r17,r19
 8005228:	8801a11e 	bne	r17,zero,80058b0 <_strtod_r+0xd1c>
 800522c:	dd400817 	ldw	r21,32(sp)
 8005230:	dc400717 	ldw	r17,28(sp)
 8005234:	d8001215 	stw	zero,72(sp)
 8005238:	8009883a 	mov	r4,r16
 800523c:	ddc00015 	stw	r23,0(sp)
 8005240:	900b883a 	mov	r5,r18
 8005244:	a00d883a 	mov	r6,r20
 8005248:	e00f883a 	mov	r7,fp
 800524c:	800dccc0 	call	800dccc <__s2b>
 8005250:	d8800d15 	stw	r2,52(sp)
 8005254:	d8800e17 	ldw	r2,56(sp)
 8005258:	d9000d17 	ldw	r4,52(sp)
 800525c:	dd801217 	ldw	r22,72(sp)
 8005260:	1007d7fa 	srai	r3,r2,31
 8005264:	0085c83a 	sub	r2,zero,r2
 8005268:	21000304 	addi	r4,r4,12
 800526c:	1886703a 	and	r3,r3,r2
 8005270:	d9001115 	stw	r4,68(sp)
 8005274:	d8c00915 	stw	r3,36(sp)
 8005278:	d8800d17 	ldw	r2,52(sp)
 800527c:	8009883a 	mov	r4,r16
 8005280:	0029883a 	mov	r20,zero
 8005284:	11400117 	ldw	r5,4(r2)
 8005288:	800dae80 	call	800dae8 <_Balloc>
 800528c:	d8c00d17 	ldw	r3,52(sp)
 8005290:	d9401117 	ldw	r5,68(sp)
 8005294:	11000304 	addi	r4,r2,12
 8005298:	19800417 	ldw	r6,16(r3)
 800529c:	1027883a 	mov	r19,r2
 80052a0:	31800084 	addi	r6,r6,2
 80052a4:	318d883a 	add	r6,r6,r6
 80052a8:	318d883a 	add	r6,r6,r6
 80052ac:	800d88c0 	call	800d88c <memcpy>
 80052b0:	d8800204 	addi	r2,sp,8
 80052b4:	8009883a 	mov	r4,r16
 80052b8:	a80b883a 	mov	r5,r21
 80052bc:	880d883a 	mov	r6,r17
 80052c0:	d9c00404 	addi	r7,sp,16
 80052c4:	d8800015 	stw	r2,0(sp)
 80052c8:	800e71c0 	call	800e71c <__d2b>
 80052cc:	8009883a 	mov	r4,r16
 80052d0:	01400044 	movi	r5,1
 80052d4:	d8800515 	stw	r2,20(sp)
 80052d8:	800dee80 	call	800dee8 <__i2b>
 80052dc:	d8c00e17 	ldw	r3,56(sp)
 80052e0:	1025883a 	mov	r18,r2
 80052e4:	00c0010e 	bge	zero,r3,80052ec <_strtod_r+0x758>
 80052e8:	1829883a 	mov	r20,r3
 80052ec:	d8800417 	ldw	r2,16(sp)
 80052f0:	1000dc16 	blt	r2,zero,8005664 <_strtod_r+0xad0>
 80052f4:	d9000917 	ldw	r4,36(sp)
 80052f8:	a02f883a 	mov	r23,r20
 80052fc:	20b9883a 	add	fp,r4,r2
 8005300:	d9000217 	ldw	r4,8(sp)
 8005304:	1585c83a 	sub	r2,r2,r22
 8005308:	00ff00c4 	movi	r3,-1021
 800530c:	110b883a 	add	r5,r2,r4
 8005310:	28c09e0e 	bge	r5,r3,800558c <_strtod_r+0x9f8>
 8005314:	10810cc4 	addi	r2,r2,1075
 8005318:	e087883a 	add	r3,fp,r2
 800531c:	b885883a 	add	r2,r23,r2
 8005320:	15af883a 	add	r23,r2,r22
 8005324:	1805883a 	mov	r2,r3
 8005328:	e0c0010e 	bge	fp,r3,8005330 <_strtod_r+0x79c>
 800532c:	e005883a 	mov	r2,fp
 8005330:	b880010e 	bge	r23,r2,8005338 <_strtod_r+0x7a4>
 8005334:	b805883a 	mov	r2,r23
 8005338:	0080030e 	bge	zero,r2,8005348 <_strtod_r+0x7b4>
 800533c:	1887c83a 	sub	r3,r3,r2
 8005340:	b8afc83a 	sub	r23,r23,r2
 8005344:	e0b9c83a 	sub	fp,fp,r2
 8005348:	d8800917 	ldw	r2,36(sp)
 800534c:	10001126 	beq	r2,zero,8005394 <_strtod_r+0x800>
 8005350:	900b883a 	mov	r5,r18
 8005354:	100d883a 	mov	r6,r2
 8005358:	8009883a 	mov	r4,r16
 800535c:	d8c01415 	stw	r3,80(sp)
 8005360:	800e1200 	call	800e120 <__pow5mult>
 8005364:	d9800517 	ldw	r6,20(sp)
 8005368:	8009883a 	mov	r4,r16
 800536c:	100b883a 	mov	r5,r2
 8005370:	1025883a 	mov	r18,r2
 8005374:	800df240 	call	800df24 <__multiply>
 8005378:	d9400517 	ldw	r5,20(sp)
 800537c:	8009883a 	mov	r4,r16
 8005380:	d8801315 	stw	r2,76(sp)
 8005384:	800db900 	call	800db90 <_Bfree>
 8005388:	d8801317 	ldw	r2,76(sp)
 800538c:	d8c01417 	ldw	r3,80(sp)
 8005390:	d8800515 	stw	r2,20(sp)
 8005394:	00c0050e 	bge	zero,r3,80053ac <_strtod_r+0x818>
 8005398:	d9400517 	ldw	r5,20(sp)
 800539c:	8009883a 	mov	r4,r16
 80053a0:	180d883a 	mov	r6,r3
 80053a4:	800e2600 	call	800e260 <__lshift>
 80053a8:	d8800515 	stw	r2,20(sp)
 80053ac:	a0000526 	beq	r20,zero,80053c4 <_strtod_r+0x830>
 80053b0:	980b883a 	mov	r5,r19
 80053b4:	8009883a 	mov	r4,r16
 80053b8:	a00d883a 	mov	r6,r20
 80053bc:	800e1200 	call	800e120 <__pow5mult>
 80053c0:	1027883a 	mov	r19,r2
 80053c4:	05c0050e 	bge	zero,r23,80053dc <_strtod_r+0x848>
 80053c8:	980b883a 	mov	r5,r19
 80053cc:	8009883a 	mov	r4,r16
 80053d0:	b80d883a 	mov	r6,r23
 80053d4:	800e2600 	call	800e260 <__lshift>
 80053d8:	1027883a 	mov	r19,r2
 80053dc:	0700050e 	bge	zero,fp,80053f4 <_strtod_r+0x860>
 80053e0:	900b883a 	mov	r5,r18
 80053e4:	8009883a 	mov	r4,r16
 80053e8:	e00d883a 	mov	r6,fp
 80053ec:	800e2600 	call	800e260 <__lshift>
 80053f0:	1025883a 	mov	r18,r2
 80053f4:	d9400517 	ldw	r5,20(sp)
 80053f8:	8009883a 	mov	r4,r16
 80053fc:	980d883a 	mov	r6,r19
 8005400:	800e4080 	call	800e408 <__mdiff>
 8005404:	10c00317 	ldw	r3,12(r2)
 8005408:	1009883a 	mov	r4,r2
 800540c:	10000315 	stw	zero,12(r2)
 8005410:	900b883a 	mov	r5,r18
 8005414:	1029883a 	mov	r20,r2
 8005418:	d8c00b15 	stw	r3,44(sp)
 800541c:	800e3a80 	call	800e3a8 <__mcmp>
 8005420:	10017316 	blt	r2,zero,80059f0 <_strtod_r+0xe5c>
 8005424:	1001b526 	beq	r2,zero,8005afc <_strtod_r+0xf68>
 8005428:	a009883a 	mov	r4,r20
 800542c:	900b883a 	mov	r5,r18
 8005430:	800e8580 	call	800e858 <__ratio>
 8005434:	1009883a 	mov	r4,r2
 8005438:	180b883a 	mov	r5,r3
 800543c:	000d883a 	mov	r6,zero
 8005440:	01d00034 	movhi	r7,16384
 8005444:	182f883a 	mov	r23,r3
 8005448:	d8801315 	stw	r2,76(sp)
 800544c:	80138140 	call	8013814 <__ledf2>
 8005450:	da001317 	ldw	r8,76(sp)
 8005454:	00805016 	blt	zero,r2,8005598 <_strtod_r+0xa04>
 8005458:	d9000b17 	ldw	r4,44(sp)
 800545c:	20008426 	beq	r4,zero,8005670 <_strtod_r+0xadc>
 8005460:	05cffc34 	movhi	r23,16368
 8005464:	0039883a 	mov	fp,zero
 8005468:	d8000f15 	stw	zero,60(sp)
 800546c:	ddc00a15 	stw	r23,40(sp)
 8005470:	d8800717 	ldw	r2,28(sp)
 8005474:	125ffc2c 	andhi	r9,r2,32752
 8005478:	009ff834 	movhi	r2,32736
 800547c:	48805626 	beq	r9,r2,80055d8 <_strtod_r+0xa44>
 8005480:	b0001e26 	beq	r22,zero,80054fc <_strtod_r+0x968>
 8005484:	0081a834 	movhi	r2,1696
 8005488:	12401c36 	bltu	r2,r9,80054fc <_strtod_r+0x968>
 800548c:	d9000f17 	ldw	r4,60(sp)
 8005490:	d9400a17 	ldw	r5,40(sp)
 8005494:	01d07834 	movhi	r7,16864
 8005498:	39ffffc4 	addi	r7,r7,-1
 800549c:	01bff034 	movhi	r6,65472
 80054a0:	da401315 	stw	r9,76(sp)
 80054a4:	80138140 	call	8013814 <__ledf2>
 80054a8:	da401317 	ldw	r9,76(sp)
 80054ac:	00801016 	blt	zero,r2,80054f0 <_strtod_r+0x95c>
 80054b0:	d9000f17 	ldw	r4,60(sp)
 80054b4:	d9400a17 	ldw	r5,40(sp)
 80054b8:	80129e80 	call	80129e8 <__fixunsdfsi>
 80054bc:	da401317 	ldw	r9,76(sp)
 80054c0:	1000dc26 	beq	r2,zero,8005834 <_strtod_r+0xca0>
 80054c4:	1009883a 	mov	r4,r2
 80054c8:	80140180 	call	8014018 <__floatunsidf>
 80054cc:	da401317 	ldw	r9,76(sp)
 80054d0:	d8800f15 	stw	r2,60(sp)
 80054d4:	d8c00a15 	stw	r3,40(sp)
 80054d8:	d8c00b17 	ldw	r3,44(sp)
 80054dc:	1800d31e 	bne	r3,zero,800582c <_strtod_r+0xc98>
 80054e0:	d9000a17 	ldw	r4,40(sp)
 80054e4:	2220003c 	xorhi	r8,r4,32768
 80054e8:	df000f17 	ldw	fp,60(sp)
 80054ec:	402f883a 	mov	r23,r8
 80054f0:	0081ac34 	movhi	r2,1712
 80054f4:	b891883a 	add	r8,r23,r2
 80054f8:	426fc83a 	sub	r23,r8,r9
 80054fc:	a809883a 	mov	r4,r21
 8005500:	880b883a 	mov	r5,r17
 8005504:	da401315 	stw	r9,76(sp)
 8005508:	800e5a00 	call	800e5a0 <__ulp>
 800550c:	b80b883a 	mov	r5,r23
 8005510:	e009883a 	mov	r4,fp
 8005514:	100d883a 	mov	r6,r2
 8005518:	180f883a 	mov	r7,r3
 800551c:	80138f40 	call	80138f4 <__muldf3>
 8005520:	a809883a 	mov	r4,r21
 8005524:	880b883a 	mov	r5,r17
 8005528:	100d883a 	mov	r6,r2
 800552c:	180f883a 	mov	r7,r3
 8005530:	80020b40 	call	80020b4 <__adddf3>
 8005534:	da401317 	ldw	r9,76(sp)
 8005538:	102b883a 	mov	r21,r2
 800553c:	1823883a 	mov	r17,r3
 8005540:	d8800815 	stw	r2,32(sp)
 8005544:	d8c00715 	stw	r3,28(sp)
 8005548:	182f883a 	mov	r23,r3
 800554c:	b000021e 	bne	r22,zero,8005558 <_strtod_r+0x9c4>
 8005550:	b89ffc2c 	andhi	r2,r23,32752
 8005554:	48806e26 	beq	r9,r2,8005710 <_strtod_r+0xb7c>
 8005558:	d9400517 	ldw	r5,20(sp)
 800555c:	8009883a 	mov	r4,r16
 8005560:	800db900 	call	800db90 <_Bfree>
 8005564:	8009883a 	mov	r4,r16
 8005568:	980b883a 	mov	r5,r19
 800556c:	800db900 	call	800db90 <_Bfree>
 8005570:	8009883a 	mov	r4,r16
 8005574:	900b883a 	mov	r5,r18
 8005578:	800db900 	call	800db90 <_Bfree>
 800557c:	8009883a 	mov	r4,r16
 8005580:	a00b883a 	mov	r5,r20
 8005584:	800db900 	call	800db90 <_Bfree>
 8005588:	003f3b06 	br	8005278 <__alt_data_end+0xfc005278>
 800558c:	00c00d84 	movi	r3,54
 8005590:	1905c83a 	sub	r2,r3,r4
 8005594:	003f6006 	br	8005318 <__alt_data_end+0xfc005318>
 8005598:	4009883a 	mov	r4,r8
 800559c:	b80b883a 	mov	r5,r23
 80055a0:	000d883a 	mov	r6,zero
 80055a4:	01cff834 	movhi	r7,16352
 80055a8:	80138f40 	call	80138f4 <__muldf3>
 80055ac:	d9000b17 	ldw	r4,44(sp)
 80055b0:	d8800f15 	stw	r2,60(sp)
 80055b4:	d8c00a15 	stw	r3,40(sp)
 80055b8:	2000481e 	bne	r4,zero,80056dc <_strtod_r+0xb48>
 80055bc:	1a20003c 	xorhi	r8,r3,32768
 80055c0:	1039883a 	mov	fp,r2
 80055c4:	d8800717 	ldw	r2,28(sp)
 80055c8:	402f883a 	mov	r23,r8
 80055cc:	125ffc2c 	andhi	r9,r2,32752
 80055d0:	009ff834 	movhi	r2,32736
 80055d4:	48bfaa1e 	bne	r9,r2,8005480 <__alt_data_end+0xfc005480>
 80055d8:	d8c00717 	ldw	r3,28(sp)
 80055dc:	00bf2c34 	movhi	r2,64688
 80055e0:	d9000817 	ldw	r4,32(sp)
 80055e4:	1887883a 	add	r3,r3,r2
 80055e8:	180b883a 	mov	r5,r3
 80055ec:	da401315 	stw	r9,76(sp)
 80055f0:	d8c00715 	stw	r3,28(sp)
 80055f4:	800e5a00 	call	800e5a0 <__ulp>
 80055f8:	e009883a 	mov	r4,fp
 80055fc:	b80b883a 	mov	r5,r23
 8005600:	100d883a 	mov	r6,r2
 8005604:	180f883a 	mov	r7,r3
 8005608:	80138f40 	call	80138f4 <__muldf3>
 800560c:	d9000817 	ldw	r4,32(sp)
 8005610:	d9400717 	ldw	r5,28(sp)
 8005614:	100d883a 	mov	r6,r2
 8005618:	180f883a 	mov	r7,r3
 800561c:	80020b40 	call	80020b4 <__adddf3>
 8005620:	011f2834 	movhi	r4,31904
 8005624:	d8800815 	stw	r2,32(sp)
 8005628:	213fffc4 	addi	r4,r4,-1
 800562c:	189ffc2c 	andhi	r2,r3,32752
 8005630:	da401317 	ldw	r9,76(sp)
 8005634:	2080762e 	bgeu	r4,r2,8005810 <_strtod_r+0xc7c>
 8005638:	009ffc34 	movhi	r2,32752
 800563c:	10bfffc4 	addi	r2,r2,-1
 8005640:	88814426 	beq	r17,r2,8005b54 <_strtod_r+0xfc0>
 8005644:	00dffc34 	movhi	r3,32752
 8005648:	18ffffc4 	addi	r3,r3,-1
 800564c:	013fffc4 	movi	r4,-1
 8005650:	d8c00715 	stw	r3,28(sp)
 8005654:	d9000815 	stw	r4,32(sp)
 8005658:	202b883a 	mov	r21,r4
 800565c:	1823883a 	mov	r17,r3
 8005660:	003fbd06 	br	8005558 <__alt_data_end+0xfc005558>
 8005664:	a0afc83a 	sub	r23,r20,r2
 8005668:	df000917 	ldw	fp,36(sp)
 800566c:	003f2406 	br	8005300 <__alt_data_end+0xfc005300>
 8005670:	d8800817 	ldw	r2,32(sp)
 8005674:	10001b1e 	bne	r2,zero,80056e4 <_strtod_r+0xb50>
 8005678:	d8c00717 	ldw	r3,28(sp)
 800567c:	01000434 	movhi	r4,16
 8005680:	213fffc4 	addi	r4,r4,-1
 8005684:	1904703a 	and	r2,r3,r4
 8005688:	10001b1e 	bne	r2,zero,80056f8 <_strtod_r+0xb64>
 800568c:	4009883a 	mov	r4,r8
 8005690:	b80b883a 	mov	r5,r23
 8005694:	000d883a 	mov	r6,zero
 8005698:	01cffc34 	movhi	r7,16368
 800569c:	da001315 	stw	r8,76(sp)
 80056a0:	80138140 	call	8013814 <__ledf2>
 80056a4:	da001317 	ldw	r8,76(sp)
 80056a8:	10017b16 	blt	r2,zero,8005c98 <_strtod_r+0x1104>
 80056ac:	4009883a 	mov	r4,r8
 80056b0:	b80b883a 	mov	r5,r23
 80056b4:	000d883a 	mov	r6,zero
 80056b8:	01cff834 	movhi	r7,16352
 80056bc:	80138f40 	call	80138f4 <__muldf3>
 80056c0:	d8800f15 	stw	r2,60(sp)
 80056c4:	d8c00a15 	stw	r3,40(sp)
 80056c8:	102f883a 	mov	r23,r2
 80056cc:	1a20003c 	xorhi	r8,r3,32768
 80056d0:	b839883a 	mov	fp,r23
 80056d4:	402f883a 	mov	r23,r8
 80056d8:	003f6506 	br	8005470 <__alt_data_end+0xfc005470>
 80056dc:	da000a17 	ldw	r8,40(sp)
 80056e0:	003fb706 	br	80055c0 <__alt_data_end+0xfc0055c0>
 80056e4:	d8c00817 	ldw	r3,32(sp)
 80056e8:	00800044 	movi	r2,1
 80056ec:	1880021e 	bne	r3,r2,80056f8 <_strtod_r+0xb64>
 80056f0:	d9000717 	ldw	r4,28(sp)
 80056f4:	2000a426 	beq	r4,zero,8005988 <_strtod_r+0xdf4>
 80056f8:	008ffc34 	movhi	r2,16368
 80056fc:	0039883a 	mov	fp,zero
 8005700:	05effc34 	movhi	r23,49136
 8005704:	d8000f15 	stw	zero,60(sp)
 8005708:	d8800a15 	stw	r2,40(sp)
 800570c:	003f5806 	br	8005470 <__alt_data_end+0xfc005470>
 8005710:	d9400a17 	ldw	r5,40(sp)
 8005714:	d9000f17 	ldw	r4,60(sp)
 8005718:	8003bcc0 	call	8003bcc <__fixdfsi>
 800571c:	1009883a 	mov	r4,r2
 8005720:	8003c540 	call	8003c54 <__floatsidf>
 8005724:	d9000f17 	ldw	r4,60(sp)
 8005728:	d9400a17 	ldw	r5,40(sp)
 800572c:	100d883a 	mov	r6,r2
 8005730:	180f883a 	mov	r7,r3
 8005734:	80032fc0 	call	80032fc <__subdf3>
 8005738:	1011883a 	mov	r8,r2
 800573c:	d8800b17 	ldw	r2,44(sp)
 8005740:	10001f1e 	bne	r2,zero,80057c0 <_strtod_r+0xc2c>
 8005744:	d9000817 	ldw	r4,32(sp)
 8005748:	20001d1e 	bne	r4,zero,80057c0 <_strtod_r+0xc2c>
 800574c:	00800434 	movhi	r2,16
 8005750:	10bfffc4 	addi	r2,r2,-1
 8005754:	b8ae703a 	and	r23,r23,r2
 8005758:	b800191e 	bne	r23,zero,80057c0 <_strtod_r+0xc2c>
 800575c:	01a52834 	movhi	r6,38048
 8005760:	01cff434 	movhi	r7,16336
 8005764:	318d6544 	addi	r6,r6,13717
 8005768:	39ffffc4 	addi	r7,r7,-1
 800576c:	4009883a 	mov	r4,r8
 8005770:	180b883a 	mov	r5,r3
 8005774:	80138140 	call	8013814 <__ledf2>
 8005778:	103f770e 	bge	r2,zero,8005558 <__alt_data_end+0xfc005558>
 800577c:	a02d883a 	mov	r22,r20
 8005780:	d9400517 	ldw	r5,20(sp)
 8005784:	8009883a 	mov	r4,r16
 8005788:	800db900 	call	800db90 <_Bfree>
 800578c:	8009883a 	mov	r4,r16
 8005790:	980b883a 	mov	r5,r19
 8005794:	800db900 	call	800db90 <_Bfree>
 8005798:	8009883a 	mov	r4,r16
 800579c:	900b883a 	mov	r5,r18
 80057a0:	800db900 	call	800db90 <_Bfree>
 80057a4:	d9400d17 	ldw	r5,52(sp)
 80057a8:	8009883a 	mov	r4,r16
 80057ac:	800db900 	call	800db90 <_Bfree>
 80057b0:	8009883a 	mov	r4,r16
 80057b4:	b00b883a 	mov	r5,r22
 80057b8:	800db900 	call	800db90 <_Bfree>
 80057bc:	003dd606 	br	8004f18 <__alt_data_end+0xfc004f18>
 80057c0:	01a52834 	movhi	r6,38048
 80057c4:	01cff834 	movhi	r7,16352
 80057c8:	4009883a 	mov	r4,r8
 80057cc:	180b883a 	mov	r5,r3
 80057d0:	318d6544 	addi	r6,r6,13717
 80057d4:	39ffffc4 	addi	r7,r7,-1
 80057d8:	d8c01415 	stw	r3,80(sp)
 80057dc:	da001315 	stw	r8,76(sp)
 80057e0:	80138140 	call	8013814 <__ledf2>
 80057e4:	d8c01417 	ldw	r3,80(sp)
 80057e8:	da001317 	ldw	r8,76(sp)
 80057ec:	103fe316 	blt	r2,zero,800577c <__alt_data_end+0xfc00577c>
 80057f0:	018d6c34 	movhi	r6,13744
 80057f4:	31b94d44 	addi	r6,r6,-6859
 80057f8:	4009883a 	mov	r4,r8
 80057fc:	180b883a 	mov	r5,r3
 8005800:	01cff834 	movhi	r7,16352
 8005804:	800321c0 	call	800321c <__gedf2>
 8005808:	00bf530e 	bge	zero,r2,8005558 <__alt_data_end+0xfc005558>
 800580c:	003fdb06 	br	800577c <__alt_data_end+0xfc00577c>
 8005810:	0080d434 	movhi	r2,848
 8005814:	1887883a 	add	r3,r3,r2
 8005818:	d8c00715 	stw	r3,28(sp)
 800581c:	182f883a 	mov	r23,r3
 8005820:	dd400817 	ldw	r21,32(sp)
 8005824:	1823883a 	mov	r17,r3
 8005828:	003f4806 	br	800554c <__alt_data_end+0xfc00554c>
 800582c:	da000a17 	ldw	r8,40(sp)
 8005830:	003f2d06 	br	80054e8 <__alt_data_end+0xfc0054e8>
 8005834:	008ffc34 	movhi	r2,16368
 8005838:	d8000f15 	stw	zero,60(sp)
 800583c:	d8800a15 	stw	r2,40(sp)
 8005840:	003f2506 	br	80054d8 <__alt_data_end+0xfc0054d8>
 8005844:	dd800615 	stw	r22,24(sp)
 8005848:	000f883a 	mov	r7,zero
 800584c:	003d7506 	br	8004e24 <__alt_data_end+0xfc004e24>
 8005850:	a039883a 	mov	fp,r20
 8005854:	000b883a 	mov	r5,zero
 8005858:	0011883a 	mov	r8,zero
 800585c:	99bff404 	addi	r6,r19,-48
 8005860:	00800244 	movi	r2,9
 8005864:	11801036 	bltu	r2,r6,80058a8 <_strtod_r+0xd14>
 8005868:	28c00044 	addi	r3,r5,1
 800586c:	3027883a 	mov	r19,r6
 8005870:	3001331e 	bne	r6,zero,8005d40 <_strtod_r+0x11ac>
 8005874:	d9000617 	ldw	r4,24(sp)
 8005878:	180b883a 	mov	r5,r3
 800587c:	20800044 	addi	r2,r4,1
 8005880:	d8800615 	stw	r2,24(sp)
 8005884:	24c00047 	ldb	r19,1(r4)
 8005888:	003ff406 	br	800585c <__alt_data_end+0xfc00585c>
 800588c:	01c00044 	movi	r7,1
 8005890:	b0800084 	addi	r2,r22,2
 8005894:	d8800615 	stw	r2,24(sp)
 8005898:	b4c00087 	ldb	r19,2(r22)
 800589c:	003dad06 	br	8004f54 <__alt_data_end+0xfc004f54>
 80058a0:	000f883a 	mov	r7,zero
 80058a4:	003ffa06 	br	8005890 <__alt_data_end+0xfc005890>
 80058a8:	02400044 	movi	r9,1
 80058ac:	003d5806 	br	8004e10 <__alt_data_end+0xfc004e10>
 80058b0:	00804d04 	movi	r2,308
 80058b4:	1440af16 	blt	r2,r17,8005b74 <_strtod_r+0xfe0>
 80058b8:	8827d13a 	srai	r19,r17,4
 80058bc:	05800044 	movi	r22,1
 80058c0:	044200b4 	movhi	r17,2050
 80058c4:	8c462b04 	addi	r17,r17,6316
 80058c8:	b4c1db0e 	bge	r22,r19,8006038 <_strtod_r+0x14a4>
 80058cc:	d8800817 	ldw	r2,32(sp)
 80058d0:	d8c00717 	ldw	r3,28(sp)
 80058d4:	002b883a 	mov	r21,zero
 80058d8:	9980004c 	andi	r6,r19,1
 80058dc:	30000726 	beq	r6,zero,80058fc <_strtod_r+0xd68>
 80058e0:	a80c90fa 	slli	r6,r21,3
 80058e4:	1009883a 	mov	r4,r2
 80058e8:	180b883a 	mov	r5,r3
 80058ec:	8985883a 	add	r2,r17,r6
 80058f0:	11800017 	ldw	r6,0(r2)
 80058f4:	11c00117 	ldw	r7,4(r2)
 80058f8:	80138f40 	call	80138f4 <__muldf3>
 80058fc:	9827d07a 	srai	r19,r19,1
 8005900:	ad400044 	addi	r21,r21,1
 8005904:	9dbff41e 	bne	r19,r22,80058d8 <__alt_data_end+0xfc0058d8>
 8005908:	d8800815 	stw	r2,32(sp)
 800590c:	d8c00715 	stw	r3,28(sp)
 8005910:	a82a90fa 	slli	r21,r21,3
 8005914:	d8800717 	ldw	r2,28(sp)
 8005918:	d9800817 	ldw	r6,32(sp)
 800591c:	8d63883a 	add	r17,r17,r21
 8005920:	89000017 	ldw	r4,0(r17)
 8005924:	89400117 	ldw	r5,4(r17)
 8005928:	01ff2c34 	movhi	r7,64688
 800592c:	11cf883a 	add	r7,r2,r7
 8005930:	80138f40 	call	80138f4 <__muldf3>
 8005934:	d8800815 	stw	r2,32(sp)
 8005938:	011f2834 	movhi	r4,31904
 800593c:	189ffc2c 	andhi	r2,r3,32752
 8005940:	20808c36 	bltu	r4,r2,8005b74 <_strtod_r+0xfe0>
 8005944:	011f2434 	movhi	r4,31888
 8005948:	2081a62e 	bgeu	r4,r2,8005fe4 <_strtod_r+0x1450>
 800594c:	00dffc34 	movhi	r3,32752
 8005950:	18ffffc4 	addi	r3,r3,-1
 8005954:	013fffc4 	movi	r4,-1
 8005958:	d8c00715 	stw	r3,28(sp)
 800595c:	d9000815 	stw	r4,32(sp)
 8005960:	202b883a 	mov	r21,r4
 8005964:	1823883a 	mov	r17,r3
 8005968:	d8001215 	stw	zero,72(sp)
 800596c:	003e3206 	br	8005238 <__alt_data_end+0xfc005238>
 8005970:	00801944 	movi	r2,101
 8005974:	98bde226 	beq	r19,r2,8005100 <__alt_data_end+0xfc005100>
 8005978:	0039883a 	mov	fp,zero
 800597c:	0011883a 	mov	r8,zero
 8005980:	02400044 	movi	r9,1
 8005984:	003d2406 	br	8004e18 <__alt_data_end+0xfc004e18>
 8005988:	a02d883a 	mov	r22,r20
 800598c:	00800884 	movi	r2,34
 8005990:	80800015 	stw	r2,0(r16)
 8005994:	002b883a 	mov	r21,zero
 8005998:	0023883a 	mov	r17,zero
 800599c:	003f7806 	br	8005780 <__alt_data_end+0xfc005780>
 80059a0:	d8c01017 	ldw	r3,64(sp)
 80059a4:	04c200b4 	movhi	r19,2050
 80059a8:	d8800504 	addi	r2,sp,20
 80059ac:	9cc79104 	addi	r19,r19,7748
 80059b0:	d8800015 	stw	r2,0(sp)
 80059b4:	d8c00115 	stw	r3,4(sp)
 80059b8:	8009883a 	mov	r4,r16
 80059bc:	d9400604 	addi	r5,sp,24
 80059c0:	980d883a 	mov	r6,r19
 80059c4:	d9c00404 	addi	r7,sp,16
 80059c8:	800ca040 	call	800ca04 <__gethex>
 80059cc:	144001cc 	andi	r17,r2,7
 80059d0:	883d4f26 	beq	r17,zero,8004f10 <__alt_data_end+0xfc004f10>
 80059d4:	00c00184 	movi	r3,6
 80059d8:	88c0f21e 	bne	r17,r3,8005da4 <_strtod_r+0x1210>
 80059dc:	94800044 	addi	r18,r18,1
 80059e0:	dc800615 	stw	r18,24(sp)
 80059e4:	002b883a 	mov	r21,zero
 80059e8:	0023883a 	mov	r17,zero
 80059ec:	003d4a06 	br	8004f18 <__alt_data_end+0xfc004f18>
 80059f0:	df000b17 	ldw	fp,44(sp)
 80059f4:	a02d883a 	mov	r22,r20
 80059f8:	e0003d1e 	bne	fp,zero,8005af0 <_strtod_r+0xf5c>
 80059fc:	d9000817 	ldw	r4,32(sp)
 8005a00:	20003b1e 	bne	r4,zero,8005af0 <_strtod_r+0xf5c>
 8005a04:	d8c00717 	ldw	r3,28(sp)
 8005a08:	00800434 	movhi	r2,16
 8005a0c:	10bfffc4 	addi	r2,r2,-1
 8005a10:	1884703a 	and	r2,r3,r2
 8005a14:	1000361e 	bne	r2,zero,8005af0 <_strtod_r+0xf5c>
 8005a18:	18dffc2c 	andhi	r3,r3,32752
 8005a1c:	0081ac34 	movhi	r2,1712
 8005a20:	10c0332e 	bgeu	r2,r3,8005af0 <_strtod_r+0xf5c>
 8005a24:	a0800517 	ldw	r2,20(r20)
 8005a28:	1000031e 	bne	r2,zero,8005a38 <_strtod_r+0xea4>
 8005a2c:	a0800417 	ldw	r2,16(r20)
 8005a30:	01000044 	movi	r4,1
 8005a34:	20802e0e 	bge	r4,r2,8005af0 <_strtod_r+0xf5c>
 8005a38:	8009883a 	mov	r4,r16
 8005a3c:	a00b883a 	mov	r5,r20
 8005a40:	01800044 	movi	r6,1
 8005a44:	d8c01415 	stw	r3,80(sp)
 8005a48:	800e2600 	call	800e260 <__lshift>
 8005a4c:	1009883a 	mov	r4,r2
 8005a50:	900b883a 	mov	r5,r18
 8005a54:	102d883a 	mov	r22,r2
 8005a58:	800e3a80 	call	800e3a8 <__mcmp>
 8005a5c:	d8c01417 	ldw	r3,80(sp)
 8005a60:	0080230e 	bge	zero,r2,8005af0 <_strtod_r+0xf5c>
 8005a64:	d8801217 	ldw	r2,72(sp)
 8005a68:	10016a26 	beq	r2,zero,8006014 <_strtod_r+0x1480>
 8005a6c:	0081ac34 	movhi	r2,1712
 8005a70:	10c16816 	blt	r2,r3,8006014 <_strtod_r+0x1480>
 8005a74:	0080dc34 	movhi	r2,880
 8005a78:	10ffc40e 	bge	r2,r3,800598c <__alt_data_end+0xfc00598c>
 8005a7c:	a809883a 	mov	r4,r21
 8005a80:	880b883a 	mov	r5,r17
 8005a84:	000d883a 	mov	r6,zero
 8005a88:	01ce5434 	movhi	r7,14672
 8005a8c:	80138f40 	call	80138f4 <__muldf3>
 8005a90:	102b883a 	mov	r21,r2
 8005a94:	1823883a 	mov	r17,r3
 8005a98:	183f391e 	bne	r3,zero,8005780 <__alt_data_end+0xfc005780>
 8005a9c:	103f381e 	bne	r2,zero,8005780 <__alt_data_end+0xfc005780>
 8005aa0:	00800884 	movi	r2,34
 8005aa4:	80800015 	stw	r2,0(r16)
 8005aa8:	003f3506 	br	8005780 <__alt_data_end+0xfc005780>
 8005aac:	d8801217 	ldw	r2,72(sp)
 8005ab0:	10015f26 	beq	r2,zero,8006030 <_strtod_r+0x149c>
 8005ab4:	209ffc2c 	andhi	r2,r4,32752
 8005ab8:	00c1a834 	movhi	r3,1696
 8005abc:	18815c36 	bltu	r3,r2,8006030 <_strtod_r+0x149c>
 8005ac0:	1004d53a 	srli	r2,r2,20
 8005ac4:	00c01ac4 	movi	r3,107
 8005ac8:	1887c83a 	sub	r3,r3,r2
 8005acc:	00bfffc4 	movi	r2,-1
 8005ad0:	10c4983a 	sll	r2,r2,r3
 8005ad4:	d8c00817 	ldw	r3,32(sp)
 8005ad8:	1880101e 	bne	r3,r2,8005b1c <_strtod_r+0xf88>
 8005adc:	d9000717 	ldw	r4,28(sp)
 8005ae0:	00800434 	movhi	r2,16
 8005ae4:	002b883a 	mov	r21,zero
 8005ae8:	245ffc2c 	andhi	r17,r4,32752
 8005aec:	88a3883a 	add	r17,r17,r2
 8005af0:	d8c01217 	ldw	r3,72(sp)
 8005af4:	183fe11e 	bne	r3,zero,8005a7c <__alt_data_end+0xfc005a7c>
 8005af8:	003f2106 	br	8005780 <__alt_data_end+0xfc005780>
 8005afc:	df000b17 	ldw	fp,44(sp)
 8005b00:	00800434 	movhi	r2,16
 8005b04:	a02d883a 	mov	r22,r20
 8005b08:	10bfffc4 	addi	r2,r2,-1
 8005b0c:	e0009e26 	beq	fp,zero,8005d88 <_strtod_r+0x11f4>
 8005b10:	d9000717 	ldw	r4,28(sp)
 8005b14:	2086703a 	and	r3,r4,r2
 8005b18:	18bfe426 	beq	r3,r2,8005aac <__alt_data_end+0xfc005aac>
 8005b1c:	d8c00817 	ldw	r3,32(sp)
 8005b20:	1880004c 	andi	r2,r3,1
 8005b24:	103ff226 	beq	r2,zero,8005af0 <__alt_data_end+0xfc005af0>
 8005b28:	a809883a 	mov	r4,r21
 8005b2c:	880b883a 	mov	r5,r17
 8005b30:	800e5a00 	call	800e5a0 <__ulp>
 8005b34:	a809883a 	mov	r4,r21
 8005b38:	880b883a 	mov	r5,r17
 8005b3c:	100d883a 	mov	r6,r2
 8005b40:	180f883a 	mov	r7,r3
 8005b44:	80020b40 	call	80020b4 <__adddf3>
 8005b48:	102b883a 	mov	r21,r2
 8005b4c:	1823883a 	mov	r17,r3
 8005b50:	003fe706 	br	8005af0 <__alt_data_end+0xfc005af0>
 8005b54:	00bfffc4 	movi	r2,-1
 8005b58:	a8beba1e 	bne	r21,r2,8005644 <__alt_data_end+0xfc005644>
 8005b5c:	00800884 	movi	r2,34
 8005b60:	80800015 	stw	r2,0(r16)
 8005b64:	002b883a 	mov	r21,zero
 8005b68:	045ffc34 	movhi	r17,32752
 8005b6c:	a02d883a 	mov	r22,r20
 8005b70:	003f0306 	br	8005780 <__alt_data_end+0xfc005780>
 8005b74:	00800884 	movi	r2,34
 8005b78:	80800015 	stw	r2,0(r16)
 8005b7c:	002b883a 	mov	r21,zero
 8005b80:	045ffc34 	movhi	r17,32752
 8005b84:	003ce406 	br	8004f18 <__alt_data_end+0xfc004f18>
 8005b88:	883da826 	beq	r17,zero,800522c <__alt_data_end+0xfc00522c>
 8005b8c:	0463c83a 	sub	r17,zero,r17
 8005b90:	888003cc 	andi	r2,r17,15
 8005b94:	10000b26 	beq	r2,zero,8005bc4 <_strtod_r+0x1030>
 8005b98:	100490fa 	slli	r2,r2,3
 8005b9c:	00c200b4 	movhi	r3,2050
 8005ba0:	18c63504 	addi	r3,r3,6356
 8005ba4:	1885883a 	add	r2,r3,r2
 8005ba8:	d9000817 	ldw	r4,32(sp)
 8005bac:	d9400717 	ldw	r5,28(sp)
 8005bb0:	11800017 	ldw	r6,0(r2)
 8005bb4:	11c00117 	ldw	r7,4(r2)
 8005bb8:	80029500 	call	8002950 <__divdf3>
 8005bbc:	d8800815 	stw	r2,32(sp)
 8005bc0:	d8c00715 	stw	r3,28(sp)
 8005bc4:	8823d13a 	srai	r17,r17,4
 8005bc8:	883d9826 	beq	r17,zero,800522c <__alt_data_end+0xfc00522c>
 8005bcc:	008007c4 	movi	r2,31
 8005bd0:	14402c16 	blt	r2,r17,8005c84 <_strtod_r+0x10f0>
 8005bd4:	8880040c 	andi	r2,r17,16
 8005bd8:	10011e26 	beq	r2,zero,8006054 <_strtod_r+0x14c0>
 8005bdc:	0441330e 	bge	zero,r17,80060ac <_strtod_r+0x1518>
 8005be0:	00801a84 	movi	r2,106
 8005be4:	d8801215 	stw	r2,72(sp)
 8005be8:	d8800817 	ldw	r2,32(sp)
 8005bec:	d8c00717 	ldw	r3,28(sp)
 8005bf0:	04c200b4 	movhi	r19,2050
 8005bf4:	9cc5e404 	addi	r19,r19,6032
 8005bf8:	8980004c 	andi	r6,r17,1
 8005bfc:	30000526 	beq	r6,zero,8005c14 <_strtod_r+0x1080>
 8005c00:	99800017 	ldw	r6,0(r19)
 8005c04:	99c00117 	ldw	r7,4(r19)
 8005c08:	1009883a 	mov	r4,r2
 8005c0c:	180b883a 	mov	r5,r3
 8005c10:	80138f40 	call	80138f4 <__muldf3>
 8005c14:	8823d07a 	srai	r17,r17,1
 8005c18:	9cc00204 	addi	r19,r19,8
 8005c1c:	047ff616 	blt	zero,r17,8005bf8 <__alt_data_end+0xfc005bf8>
 8005c20:	d8c00715 	stw	r3,28(sp)
 8005c24:	d8c01217 	ldw	r3,72(sp)
 8005c28:	d8800815 	stw	r2,32(sp)
 8005c2c:	18000d26 	beq	r3,zero,8005c64 <_strtod_r+0x10d0>
 8005c30:	d9000717 	ldw	r4,28(sp)
 8005c34:	00801ac4 	movi	r2,107
 8005c38:	20dffc2c 	andhi	r3,r4,32752
 8005c3c:	1806d53a 	srli	r3,r3,20
 8005c40:	10c5c83a 	sub	r2,r2,r3
 8005c44:	0080070e 	bge	zero,r2,8005c64 <_strtod_r+0x10d0>
 8005c48:	00c007c4 	movi	r3,31
 8005c4c:	1881110e 	bge	r3,r2,8006094 <_strtod_r+0x1500>
 8005c50:	d8000815 	stw	zero,32(sp)
 8005c54:	00c00d04 	movi	r3,52
 8005c58:	1881170e 	bge	r3,r2,80060b8 <_strtod_r+0x1524>
 8005c5c:	0080dc34 	movhi	r2,880
 8005c60:	d8800715 	stw	r2,28(sp)
 8005c64:	d9000817 	ldw	r4,32(sp)
 8005c68:	d9400717 	ldw	r5,28(sp)
 8005c6c:	000d883a 	mov	r6,zero
 8005c70:	000f883a 	mov	r7,zero
 8005c74:	202b883a 	mov	r21,r4
 8005c78:	2823883a 	mov	r17,r5
 8005c7c:	80137900 	call	8013790 <__eqdf2>
 8005c80:	103d6d1e 	bne	r2,zero,8005238 <__alt_data_end+0xfc005238>
 8005c84:	00800884 	movi	r2,34
 8005c88:	80800015 	stw	r2,0(r16)
 8005c8c:	002b883a 	mov	r21,zero
 8005c90:	0023883a 	mov	r17,zero
 8005c94:	003ca006 	br	8004f18 <__alt_data_end+0xfc004f18>
 8005c98:	00cff834 	movhi	r3,16352
 8005c9c:	002f883a 	mov	r23,zero
 8005ca0:	022ff834 	movhi	r8,49120
 8005ca4:	d8000f15 	stw	zero,60(sp)
 8005ca8:	d8c00a15 	stw	r3,40(sp)
 8005cac:	003e8806 	br	80056d0 <__alt_data_end+0xfc0056d0>
 8005cb0:	009387c4 	movi	r2,19999
 8005cb4:	003cd706 	br	8005014 <__alt_data_end+0xfc005014>
 8005cb8:	14c03fcc 	andi	r19,r2,255
 8005cbc:	9cc0201c 	xori	r19,r19,128
 8005cc0:	9cffe004 	addi	r19,r19,-128
 8005cc4:	9039883a 	mov	fp,r18
 8005cc8:	002b883a 	mov	r21,zero
 8005ccc:	002f883a 	mov	r23,zero
 8005cd0:	0029883a 	mov	r20,zero
 8005cd4:	003c3d06 	br	8004dcc <__alt_data_end+0xfc004dcc>
 8005cd8:	d9000e17 	ldw	r4,56(sp)
 8005cdc:	00c00944 	movi	r3,37
 8005ce0:	1f07c83a 	sub	r3,r3,fp
 8005ce4:	193d3d16 	blt	r3,r4,80051dc <__alt_data_end+0xfc0051dc>
 8005ce8:	1739c83a 	sub	fp,r2,fp
 8005cec:	e00690fa 	slli	r3,fp,3
 8005cf0:	040200b4 	movhi	r16,2050
 8005cf4:	84063504 	addi	r16,r16,6356
 8005cf8:	80c7883a 	add	r3,r16,r3
 8005cfc:	d9800817 	ldw	r6,32(sp)
 8005d00:	d9c00717 	ldw	r7,28(sp)
 8005d04:	19000017 	ldw	r4,0(r3)
 8005d08:	19400117 	ldw	r5,4(r3)
 8005d0c:	80138f40 	call	80138f4 <__muldf3>
 8005d10:	d9000e17 	ldw	r4,56(sp)
 8005d14:	180b883a 	mov	r5,r3
 8005d18:	2739c83a 	sub	fp,r4,fp
 8005d1c:	e00c90fa 	slli	r6,fp,3
 8005d20:	1009883a 	mov	r4,r2
 8005d24:	8185883a 	add	r2,r16,r6
 8005d28:	11800017 	ldw	r6,0(r2)
 8005d2c:	11c00117 	ldw	r7,4(r2)
 8005d30:	80138f40 	call	80138f4 <__muldf3>
 8005d34:	102b883a 	mov	r21,r2
 8005d38:	1823883a 	mov	r17,r3
 8005d3c:	003c7606 	br	8004f18 <__alt_data_end+0xfc004f18>
 8005d40:	40d1883a 	add	r8,r8,r3
 8005d44:	2800c126 	beq	r5,zero,800604c <_strtod_r+0x14b8>
 8005d48:	2f0b883a 	add	r5,r5,fp
 8005d4c:	01000204 	movi	r4,8
 8005d50:	01c00404 	movi	r7,16
 8005d54:	e7000044 	addi	fp,fp,1
 8005d58:	e0bfffc4 	addi	r2,fp,-1
 8005d5c:	20800716 	blt	r4,r2,8005d7c <_strtod_r+0x11e8>
 8005d60:	bdc002a4 	muli	r23,r23,10
 8005d64:	e17ffb1e 	bne	fp,r5,8005d54 <__alt_data_end+0xfc005d54>
 8005d68:	00800204 	movi	r2,8
 8005d6c:	2f000044 	addi	fp,r5,1
 8005d70:	11406b16 	blt	r2,r5,8005f20 <_strtod_r+0x138c>
 8005d74:	d9000617 	ldw	r4,24(sp)
 8005d78:	003d1406 	br	80051cc <__alt_data_end+0xfc0051cc>
 8005d7c:	3f3ff916 	blt	r7,fp,8005d64 <__alt_data_end+0xfc005d64>
 8005d80:	ad4002a4 	muli	r21,r21,10
 8005d84:	003ff706 	br	8005d64 <__alt_data_end+0xfc005d64>
 8005d88:	d8c00717 	ldw	r3,28(sp)
 8005d8c:	1884703a 	and	r2,r3,r2
 8005d90:	10004f1e 	bne	r2,zero,8005ed0 <_strtod_r+0x133c>
 8005d94:	d9000817 	ldw	r4,32(sp)
 8005d98:	20004d1e 	bne	r4,zero,8005ed0 <_strtod_r+0x133c>
 8005d9c:	18dffc2c 	andhi	r3,r3,32752
 8005da0:	003f3006 	br	8005a64 <__alt_data_end+0xfc005a64>
 8005da4:	d9800517 	ldw	r6,20(sp)
 8005da8:	30000826 	beq	r6,zero,8005dcc <_strtod_r+0x1238>
 8005dac:	99400017 	ldw	r5,0(r19)
 8005db0:	d9000204 	addi	r4,sp,8
 8005db4:	d8801315 	stw	r2,76(sp)
 8005db8:	800e9700 	call	800e970 <__copybits>
 8005dbc:	d9400517 	ldw	r5,20(sp)
 8005dc0:	8009883a 	mov	r4,r16
 8005dc4:	800db900 	call	800db90 <_Bfree>
 8005dc8:	d8801317 	ldw	r2,76(sp)
 8005dcc:	00c00184 	movi	r3,6
 8005dd0:	d9000417 	ldw	r4,16(sp)
 8005dd4:	1c401036 	bltu	r3,r17,8005e18 <_strtod_r+0x1284>
 8005dd8:	882290ba 	slli	r17,r17,2
 8005ddc:	00c20034 	movhi	r3,2048
 8005de0:	18d77c04 	addi	r3,r3,24048
 8005de4:	88e3883a 	add	r17,r17,r3
 8005de8:	88c00017 	ldw	r3,0(r17)
 8005dec:	1800683a 	jmp	r3
 8005df0:	08005e30 	cmpltui	zero,at,376
 8005df4:	08005e68 	cmpgeui	zero,at,377
 8005df8:	08005e54 	ori	zero,at,377
 8005dfc:	08005e0c 	andi	zero,at,376
 8005e00:	08005e3c 	xorhi	zero,at,376
 8005e04:	08005e68 	cmpgeui	zero,at,377
 8005e08:	08005e30 	cmpltui	zero,at,376
 8005e0c:	00dffc34 	movhi	r3,32752
 8005e10:	d8c00715 	stw	r3,28(sp)
 8005e14:	d8000815 	stw	zero,32(sp)
 8005e18:	1080020c 	andi	r2,r2,8
 8005e1c:	dd400817 	ldw	r21,32(sp)
 8005e20:	103c2626 	beq	r2,zero,8004ebc <__alt_data_end+0xfc004ebc>
 8005e24:	d9000717 	ldw	r4,28(sp)
 8005e28:	24600034 	orhi	r17,r4,32768
 8005e2c:	003c3a06 	br	8004f18 <__alt_data_end+0xfc004f18>
 8005e30:	d8000715 	stw	zero,28(sp)
 8005e34:	d8000815 	stw	zero,32(sp)
 8005e38:	003ff706 	br	8005e18 <__alt_data_end+0xfc005e18>
 8005e3c:	01200034 	movhi	r4,32768
 8005e40:	213fffc4 	addi	r4,r4,-1
 8005e44:	00ffffc4 	movi	r3,-1
 8005e48:	d9000715 	stw	r4,28(sp)
 8005e4c:	d8c00815 	stw	r3,32(sp)
 8005e50:	003ff106 	br	8005e18 <__alt_data_end+0xfc005e18>
 8005e54:	d9000217 	ldw	r4,8(sp)
 8005e58:	d8c00317 	ldw	r3,12(sp)
 8005e5c:	d9000815 	stw	r4,32(sp)
 8005e60:	d8c00715 	stw	r3,28(sp)
 8005e64:	003fec06 	br	8005e18 <__alt_data_end+0xfc005e18>
 8005e68:	20c10cc4 	addi	r3,r4,1075
 8005e6c:	d9000217 	ldw	r4,8(sp)
 8005e70:	d9400317 	ldw	r5,12(sp)
 8005e74:	1806953a 	slli	r3,r3,20
 8005e78:	d9000815 	stw	r4,32(sp)
 8005e7c:	013ffc34 	movhi	r4,65520
 8005e80:	213fffc4 	addi	r4,r4,-1
 8005e84:	2908703a 	and	r4,r5,r4
 8005e88:	1908b03a 	or	r4,r3,r4
 8005e8c:	d9000715 	stw	r4,28(sp)
 8005e90:	003fe106 	br	8005e18 <__alt_data_end+0xfc005e18>
 8005e94:	d8c00e17 	ldw	r3,56(sp)
 8005e98:	00bffa84 	movi	r2,-22
 8005e9c:	18bccf16 	blt	r3,r2,80051dc <__alt_data_end+0xfc0051dc>
 8005ea0:	180690fa 	slli	r3,r3,3
 8005ea4:	008200b4 	movhi	r2,2050
 8005ea8:	10863504 	addi	r2,r2,6356
 8005eac:	10c5c83a 	sub	r2,r2,r3
 8005eb0:	d9000817 	ldw	r4,32(sp)
 8005eb4:	d9400717 	ldw	r5,28(sp)
 8005eb8:	11800017 	ldw	r6,0(r2)
 8005ebc:	11c00117 	ldw	r7,4(r2)
 8005ec0:	80029500 	call	8002950 <__divdf3>
 8005ec4:	102b883a 	mov	r21,r2
 8005ec8:	1823883a 	mov	r17,r3
 8005ecc:	003c1206 	br	8004f18 <__alt_data_end+0xfc004f18>
 8005ed0:	d8c00817 	ldw	r3,32(sp)
 8005ed4:	1880004c 	andi	r2,r3,1
 8005ed8:	103f0526 	beq	r2,zero,8005af0 <__alt_data_end+0xfc005af0>
 8005edc:	a809883a 	mov	r4,r21
 8005ee0:	880b883a 	mov	r5,r17
 8005ee4:	800e5a00 	call	800e5a0 <__ulp>
 8005ee8:	a809883a 	mov	r4,r21
 8005eec:	880b883a 	mov	r5,r17
 8005ef0:	100d883a 	mov	r6,r2
 8005ef4:	180f883a 	mov	r7,r3
 8005ef8:	80032fc0 	call	80032fc <__subdf3>
 8005efc:	1009883a 	mov	r4,r2
 8005f00:	180b883a 	mov	r5,r3
 8005f04:	000d883a 	mov	r6,zero
 8005f08:	000f883a 	mov	r7,zero
 8005f0c:	102b883a 	mov	r21,r2
 8005f10:	1823883a 	mov	r17,r3
 8005f14:	80137900 	call	8013790 <__eqdf2>
 8005f18:	103e9c26 	beq	r2,zero,800598c <__alt_data_end+0xfc00598c>
 8005f1c:	003ef406 	br	8005af0 <__alt_data_end+0xfc005af0>
 8005f20:	00800404 	movi	r2,16
 8005f24:	1700360e 	bge	r2,fp,8006000 <_strtod_r+0x146c>
 8005f28:	d9000617 	ldw	r4,24(sp)
 8005f2c:	000b883a 	mov	r5,zero
 8005f30:	003e5206 	br	800587c <__alt_data_end+0xfc00587c>
 8005f34:	014200b4 	movhi	r5,2050
 8005f38:	d9000617 	ldw	r4,24(sp)
 8005f3c:	2945e004 	addi	r5,r5,6016
 8005f40:	01c00644 	movi	r7,25
 8005f44:	00000b06 	br	8005f74 <_strtod_r+0x13e0>
 8005f48:	21000044 	addi	r4,r4,1
 8005f4c:	20800003 	ldbu	r2,0(r4)
 8005f50:	10ffefc4 	addi	r3,r2,-65
 8005f54:	10803fcc 	andi	r2,r2,255
 8005f58:	1080201c 	xori	r2,r2,128
 8005f5c:	18c03fcc 	andi	r3,r3,255
 8005f60:	10bfe004 	addi	r2,r2,-128
 8005f64:	38c00136 	bltu	r7,r3,8005f6c <_strtod_r+0x13d8>
 8005f68:	10800804 	addi	r2,r2,32
 8005f6c:	29400044 	addi	r5,r5,1
 8005f70:	11bb541e 	bne	r2,r6,8004cc4 <__alt_data_end+0xfc004cc4>
 8005f74:	29800007 	ldb	r6,0(r5)
 8005f78:	303ff31e 	bne	r6,zero,8005f48 <__alt_data_end+0xfc005f48>
 8005f7c:	018200b4 	movhi	r6,2050
 8005f80:	200b883a 	mov	r5,r4
 8005f84:	d9000615 	stw	r4,24(sp)
 8005f88:	3185e104 	addi	r6,r6,6020
 8005f8c:	02000644 	movi	r8,25
 8005f90:	00000a06 	br	8005fbc <_strtod_r+0x1428>
 8005f94:	28800003 	ldbu	r2,0(r5)
 8005f98:	10ffefc4 	addi	r3,r2,-65
 8005f9c:	10803fcc 	andi	r2,r2,255
 8005fa0:	1080201c 	xori	r2,r2,128
 8005fa4:	18c03fcc 	andi	r3,r3,255
 8005fa8:	10bfe004 	addi	r2,r2,-128
 8005fac:	40c00136 	bltu	r8,r3,8005fb4 <_strtod_r+0x1420>
 8005fb0:	10800804 	addi	r2,r2,32
 8005fb4:	31800044 	addi	r6,r6,1
 8005fb8:	11c0211e 	bne	r2,r7,8006040 <_strtod_r+0x14ac>
 8005fbc:	31c00007 	ldb	r7,0(r6)
 8005fc0:	29400044 	addi	r5,r5,1
 8005fc4:	383ff31e 	bne	r7,zero,8005f94 <__alt_data_end+0xfc005f94>
 8005fc8:	d9400615 	stw	r5,24(sp)
 8005fcc:	009ffc34 	movhi	r2,32752
 8005fd0:	d8800715 	stw	r2,28(sp)
 8005fd4:	d8000815 	stw	zero,32(sp)
 8005fd8:	003bb706 	br	8004eb8 <__alt_data_end+0xfc004eb8>
 8005fdc:	000b883a 	mov	r5,zero
 8005fe0:	003c7206 	br	80051ac <__alt_data_end+0xfc0051ac>
 8005fe4:	0080d434 	movhi	r2,848
 8005fe8:	1887883a 	add	r3,r3,r2
 8005fec:	d8c00715 	stw	r3,28(sp)
 8005ff0:	dd400817 	ldw	r21,32(sp)
 8005ff4:	1823883a 	mov	r17,r3
 8005ff8:	d8001215 	stw	zero,72(sp)
 8005ffc:	003c8e06 	br	8005238 <__alt_data_end+0xfc005238>
 8006000:	a9c002a4 	muli	r7,r21,10
 8006004:	d9000617 	ldw	r4,24(sp)
 8006008:	000b883a 	mov	r5,zero
 800600c:	31eb883a 	add	r21,r6,r7
 8006010:	003e1a06 	br	800587c <__alt_data_end+0xfc00587c>
 8006014:	047ffc34 	movhi	r17,65520
 8006018:	1c47883a 	add	r3,r3,r17
 800601c:	057fffc4 	movi	r21,-1
 8006020:	04400434 	movhi	r17,16
 8006024:	8d63883a 	add	r17,r17,r21
 8006028:	1c62b03a 	or	r17,r3,r17
 800602c:	003eb006 	br	8005af0 <__alt_data_end+0xfc005af0>
 8006030:	00bfffc4 	movi	r2,-1
 8006034:	003ea706 	br	8005ad4 <__alt_data_end+0xfc005ad4>
 8006038:	002b883a 	mov	r21,zero
 800603c:	003e3406 	br	8005910 <__alt_data_end+0xfc005910>
 8006040:	21000044 	addi	r4,r4,1
 8006044:	d9000615 	stw	r4,24(sp)
 8006048:	003fe006 	br	8005fcc <__alt_data_end+0xfc005fcc>
 800604c:	e00b883a 	mov	r5,fp
 8006050:	003f4506 	br	8005d68 <__alt_data_end+0xfc005d68>
 8006054:	d8001215 	stw	zero,72(sp)
 8006058:	047ee316 	blt	zero,r17,8005be8 <__alt_data_end+0xfc005be8>
 800605c:	003f0106 	br	8005c64 <__alt_data_end+0xfc005c64>
 8006060:	014200b4 	movhi	r5,2050
 8006064:	29478c04 	addi	r5,r5,7728
 8006068:	d9000604 	addi	r4,sp,24
 800606c:	d9800204 	addi	r6,sp,8
 8006070:	800d2200 	call	800d220 <__hexnan>
 8006074:	00c00144 	movi	r3,5
 8006078:	10fb8c1e 	bne	r2,r3,8004eac <__alt_data_end+0xfc004eac>
 800607c:	d8800317 	ldw	r2,12(sp)
 8006080:	d8c00217 	ldw	r3,8(sp)
 8006084:	109ffc34 	orhi	r2,r2,32752
 8006088:	d8c00815 	stw	r3,32(sp)
 800608c:	d8800715 	stw	r2,28(sp)
 8006090:	003b8906 	br	8004eb8 <__alt_data_end+0xfc004eb8>
 8006094:	00ffffc4 	movi	r3,-1
 8006098:	d9000817 	ldw	r4,32(sp)
 800609c:	1884983a 	sll	r2,r3,r2
 80060a0:	1108703a 	and	r4,r2,r4
 80060a4:	d9000815 	stw	r4,32(sp)
 80060a8:	003eee06 	br	8005c64 <__alt_data_end+0xfc005c64>
 80060ac:	01001a84 	movi	r4,106
 80060b0:	d9001215 	stw	r4,72(sp)
 80060b4:	003ede06 	br	8005c30 <__alt_data_end+0xfc005c30>
 80060b8:	00ffffc4 	movi	r3,-1
 80060bc:	10bff804 	addi	r2,r2,-32
 80060c0:	1884983a 	sll	r2,r3,r2
 80060c4:	d8c00717 	ldw	r3,28(sp)
 80060c8:	10c6703a 	and	r3,r2,r3
 80060cc:	d8c00715 	stw	r3,28(sp)
 80060d0:	003ee406 	br	8005c64 <__alt_data_end+0xfc005c64>

080060d4 <strtod>:
 80060d4:	00c200b4 	movhi	r3,2050
 80060d8:	18cd4d04 	addi	r3,r3,13620
 80060dc:	2005883a 	mov	r2,r4
 80060e0:	19000017 	ldw	r4,0(r3)
 80060e4:	280d883a 	mov	r6,r5
 80060e8:	100b883a 	mov	r5,r2
 80060ec:	8004b941 	jmpi	8004b94 <_strtod_r>

080060f0 <strtof>:
 80060f0:	defffb04 	addi	sp,sp,-20
 80060f4:	dcc00315 	stw	r19,12(sp)
 80060f8:	04c200b4 	movhi	r19,2050
 80060fc:	9ccd4d04 	addi	r19,r19,13620
 8006100:	2005883a 	mov	r2,r4
 8006104:	99000017 	ldw	r4,0(r19)
 8006108:	280d883a 	mov	r6,r5
 800610c:	100b883a 	mov	r5,r2
 8006110:	dfc00415 	stw	ra,16(sp)
 8006114:	dc800215 	stw	r18,8(sp)
 8006118:	dc400115 	stw	r17,4(sp)
 800611c:	dc000015 	stw	r16,0(sp)
 8006120:	8004b940 	call	8004b94 <_strtod_r>
 8006124:	1009883a 	mov	r4,r2
 8006128:	180b883a 	mov	r5,r3
 800612c:	1025883a 	mov	r18,r2
 8006130:	1823883a 	mov	r17,r3
 8006134:	80140bc0 	call	80140bc <__truncdfsf2>
 8006138:	1009883a 	mov	r4,r2
 800613c:	000b883a 	mov	r5,zero
 8006140:	1021883a 	mov	r16,r2
 8006144:	80135ac0 	call	80135ac <__eqsf2>
 8006148:	1000111e 	bne	r2,zero,8006190 <strtof+0xa0>
 800614c:	9009883a 	mov	r4,r18
 8006150:	880b883a 	mov	r5,r17
 8006154:	000d883a 	mov	r6,zero
 8006158:	000f883a 	mov	r7,zero
 800615c:	80137900 	call	8013790 <__eqdf2>
 8006160:	10000b26 	beq	r2,zero,8006190 <strtof+0xa0>
 8006164:	98800017 	ldw	r2,0(r19)
 8006168:	00c00884 	movi	r3,34
 800616c:	10c00015 	stw	r3,0(r2)
 8006170:	8005883a 	mov	r2,r16
 8006174:	dfc00417 	ldw	ra,16(sp)
 8006178:	dcc00317 	ldw	r19,12(sp)
 800617c:	dc800217 	ldw	r18,8(sp)
 8006180:	dc400117 	ldw	r17,4(sp)
 8006184:	dc000017 	ldw	r16,0(sp)
 8006188:	dec00504 	addi	sp,sp,20
 800618c:	f800283a 	ret
 8006190:	015fe034 	movhi	r5,32640
 8006194:	297fffc4 	addi	r5,r5,-1
 8006198:	8009883a 	mov	r4,r16
 800619c:	80136200 	call	8013620 <__gesf2>
 80061a0:	0080070e 	bge	zero,r2,80061c0 <strtof+0xd0>
 80061a4:	01dffc34 	movhi	r7,32752
 80061a8:	39ffffc4 	addi	r7,r7,-1
 80061ac:	9009883a 	mov	r4,r18
 80061b0:	880b883a 	mov	r5,r17
 80061b4:	01bfffc4 	movi	r6,-1
 80061b8:	800321c0 	call	800321c <__gedf2>
 80061bc:	00bfe90e 	bge	zero,r2,8006164 <__alt_data_end+0xfc006164>
 80061c0:	017fe034 	movhi	r5,65408
 80061c4:	297fffc4 	addi	r5,r5,-1
 80061c8:	8009883a 	mov	r4,r16
 80061cc:	80136d80 	call	80136d8 <__lesf2>
 80061d0:	103fe70e 	bge	r2,zero,8006170 <__alt_data_end+0xfc006170>
 80061d4:	01fffc34 	movhi	r7,65520
 80061d8:	39ffffc4 	addi	r7,r7,-1
 80061dc:	9009883a 	mov	r4,r18
 80061e0:	880b883a 	mov	r5,r17
 80061e4:	01bfffc4 	movi	r6,-1
 80061e8:	80138140 	call	8013814 <__ledf2>
 80061ec:	103fdd0e 	bge	r2,zero,8006164 <__alt_data_end+0xfc006164>
 80061f0:	003fdf06 	br	8006170 <__alt_data_end+0xfc006170>

080061f4 <strtok>:
 80061f4:	008200b4 	movhi	r2,2050
 80061f8:	108d4d04 	addi	r2,r2,13620
 80061fc:	11800017 	ldw	r6,0(r2)
 8006200:	01c00044 	movi	r7,1
 8006204:	31801704 	addi	r6,r6,92
 8006208:	800620c1 	jmpi	800620c <__strtok_r>

0800620c <__strtok_r>:
 800620c:	20001e26 	beq	r4,zero,8006288 <__strtok_r+0x7c>
 8006210:	2005883a 	mov	r2,r4
 8006214:	22400007 	ldb	r9,0(r4)
 8006218:	2807883a 	mov	r3,r5
 800621c:	21000044 	addi	r4,r4,1
 8006220:	00000106 	br	8006228 <__strtok_r+0x1c>
 8006224:	4a001126 	beq	r9,r8,800626c <__strtok_r+0x60>
 8006228:	1a000007 	ldb	r8,0(r3)
 800622c:	18c00044 	addi	r3,r3,1
 8006230:	403ffc1e 	bne	r8,zero,8006224 <__alt_data_end+0xfc006224>
 8006234:	48001826 	beq	r9,zero,8006298 <__strtok_r+0x8c>
 8006238:	2013883a 	mov	r9,r4
 800623c:	22000007 	ldb	r8,0(r4)
 8006240:	2807883a 	mov	r3,r5
 8006244:	21000044 	addi	r4,r4,1
 8006248:	00000106 	br	8006250 <__strtok_r+0x44>
 800624c:	383ffa26 	beq	r7,zero,8006238 <__alt_data_end+0xfc006238>
 8006250:	19c00007 	ldb	r7,0(r3)
 8006254:	18c00044 	addi	r3,r3,1
 8006258:	3a3ffc1e 	bne	r7,r8,800624c <__alt_data_end+0xfc00624c>
 800625c:	40000726 	beq	r8,zero,800627c <__strtok_r+0x70>
 8006260:	48000005 	stb	zero,0(r9)
 8006264:	31000015 	stw	r4,0(r6)
 8006268:	f800283a 	ret
 800626c:	383fe81e 	bne	r7,zero,8006210 <__alt_data_end+0xfc006210>
 8006270:	31000015 	stw	r4,0(r6)
 8006274:	10000005 	stb	zero,0(r2)
 8006278:	f800283a 	ret
 800627c:	0009883a 	mov	r4,zero
 8006280:	31000015 	stw	r4,0(r6)
 8006284:	f800283a 	ret
 8006288:	31000017 	ldw	r4,0(r6)
 800628c:	203fe01e 	bne	r4,zero,8006210 <__alt_data_end+0xfc006210>
 8006290:	0005883a 	mov	r2,zero
 8006294:	f800283a 	ret
 8006298:	30000015 	stw	zero,0(r6)
 800629c:	0005883a 	mov	r2,zero
 80062a0:	f800283a 	ret

080062a4 <strtok_r>:
 80062a4:	01c00044 	movi	r7,1
 80062a8:	800620c1 	jmpi	800620c <__strtok_r>

080062ac <___svfprintf_internal_r>:
 80062ac:	deffb504 	addi	sp,sp,-300
 80062b0:	dfc04a15 	stw	ra,296(sp)
 80062b4:	ddc04815 	stw	r23,288(sp)
 80062b8:	d9002f15 	stw	r4,188(sp)
 80062bc:	282f883a 	mov	r23,r5
 80062c0:	d9802915 	stw	r6,164(sp)
 80062c4:	d9c02d15 	stw	r7,180(sp)
 80062c8:	df004915 	stw	fp,292(sp)
 80062cc:	dd804715 	stw	r22,284(sp)
 80062d0:	dd404615 	stw	r21,280(sp)
 80062d4:	dd004515 	stw	r20,276(sp)
 80062d8:	dcc04415 	stw	r19,272(sp)
 80062dc:	dc804315 	stw	r18,268(sp)
 80062e0:	dc404215 	stw	r17,264(sp)
 80062e4:	dc004115 	stw	r16,260(sp)
 80062e8:	800d5b80 	call	800d5b8 <_localeconv_r>
 80062ec:	10800017 	ldw	r2,0(r2)
 80062f0:	1009883a 	mov	r4,r2
 80062f4:	d8803515 	stw	r2,212(sp)
 80062f8:	8004afc0 	call	8004afc <strlen>
 80062fc:	d8803915 	stw	r2,228(sp)
 8006300:	b880030b 	ldhu	r2,12(r23)
 8006304:	1080200c 	andi	r2,r2,128
 8006308:	10000226 	beq	r2,zero,8006314 <___svfprintf_internal_r+0x68>
 800630c:	b8800417 	ldw	r2,16(r23)
 8006310:	10065d26 	beq	r2,zero,8007c88 <___svfprintf_internal_r+0x19dc>
 8006314:	db001dc4 	addi	r12,sp,119
 8006318:	dd801e04 	addi	r22,sp,120
 800631c:	d8800404 	addi	r2,sp,16
 8006320:	050200b4 	movhi	r20,2050
 8006324:	b317c83a 	sub	r11,r22,r12
 8006328:	a505fe84 	addi	r20,r20,6138
 800632c:	db002815 	stw	r12,160(sp)
 8006330:	d8801e15 	stw	r2,120(sp)
 8006334:	d8002015 	stw	zero,128(sp)
 8006338:	d8001f15 	stw	zero,124(sp)
 800633c:	d8003315 	stw	zero,204(sp)
 8006340:	d8003715 	stw	zero,220(sp)
 8006344:	d8003815 	stw	zero,224(sp)
 8006348:	d8003b15 	stw	zero,236(sp)
 800634c:	d8003a15 	stw	zero,232(sp)
 8006350:	d8003015 	stw	zero,192(sp)
 8006354:	1011883a 	mov	r8,r2
 8006358:	dac03d15 	stw	r11,244(sp)
 800635c:	db002917 	ldw	r12,164(sp)
 8006360:	60800007 	ldb	r2,0(r12)
 8006364:	1000ab26 	beq	r2,zero,8006614 <___svfprintf_internal_r+0x368>
 8006368:	00c00944 	movi	r3,37
 800636c:	10c0a926 	beq	r2,r3,8006614 <___svfprintf_internal_r+0x368>
 8006370:	6021883a 	mov	r16,r12
 8006374:	00000106 	br	800637c <___svfprintf_internal_r+0xd0>
 8006378:	10c08426 	beq	r2,r3,800658c <___svfprintf_internal_r+0x2e0>
 800637c:	84000044 	addi	r16,r16,1
 8006380:	80800007 	ldb	r2,0(r16)
 8006384:	103ffc1e 	bne	r2,zero,8006378 <__alt_data_end+0xfc006378>
 8006388:	dac02917 	ldw	r11,164(sp)
 800638c:	82e3c83a 	sub	r17,r16,r11
 8006390:	88000f26 	beq	r17,zero,80063d0 <___svfprintf_internal_r+0x124>
 8006394:	d8c02017 	ldw	r3,128(sp)
 8006398:	d8801f17 	ldw	r2,124(sp)
 800639c:	dac02917 	ldw	r11,164(sp)
 80063a0:	1c47883a 	add	r3,r3,r17
 80063a4:	10800044 	addi	r2,r2,1
 80063a8:	d8c02015 	stw	r3,128(sp)
 80063ac:	42c00015 	stw	r11,0(r8)
 80063b0:	44400115 	stw	r17,4(r8)
 80063b4:	d8801f15 	stw	r2,124(sp)
 80063b8:	00c001c4 	movi	r3,7
 80063bc:	18807616 	blt	r3,r2,8006598 <___svfprintf_internal_r+0x2ec>
 80063c0:	42000204 	addi	r8,r8,8
 80063c4:	db003017 	ldw	r12,192(sp)
 80063c8:	6459883a 	add	r12,r12,r17
 80063cc:	db003015 	stw	r12,192(sp)
 80063d0:	80800007 	ldb	r2,0(r16)
 80063d4:	10007726 	beq	r2,zero,80065b4 <___svfprintf_internal_r+0x308>
 80063d8:	80800044 	addi	r2,r16,1
 80063dc:	84000047 	ldb	r16,1(r16)
 80063e0:	d8002785 	stb	zero,158(sp)
 80063e4:	000d883a 	mov	r6,zero
 80063e8:	027fffc4 	movi	r9,-1
 80063ec:	d8002e15 	stw	zero,184(sp)
 80063f0:	0023883a 	mov	r17,zero
 80063f4:	01001604 	movi	r4,88
 80063f8:	01400244 	movi	r5,9
 80063fc:	02800a84 	movi	r10,42
 8006400:	01c01b04 	movi	r7,108
 8006404:	10c00044 	addi	r3,r2,1
 8006408:	80bff804 	addi	r2,r16,-32
 800640c:	2082e436 	bltu	r4,r2,8006fa0 <___svfprintf_internal_r+0xcf4>
 8006410:	100490ba 	slli	r2,r2,2
 8006414:	02c20034 	movhi	r11,2048
 8006418:	5ad90a04 	addi	r11,r11,25640
 800641c:	12c5883a 	add	r2,r2,r11
 8006420:	10800017 	ldw	r2,0(r2)
 8006424:	1000683a 	jmp	r2
 8006428:	08006d58 	cmpnei	zero,at,437
 800642c:	08006fa0 	cmpeqi	zero,at,446
 8006430:	08006fa0 	cmpeqi	zero,at,446
 8006434:	08006ed8 	cmpnei	zero,at,443
 8006438:	08006fa0 	cmpeqi	zero,at,446
 800643c:	08006fa0 	cmpeqi	zero,at,446
 8006440:	08006fa0 	cmpeqi	zero,at,446
 8006444:	08006fa0 	cmpeqi	zero,at,446
 8006448:	08006fa0 	cmpeqi	zero,at,446
 800644c:	08006fa0 	cmpeqi	zero,at,446
 8006450:	08006e9c 	xori	zero,at,442
 8006454:	08006ec8 	cmpgei	zero,at,443
 8006458:	08006fa0 	cmpeqi	zero,at,446
 800645c:	0800661c 	xori	zero,at,408
 8006460:	0800662c 	andhi	zero,at,408
 8006464:	08006fa0 	cmpeqi	zero,at,446
 8006468:	0800666c 	andhi	zero,at,409
 800646c:	0800667c 	xorhi	zero,at,409
 8006470:	0800667c 	xorhi	zero,at,409
 8006474:	0800667c 	xorhi	zero,at,409
 8006478:	0800667c 	xorhi	zero,at,409
 800647c:	0800667c 	xorhi	zero,at,409
 8006480:	0800667c 	xorhi	zero,at,409
 8006484:	0800667c 	xorhi	zero,at,409
 8006488:	0800667c 	xorhi	zero,at,409
 800648c:	0800667c 	xorhi	zero,at,409
 8006490:	08006fa0 	cmpeqi	zero,at,446
 8006494:	08006fa0 	cmpeqi	zero,at,446
 8006498:	08006fa0 	cmpeqi	zero,at,446
 800649c:	08006fa0 	cmpeqi	zero,at,446
 80064a0:	08006fa0 	cmpeqi	zero,at,446
 80064a4:	08006fa0 	cmpeqi	zero,at,446
 80064a8:	08006fa0 	cmpeqi	zero,at,446
 80064ac:	08006fa0 	cmpeqi	zero,at,446
 80064b0:	08006fa0 	cmpeqi	zero,at,446
 80064b4:	08006fa0 	cmpeqi	zero,at,446
 80064b8:	080066b0 	cmpltui	zero,at,410
 80064bc:	08006b9c 	xori	zero,at,430
 80064c0:	08006fa0 	cmpeqi	zero,at,446
 80064c4:	08006b9c 	xori	zero,at,430
 80064c8:	08006fa0 	cmpeqi	zero,at,446
 80064cc:	08006fa0 	cmpeqi	zero,at,446
 80064d0:	08006fa0 	cmpeqi	zero,at,446
 80064d4:	08006fa0 	cmpeqi	zero,at,446
 80064d8:	08006c88 	cmpgei	zero,at,434
 80064dc:	08006fa0 	cmpeqi	zero,at,446
 80064e0:	08006fa0 	cmpeqi	zero,at,446
 80064e4:	08006b30 	cmpltui	zero,at,428
 80064e8:	08006fa0 	cmpeqi	zero,at,446
 80064ec:	08006fa0 	cmpeqi	zero,at,446
 80064f0:	08006fa0 	cmpeqi	zero,at,446
 80064f4:	08006fa0 	cmpeqi	zero,at,446
 80064f8:	08006fa0 	cmpeqi	zero,at,446
 80064fc:	08006b6c 	andhi	zero,at,429
 8006500:	08006fa0 	cmpeqi	zero,at,446
 8006504:	08006fa0 	cmpeqi	zero,at,446
 8006508:	08006d78 	rdprs	zero,at,437
 800650c:	08006fa0 	cmpeqi	zero,at,446
 8006510:	08006fa0 	cmpeqi	zero,at,446
 8006514:	08006fa0 	cmpeqi	zero,at,446
 8006518:	08006fa0 	cmpeqi	zero,at,446
 800651c:	08006fa0 	cmpeqi	zero,at,446
 8006520:	08006fa0 	cmpeqi	zero,at,446
 8006524:	08006fa0 	cmpeqi	zero,at,446
 8006528:	08006fa0 	cmpeqi	zero,at,446
 800652c:	08006fa0 	cmpeqi	zero,at,446
 8006530:	08006fa0 	cmpeqi	zero,at,446
 8006534:	08006e5c 	xori	zero,at,441
 8006538:	08006c98 	cmpnei	zero,at,434
 800653c:	08006b9c 	xori	zero,at,430
 8006540:	08006b9c 	xori	zero,at,430
 8006544:	08006b9c 	xori	zero,at,430
 8006548:	08006d00 	call	8006d0 <__alt_mem_sdram-0x77ff930>
 800654c:	08006c98 	cmpnei	zero,at,434
 8006550:	08006fa0 	cmpeqi	zero,at,446
 8006554:	08006fa0 	cmpeqi	zero,at,446
 8006558:	08006d10 	cmplti	zero,at,436
 800655c:	08006fa0 	cmpeqi	zero,at,446
 8006560:	08006d24 	muli	zero,at,436
 8006564:	08006f64 	muli	zero,at,445
 8006568:	08006c40 	call	8006c4 <__alt_mem_sdram-0x77ff93c>
 800656c:	08006e4c 	andi	zero,at,441
 8006570:	08006fa0 	cmpeqi	zero,at,446
 8006574:	08006dd4 	ori	zero,at,439
 8006578:	08006fa0 	cmpeqi	zero,at,446
 800657c:	08006f28 	cmpgeui	zero,at,444
 8006580:	08006fa0 	cmpeqi	zero,at,446
 8006584:	08006fa0 	cmpeqi	zero,at,446
 8006588:	08006ee8 	cmpgeui	zero,at,443
 800658c:	db002917 	ldw	r12,164(sp)
 8006590:	8323c83a 	sub	r17,r16,r12
 8006594:	003f7e06 	br	8006390 <__alt_data_end+0xfc006390>
 8006598:	d9002f17 	ldw	r4,188(sp)
 800659c:	b80b883a 	mov	r5,r23
 80065a0:	b00d883a 	mov	r6,r22
 80065a4:	800ee4c0 	call	800ee4c <__ssprint_r>
 80065a8:	1000081e 	bne	r2,zero,80065cc <___svfprintf_internal_r+0x320>
 80065ac:	da000404 	addi	r8,sp,16
 80065b0:	003f8406 	br	80063c4 <__alt_data_end+0xfc0063c4>
 80065b4:	d8802017 	ldw	r2,128(sp)
 80065b8:	10000426 	beq	r2,zero,80065cc <___svfprintf_internal_r+0x320>
 80065bc:	d9002f17 	ldw	r4,188(sp)
 80065c0:	b80b883a 	mov	r5,r23
 80065c4:	d9801e04 	addi	r6,sp,120
 80065c8:	800ee4c0 	call	800ee4c <__ssprint_r>
 80065cc:	b880030b 	ldhu	r2,12(r23)
 80065d0:	1080100c 	andi	r2,r2,64
 80065d4:	10000d1e 	bne	r2,zero,800660c <___svfprintf_internal_r+0x360>
 80065d8:	d8803017 	ldw	r2,192(sp)
 80065dc:	dfc04a17 	ldw	ra,296(sp)
 80065e0:	df004917 	ldw	fp,292(sp)
 80065e4:	ddc04817 	ldw	r23,288(sp)
 80065e8:	dd804717 	ldw	r22,284(sp)
 80065ec:	dd404617 	ldw	r21,280(sp)
 80065f0:	dd004517 	ldw	r20,276(sp)
 80065f4:	dcc04417 	ldw	r19,272(sp)
 80065f8:	dc804317 	ldw	r18,268(sp)
 80065fc:	dc404217 	ldw	r17,264(sp)
 8006600:	dc004117 	ldw	r16,260(sp)
 8006604:	dec04b04 	addi	sp,sp,300
 8006608:	f800283a 	ret
 800660c:	00bfffc4 	movi	r2,-1
 8006610:	003ff206 	br	80065dc <__alt_data_end+0xfc0065dc>
 8006614:	dc002917 	ldw	r16,164(sp)
 8006618:	003f6d06 	br	80063d0 <__alt_data_end+0xfc0063d0>
 800661c:	1805883a 	mov	r2,r3
 8006620:	8c400114 	ori	r17,r17,4
 8006624:	1c000007 	ldb	r16,0(r3)
 8006628:	003f7606 	br	8006404 <__alt_data_end+0xfc006404>
 800662c:	1c000007 	ldb	r16,0(r3)
 8006630:	18800044 	addi	r2,r3,1
 8006634:	8286e726 	beq	r16,r10,80081d4 <___svfprintf_internal_r+0x1f28>
 8006638:	82fff404 	addi	r11,r16,-48
 800663c:	1007883a 	mov	r3,r2
 8006640:	0013883a 	mov	r9,zero
 8006644:	2aff7036 	bltu	r5,r11,8006408 <__alt_data_end+0xfc006408>
 8006648:	1c000007 	ldb	r16,0(r3)
 800664c:	4a4002a4 	muli	r9,r9,10
 8006650:	18c00044 	addi	r3,r3,1
 8006654:	5a53883a 	add	r9,r11,r9
 8006658:	82fff404 	addi	r11,r16,-48
 800665c:	2afffa2e 	bgeu	r5,r11,8006648 <__alt_data_end+0xfc006648>
 8006660:	483f690e 	bge	r9,zero,8006408 <__alt_data_end+0xfc006408>
 8006664:	027fffc4 	movi	r9,-1
 8006668:	003f6706 	br	8006408 <__alt_data_end+0xfc006408>
 800666c:	8c402014 	ori	r17,r17,128
 8006670:	1805883a 	mov	r2,r3
 8006674:	1c000007 	ldb	r16,0(r3)
 8006678:	003f6206 	br	8006404 <__alt_data_end+0xfc006404>
 800667c:	1805883a 	mov	r2,r3
 8006680:	d8002e15 	stw	zero,184(sp)
 8006684:	82fff404 	addi	r11,r16,-48
 8006688:	0019883a 	mov	r12,zero
 800668c:	14000007 	ldb	r16,0(r2)
 8006690:	630002a4 	muli	r12,r12,10
 8006694:	18c00044 	addi	r3,r3,1
 8006698:	1805883a 	mov	r2,r3
 800669c:	62d9883a 	add	r12,r12,r11
 80066a0:	82fff404 	addi	r11,r16,-48
 80066a4:	2afff92e 	bgeu	r5,r11,800668c <__alt_data_end+0xfc00668c>
 80066a8:	db002e15 	stw	r12,184(sp)
 80066ac:	003f5606 	br	8006408 <__alt_data_end+0xfc006408>
 80066b0:	8c400414 	ori	r17,r17,16
 80066b4:	d8c02915 	stw	r3,164(sp)
 80066b8:	d9802785 	stb	r6,158(sp)
 80066bc:	8880080c 	andi	r2,r17,32
 80066c0:	d8c02d17 	ldw	r3,180(sp)
 80066c4:	10017926 	beq	r2,zero,8006cac <___svfprintf_internal_r+0xa00>
 80066c8:	db002d17 	ldw	r12,180(sp)
 80066cc:	18800117 	ldw	r2,4(r3)
 80066d0:	1cc00017 	ldw	r19,0(r3)
 80066d4:	63000204 	addi	r12,r12,8
 80066d8:	db002d15 	stw	r12,180(sp)
 80066dc:	1039883a 	mov	fp,r2
 80066e0:	10017d16 	blt	r2,zero,8006cd8 <___svfprintf_internal_r+0xa2c>
 80066e4:	dd402783 	ldbu	r21,158(sp)
 80066e8:	da403215 	stw	r9,200(sp)
 80066ec:	00800044 	movi	r2,1
 80066f0:	9f06b03a 	or	r3,r19,fp
 80066f4:	48000216 	blt	r9,zero,8006700 <___svfprintf_internal_r+0x454>
 80066f8:	013fdfc4 	movi	r4,-129
 80066fc:	8922703a 	and	r17,r17,r4
 8006700:	1802371e 	bne	r3,zero,8006fe0 <___svfprintf_internal_r+0xd34>
 8006704:	48034526 	beq	r9,zero,800741c <___svfprintf_internal_r+0x1170>
 8006708:	10803fcc 	andi	r2,r2,255
 800670c:	00c00044 	movi	r3,1
 8006710:	10c25826 	beq	r2,r3,8007074 <___svfprintf_internal_r+0xdc8>
 8006714:	00c00084 	movi	r3,2
 8006718:	10c2db26 	beq	r2,r3,8007288 <___svfprintf_internal_r+0xfdc>
 800671c:	b007883a 	mov	r3,r22
 8006720:	9808d0fa 	srli	r4,r19,3
 8006724:	e00a977a 	slli	r5,fp,29
 8006728:	e038d0fa 	srli	fp,fp,3
 800672c:	9cc001cc 	andi	r19,r19,7
 8006730:	98800c04 	addi	r2,r19,48
 8006734:	18ffffc4 	addi	r3,r3,-1
 8006738:	2926b03a 	or	r19,r5,r4
 800673c:	18800005 	stb	r2,0(r3)
 8006740:	9f08b03a 	or	r4,r19,fp
 8006744:	203ff61e 	bne	r4,zero,8006720 <__alt_data_end+0xfc006720>
 8006748:	8900004c 	andi	r4,r17,1
 800674c:	d8c03115 	stw	r3,196(sp)
 8006750:	2002db26 	beq	r4,zero,80072c0 <___svfprintf_internal_r+0x1014>
 8006754:	10803fcc 	andi	r2,r2,255
 8006758:	1080201c 	xori	r2,r2,128
 800675c:	10bfe004 	addi	r2,r2,-128
 8006760:	01000c04 	movi	r4,48
 8006764:	11056626 	beq	r2,r4,8007d00 <___svfprintf_internal_r+0x1a54>
 8006768:	dac03117 	ldw	r11,196(sp)
 800676c:	193fffc5 	stb	r4,-1(r3)
 8006770:	5affffc4 	addi	r11,r11,-1
 8006774:	dac03115 	stw	r11,196(sp)
 8006778:	b2e5c83a 	sub	r18,r22,r11
 800677c:	9005883a 	mov	r2,r18
 8006780:	9240010e 	bge	r18,r9,8006788 <___svfprintf_internal_r+0x4dc>
 8006784:	4805883a 	mov	r2,r9
 8006788:	d8802a15 	stw	r2,168(sp)
 800678c:	d8003415 	stw	zero,208(sp)
 8006790:	a8803fcc 	andi	r2,r21,255
 8006794:	1080201c 	xori	r2,r2,128
 8006798:	10bfe004 	addi	r2,r2,-128
 800679c:	10000326 	beq	r2,zero,80067ac <___svfprintf_internal_r+0x500>
 80067a0:	d8c02a17 	ldw	r3,168(sp)
 80067a4:	18c00044 	addi	r3,r3,1
 80067a8:	d8c02a15 	stw	r3,168(sp)
 80067ac:	8ac0008c 	andi	r11,r17,2
 80067b0:	dac02b15 	stw	r11,172(sp)
 80067b4:	58000326 	beq	r11,zero,80067c4 <___svfprintf_internal_r+0x518>
 80067b8:	db002a17 	ldw	r12,168(sp)
 80067bc:	63000084 	addi	r12,r12,2
 80067c0:	db002a15 	stw	r12,168(sp)
 80067c4:	88c0210c 	andi	r3,r17,132
 80067c8:	d8c02c15 	stw	r3,176(sp)
 80067cc:	1802021e 	bne	r3,zero,8006fd8 <___svfprintf_internal_r+0xd2c>
 80067d0:	dac02e17 	ldw	r11,184(sp)
 80067d4:	db002a17 	ldw	r12,168(sp)
 80067d8:	5b39c83a 	sub	fp,r11,r12
 80067dc:	0701fe0e 	bge	zero,fp,8006fd8 <___svfprintf_internal_r+0xd2c>
 80067e0:	02400404 	movi	r9,16
 80067e4:	d8c02017 	ldw	r3,128(sp)
 80067e8:	d8801f17 	ldw	r2,124(sp)
 80067ec:	4f057d0e 	bge	r9,fp,8007de4 <___svfprintf_internal_r+0x1b38>
 80067f0:	014200b4 	movhi	r5,2050
 80067f4:	e009883a 	mov	r4,fp
 80067f8:	29460284 	addi	r5,r5,6154
 80067fc:	dc003c15 	stw	r16,240(sp)
 8006800:	9039883a 	mov	fp,r18
 8006804:	d9403615 	stw	r5,216(sp)
 8006808:	8825883a 	mov	r18,r17
 800680c:	482b883a 	mov	r21,r9
 8006810:	04c001c4 	movi	r19,7
 8006814:	dc002f17 	ldw	r16,188(sp)
 8006818:	2023883a 	mov	r17,r4
 800681c:	00000306 	br	800682c <___svfprintf_internal_r+0x580>
 8006820:	8c7ffc04 	addi	r17,r17,-16
 8006824:	42000204 	addi	r8,r8,8
 8006828:	ac40130e 	bge	r21,r17,8006878 <___svfprintf_internal_r+0x5cc>
 800682c:	02c200b4 	movhi	r11,2050
 8006830:	18c00404 	addi	r3,r3,16
 8006834:	10800044 	addi	r2,r2,1
 8006838:	5ac60284 	addi	r11,r11,6154
 800683c:	42c00015 	stw	r11,0(r8)
 8006840:	45400115 	stw	r21,4(r8)
 8006844:	d8c02015 	stw	r3,128(sp)
 8006848:	d8801f15 	stw	r2,124(sp)
 800684c:	98bff40e 	bge	r19,r2,8006820 <__alt_data_end+0xfc006820>
 8006850:	8009883a 	mov	r4,r16
 8006854:	b80b883a 	mov	r5,r23
 8006858:	b00d883a 	mov	r6,r22
 800685c:	800ee4c0 	call	800ee4c <__ssprint_r>
 8006860:	103f5a1e 	bne	r2,zero,80065cc <__alt_data_end+0xfc0065cc>
 8006864:	8c7ffc04 	addi	r17,r17,-16
 8006868:	d8c02017 	ldw	r3,128(sp)
 800686c:	d8801f17 	ldw	r2,124(sp)
 8006870:	da000404 	addi	r8,sp,16
 8006874:	ac7fed16 	blt	r21,r17,800682c <__alt_data_end+0xfc00682c>
 8006878:	dc003c17 	ldw	r16,240(sp)
 800687c:	8809883a 	mov	r4,r17
 8006880:	9023883a 	mov	r17,r18
 8006884:	e025883a 	mov	r18,fp
 8006888:	2039883a 	mov	fp,r4
 800688c:	db003617 	ldw	r12,216(sp)
 8006890:	e0c7883a 	add	r3,fp,r3
 8006894:	10800044 	addi	r2,r2,1
 8006898:	43000015 	stw	r12,0(r8)
 800689c:	47000115 	stw	fp,4(r8)
 80068a0:	d8c02015 	stw	r3,128(sp)
 80068a4:	d8801f15 	stw	r2,124(sp)
 80068a8:	010001c4 	movi	r4,7
 80068ac:	20833516 	blt	r4,r2,8007584 <___svfprintf_internal_r+0x12d8>
 80068b0:	d8802787 	ldb	r2,158(sp)
 80068b4:	42000204 	addi	r8,r8,8
 80068b8:	10000c26 	beq	r2,zero,80068ec <___svfprintf_internal_r+0x640>
 80068bc:	d8801f17 	ldw	r2,124(sp)
 80068c0:	d9002784 	addi	r4,sp,158
 80068c4:	18c00044 	addi	r3,r3,1
 80068c8:	10800044 	addi	r2,r2,1
 80068cc:	41000015 	stw	r4,0(r8)
 80068d0:	01000044 	movi	r4,1
 80068d4:	41000115 	stw	r4,4(r8)
 80068d8:	d8c02015 	stw	r3,128(sp)
 80068dc:	d8801f15 	stw	r2,124(sp)
 80068e0:	010001c4 	movi	r4,7
 80068e4:	2082df16 	blt	r4,r2,8007464 <___svfprintf_internal_r+0x11b8>
 80068e8:	42000204 	addi	r8,r8,8
 80068ec:	dac02b17 	ldw	r11,172(sp)
 80068f0:	58000c26 	beq	r11,zero,8006924 <___svfprintf_internal_r+0x678>
 80068f4:	d8801f17 	ldw	r2,124(sp)
 80068f8:	d9002704 	addi	r4,sp,156
 80068fc:	18c00084 	addi	r3,r3,2
 8006900:	10800044 	addi	r2,r2,1
 8006904:	41000015 	stw	r4,0(r8)
 8006908:	01000084 	movi	r4,2
 800690c:	41000115 	stw	r4,4(r8)
 8006910:	d8c02015 	stw	r3,128(sp)
 8006914:	d8801f15 	stw	r2,124(sp)
 8006918:	010001c4 	movi	r4,7
 800691c:	2082d916 	blt	r4,r2,8007484 <___svfprintf_internal_r+0x11d8>
 8006920:	42000204 	addi	r8,r8,8
 8006924:	db002c17 	ldw	r12,176(sp)
 8006928:	00802004 	movi	r2,128
 800692c:	60822026 	beq	r12,r2,80071b0 <___svfprintf_internal_r+0xf04>
 8006930:	db003217 	ldw	r12,200(sp)
 8006934:	64abc83a 	sub	r21,r12,r18
 8006938:	0540310e 	bge	zero,r21,8006a00 <___svfprintf_internal_r+0x754>
 800693c:	07000404 	movi	fp,16
 8006940:	d8801f17 	ldw	r2,124(sp)
 8006944:	e544180e 	bge	fp,r21,80079a8 <___svfprintf_internal_r+0x16fc>
 8006948:	014200b4 	movhi	r5,2050
 800694c:	a809883a 	mov	r4,r21
 8006950:	2945fe84 	addi	r5,r5,6138
 8006954:	dc002c15 	stw	r16,176(sp)
 8006958:	902b883a 	mov	r21,r18
 800695c:	d9402b15 	stw	r5,172(sp)
 8006960:	8825883a 	mov	r18,r17
 8006964:	04c001c4 	movi	r19,7
 8006968:	dc002f17 	ldw	r16,188(sp)
 800696c:	2023883a 	mov	r17,r4
 8006970:	00000306 	br	8006980 <___svfprintf_internal_r+0x6d4>
 8006974:	8c7ffc04 	addi	r17,r17,-16
 8006978:	42000204 	addi	r8,r8,8
 800697c:	e440110e 	bge	fp,r17,80069c4 <___svfprintf_internal_r+0x718>
 8006980:	18c00404 	addi	r3,r3,16
 8006984:	10800044 	addi	r2,r2,1
 8006988:	45000015 	stw	r20,0(r8)
 800698c:	47000115 	stw	fp,4(r8)
 8006990:	d8c02015 	stw	r3,128(sp)
 8006994:	d8801f15 	stw	r2,124(sp)
 8006998:	98bff60e 	bge	r19,r2,8006974 <__alt_data_end+0xfc006974>
 800699c:	8009883a 	mov	r4,r16
 80069a0:	b80b883a 	mov	r5,r23
 80069a4:	b00d883a 	mov	r6,r22
 80069a8:	800ee4c0 	call	800ee4c <__ssprint_r>
 80069ac:	103f071e 	bne	r2,zero,80065cc <__alt_data_end+0xfc0065cc>
 80069b0:	8c7ffc04 	addi	r17,r17,-16
 80069b4:	d8c02017 	ldw	r3,128(sp)
 80069b8:	d8801f17 	ldw	r2,124(sp)
 80069bc:	da000404 	addi	r8,sp,16
 80069c0:	e47fef16 	blt	fp,r17,8006980 <__alt_data_end+0xfc006980>
 80069c4:	dc002c17 	ldw	r16,176(sp)
 80069c8:	8809883a 	mov	r4,r17
 80069cc:	9023883a 	mov	r17,r18
 80069d0:	a825883a 	mov	r18,r21
 80069d4:	202b883a 	mov	r21,r4
 80069d8:	dac02b17 	ldw	r11,172(sp)
 80069dc:	1d47883a 	add	r3,r3,r21
 80069e0:	10800044 	addi	r2,r2,1
 80069e4:	42c00015 	stw	r11,0(r8)
 80069e8:	45400115 	stw	r21,4(r8)
 80069ec:	d8c02015 	stw	r3,128(sp)
 80069f0:	d8801f15 	stw	r2,124(sp)
 80069f4:	010001c4 	movi	r4,7
 80069f8:	20829216 	blt	r4,r2,8007444 <___svfprintf_internal_r+0x1198>
 80069fc:	42000204 	addi	r8,r8,8
 8006a00:	8880400c 	andi	r2,r17,256
 8006a04:	1001a11e 	bne	r2,zero,800708c <___svfprintf_internal_r+0xde0>
 8006a08:	d8801f17 	ldw	r2,124(sp)
 8006a0c:	db003117 	ldw	r12,196(sp)
 8006a10:	1c87883a 	add	r3,r3,r18
 8006a14:	10800044 	addi	r2,r2,1
 8006a18:	43000015 	stw	r12,0(r8)
 8006a1c:	44800115 	stw	r18,4(r8)
 8006a20:	d8c02015 	stw	r3,128(sp)
 8006a24:	d8801f15 	stw	r2,124(sp)
 8006a28:	010001c4 	movi	r4,7
 8006a2c:	20826d16 	blt	r4,r2,80073e4 <___svfprintf_internal_r+0x1138>
 8006a30:	42000204 	addi	r8,r8,8
 8006a34:	8c40010c 	andi	r17,r17,4
 8006a38:	88003226 	beq	r17,zero,8006b04 <___svfprintf_internal_r+0x858>
 8006a3c:	db002e17 	ldw	r12,184(sp)
 8006a40:	dac02a17 	ldw	r11,168(sp)
 8006a44:	62e1c83a 	sub	r16,r12,r11
 8006a48:	04002e0e 	bge	zero,r16,8006b04 <___svfprintf_internal_r+0x858>
 8006a4c:	04400404 	movi	r17,16
 8006a50:	d8801f17 	ldw	r2,124(sp)
 8006a54:	8c05240e 	bge	r17,r16,8007ee8 <___svfprintf_internal_r+0x1c3c>
 8006a58:	010200b4 	movhi	r4,2050
 8006a5c:	21060284 	addi	r4,r4,6154
 8006a60:	d9003615 	stw	r4,216(sp)
 8006a64:	048001c4 	movi	r18,7
 8006a68:	dcc02f17 	ldw	r19,188(sp)
 8006a6c:	00000306 	br	8006a7c <___svfprintf_internal_r+0x7d0>
 8006a70:	843ffc04 	addi	r16,r16,-16
 8006a74:	42000204 	addi	r8,r8,8
 8006a78:	8c00130e 	bge	r17,r16,8006ac8 <___svfprintf_internal_r+0x81c>
 8006a7c:	014200b4 	movhi	r5,2050
 8006a80:	18c00404 	addi	r3,r3,16
 8006a84:	10800044 	addi	r2,r2,1
 8006a88:	29460284 	addi	r5,r5,6154
 8006a8c:	41400015 	stw	r5,0(r8)
 8006a90:	44400115 	stw	r17,4(r8)
 8006a94:	d8c02015 	stw	r3,128(sp)
 8006a98:	d8801f15 	stw	r2,124(sp)
 8006a9c:	90bff40e 	bge	r18,r2,8006a70 <__alt_data_end+0xfc006a70>
 8006aa0:	9809883a 	mov	r4,r19
 8006aa4:	b80b883a 	mov	r5,r23
 8006aa8:	b00d883a 	mov	r6,r22
 8006aac:	800ee4c0 	call	800ee4c <__ssprint_r>
 8006ab0:	103ec61e 	bne	r2,zero,80065cc <__alt_data_end+0xfc0065cc>
 8006ab4:	843ffc04 	addi	r16,r16,-16
 8006ab8:	d8c02017 	ldw	r3,128(sp)
 8006abc:	d8801f17 	ldw	r2,124(sp)
 8006ac0:	da000404 	addi	r8,sp,16
 8006ac4:	8c3fed16 	blt	r17,r16,8006a7c <__alt_data_end+0xfc006a7c>
 8006ac8:	dac03617 	ldw	r11,216(sp)
 8006acc:	1c07883a 	add	r3,r3,r16
 8006ad0:	10800044 	addi	r2,r2,1
 8006ad4:	42c00015 	stw	r11,0(r8)
 8006ad8:	44000115 	stw	r16,4(r8)
 8006adc:	d8c02015 	stw	r3,128(sp)
 8006ae0:	d8801f15 	stw	r2,124(sp)
 8006ae4:	010001c4 	movi	r4,7
 8006ae8:	2080060e 	bge	r4,r2,8006b04 <___svfprintf_internal_r+0x858>
 8006aec:	d9002f17 	ldw	r4,188(sp)
 8006af0:	b80b883a 	mov	r5,r23
 8006af4:	b00d883a 	mov	r6,r22
 8006af8:	800ee4c0 	call	800ee4c <__ssprint_r>
 8006afc:	103eb31e 	bne	r2,zero,80065cc <__alt_data_end+0xfc0065cc>
 8006b00:	d8c02017 	ldw	r3,128(sp)
 8006b04:	d8802a17 	ldw	r2,168(sp)
 8006b08:	db002e17 	ldw	r12,184(sp)
 8006b0c:	1300010e 	bge	r2,r12,8006b14 <___svfprintf_internal_r+0x868>
 8006b10:	6005883a 	mov	r2,r12
 8006b14:	dac03017 	ldw	r11,192(sp)
 8006b18:	5897883a 	add	r11,r11,r2
 8006b1c:	dac03015 	stw	r11,192(sp)
 8006b20:	1802381e 	bne	r3,zero,8007404 <___svfprintf_internal_r+0x1158>
 8006b24:	d8001f15 	stw	zero,124(sp)
 8006b28:	da000404 	addi	r8,sp,16
 8006b2c:	003e0b06 	br	800635c <__alt_data_end+0xfc00635c>
 8006b30:	8c400414 	ori	r17,r17,16
 8006b34:	d8c02915 	stw	r3,164(sp)
 8006b38:	8880080c 	andi	r2,r17,32
 8006b3c:	10010c26 	beq	r2,zero,8006f70 <___svfprintf_internal_r+0xcc4>
 8006b40:	db002d17 	ldw	r12,180(sp)
 8006b44:	0005883a 	mov	r2,zero
 8006b48:	64c00017 	ldw	r19,0(r12)
 8006b4c:	67000117 	ldw	fp,4(r12)
 8006b50:	63000204 	addi	r12,r12,8
 8006b54:	db002d15 	stw	r12,180(sp)
 8006b58:	9f06b03a 	or	r3,r19,fp
 8006b5c:	d8002785 	stb	zero,158(sp)
 8006b60:	da403215 	stw	r9,200(sp)
 8006b64:	002b883a 	mov	r21,zero
 8006b68:	003ee206 	br	80066f4 <__alt_data_end+0xfc0066f4>
 8006b6c:	8c400414 	ori	r17,r17,16
 8006b70:	d8c02915 	stw	r3,164(sp)
 8006b74:	8880080c 	andi	r2,r17,32
 8006b78:	1000ee26 	beq	r2,zero,8006f34 <___svfprintf_internal_r+0xc88>
 8006b7c:	dac02d17 	ldw	r11,180(sp)
 8006b80:	00800044 	movi	r2,1
 8006b84:	5cc00017 	ldw	r19,0(r11)
 8006b88:	5f000117 	ldw	fp,4(r11)
 8006b8c:	5ac00204 	addi	r11,r11,8
 8006b90:	dac02d15 	stw	r11,180(sp)
 8006b94:	9f06b03a 	or	r3,r19,fp
 8006b98:	003ff006 	br	8006b5c <__alt_data_end+0xfc006b5c>
 8006b9c:	db002d17 	ldw	r12,180(sp)
 8006ba0:	dac02d17 	ldw	r11,180(sp)
 8006ba4:	d8c02915 	stw	r3,164(sp)
 8006ba8:	63000017 	ldw	r12,0(r12)
 8006bac:	5ac00117 	ldw	r11,4(r11)
 8006bb0:	d9802785 	stb	r6,158(sp)
 8006bb4:	6009883a 	mov	r4,r12
 8006bb8:	580b883a 	mov	r5,r11
 8006bbc:	db003715 	stw	r12,220(sp)
 8006bc0:	da004015 	stw	r8,256(sp)
 8006bc4:	da403f15 	stw	r9,252(sp)
 8006bc8:	dac03815 	stw	r11,224(sp)
 8006bcc:	800ebdc0 	call	800ebdc <__fpclassifyd>
 8006bd0:	db002d17 	ldw	r12,180(sp)
 8006bd4:	04800044 	movi	r18,1
 8006bd8:	da004017 	ldw	r8,256(sp)
 8006bdc:	64c00204 	addi	r19,r12,8
 8006be0:	da403f17 	ldw	r9,252(sp)
 8006be4:	d9003717 	ldw	r4,220(sp)
 8006be8:	d9403817 	ldw	r5,224(sp)
 8006bec:	14832c1e 	bne	r2,r18,80078a0 <___svfprintf_internal_r+0x15f4>
 8006bf0:	000d883a 	mov	r6,zero
 8006bf4:	000f883a 	mov	r7,zero
 8006bf8:	80138140 	call	8013814 <__ledf2>
 8006bfc:	da004017 	ldw	r8,256(sp)
 8006c00:	1004c416 	blt	r2,zero,8007f14 <___svfprintf_internal_r+0x1c68>
 8006c04:	dd402783 	ldbu	r21,158(sp)
 8006c08:	008011c4 	movi	r2,71
 8006c0c:	14041a0e 	bge	r2,r16,8007c78 <___svfprintf_internal_r+0x19cc>
 8006c10:	00c200b4 	movhi	r3,2050
 8006c14:	18c5ef04 	addi	r3,r3,6076
 8006c18:	d8c03115 	stw	r3,196(sp)
 8006c1c:	02c000c4 	movi	r11,3
 8006c20:	00bfdfc4 	movi	r2,-129
 8006c24:	dac02a15 	stw	r11,168(sp)
 8006c28:	88a2703a 	and	r17,r17,r2
 8006c2c:	dcc02d15 	stw	r19,180(sp)
 8006c30:	5825883a 	mov	r18,r11
 8006c34:	d8003215 	stw	zero,200(sp)
 8006c38:	d8003415 	stw	zero,208(sp)
 8006c3c:	003ed406 	br	8006790 <__alt_data_end+0xfc006790>
 8006c40:	db002d17 	ldw	r12,180(sp)
 8006c44:	00800c04 	movi	r2,48
 8006c48:	d8802705 	stb	r2,156(sp)
 8006c4c:	64c00017 	ldw	r19,0(r12)
 8006c50:	00801e04 	movi	r2,120
 8006c54:	d8802745 	stb	r2,157(sp)
 8006c58:	008200b4 	movhi	r2,2050
 8006c5c:	1085f704 	addi	r2,r2,6108
 8006c60:	63000104 	addi	r12,r12,4
 8006c64:	d8c02915 	stw	r3,164(sp)
 8006c68:	d8803b15 	stw	r2,236(sp)
 8006c6c:	0039883a 	mov	fp,zero
 8006c70:	8c400094 	ori	r17,r17,2
 8006c74:	db002d15 	stw	r12,180(sp)
 8006c78:	00800084 	movi	r2,2
 8006c7c:	04001e04 	movi	r16,120
 8006c80:	9807883a 	mov	r3,r19
 8006c84:	003fb506 	br	8006b5c <__alt_data_end+0xfc006b5c>
 8006c88:	8c400214 	ori	r17,r17,8
 8006c8c:	1805883a 	mov	r2,r3
 8006c90:	1c000007 	ldb	r16,0(r3)
 8006c94:	003ddb06 	br	8006404 <__alt_data_end+0xfc006404>
 8006c98:	d8c02915 	stw	r3,164(sp)
 8006c9c:	d9802785 	stb	r6,158(sp)
 8006ca0:	8880080c 	andi	r2,r17,32
 8006ca4:	d8c02d17 	ldw	r3,180(sp)
 8006ca8:	103e871e 	bne	r2,zero,80066c8 <__alt_data_end+0xfc0066c8>
 8006cac:	8880040c 	andi	r2,r17,16
 8006cb0:	10027a1e 	bne	r2,zero,800769c <___svfprintf_internal_r+0x13f0>
 8006cb4:	8880100c 	andi	r2,r17,64
 8006cb8:	10027826 	beq	r2,zero,800769c <___svfprintf_internal_r+0x13f0>
 8006cbc:	1cc0000f 	ldh	r19,0(r3)
 8006cc0:	db002d17 	ldw	r12,180(sp)
 8006cc4:	9839d7fa 	srai	fp,r19,31
 8006cc8:	63000104 	addi	r12,r12,4
 8006ccc:	db002d15 	stw	r12,180(sp)
 8006cd0:	e005883a 	mov	r2,fp
 8006cd4:	103e830e 	bge	r2,zero,80066e4 <__alt_data_end+0xfc0066e4>
 8006cd8:	04e7c83a 	sub	r19,zero,r19
 8006cdc:	9804c03a 	cmpne	r2,r19,zero
 8006ce0:	0739c83a 	sub	fp,zero,fp
 8006ce4:	e0b9c83a 	sub	fp,fp,r2
 8006ce8:	05400b44 	movi	r21,45
 8006cec:	dd402785 	stb	r21,158(sp)
 8006cf0:	da403215 	stw	r9,200(sp)
 8006cf4:	00800044 	movi	r2,1
 8006cf8:	9f06b03a 	or	r3,r19,fp
 8006cfc:	003e7d06 	br	80066f4 <__alt_data_end+0xfc0066f4>
 8006d00:	8c401014 	ori	r17,r17,64
 8006d04:	1805883a 	mov	r2,r3
 8006d08:	1c000007 	ldb	r16,0(r3)
 8006d0c:	003dbd06 	br	8006404 <__alt_data_end+0xfc006404>
 8006d10:	1c000007 	ldb	r16,0(r3)
 8006d14:	81c37126 	beq	r16,r7,8007adc <___svfprintf_internal_r+0x1830>
 8006d18:	8c400414 	ori	r17,r17,16
 8006d1c:	1805883a 	mov	r2,r3
 8006d20:	003db806 	br	8006404 <__alt_data_end+0xfc006404>
 8006d24:	d8c02915 	stw	r3,164(sp)
 8006d28:	d9802785 	stb	r6,158(sp)
 8006d2c:	8880080c 	andi	r2,r17,32
 8006d30:	1002f026 	beq	r2,zero,80078f4 <___svfprintf_internal_r+0x1648>
 8006d34:	db002d17 	ldw	r12,180(sp)
 8006d38:	dac03017 	ldw	r11,192(sp)
 8006d3c:	60800017 	ldw	r2,0(r12)
 8006d40:	5807d7fa 	srai	r3,r11,31
 8006d44:	63000104 	addi	r12,r12,4
 8006d48:	db002d15 	stw	r12,180(sp)
 8006d4c:	12c00015 	stw	r11,0(r2)
 8006d50:	10c00115 	stw	r3,4(r2)
 8006d54:	003d8106 	br	800635c <__alt_data_end+0xfc00635c>
 8006d58:	30803fcc 	andi	r2,r6,255
 8006d5c:	1080201c 	xori	r2,r2,128
 8006d60:	10bfe004 	addi	r2,r2,-128
 8006d64:	1002fd1e 	bne	r2,zero,800795c <___svfprintf_internal_r+0x16b0>
 8006d68:	1805883a 	mov	r2,r3
 8006d6c:	01800804 	movi	r6,32
 8006d70:	1c000007 	ldb	r16,0(r3)
 8006d74:	003da306 	br	8006404 <__alt_data_end+0xfc006404>
 8006d78:	030200b4 	movhi	r12,2050
 8006d7c:	6305f204 	addi	r12,r12,6088
 8006d80:	d8c02915 	stw	r3,164(sp)
 8006d84:	d9802785 	stb	r6,158(sp)
 8006d88:	db003b15 	stw	r12,236(sp)
 8006d8c:	88c0080c 	andi	r3,r17,32
 8006d90:	d8802d17 	ldw	r2,180(sp)
 8006d94:	18005c26 	beq	r3,zero,8006f08 <___svfprintf_internal_r+0xc5c>
 8006d98:	dac02d17 	ldw	r11,180(sp)
 8006d9c:	14c00017 	ldw	r19,0(r2)
 8006da0:	17000117 	ldw	fp,4(r2)
 8006da4:	5ac00204 	addi	r11,r11,8
 8006da8:	dac02d15 	stw	r11,180(sp)
 8006dac:	8880004c 	andi	r2,r17,1
 8006db0:	10022f26 	beq	r2,zero,8007670 <___svfprintf_internal_r+0x13c4>
 8006db4:	9f06b03a 	or	r3,r19,fp
 8006db8:	1802eb26 	beq	r3,zero,8007968 <___svfprintf_internal_r+0x16bc>
 8006dbc:	00800c04 	movi	r2,48
 8006dc0:	d8802705 	stb	r2,156(sp)
 8006dc4:	dc002745 	stb	r16,157(sp)
 8006dc8:	8c400094 	ori	r17,r17,2
 8006dcc:	00800084 	movi	r2,2
 8006dd0:	003f6206 	br	8006b5c <__alt_data_end+0xfc006b5c>
 8006dd4:	dac02d17 	ldw	r11,180(sp)
 8006dd8:	db002d17 	ldw	r12,180(sp)
 8006ddc:	d8c02915 	stw	r3,164(sp)
 8006de0:	5ac00017 	ldw	r11,0(r11)
 8006de4:	d8002785 	stb	zero,158(sp)
 8006de8:	64c00104 	addi	r19,r12,4
 8006dec:	dac03115 	stw	r11,196(sp)
 8006df0:	58042e26 	beq	r11,zero,8007eac <___svfprintf_internal_r+0x1c00>
 8006df4:	d9003117 	ldw	r4,196(sp)
 8006df8:	4803c416 	blt	r9,zero,8007d0c <___svfprintf_internal_r+0x1a60>
 8006dfc:	480d883a 	mov	r6,r9
 8006e00:	000b883a 	mov	r5,zero
 8006e04:	da004015 	stw	r8,256(sp)
 8006e08:	da403f15 	stw	r9,252(sp)
 8006e0c:	800d7a40 	call	800d7a4 <memchr>
 8006e10:	da004017 	ldw	r8,256(sp)
 8006e14:	da403f17 	ldw	r9,252(sp)
 8006e18:	10048a26 	beq	r2,zero,8008044 <___svfprintf_internal_r+0x1d98>
 8006e1c:	d8c03117 	ldw	r3,196(sp)
 8006e20:	10e5c83a 	sub	r18,r2,r3
 8006e24:	4c80010e 	bge	r9,r18,8006e2c <___svfprintf_internal_r+0xb80>
 8006e28:	4825883a 	mov	r18,r9
 8006e2c:	9005883a 	mov	r2,r18
 8006e30:	9003bb16 	blt	r18,zero,8007d20 <___svfprintf_internal_r+0x1a74>
 8006e34:	dd402783 	ldbu	r21,158(sp)
 8006e38:	d8802a15 	stw	r2,168(sp)
 8006e3c:	dcc02d15 	stw	r19,180(sp)
 8006e40:	d8003215 	stw	zero,200(sp)
 8006e44:	d8003415 	stw	zero,208(sp)
 8006e48:	003e5106 	br	8006790 <__alt_data_end+0xfc006790>
 8006e4c:	8c400814 	ori	r17,r17,32
 8006e50:	1805883a 	mov	r2,r3
 8006e54:	1c000007 	ldb	r16,0(r3)
 8006e58:	003d6a06 	br	8006404 <__alt_data_end+0xfc006404>
 8006e5c:	db002d17 	ldw	r12,180(sp)
 8006e60:	d8c02915 	stw	r3,164(sp)
 8006e64:	dac01404 	addi	r11,sp,80
 8006e68:	60800017 	ldw	r2,0(r12)
 8006e6c:	00c00044 	movi	r3,1
 8006e70:	63000104 	addi	r12,r12,4
 8006e74:	d8801405 	stb	r2,80(sp)
 8006e78:	d8c02a15 	stw	r3,168(sp)
 8006e7c:	d8002785 	stb	zero,158(sp)
 8006e80:	db002d15 	stw	r12,180(sp)
 8006e84:	1825883a 	mov	r18,r3
 8006e88:	d8003215 	stw	zero,200(sp)
 8006e8c:	d8003415 	stw	zero,208(sp)
 8006e90:	dac03115 	stw	r11,196(sp)
 8006e94:	0005883a 	mov	r2,zero
 8006e98:	003e4406 	br	80067ac <__alt_data_end+0xfc0067ac>
 8006e9c:	dac02d17 	ldw	r11,180(sp)
 8006ea0:	db002d17 	ldw	r12,180(sp)
 8006ea4:	5ac00017 	ldw	r11,0(r11)
 8006ea8:	dac02e15 	stw	r11,184(sp)
 8006eac:	62c00104 	addi	r11,r12,4
 8006eb0:	db002e17 	ldw	r12,184(sp)
 8006eb4:	60030316 	blt	r12,zero,8007ac4 <___svfprintf_internal_r+0x1818>
 8006eb8:	dac02d15 	stw	r11,180(sp)
 8006ebc:	1805883a 	mov	r2,r3
 8006ec0:	1c000007 	ldb	r16,0(r3)
 8006ec4:	003d4f06 	br	8006404 <__alt_data_end+0xfc006404>
 8006ec8:	1805883a 	mov	r2,r3
 8006ecc:	01800ac4 	movi	r6,43
 8006ed0:	1c000007 	ldb	r16,0(r3)
 8006ed4:	003d4b06 	br	8006404 <__alt_data_end+0xfc006404>
 8006ed8:	8c400054 	ori	r17,r17,1
 8006edc:	1805883a 	mov	r2,r3
 8006ee0:	1c000007 	ldb	r16,0(r3)
 8006ee4:	003d4706 	br	8006404 <__alt_data_end+0xfc006404>
 8006ee8:	008200b4 	movhi	r2,2050
 8006eec:	1085f704 	addi	r2,r2,6108
 8006ef0:	d8c02915 	stw	r3,164(sp)
 8006ef4:	d8803b15 	stw	r2,236(sp)
 8006ef8:	d9802785 	stb	r6,158(sp)
 8006efc:	88c0080c 	andi	r3,r17,32
 8006f00:	d8802d17 	ldw	r2,180(sp)
 8006f04:	183fa41e 	bne	r3,zero,8006d98 <__alt_data_end+0xfc006d98>
 8006f08:	88c0040c 	andi	r3,r17,16
 8006f0c:	18028b26 	beq	r3,zero,800793c <___svfprintf_internal_r+0x1690>
 8006f10:	db002d17 	ldw	r12,180(sp)
 8006f14:	14c00017 	ldw	r19,0(r2)
 8006f18:	0039883a 	mov	fp,zero
 8006f1c:	63000104 	addi	r12,r12,4
 8006f20:	db002d15 	stw	r12,180(sp)
 8006f24:	003fa106 	br	8006dac <__alt_data_end+0xfc006dac>
 8006f28:	d8c02915 	stw	r3,164(sp)
 8006f2c:	8880080c 	andi	r2,r17,32
 8006f30:	103f121e 	bne	r2,zero,8006b7c <__alt_data_end+0xfc006b7c>
 8006f34:	8880040c 	andi	r2,r17,16
 8006f38:	1001df1e 	bne	r2,zero,80076b8 <___svfprintf_internal_r+0x140c>
 8006f3c:	8880100c 	andi	r2,r17,64
 8006f40:	1001dd26 	beq	r2,zero,80076b8 <___svfprintf_internal_r+0x140c>
 8006f44:	dac02d17 	ldw	r11,180(sp)
 8006f48:	0039883a 	mov	fp,zero
 8006f4c:	00800044 	movi	r2,1
 8006f50:	5cc0000b 	ldhu	r19,0(r11)
 8006f54:	5ac00104 	addi	r11,r11,4
 8006f58:	dac02d15 	stw	r11,180(sp)
 8006f5c:	9807883a 	mov	r3,r19
 8006f60:	003efe06 	br	8006b5c <__alt_data_end+0xfc006b5c>
 8006f64:	d8c02915 	stw	r3,164(sp)
 8006f68:	8880080c 	andi	r2,r17,32
 8006f6c:	103ef41e 	bne	r2,zero,8006b40 <__alt_data_end+0xfc006b40>
 8006f70:	8880040c 	andi	r2,r17,16
 8006f74:	1001c11e 	bne	r2,zero,800767c <___svfprintf_internal_r+0x13d0>
 8006f78:	8880100c 	andi	r2,r17,64
 8006f7c:	1001bf26 	beq	r2,zero,800767c <___svfprintf_internal_r+0x13d0>
 8006f80:	db002d17 	ldw	r12,180(sp)
 8006f84:	0039883a 	mov	fp,zero
 8006f88:	0005883a 	mov	r2,zero
 8006f8c:	64c0000b 	ldhu	r19,0(r12)
 8006f90:	63000104 	addi	r12,r12,4
 8006f94:	db002d15 	stw	r12,180(sp)
 8006f98:	9807883a 	mov	r3,r19
 8006f9c:	003eef06 	br	8006b5c <__alt_data_end+0xfc006b5c>
 8006fa0:	d8c02915 	stw	r3,164(sp)
 8006fa4:	d9802785 	stb	r6,158(sp)
 8006fa8:	803d8226 	beq	r16,zero,80065b4 <__alt_data_end+0xfc0065b4>
 8006fac:	02c00044 	movi	r11,1
 8006fb0:	db001404 	addi	r12,sp,80
 8006fb4:	dac02a15 	stw	r11,168(sp)
 8006fb8:	dc001405 	stb	r16,80(sp)
 8006fbc:	d8002785 	stb	zero,158(sp)
 8006fc0:	5825883a 	mov	r18,r11
 8006fc4:	d8003215 	stw	zero,200(sp)
 8006fc8:	d8003415 	stw	zero,208(sp)
 8006fcc:	db003115 	stw	r12,196(sp)
 8006fd0:	0005883a 	mov	r2,zero
 8006fd4:	003df506 	br	80067ac <__alt_data_end+0xfc0067ac>
 8006fd8:	d8c02017 	ldw	r3,128(sp)
 8006fdc:	003e3606 	br	80068b8 <__alt_data_end+0xfc0068b8>
 8006fe0:	10803fcc 	andi	r2,r2,255
 8006fe4:	00c00044 	movi	r3,1
 8006fe8:	10fdca1e 	bne	r2,r3,8006714 <__alt_data_end+0xfc006714>
 8006fec:	e000021e 	bne	fp,zero,8006ff8 <___svfprintf_internal_r+0xd4c>
 8006ff0:	00800244 	movi	r2,9
 8006ff4:	14c01f2e 	bgeu	r2,r19,8007074 <___svfprintf_internal_r+0xdc8>
 8006ff8:	dc002a15 	stw	r16,168(sp)
 8006ffc:	dc402b15 	stw	r17,172(sp)
 8007000:	9821883a 	mov	r16,r19
 8007004:	e023883a 	mov	r17,fp
 8007008:	b025883a 	mov	r18,r22
 800700c:	4027883a 	mov	r19,r8
 8007010:	4839883a 	mov	fp,r9
 8007014:	8009883a 	mov	r4,r16
 8007018:	880b883a 	mov	r5,r17
 800701c:	01800284 	movi	r6,10
 8007020:	000f883a 	mov	r7,zero
 8007024:	801301c0 	call	801301c <__umoddi3>
 8007028:	10800c04 	addi	r2,r2,48
 800702c:	94bfffc4 	addi	r18,r18,-1
 8007030:	8009883a 	mov	r4,r16
 8007034:	880b883a 	mov	r5,r17
 8007038:	01800284 	movi	r6,10
 800703c:	000f883a 	mov	r7,zero
 8007040:	90800005 	stb	r2,0(r18)
 8007044:	8012a5c0 	call	8012a5c <__udivdi3>
 8007048:	1021883a 	mov	r16,r2
 800704c:	10c4b03a 	or	r2,r2,r3
 8007050:	1823883a 	mov	r17,r3
 8007054:	103fef1e 	bne	r2,zero,8007014 <__alt_data_end+0xfc007014>
 8007058:	dc803115 	stw	r18,196(sp)
 800705c:	dc002a17 	ldw	r16,168(sp)
 8007060:	9811883a 	mov	r8,r19
 8007064:	dc402b17 	ldw	r17,172(sp)
 8007068:	e013883a 	mov	r9,fp
 800706c:	b4a5c83a 	sub	r18,r22,r18
 8007070:	003dc206 	br	800677c <__alt_data_end+0xfc00677c>
 8007074:	9cc00c04 	addi	r19,r19,48
 8007078:	db001dc4 	addi	r12,sp,119
 800707c:	dcc01dc5 	stb	r19,119(sp)
 8007080:	dc803d17 	ldw	r18,244(sp)
 8007084:	db003115 	stw	r12,196(sp)
 8007088:	003dbc06 	br	800677c <__alt_data_end+0xfc00677c>
 800708c:	00801944 	movi	r2,101
 8007090:	14008d0e 	bge	r2,r16,80072c8 <___svfprintf_internal_r+0x101c>
 8007094:	d9003717 	ldw	r4,220(sp)
 8007098:	d9403817 	ldw	r5,224(sp)
 800709c:	000d883a 	mov	r6,zero
 80070a0:	000f883a 	mov	r7,zero
 80070a4:	d8c03e15 	stw	r3,248(sp)
 80070a8:	da004015 	stw	r8,256(sp)
 80070ac:	80137900 	call	8013790 <__eqdf2>
 80070b0:	d8c03e17 	ldw	r3,248(sp)
 80070b4:	da004017 	ldw	r8,256(sp)
 80070b8:	1000fd1e 	bne	r2,zero,80074b0 <___svfprintf_internal_r+0x1204>
 80070bc:	d8801f17 	ldw	r2,124(sp)
 80070c0:	010200b4 	movhi	r4,2050
 80070c4:	2105fe04 	addi	r4,r4,6136
 80070c8:	18c00044 	addi	r3,r3,1
 80070cc:	10800044 	addi	r2,r2,1
 80070d0:	41000015 	stw	r4,0(r8)
 80070d4:	01000044 	movi	r4,1
 80070d8:	41000115 	stw	r4,4(r8)
 80070dc:	d8c02015 	stw	r3,128(sp)
 80070e0:	d8801f15 	stw	r2,124(sp)
 80070e4:	010001c4 	movi	r4,7
 80070e8:	20823316 	blt	r4,r2,80079b8 <___svfprintf_internal_r+0x170c>
 80070ec:	42000204 	addi	r8,r8,8
 80070f0:	d8802617 	ldw	r2,152(sp)
 80070f4:	dac03317 	ldw	r11,204(sp)
 80070f8:	12c00216 	blt	r2,r11,8007104 <___svfprintf_internal_r+0xe58>
 80070fc:	8880004c 	andi	r2,r17,1
 8007100:	103e4c26 	beq	r2,zero,8006a34 <__alt_data_end+0xfc006a34>
 8007104:	db003917 	ldw	r12,228(sp)
 8007108:	d8801f17 	ldw	r2,124(sp)
 800710c:	dac03517 	ldw	r11,212(sp)
 8007110:	1b07883a 	add	r3,r3,r12
 8007114:	10800044 	addi	r2,r2,1
 8007118:	42c00015 	stw	r11,0(r8)
 800711c:	43000115 	stw	r12,4(r8)
 8007120:	d8c02015 	stw	r3,128(sp)
 8007124:	d8801f15 	stw	r2,124(sp)
 8007128:	010001c4 	movi	r4,7
 800712c:	20826f16 	blt	r4,r2,8007aec <___svfprintf_internal_r+0x1840>
 8007130:	42000204 	addi	r8,r8,8
 8007134:	db003317 	ldw	r12,204(sp)
 8007138:	643fffc4 	addi	r16,r12,-1
 800713c:	043e3d0e 	bge	zero,r16,8006a34 <__alt_data_end+0xfc006a34>
 8007140:	04800404 	movi	r18,16
 8007144:	d8801f17 	ldw	r2,124(sp)
 8007148:	94009a0e 	bge	r18,r16,80073b4 <___svfprintf_internal_r+0x1108>
 800714c:	014200b4 	movhi	r5,2050
 8007150:	2945fe84 	addi	r5,r5,6138
 8007154:	d9402b15 	stw	r5,172(sp)
 8007158:	054001c4 	movi	r21,7
 800715c:	dcc02f17 	ldw	r19,188(sp)
 8007160:	00000306 	br	8007170 <___svfprintf_internal_r+0xec4>
 8007164:	42000204 	addi	r8,r8,8
 8007168:	843ffc04 	addi	r16,r16,-16
 800716c:	9400940e 	bge	r18,r16,80073c0 <___svfprintf_internal_r+0x1114>
 8007170:	18c00404 	addi	r3,r3,16
 8007174:	10800044 	addi	r2,r2,1
 8007178:	45000015 	stw	r20,0(r8)
 800717c:	44800115 	stw	r18,4(r8)
 8007180:	d8c02015 	stw	r3,128(sp)
 8007184:	d8801f15 	stw	r2,124(sp)
 8007188:	a8bff60e 	bge	r21,r2,8007164 <__alt_data_end+0xfc007164>
 800718c:	9809883a 	mov	r4,r19
 8007190:	b80b883a 	mov	r5,r23
 8007194:	b00d883a 	mov	r6,r22
 8007198:	800ee4c0 	call	800ee4c <__ssprint_r>
 800719c:	103d0b1e 	bne	r2,zero,80065cc <__alt_data_end+0xfc0065cc>
 80071a0:	d8c02017 	ldw	r3,128(sp)
 80071a4:	d8801f17 	ldw	r2,124(sp)
 80071a8:	da000404 	addi	r8,sp,16
 80071ac:	003fee06 	br	8007168 <__alt_data_end+0xfc007168>
 80071b0:	dac02e17 	ldw	r11,184(sp)
 80071b4:	db002a17 	ldw	r12,168(sp)
 80071b8:	5b2bc83a 	sub	r21,r11,r12
 80071bc:	057ddc0e 	bge	zero,r21,8006930 <__alt_data_end+0xfc006930>
 80071c0:	07000404 	movi	fp,16
 80071c4:	d8801f17 	ldw	r2,124(sp)
 80071c8:	e5435d0e 	bge	fp,r21,8007f40 <___svfprintf_internal_r+0x1c94>
 80071cc:	014200b4 	movhi	r5,2050
 80071d0:	a809883a 	mov	r4,r21
 80071d4:	2945fe84 	addi	r5,r5,6138
 80071d8:	dc002c15 	stw	r16,176(sp)
 80071dc:	902b883a 	mov	r21,r18
 80071e0:	d9402b15 	stw	r5,172(sp)
 80071e4:	8825883a 	mov	r18,r17
 80071e8:	04c001c4 	movi	r19,7
 80071ec:	dc002f17 	ldw	r16,188(sp)
 80071f0:	2023883a 	mov	r17,r4
 80071f4:	00000306 	br	8007204 <___svfprintf_internal_r+0xf58>
 80071f8:	8c7ffc04 	addi	r17,r17,-16
 80071fc:	42000204 	addi	r8,r8,8
 8007200:	e440110e 	bge	fp,r17,8007248 <___svfprintf_internal_r+0xf9c>
 8007204:	18c00404 	addi	r3,r3,16
 8007208:	10800044 	addi	r2,r2,1
 800720c:	45000015 	stw	r20,0(r8)
 8007210:	47000115 	stw	fp,4(r8)
 8007214:	d8c02015 	stw	r3,128(sp)
 8007218:	d8801f15 	stw	r2,124(sp)
 800721c:	98bff60e 	bge	r19,r2,80071f8 <__alt_data_end+0xfc0071f8>
 8007220:	8009883a 	mov	r4,r16
 8007224:	b80b883a 	mov	r5,r23
 8007228:	b00d883a 	mov	r6,r22
 800722c:	800ee4c0 	call	800ee4c <__ssprint_r>
 8007230:	103ce61e 	bne	r2,zero,80065cc <__alt_data_end+0xfc0065cc>
 8007234:	8c7ffc04 	addi	r17,r17,-16
 8007238:	d8c02017 	ldw	r3,128(sp)
 800723c:	d8801f17 	ldw	r2,124(sp)
 8007240:	da000404 	addi	r8,sp,16
 8007244:	e47fef16 	blt	fp,r17,8007204 <__alt_data_end+0xfc007204>
 8007248:	dc002c17 	ldw	r16,176(sp)
 800724c:	8809883a 	mov	r4,r17
 8007250:	9023883a 	mov	r17,r18
 8007254:	a825883a 	mov	r18,r21
 8007258:	202b883a 	mov	r21,r4
 800725c:	dac02b17 	ldw	r11,172(sp)
 8007260:	1d47883a 	add	r3,r3,r21
 8007264:	10800044 	addi	r2,r2,1
 8007268:	42c00015 	stw	r11,0(r8)
 800726c:	45400115 	stw	r21,4(r8)
 8007270:	d8c02015 	stw	r3,128(sp)
 8007274:	d8801f15 	stw	r2,124(sp)
 8007278:	010001c4 	movi	r4,7
 800727c:	20818016 	blt	r4,r2,8007880 <___svfprintf_internal_r+0x15d4>
 8007280:	42000204 	addi	r8,r8,8
 8007284:	003daa06 	br	8006930 <__alt_data_end+0xfc006930>
 8007288:	d9403b17 	ldw	r5,236(sp)
 800728c:	b007883a 	mov	r3,r22
 8007290:	988003cc 	andi	r2,r19,15
 8007294:	e008973a 	slli	r4,fp,28
 8007298:	2885883a 	add	r2,r5,r2
 800729c:	9826d13a 	srli	r19,r19,4
 80072a0:	10800003 	ldbu	r2,0(r2)
 80072a4:	e038d13a 	srli	fp,fp,4
 80072a8:	18ffffc4 	addi	r3,r3,-1
 80072ac:	24e6b03a 	or	r19,r4,r19
 80072b0:	18800005 	stb	r2,0(r3)
 80072b4:	9f04b03a 	or	r2,r19,fp
 80072b8:	103ff51e 	bne	r2,zero,8007290 <__alt_data_end+0xfc007290>
 80072bc:	d8c03115 	stw	r3,196(sp)
 80072c0:	b0e5c83a 	sub	r18,r22,r3
 80072c4:	003d2d06 	br	800677c <__alt_data_end+0xfc00677c>
 80072c8:	db003317 	ldw	r12,204(sp)
 80072cc:	00800044 	movi	r2,1
 80072d0:	18c00044 	addi	r3,r3,1
 80072d4:	13014b0e 	bge	r2,r12,8007804 <___svfprintf_internal_r+0x1558>
 80072d8:	dc001f17 	ldw	r16,124(sp)
 80072dc:	dac03117 	ldw	r11,196(sp)
 80072e0:	00800044 	movi	r2,1
 80072e4:	84000044 	addi	r16,r16,1
 80072e8:	40800115 	stw	r2,4(r8)
 80072ec:	42c00015 	stw	r11,0(r8)
 80072f0:	d8c02015 	stw	r3,128(sp)
 80072f4:	dc001f15 	stw	r16,124(sp)
 80072f8:	008001c4 	movi	r2,7
 80072fc:	14014e16 	blt	r2,r16,8007838 <___svfprintf_internal_r+0x158c>
 8007300:	42000204 	addi	r8,r8,8
 8007304:	db003917 	ldw	r12,228(sp)
 8007308:	dac03517 	ldw	r11,212(sp)
 800730c:	84000044 	addi	r16,r16,1
 8007310:	1b07883a 	add	r3,r3,r12
 8007314:	42c00015 	stw	r11,0(r8)
 8007318:	43000115 	stw	r12,4(r8)
 800731c:	d8c02015 	stw	r3,128(sp)
 8007320:	dc001f15 	stw	r16,124(sp)
 8007324:	008001c4 	movi	r2,7
 8007328:	14014c16 	blt	r2,r16,800785c <___svfprintf_internal_r+0x15b0>
 800732c:	44800204 	addi	r18,r8,8
 8007330:	d9003717 	ldw	r4,220(sp)
 8007334:	d9403817 	ldw	r5,224(sp)
 8007338:	000d883a 	mov	r6,zero
 800733c:	000f883a 	mov	r7,zero
 8007340:	d8c03e15 	stw	r3,248(sp)
 8007344:	80137900 	call	8013790 <__eqdf2>
 8007348:	d8c03e17 	ldw	r3,248(sp)
 800734c:	db003317 	ldw	r12,204(sp)
 8007350:	10009526 	beq	r2,zero,80075a8 <___svfprintf_internal_r+0x12fc>
 8007354:	dac03117 	ldw	r11,196(sp)
 8007358:	60bfffc4 	addi	r2,r12,-1
 800735c:	1887883a 	add	r3,r3,r2
 8007360:	59000044 	addi	r4,r11,1
 8007364:	84000044 	addi	r16,r16,1
 8007368:	90800115 	stw	r2,4(r18)
 800736c:	91000015 	stw	r4,0(r18)
 8007370:	d8c02015 	stw	r3,128(sp)
 8007374:	dc001f15 	stw	r16,124(sp)
 8007378:	008001c4 	movi	r2,7
 800737c:	1400b316 	blt	r2,r16,800764c <___svfprintf_internal_r+0x13a0>
 8007380:	94800204 	addi	r18,r18,8
 8007384:	dac03a17 	ldw	r11,232(sp)
 8007388:	dd4022c4 	addi	r21,sp,139
 800738c:	84000044 	addi	r16,r16,1
 8007390:	58c7883a 	add	r3,r11,r3
 8007394:	95400015 	stw	r21,0(r18)
 8007398:	92c00115 	stw	r11,4(r18)
 800739c:	d8c02015 	stw	r3,128(sp)
 80073a0:	dc001f15 	stw	r16,124(sp)
 80073a4:	008001c4 	movi	r2,7
 80073a8:	14000e16 	blt	r2,r16,80073e4 <___svfprintf_internal_r+0x1138>
 80073ac:	92000204 	addi	r8,r18,8
 80073b0:	003da006 	br	8006a34 <__alt_data_end+0xfc006a34>
 80073b4:	010200b4 	movhi	r4,2050
 80073b8:	2105fe84 	addi	r4,r4,6138
 80073bc:	d9002b15 	stw	r4,172(sp)
 80073c0:	dac02b17 	ldw	r11,172(sp)
 80073c4:	1c07883a 	add	r3,r3,r16
 80073c8:	44000115 	stw	r16,4(r8)
 80073cc:	42c00015 	stw	r11,0(r8)
 80073d0:	10800044 	addi	r2,r2,1
 80073d4:	d8c02015 	stw	r3,128(sp)
 80073d8:	d8801f15 	stw	r2,124(sp)
 80073dc:	010001c4 	movi	r4,7
 80073e0:	20bd930e 	bge	r4,r2,8006a30 <__alt_data_end+0xfc006a30>
 80073e4:	d9002f17 	ldw	r4,188(sp)
 80073e8:	b80b883a 	mov	r5,r23
 80073ec:	b00d883a 	mov	r6,r22
 80073f0:	800ee4c0 	call	800ee4c <__ssprint_r>
 80073f4:	103c751e 	bne	r2,zero,80065cc <__alt_data_end+0xfc0065cc>
 80073f8:	d8c02017 	ldw	r3,128(sp)
 80073fc:	da000404 	addi	r8,sp,16
 8007400:	003d8c06 	br	8006a34 <__alt_data_end+0xfc006a34>
 8007404:	d9002f17 	ldw	r4,188(sp)
 8007408:	b80b883a 	mov	r5,r23
 800740c:	b00d883a 	mov	r6,r22
 8007410:	800ee4c0 	call	800ee4c <__ssprint_r>
 8007414:	103dc326 	beq	r2,zero,8006b24 <__alt_data_end+0xfc006b24>
 8007418:	003c6c06 	br	80065cc <__alt_data_end+0xfc0065cc>
 800741c:	10803fcc 	andi	r2,r2,255
 8007420:	1000201e 	bne	r2,zero,80074a4 <___svfprintf_internal_r+0x11f8>
 8007424:	8880004c 	andi	r2,r17,1
 8007428:	10001e26 	beq	r2,zero,80074a4 <___svfprintf_internal_r+0x11f8>
 800742c:	00800c04 	movi	r2,48
 8007430:	d8c01dc4 	addi	r3,sp,119
 8007434:	d8801dc5 	stb	r2,119(sp)
 8007438:	dc803d17 	ldw	r18,244(sp)
 800743c:	d8c03115 	stw	r3,196(sp)
 8007440:	003cce06 	br	800677c <__alt_data_end+0xfc00677c>
 8007444:	d9002f17 	ldw	r4,188(sp)
 8007448:	b80b883a 	mov	r5,r23
 800744c:	b00d883a 	mov	r6,r22
 8007450:	800ee4c0 	call	800ee4c <__ssprint_r>
 8007454:	103c5d1e 	bne	r2,zero,80065cc <__alt_data_end+0xfc0065cc>
 8007458:	d8c02017 	ldw	r3,128(sp)
 800745c:	da000404 	addi	r8,sp,16
 8007460:	003d6706 	br	8006a00 <__alt_data_end+0xfc006a00>
 8007464:	d9002f17 	ldw	r4,188(sp)
 8007468:	b80b883a 	mov	r5,r23
 800746c:	b00d883a 	mov	r6,r22
 8007470:	800ee4c0 	call	800ee4c <__ssprint_r>
 8007474:	103c551e 	bne	r2,zero,80065cc <__alt_data_end+0xfc0065cc>
 8007478:	d8c02017 	ldw	r3,128(sp)
 800747c:	da000404 	addi	r8,sp,16
 8007480:	003d1a06 	br	80068ec <__alt_data_end+0xfc0068ec>
 8007484:	d9002f17 	ldw	r4,188(sp)
 8007488:	b80b883a 	mov	r5,r23
 800748c:	b00d883a 	mov	r6,r22
 8007490:	800ee4c0 	call	800ee4c <__ssprint_r>
 8007494:	103c4d1e 	bne	r2,zero,80065cc <__alt_data_end+0xfc0065cc>
 8007498:	d8c02017 	ldw	r3,128(sp)
 800749c:	da000404 	addi	r8,sp,16
 80074a0:	003d2006 	br	8006924 <__alt_data_end+0xfc006924>
 80074a4:	0025883a 	mov	r18,zero
 80074a8:	dd803115 	stw	r22,196(sp)
 80074ac:	003cb306 	br	800677c <__alt_data_end+0xfc00677c>
 80074b0:	dc002617 	ldw	r16,152(sp)
 80074b4:	0401480e 	bge	zero,r16,80079d8 <___svfprintf_internal_r+0x172c>
 80074b8:	db003117 	ldw	r12,196(sp)
 80074bc:	dac03317 	ldw	r11,204(sp)
 80074c0:	62e1883a 	add	r16,r12,r11
 80074c4:	db003417 	ldw	r12,208(sp)
 80074c8:	5825883a 	mov	r18,r11
 80074cc:	62c0010e 	bge	r12,r11,80074d4 <___svfprintf_internal_r+0x1228>
 80074d0:	6025883a 	mov	r18,r12
 80074d4:	04800b0e 	bge	zero,r18,8007504 <___svfprintf_internal_r+0x1258>
 80074d8:	d8801f17 	ldw	r2,124(sp)
 80074dc:	dac03117 	ldw	r11,196(sp)
 80074e0:	1c87883a 	add	r3,r3,r18
 80074e4:	10800044 	addi	r2,r2,1
 80074e8:	42c00015 	stw	r11,0(r8)
 80074ec:	44800115 	stw	r18,4(r8)
 80074f0:	d8c02015 	stw	r3,128(sp)
 80074f4:	d8801f15 	stw	r2,124(sp)
 80074f8:	010001c4 	movi	r4,7
 80074fc:	20823f16 	blt	r4,r2,8007dfc <___svfprintf_internal_r+0x1b50>
 8007500:	42000204 	addi	r8,r8,8
 8007504:	90023b16 	blt	r18,zero,8007df4 <___svfprintf_internal_r+0x1b48>
 8007508:	db003417 	ldw	r12,208(sp)
 800750c:	64a5c83a 	sub	r18,r12,r18
 8007510:	0480780e 	bge	zero,r18,80076f4 <___svfprintf_internal_r+0x1448>
 8007514:	05400404 	movi	r21,16
 8007518:	d8801f17 	ldw	r2,124(sp)
 800751c:	ac81140e 	bge	r21,r18,8007970 <___svfprintf_internal_r+0x16c4>
 8007520:	014200b4 	movhi	r5,2050
 8007524:	2945fe84 	addi	r5,r5,6138
 8007528:	d9402b15 	stw	r5,172(sp)
 800752c:	070001c4 	movi	fp,7
 8007530:	dcc02f17 	ldw	r19,188(sp)
 8007534:	00000306 	br	8007544 <___svfprintf_internal_r+0x1298>
 8007538:	42000204 	addi	r8,r8,8
 800753c:	94bffc04 	addi	r18,r18,-16
 8007540:	ac810e0e 	bge	r21,r18,800797c <___svfprintf_internal_r+0x16d0>
 8007544:	18c00404 	addi	r3,r3,16
 8007548:	10800044 	addi	r2,r2,1
 800754c:	45000015 	stw	r20,0(r8)
 8007550:	45400115 	stw	r21,4(r8)
 8007554:	d8c02015 	stw	r3,128(sp)
 8007558:	d8801f15 	stw	r2,124(sp)
 800755c:	e0bff60e 	bge	fp,r2,8007538 <__alt_data_end+0xfc007538>
 8007560:	9809883a 	mov	r4,r19
 8007564:	b80b883a 	mov	r5,r23
 8007568:	b00d883a 	mov	r6,r22
 800756c:	800ee4c0 	call	800ee4c <__ssprint_r>
 8007570:	103c161e 	bne	r2,zero,80065cc <__alt_data_end+0xfc0065cc>
 8007574:	d8c02017 	ldw	r3,128(sp)
 8007578:	d8801f17 	ldw	r2,124(sp)
 800757c:	da000404 	addi	r8,sp,16
 8007580:	003fee06 	br	800753c <__alt_data_end+0xfc00753c>
 8007584:	d9002f17 	ldw	r4,188(sp)
 8007588:	b80b883a 	mov	r5,r23
 800758c:	b00d883a 	mov	r6,r22
 8007590:	800ee4c0 	call	800ee4c <__ssprint_r>
 8007594:	103c0d1e 	bne	r2,zero,80065cc <__alt_data_end+0xfc0065cc>
 8007598:	d8c02017 	ldw	r3,128(sp)
 800759c:	d8802787 	ldb	r2,158(sp)
 80075a0:	da000404 	addi	r8,sp,16
 80075a4:	003cc406 	br	80068b8 <__alt_data_end+0xfc0068b8>
 80075a8:	657fffc4 	addi	r21,r12,-1
 80075ac:	057f750e 	bge	zero,r21,8007384 <__alt_data_end+0xfc007384>
 80075b0:	07000404 	movi	fp,16
 80075b4:	e542ef0e 	bge	fp,r21,8008174 <___svfprintf_internal_r+0x1ec8>
 80075b8:	010200b4 	movhi	r4,2050
 80075bc:	2105fe84 	addi	r4,r4,6138
 80075c0:	d9002b15 	stw	r4,172(sp)
 80075c4:	01c001c4 	movi	r7,7
 80075c8:	dcc02f17 	ldw	r19,188(sp)
 80075cc:	00000306 	br	80075dc <___svfprintf_internal_r+0x1330>
 80075d0:	ad7ffc04 	addi	r21,r21,-16
 80075d4:	94800204 	addi	r18,r18,8
 80075d8:	e540130e 	bge	fp,r21,8007628 <___svfprintf_internal_r+0x137c>
 80075dc:	18c00404 	addi	r3,r3,16
 80075e0:	84000044 	addi	r16,r16,1
 80075e4:	95000015 	stw	r20,0(r18)
 80075e8:	97000115 	stw	fp,4(r18)
 80075ec:	d8c02015 	stw	r3,128(sp)
 80075f0:	dc001f15 	stw	r16,124(sp)
 80075f4:	3c3ff60e 	bge	r7,r16,80075d0 <__alt_data_end+0xfc0075d0>
 80075f8:	9809883a 	mov	r4,r19
 80075fc:	b80b883a 	mov	r5,r23
 8007600:	b00d883a 	mov	r6,r22
 8007604:	d9c03e15 	stw	r7,248(sp)
 8007608:	800ee4c0 	call	800ee4c <__ssprint_r>
 800760c:	d9c03e17 	ldw	r7,248(sp)
 8007610:	103bee1e 	bne	r2,zero,80065cc <__alt_data_end+0xfc0065cc>
 8007614:	ad7ffc04 	addi	r21,r21,-16
 8007618:	d8c02017 	ldw	r3,128(sp)
 800761c:	dc001f17 	ldw	r16,124(sp)
 8007620:	dc800404 	addi	r18,sp,16
 8007624:	e57fed16 	blt	fp,r21,80075dc <__alt_data_end+0xfc0075dc>
 8007628:	dac02b17 	ldw	r11,172(sp)
 800762c:	1d47883a 	add	r3,r3,r21
 8007630:	84000044 	addi	r16,r16,1
 8007634:	92c00015 	stw	r11,0(r18)
 8007638:	95400115 	stw	r21,4(r18)
 800763c:	d8c02015 	stw	r3,128(sp)
 8007640:	dc001f15 	stw	r16,124(sp)
 8007644:	008001c4 	movi	r2,7
 8007648:	143f4d0e 	bge	r2,r16,8007380 <__alt_data_end+0xfc007380>
 800764c:	d9002f17 	ldw	r4,188(sp)
 8007650:	b80b883a 	mov	r5,r23
 8007654:	b00d883a 	mov	r6,r22
 8007658:	800ee4c0 	call	800ee4c <__ssprint_r>
 800765c:	103bdb1e 	bne	r2,zero,80065cc <__alt_data_end+0xfc0065cc>
 8007660:	d8c02017 	ldw	r3,128(sp)
 8007664:	dc001f17 	ldw	r16,124(sp)
 8007668:	dc800404 	addi	r18,sp,16
 800766c:	003f4506 	br	8007384 <__alt_data_end+0xfc007384>
 8007670:	00800084 	movi	r2,2
 8007674:	9f06b03a 	or	r3,r19,fp
 8007678:	003d3806 	br	8006b5c <__alt_data_end+0xfc006b5c>
 800767c:	dac02d17 	ldw	r11,180(sp)
 8007680:	0039883a 	mov	fp,zero
 8007684:	0005883a 	mov	r2,zero
 8007688:	5cc00017 	ldw	r19,0(r11)
 800768c:	5ac00104 	addi	r11,r11,4
 8007690:	dac02d15 	stw	r11,180(sp)
 8007694:	9807883a 	mov	r3,r19
 8007698:	003d3006 	br	8006b5c <__alt_data_end+0xfc006b5c>
 800769c:	1cc00017 	ldw	r19,0(r3)
 80076a0:	dac02d17 	ldw	r11,180(sp)
 80076a4:	9839d7fa 	srai	fp,r19,31
 80076a8:	5ac00104 	addi	r11,r11,4
 80076ac:	dac02d15 	stw	r11,180(sp)
 80076b0:	e005883a 	mov	r2,fp
 80076b4:	003c0a06 	br	80066e0 <__alt_data_end+0xfc0066e0>
 80076b8:	db002d17 	ldw	r12,180(sp)
 80076bc:	0039883a 	mov	fp,zero
 80076c0:	00800044 	movi	r2,1
 80076c4:	64c00017 	ldw	r19,0(r12)
 80076c8:	63000104 	addi	r12,r12,4
 80076cc:	db002d15 	stw	r12,180(sp)
 80076d0:	9807883a 	mov	r3,r19
 80076d4:	003d2106 	br	8006b5c <__alt_data_end+0xfc006b5c>
 80076d8:	d9002f17 	ldw	r4,188(sp)
 80076dc:	b80b883a 	mov	r5,r23
 80076e0:	b00d883a 	mov	r6,r22
 80076e4:	800ee4c0 	call	800ee4c <__ssprint_r>
 80076e8:	103bb81e 	bne	r2,zero,80065cc <__alt_data_end+0xfc0065cc>
 80076ec:	d8c02017 	ldw	r3,128(sp)
 80076f0:	da000404 	addi	r8,sp,16
 80076f4:	db003117 	ldw	r12,196(sp)
 80076f8:	dac03417 	ldw	r11,208(sp)
 80076fc:	d8802617 	ldw	r2,152(sp)
 8007700:	62e5883a 	add	r18,r12,r11
 8007704:	db003317 	ldw	r12,204(sp)
 8007708:	13000216 	blt	r2,r12,8007714 <___svfprintf_internal_r+0x1468>
 800770c:	8900004c 	andi	r4,r17,1
 8007710:	20000c26 	beq	r4,zero,8007744 <___svfprintf_internal_r+0x1498>
 8007714:	dac03917 	ldw	r11,228(sp)
 8007718:	d9001f17 	ldw	r4,124(sp)
 800771c:	db003517 	ldw	r12,212(sp)
 8007720:	1ac7883a 	add	r3,r3,r11
 8007724:	21000044 	addi	r4,r4,1
 8007728:	43000015 	stw	r12,0(r8)
 800772c:	42c00115 	stw	r11,4(r8)
 8007730:	d8c02015 	stw	r3,128(sp)
 8007734:	d9001f15 	stw	r4,124(sp)
 8007738:	014001c4 	movi	r5,7
 800773c:	2901b716 	blt	r5,r4,8007e1c <___svfprintf_internal_r+0x1b70>
 8007740:	42000204 	addi	r8,r8,8
 8007744:	dac03317 	ldw	r11,204(sp)
 8007748:	8489c83a 	sub	r4,r16,r18
 800774c:	5885c83a 	sub	r2,r11,r2
 8007750:	1021883a 	mov	r16,r2
 8007754:	2080010e 	bge	r4,r2,800775c <___svfprintf_internal_r+0x14b0>
 8007758:	2021883a 	mov	r16,r4
 800775c:	04000a0e 	bge	zero,r16,8007788 <___svfprintf_internal_r+0x14dc>
 8007760:	d9001f17 	ldw	r4,124(sp)
 8007764:	1c07883a 	add	r3,r3,r16
 8007768:	44800015 	stw	r18,0(r8)
 800776c:	21000044 	addi	r4,r4,1
 8007770:	44000115 	stw	r16,4(r8)
 8007774:	d8c02015 	stw	r3,128(sp)
 8007778:	d9001f15 	stw	r4,124(sp)
 800777c:	014001c4 	movi	r5,7
 8007780:	2901bf16 	blt	r5,r4,8007e80 <___svfprintf_internal_r+0x1bd4>
 8007784:	42000204 	addi	r8,r8,8
 8007788:	8001bb16 	blt	r16,zero,8007e78 <___svfprintf_internal_r+0x1bcc>
 800778c:	1421c83a 	sub	r16,r2,r16
 8007790:	043ca80e 	bge	zero,r16,8006a34 <__alt_data_end+0xfc006a34>
 8007794:	04800404 	movi	r18,16
 8007798:	d8801f17 	ldw	r2,124(sp)
 800779c:	943f050e 	bge	r18,r16,80073b4 <__alt_data_end+0xfc0073b4>
 80077a0:	014200b4 	movhi	r5,2050
 80077a4:	2945fe84 	addi	r5,r5,6138
 80077a8:	d9402b15 	stw	r5,172(sp)
 80077ac:	054001c4 	movi	r21,7
 80077b0:	dcc02f17 	ldw	r19,188(sp)
 80077b4:	00000306 	br	80077c4 <___svfprintf_internal_r+0x1518>
 80077b8:	42000204 	addi	r8,r8,8
 80077bc:	843ffc04 	addi	r16,r16,-16
 80077c0:	943eff0e 	bge	r18,r16,80073c0 <__alt_data_end+0xfc0073c0>
 80077c4:	18c00404 	addi	r3,r3,16
 80077c8:	10800044 	addi	r2,r2,1
 80077cc:	45000015 	stw	r20,0(r8)
 80077d0:	44800115 	stw	r18,4(r8)
 80077d4:	d8c02015 	stw	r3,128(sp)
 80077d8:	d8801f15 	stw	r2,124(sp)
 80077dc:	a8bff60e 	bge	r21,r2,80077b8 <__alt_data_end+0xfc0077b8>
 80077e0:	9809883a 	mov	r4,r19
 80077e4:	b80b883a 	mov	r5,r23
 80077e8:	b00d883a 	mov	r6,r22
 80077ec:	800ee4c0 	call	800ee4c <__ssprint_r>
 80077f0:	103b761e 	bne	r2,zero,80065cc <__alt_data_end+0xfc0065cc>
 80077f4:	d8c02017 	ldw	r3,128(sp)
 80077f8:	d8801f17 	ldw	r2,124(sp)
 80077fc:	da000404 	addi	r8,sp,16
 8007800:	003fee06 	br	80077bc <__alt_data_end+0xfc0077bc>
 8007804:	8888703a 	and	r4,r17,r2
 8007808:	203eb31e 	bne	r4,zero,80072d8 <__alt_data_end+0xfc0072d8>
 800780c:	dc001f17 	ldw	r16,124(sp)
 8007810:	db003117 	ldw	r12,196(sp)
 8007814:	40800115 	stw	r2,4(r8)
 8007818:	84000044 	addi	r16,r16,1
 800781c:	43000015 	stw	r12,0(r8)
 8007820:	d8c02015 	stw	r3,128(sp)
 8007824:	dc001f15 	stw	r16,124(sp)
 8007828:	008001c4 	movi	r2,7
 800782c:	143f8716 	blt	r2,r16,800764c <__alt_data_end+0xfc00764c>
 8007830:	44800204 	addi	r18,r8,8
 8007834:	003ed306 	br	8007384 <__alt_data_end+0xfc007384>
 8007838:	d9002f17 	ldw	r4,188(sp)
 800783c:	b80b883a 	mov	r5,r23
 8007840:	b00d883a 	mov	r6,r22
 8007844:	800ee4c0 	call	800ee4c <__ssprint_r>
 8007848:	103b601e 	bne	r2,zero,80065cc <__alt_data_end+0xfc0065cc>
 800784c:	d8c02017 	ldw	r3,128(sp)
 8007850:	dc001f17 	ldw	r16,124(sp)
 8007854:	da000404 	addi	r8,sp,16
 8007858:	003eaa06 	br	8007304 <__alt_data_end+0xfc007304>
 800785c:	d9002f17 	ldw	r4,188(sp)
 8007860:	b80b883a 	mov	r5,r23
 8007864:	b00d883a 	mov	r6,r22
 8007868:	800ee4c0 	call	800ee4c <__ssprint_r>
 800786c:	103b571e 	bne	r2,zero,80065cc <__alt_data_end+0xfc0065cc>
 8007870:	d8c02017 	ldw	r3,128(sp)
 8007874:	dc001f17 	ldw	r16,124(sp)
 8007878:	dc800404 	addi	r18,sp,16
 800787c:	003eac06 	br	8007330 <__alt_data_end+0xfc007330>
 8007880:	d9002f17 	ldw	r4,188(sp)
 8007884:	b80b883a 	mov	r5,r23
 8007888:	b00d883a 	mov	r6,r22
 800788c:	800ee4c0 	call	800ee4c <__ssprint_r>
 8007890:	103b4e1e 	bne	r2,zero,80065cc <__alt_data_end+0xfc0065cc>
 8007894:	d8c02017 	ldw	r3,128(sp)
 8007898:	da000404 	addi	r8,sp,16
 800789c:	003c2406 	br	8006930 <__alt_data_end+0xfc006930>
 80078a0:	da004015 	stw	r8,256(sp)
 80078a4:	da403f15 	stw	r9,252(sp)
 80078a8:	800ebdc0 	call	800ebdc <__fpclassifyd>
 80078ac:	da004017 	ldw	r8,256(sp)
 80078b0:	da403f17 	ldw	r9,252(sp)
 80078b4:	1000951e 	bne	r2,zero,8007b0c <___svfprintf_internal_r+0x1860>
 80078b8:	008011c4 	movi	r2,71
 80078bc:	1400fb16 	blt	r2,r16,8007cac <___svfprintf_internal_r+0x1a00>
 80078c0:	030200b4 	movhi	r12,2050
 80078c4:	6305f004 	addi	r12,r12,6080
 80078c8:	db003115 	stw	r12,196(sp)
 80078cc:	00c000c4 	movi	r3,3
 80078d0:	00bfdfc4 	movi	r2,-129
 80078d4:	d8c02a15 	stw	r3,168(sp)
 80078d8:	88a2703a 	and	r17,r17,r2
 80078dc:	dd402783 	ldbu	r21,158(sp)
 80078e0:	dcc02d15 	stw	r19,180(sp)
 80078e4:	1825883a 	mov	r18,r3
 80078e8:	d8003215 	stw	zero,200(sp)
 80078ec:	d8003415 	stw	zero,208(sp)
 80078f0:	003ba706 	br	8006790 <__alt_data_end+0xfc006790>
 80078f4:	8880040c 	andi	r2,r17,16
 80078f8:	1000091e 	bne	r2,zero,8007920 <___svfprintf_internal_r+0x1674>
 80078fc:	8c40100c 	andi	r17,r17,64
 8007900:	88000726 	beq	r17,zero,8007920 <___svfprintf_internal_r+0x1674>
 8007904:	db002d17 	ldw	r12,180(sp)
 8007908:	dac03017 	ldw	r11,192(sp)
 800790c:	60800017 	ldw	r2,0(r12)
 8007910:	63000104 	addi	r12,r12,4
 8007914:	db002d15 	stw	r12,180(sp)
 8007918:	12c0000d 	sth	r11,0(r2)
 800791c:	003a8f06 	br	800635c <__alt_data_end+0xfc00635c>
 8007920:	db002d17 	ldw	r12,180(sp)
 8007924:	dac03017 	ldw	r11,192(sp)
 8007928:	60800017 	ldw	r2,0(r12)
 800792c:	63000104 	addi	r12,r12,4
 8007930:	db002d15 	stw	r12,180(sp)
 8007934:	12c00015 	stw	r11,0(r2)
 8007938:	003a8806 	br	800635c <__alt_data_end+0xfc00635c>
 800793c:	88c0100c 	andi	r3,r17,64
 8007940:	1800e926 	beq	r3,zero,8007ce8 <___svfprintf_internal_r+0x1a3c>
 8007944:	dac02d17 	ldw	r11,180(sp)
 8007948:	14c0000b 	ldhu	r19,0(r2)
 800794c:	0039883a 	mov	fp,zero
 8007950:	5ac00104 	addi	r11,r11,4
 8007954:	dac02d15 	stw	r11,180(sp)
 8007958:	003d1406 	br	8006dac <__alt_data_end+0xfc006dac>
 800795c:	1c000007 	ldb	r16,0(r3)
 8007960:	1805883a 	mov	r2,r3
 8007964:	003aa706 	br	8006404 <__alt_data_end+0xfc006404>
 8007968:	00800084 	movi	r2,2
 800796c:	003c7b06 	br	8006b5c <__alt_data_end+0xfc006b5c>
 8007970:	010200b4 	movhi	r4,2050
 8007974:	2105fe84 	addi	r4,r4,6138
 8007978:	d9002b15 	stw	r4,172(sp)
 800797c:	dac02b17 	ldw	r11,172(sp)
 8007980:	1c87883a 	add	r3,r3,r18
 8007984:	10800044 	addi	r2,r2,1
 8007988:	42c00015 	stw	r11,0(r8)
 800798c:	44800115 	stw	r18,4(r8)
 8007990:	d8c02015 	stw	r3,128(sp)
 8007994:	d8801f15 	stw	r2,124(sp)
 8007998:	010001c4 	movi	r4,7
 800799c:	20bf4e16 	blt	r4,r2,80076d8 <__alt_data_end+0xfc0076d8>
 80079a0:	42000204 	addi	r8,r8,8
 80079a4:	003f5306 	br	80076f4 <__alt_data_end+0xfc0076f4>
 80079a8:	010200b4 	movhi	r4,2050
 80079ac:	2105fe84 	addi	r4,r4,6138
 80079b0:	d9002b15 	stw	r4,172(sp)
 80079b4:	003c0806 	br	80069d8 <__alt_data_end+0xfc0069d8>
 80079b8:	d9002f17 	ldw	r4,188(sp)
 80079bc:	b80b883a 	mov	r5,r23
 80079c0:	b00d883a 	mov	r6,r22
 80079c4:	800ee4c0 	call	800ee4c <__ssprint_r>
 80079c8:	103b001e 	bne	r2,zero,80065cc <__alt_data_end+0xfc0065cc>
 80079cc:	d8c02017 	ldw	r3,128(sp)
 80079d0:	da000404 	addi	r8,sp,16
 80079d4:	003dc606 	br	80070f0 <__alt_data_end+0xfc0070f0>
 80079d8:	d8801f17 	ldw	r2,124(sp)
 80079dc:	030200b4 	movhi	r12,2050
 80079e0:	01000044 	movi	r4,1
 80079e4:	18c00044 	addi	r3,r3,1
 80079e8:	10800044 	addi	r2,r2,1
 80079ec:	6305fe04 	addi	r12,r12,6136
 80079f0:	41000115 	stw	r4,4(r8)
 80079f4:	43000015 	stw	r12,0(r8)
 80079f8:	d8c02015 	stw	r3,128(sp)
 80079fc:	d8801f15 	stw	r2,124(sp)
 8007a00:	010001c4 	movi	r4,7
 8007a04:	2080ad16 	blt	r4,r2,8007cbc <___svfprintf_internal_r+0x1a10>
 8007a08:	42000204 	addi	r8,r8,8
 8007a0c:	8000041e 	bne	r16,zero,8007a20 <___svfprintf_internal_r+0x1774>
 8007a10:	dac03317 	ldw	r11,204(sp)
 8007a14:	5800021e 	bne	r11,zero,8007a20 <___svfprintf_internal_r+0x1774>
 8007a18:	8880004c 	andi	r2,r17,1
 8007a1c:	103c0526 	beq	r2,zero,8006a34 <__alt_data_end+0xfc006a34>
 8007a20:	db003917 	ldw	r12,228(sp)
 8007a24:	d8801f17 	ldw	r2,124(sp)
 8007a28:	dac03517 	ldw	r11,212(sp)
 8007a2c:	1b07883a 	add	r3,r3,r12
 8007a30:	10800044 	addi	r2,r2,1
 8007a34:	42c00015 	stw	r11,0(r8)
 8007a38:	43000115 	stw	r12,4(r8)
 8007a3c:	d8c02015 	stw	r3,128(sp)
 8007a40:	d8801f15 	stw	r2,124(sp)
 8007a44:	010001c4 	movi	r4,7
 8007a48:	20818816 	blt	r4,r2,800806c <___svfprintf_internal_r+0x1dc0>
 8007a4c:	42000204 	addi	r8,r8,8
 8007a50:	0421c83a 	sub	r16,zero,r16
 8007a54:	0400bc0e 	bge	zero,r16,8007d48 <___svfprintf_internal_r+0x1a9c>
 8007a58:	04800404 	movi	r18,16
 8007a5c:	9400f80e 	bge	r18,r16,8007e40 <___svfprintf_internal_r+0x1b94>
 8007a60:	010200b4 	movhi	r4,2050
 8007a64:	2105fe84 	addi	r4,r4,6138
 8007a68:	d9002b15 	stw	r4,172(sp)
 8007a6c:	054001c4 	movi	r21,7
 8007a70:	dcc02f17 	ldw	r19,188(sp)
 8007a74:	00000306 	br	8007a84 <___svfprintf_internal_r+0x17d8>
 8007a78:	42000204 	addi	r8,r8,8
 8007a7c:	843ffc04 	addi	r16,r16,-16
 8007a80:	9400f20e 	bge	r18,r16,8007e4c <___svfprintf_internal_r+0x1ba0>
 8007a84:	18c00404 	addi	r3,r3,16
 8007a88:	10800044 	addi	r2,r2,1
 8007a8c:	45000015 	stw	r20,0(r8)
 8007a90:	44800115 	stw	r18,4(r8)
 8007a94:	d8c02015 	stw	r3,128(sp)
 8007a98:	d8801f15 	stw	r2,124(sp)
 8007a9c:	a8bff60e 	bge	r21,r2,8007a78 <__alt_data_end+0xfc007a78>
 8007aa0:	9809883a 	mov	r4,r19
 8007aa4:	b80b883a 	mov	r5,r23
 8007aa8:	b00d883a 	mov	r6,r22
 8007aac:	800ee4c0 	call	800ee4c <__ssprint_r>
 8007ab0:	103ac61e 	bne	r2,zero,80065cc <__alt_data_end+0xfc0065cc>
 8007ab4:	d8c02017 	ldw	r3,128(sp)
 8007ab8:	d8801f17 	ldw	r2,124(sp)
 8007abc:	da000404 	addi	r8,sp,16
 8007ac0:	003fee06 	br	8007a7c <__alt_data_end+0xfc007a7c>
 8007ac4:	db002e17 	ldw	r12,184(sp)
 8007ac8:	1805883a 	mov	r2,r3
 8007acc:	dac02d15 	stw	r11,180(sp)
 8007ad0:	0319c83a 	sub	r12,zero,r12
 8007ad4:	db002e15 	stw	r12,184(sp)
 8007ad8:	003ad106 	br	8006620 <__alt_data_end+0xfc006620>
 8007adc:	18800044 	addi	r2,r3,1
 8007ae0:	8c400814 	ori	r17,r17,32
 8007ae4:	1c000047 	ldb	r16,1(r3)
 8007ae8:	003a4606 	br	8006404 <__alt_data_end+0xfc006404>
 8007aec:	d9002f17 	ldw	r4,188(sp)
 8007af0:	b80b883a 	mov	r5,r23
 8007af4:	b00d883a 	mov	r6,r22
 8007af8:	800ee4c0 	call	800ee4c <__ssprint_r>
 8007afc:	103ab31e 	bne	r2,zero,80065cc <__alt_data_end+0xfc0065cc>
 8007b00:	d8c02017 	ldw	r3,128(sp)
 8007b04:	da000404 	addi	r8,sp,16
 8007b08:	003d8a06 	br	8007134 <__alt_data_end+0xfc007134>
 8007b0c:	057ff7c4 	movi	r21,-33
 8007b10:	00bfffc4 	movi	r2,-1
 8007b14:	856a703a 	and	r21,r16,r21
 8007b18:	48807126 	beq	r9,r2,8007ce0 <___svfprintf_internal_r+0x1a34>
 8007b1c:	008011c4 	movi	r2,71
 8007b20:	a8814f26 	beq	r21,r2,8008060 <___svfprintf_internal_r+0x1db4>
 8007b24:	db003817 	ldw	r12,224(sp)
 8007b28:	8ac04014 	ori	r11,r17,256
 8007b2c:	dac02d15 	stw	r11,180(sp)
 8007b30:	60015816 	blt	r12,zero,8008094 <___svfprintf_internal_r+0x1de8>
 8007b34:	dc803817 	ldw	r18,224(sp)
 8007b38:	d8002a05 	stb	zero,168(sp)
 8007b3c:	00801984 	movi	r2,102
 8007b40:	80808c26 	beq	r16,r2,8007d74 <___svfprintf_internal_r+0x1ac8>
 8007b44:	00801184 	movi	r2,70
 8007b48:	80808a26 	beq	r16,r2,8007d74 <___svfprintf_internal_r+0x1ac8>
 8007b4c:	00801144 	movi	r2,69
 8007b50:	a8815426 	beq	r21,r2,80080a4 <___svfprintf_internal_r+0x1df8>
 8007b54:	4839883a 	mov	fp,r9
 8007b58:	d8802604 	addi	r2,sp,152
 8007b5c:	d8800115 	stw	r2,4(sp)
 8007b60:	d9002f17 	ldw	r4,188(sp)
 8007b64:	d8802504 	addi	r2,sp,148
 8007b68:	d9403717 	ldw	r5,220(sp)
 8007b6c:	d8800215 	stw	r2,8(sp)
 8007b70:	d8802104 	addi	r2,sp,132
 8007b74:	df000015 	stw	fp,0(sp)
 8007b78:	d8800315 	stw	r2,12(sp)
 8007b7c:	900d883a 	mov	r6,r18
 8007b80:	01c00084 	movi	r7,2
 8007b84:	da004015 	stw	r8,256(sp)
 8007b88:	da403f15 	stw	r9,252(sp)
 8007b8c:	800a5dc0 	call	800a5dc <_dtoa_r>
 8007b90:	d8803115 	stw	r2,196(sp)
 8007b94:	008019c4 	movi	r2,103
 8007b98:	da004017 	ldw	r8,256(sp)
 8007b9c:	da403f17 	ldw	r9,252(sp)
 8007ba0:	80800226 	beq	r16,r2,8007bac <___svfprintf_internal_r+0x1900>
 8007ba4:	008011c4 	movi	r2,71
 8007ba8:	8080841e 	bne	r16,r2,8007dbc <___svfprintf_internal_r+0x1b10>
 8007bac:	8880004c 	andi	r2,r17,1
 8007bb0:	10015126 	beq	r2,zero,80080f8 <___svfprintf_internal_r+0x1e4c>
 8007bb4:	db003117 	ldw	r12,196(sp)
 8007bb8:	6715883a 	add	r10,r12,fp
 8007bbc:	d9003717 	ldw	r4,220(sp)
 8007bc0:	900b883a 	mov	r5,r18
 8007bc4:	000d883a 	mov	r6,zero
 8007bc8:	000f883a 	mov	r7,zero
 8007bcc:	da004015 	stw	r8,256(sp)
 8007bd0:	da403f15 	stw	r9,252(sp)
 8007bd4:	da803e15 	stw	r10,248(sp)
 8007bd8:	80137900 	call	8013790 <__eqdf2>
 8007bdc:	da004017 	ldw	r8,256(sp)
 8007be0:	da403f17 	ldw	r9,252(sp)
 8007be4:	da803e17 	ldw	r10,248(sp)
 8007be8:	1000d926 	beq	r2,zero,8007f50 <___svfprintf_internal_r+0x1ca4>
 8007bec:	d8802117 	ldw	r2,132(sp)
 8007bf0:	1280062e 	bgeu	r2,r10,8007c0c <___svfprintf_internal_r+0x1960>
 8007bf4:	01000c04 	movi	r4,48
 8007bf8:	10c00044 	addi	r3,r2,1
 8007bfc:	d8c02115 	stw	r3,132(sp)
 8007c00:	11000005 	stb	r4,0(r2)
 8007c04:	d8802117 	ldw	r2,132(sp)
 8007c08:	12bffb36 	bltu	r2,r10,8007bf8 <__alt_data_end+0xfc007bf8>
 8007c0c:	db003117 	ldw	r12,196(sp)
 8007c10:	1305c83a 	sub	r2,r2,r12
 8007c14:	d8803315 	stw	r2,204(sp)
 8007c18:	008011c4 	movi	r2,71
 8007c1c:	a880b626 	beq	r21,r2,8007ef8 <___svfprintf_internal_r+0x1c4c>
 8007c20:	00801944 	movi	r2,101
 8007c24:	14017e0e 	bge	r2,r16,8008220 <___svfprintf_internal_r+0x1f74>
 8007c28:	00801984 	movi	r2,102
 8007c2c:	80812826 	beq	r16,r2,80080d0 <___svfprintf_internal_r+0x1e24>
 8007c30:	db002617 	ldw	r12,152(sp)
 8007c34:	db003415 	stw	r12,208(sp)
 8007c38:	db003417 	ldw	r12,208(sp)
 8007c3c:	dac03317 	ldw	r11,204(sp)
 8007c40:	62c11a16 	blt	r12,r11,80080ac <___svfprintf_internal_r+0x1e00>
 8007c44:	8c40004c 	andi	r17,r17,1
 8007c48:	88013d1e 	bne	r17,zero,8008140 <___svfprintf_internal_r+0x1e94>
 8007c4c:	6005883a 	mov	r2,r12
 8007c50:	60012716 	blt	r12,zero,80080f0 <___svfprintf_internal_r+0x1e44>
 8007c54:	dc803417 	ldw	r18,208(sp)
 8007c58:	df002a07 	ldb	fp,168(sp)
 8007c5c:	e000b01e 	bne	fp,zero,8007f20 <___svfprintf_internal_r+0x1c74>
 8007c60:	dc402d17 	ldw	r17,180(sp)
 8007c64:	dd402783 	ldbu	r21,158(sp)
 8007c68:	d8802a15 	stw	r2,168(sp)
 8007c6c:	dcc02d15 	stw	r19,180(sp)
 8007c70:	d8003215 	stw	zero,200(sp)
 8007c74:	003ac606 	br	8006790 <__alt_data_end+0xfc006790>
 8007c78:	008200b4 	movhi	r2,2050
 8007c7c:	1085ee04 	addi	r2,r2,6072
 8007c80:	d8803115 	stw	r2,196(sp)
 8007c84:	003be506 	br	8006c1c <__alt_data_end+0xfc006c1c>
 8007c88:	d9002f17 	ldw	r4,188(sp)
 8007c8c:	04001004 	movi	r16,64
 8007c90:	800b883a 	mov	r5,r16
 8007c94:	8003f000 	call	8003f00 <_malloc_r>
 8007c98:	b8800015 	stw	r2,0(r23)
 8007c9c:	b8800415 	stw	r2,16(r23)
 8007ca0:	10016126 	beq	r2,zero,8008228 <___svfprintf_internal_r+0x1f7c>
 8007ca4:	bc000515 	stw	r16,20(r23)
 8007ca8:	00399a06 	br	8006314 <__alt_data_end+0xfc006314>
 8007cac:	008200b4 	movhi	r2,2050
 8007cb0:	1085f104 	addi	r2,r2,6084
 8007cb4:	d8803115 	stw	r2,196(sp)
 8007cb8:	003f0406 	br	80078cc <__alt_data_end+0xfc0078cc>
 8007cbc:	d9002f17 	ldw	r4,188(sp)
 8007cc0:	b80b883a 	mov	r5,r23
 8007cc4:	b00d883a 	mov	r6,r22
 8007cc8:	800ee4c0 	call	800ee4c <__ssprint_r>
 8007ccc:	103a3f1e 	bne	r2,zero,80065cc <__alt_data_end+0xfc0065cc>
 8007cd0:	dc002617 	ldw	r16,152(sp)
 8007cd4:	d8c02017 	ldw	r3,128(sp)
 8007cd8:	da000404 	addi	r8,sp,16
 8007cdc:	003f4b06 	br	8007a0c <__alt_data_end+0xfc007a0c>
 8007ce0:	02400184 	movi	r9,6
 8007ce4:	003f8f06 	br	8007b24 <__alt_data_end+0xfc007b24>
 8007ce8:	db002d17 	ldw	r12,180(sp)
 8007cec:	14c00017 	ldw	r19,0(r2)
 8007cf0:	0039883a 	mov	fp,zero
 8007cf4:	63000104 	addi	r12,r12,4
 8007cf8:	db002d15 	stw	r12,180(sp)
 8007cfc:	003c2b06 	br	8006dac <__alt_data_end+0xfc006dac>
 8007d00:	d8c03117 	ldw	r3,196(sp)
 8007d04:	b0e5c83a 	sub	r18,r22,r3
 8007d08:	003a9c06 	br	800677c <__alt_data_end+0xfc00677c>
 8007d0c:	da004015 	stw	r8,256(sp)
 8007d10:	8004afc0 	call	8004afc <strlen>
 8007d14:	1025883a 	mov	r18,r2
 8007d18:	da004017 	ldw	r8,256(sp)
 8007d1c:	903c450e 	bge	r18,zero,8006e34 <__alt_data_end+0xfc006e34>
 8007d20:	0005883a 	mov	r2,zero
 8007d24:	003c4306 	br	8006e34 <__alt_data_end+0xfc006e34>
 8007d28:	d9002f17 	ldw	r4,188(sp)
 8007d2c:	b80b883a 	mov	r5,r23
 8007d30:	b00d883a 	mov	r6,r22
 8007d34:	800ee4c0 	call	800ee4c <__ssprint_r>
 8007d38:	103a241e 	bne	r2,zero,80065cc <__alt_data_end+0xfc0065cc>
 8007d3c:	d8c02017 	ldw	r3,128(sp)
 8007d40:	d8801f17 	ldw	r2,124(sp)
 8007d44:	da000404 	addi	r8,sp,16
 8007d48:	db003317 	ldw	r12,204(sp)
 8007d4c:	dac03117 	ldw	r11,196(sp)
 8007d50:	10800044 	addi	r2,r2,1
 8007d54:	60c7883a 	add	r3,r12,r3
 8007d58:	42c00015 	stw	r11,0(r8)
 8007d5c:	43000115 	stw	r12,4(r8)
 8007d60:	d8c02015 	stw	r3,128(sp)
 8007d64:	d8801f15 	stw	r2,124(sp)
 8007d68:	010001c4 	movi	r4,7
 8007d6c:	20bb300e 	bge	r4,r2,8006a30 <__alt_data_end+0xfc006a30>
 8007d70:	003d9c06 	br	80073e4 <__alt_data_end+0xfc0073e4>
 8007d74:	d8802604 	addi	r2,sp,152
 8007d78:	d8800115 	stw	r2,4(sp)
 8007d7c:	d9002f17 	ldw	r4,188(sp)
 8007d80:	d8802504 	addi	r2,sp,148
 8007d84:	d9403717 	ldw	r5,220(sp)
 8007d88:	d8800215 	stw	r2,8(sp)
 8007d8c:	d8802104 	addi	r2,sp,132
 8007d90:	da400015 	stw	r9,0(sp)
 8007d94:	d8800315 	stw	r2,12(sp)
 8007d98:	900d883a 	mov	r6,r18
 8007d9c:	01c000c4 	movi	r7,3
 8007da0:	da004015 	stw	r8,256(sp)
 8007da4:	da403f15 	stw	r9,252(sp)
 8007da8:	800a5dc0 	call	800a5dc <_dtoa_r>
 8007dac:	da403f17 	ldw	r9,252(sp)
 8007db0:	da004017 	ldw	r8,256(sp)
 8007db4:	d8803115 	stw	r2,196(sp)
 8007db8:	4839883a 	mov	fp,r9
 8007dbc:	dac03117 	ldw	r11,196(sp)
 8007dc0:	00801184 	movi	r2,70
 8007dc4:	5f15883a 	add	r10,r11,fp
 8007dc8:	a8bf7c1e 	bne	r21,r2,8007bbc <__alt_data_end+0xfc007bbc>
 8007dcc:	59000007 	ldb	r4,0(r11)
 8007dd0:	00800c04 	movi	r2,48
 8007dd4:	2080ca26 	beq	r4,r2,8008100 <___svfprintf_internal_r+0x1e54>
 8007dd8:	d8c02617 	ldw	r3,152(sp)
 8007ddc:	50d5883a 	add	r10,r10,r3
 8007de0:	003f7606 	br	8007bbc <__alt_data_end+0xfc007bbc>
 8007de4:	010200b4 	movhi	r4,2050
 8007de8:	21060284 	addi	r4,r4,6154
 8007dec:	d9003615 	stw	r4,216(sp)
 8007df0:	003aa606 	br	800688c <__alt_data_end+0xfc00688c>
 8007df4:	0025883a 	mov	r18,zero
 8007df8:	003dc306 	br	8007508 <__alt_data_end+0xfc007508>
 8007dfc:	d9002f17 	ldw	r4,188(sp)
 8007e00:	b80b883a 	mov	r5,r23
 8007e04:	b00d883a 	mov	r6,r22
 8007e08:	800ee4c0 	call	800ee4c <__ssprint_r>
 8007e0c:	1039ef1e 	bne	r2,zero,80065cc <__alt_data_end+0xfc0065cc>
 8007e10:	d8c02017 	ldw	r3,128(sp)
 8007e14:	da000404 	addi	r8,sp,16
 8007e18:	003dba06 	br	8007504 <__alt_data_end+0xfc007504>
 8007e1c:	d9002f17 	ldw	r4,188(sp)
 8007e20:	b80b883a 	mov	r5,r23
 8007e24:	b00d883a 	mov	r6,r22
 8007e28:	800ee4c0 	call	800ee4c <__ssprint_r>
 8007e2c:	1039e71e 	bne	r2,zero,80065cc <__alt_data_end+0xfc0065cc>
 8007e30:	d8802617 	ldw	r2,152(sp)
 8007e34:	d8c02017 	ldw	r3,128(sp)
 8007e38:	da000404 	addi	r8,sp,16
 8007e3c:	003e4106 	br	8007744 <__alt_data_end+0xfc007744>
 8007e40:	030200b4 	movhi	r12,2050
 8007e44:	6305fe84 	addi	r12,r12,6138
 8007e48:	db002b15 	stw	r12,172(sp)
 8007e4c:	dac02b17 	ldw	r11,172(sp)
 8007e50:	1c07883a 	add	r3,r3,r16
 8007e54:	10800044 	addi	r2,r2,1
 8007e58:	42c00015 	stw	r11,0(r8)
 8007e5c:	44000115 	stw	r16,4(r8)
 8007e60:	d8c02015 	stw	r3,128(sp)
 8007e64:	d8801f15 	stw	r2,124(sp)
 8007e68:	010001c4 	movi	r4,7
 8007e6c:	20bfae16 	blt	r4,r2,8007d28 <__alt_data_end+0xfc007d28>
 8007e70:	42000204 	addi	r8,r8,8
 8007e74:	003fb406 	br	8007d48 <__alt_data_end+0xfc007d48>
 8007e78:	0021883a 	mov	r16,zero
 8007e7c:	003e4306 	br	800778c <__alt_data_end+0xfc00778c>
 8007e80:	d9002f17 	ldw	r4,188(sp)
 8007e84:	b80b883a 	mov	r5,r23
 8007e88:	b00d883a 	mov	r6,r22
 8007e8c:	800ee4c0 	call	800ee4c <__ssprint_r>
 8007e90:	1039ce1e 	bne	r2,zero,80065cc <__alt_data_end+0xfc0065cc>
 8007e94:	d8802617 	ldw	r2,152(sp)
 8007e98:	db003317 	ldw	r12,204(sp)
 8007e9c:	d8c02017 	ldw	r3,128(sp)
 8007ea0:	da000404 	addi	r8,sp,16
 8007ea4:	6085c83a 	sub	r2,r12,r2
 8007ea8:	003e3706 	br	8007788 <__alt_data_end+0xfc007788>
 8007eac:	00800184 	movi	r2,6
 8007eb0:	1240012e 	bgeu	r2,r9,8007eb8 <___svfprintf_internal_r+0x1c0c>
 8007eb4:	1013883a 	mov	r9,r2
 8007eb8:	4825883a 	mov	r18,r9
 8007ebc:	4805883a 	mov	r2,r9
 8007ec0:	4800a416 	blt	r9,zero,8008154 <___svfprintf_internal_r+0x1ea8>
 8007ec4:	d8802a15 	stw	r2,168(sp)
 8007ec8:	008200b4 	movhi	r2,2050
 8007ecc:	1085fc04 	addi	r2,r2,6128
 8007ed0:	d8803115 	stw	r2,196(sp)
 8007ed4:	dcc02d15 	stw	r19,180(sp)
 8007ed8:	d8003215 	stw	zero,200(sp)
 8007edc:	d8003415 	stw	zero,208(sp)
 8007ee0:	0005883a 	mov	r2,zero
 8007ee4:	003a3106 	br	80067ac <__alt_data_end+0xfc0067ac>
 8007ee8:	030200b4 	movhi	r12,2050
 8007eec:	63060284 	addi	r12,r12,6154
 8007ef0:	db003615 	stw	r12,216(sp)
 8007ef4:	003af406 	br	8006ac8 <__alt_data_end+0xfc006ac8>
 8007ef8:	d8c02617 	ldw	r3,152(sp)
 8007efc:	00bfff44 	movi	r2,-3
 8007f00:	18801516 	blt	r3,r2,8007f58 <___svfprintf_internal_r+0x1cac>
 8007f04:	48c01416 	blt	r9,r3,8007f58 <___svfprintf_internal_r+0x1cac>
 8007f08:	d8c03415 	stw	r3,208(sp)
 8007f0c:	040019c4 	movi	r16,103
 8007f10:	003f4906 	br	8007c38 <__alt_data_end+0xfc007c38>
 8007f14:	05400b44 	movi	r21,45
 8007f18:	dd402785 	stb	r21,158(sp)
 8007f1c:	003b3a06 	br	8006c08 <__alt_data_end+0xfc006c08>
 8007f20:	00c00b44 	movi	r3,45
 8007f24:	d8802a15 	stw	r2,168(sp)
 8007f28:	dc402d17 	ldw	r17,180(sp)
 8007f2c:	d8c02785 	stb	r3,158(sp)
 8007f30:	dcc02d15 	stw	r19,180(sp)
 8007f34:	d8003215 	stw	zero,200(sp)
 8007f38:	00800b44 	movi	r2,45
 8007f3c:	003a1806 	br	80067a0 <__alt_data_end+0xfc0067a0>
 8007f40:	010200b4 	movhi	r4,2050
 8007f44:	2105fe84 	addi	r4,r4,6138
 8007f48:	d9002b15 	stw	r4,172(sp)
 8007f4c:	003cc306 	br	800725c <__alt_data_end+0xfc00725c>
 8007f50:	5005883a 	mov	r2,r10
 8007f54:	003f2d06 	br	8007c0c <__alt_data_end+0xfc007c0c>
 8007f58:	843fff84 	addi	r16,r16,-2
 8007f5c:	1f3fffc4 	addi	fp,r3,-1
 8007f60:	df002615 	stw	fp,152(sp)
 8007f64:	dc0022c5 	stb	r16,139(sp)
 8007f68:	e000a216 	blt	fp,zero,80081f4 <___svfprintf_internal_r+0x1f48>
 8007f6c:	00800ac4 	movi	r2,43
 8007f70:	d8802305 	stb	r2,140(sp)
 8007f74:	00800244 	movi	r2,9
 8007f78:	1700820e 	bge	r2,fp,8008184 <___svfprintf_internal_r+0x1ed8>
 8007f7c:	dd4022c4 	addi	r21,sp,139
 8007f80:	dc002b15 	stw	r16,172(sp)
 8007f84:	8825883a 	mov	r18,r17
 8007f88:	a821883a 	mov	r16,r21
 8007f8c:	4023883a 	mov	r17,r8
 8007f90:	e009883a 	mov	r4,fp
 8007f94:	01400284 	movi	r5,10
 8007f98:	8003e480 	call	8003e48 <__modsi3>
 8007f9c:	10800c04 	addi	r2,r2,48
 8007fa0:	843fffc4 	addi	r16,r16,-1
 8007fa4:	e009883a 	mov	r4,fp
 8007fa8:	01400284 	movi	r5,10
 8007fac:	80800005 	stb	r2,0(r16)
 8007fb0:	8003df40 	call	8003df4 <__divsi3>
 8007fb4:	1039883a 	mov	fp,r2
 8007fb8:	00800244 	movi	r2,9
 8007fbc:	173ff416 	blt	r2,fp,8007f90 <__alt_data_end+0xfc007f90>
 8007fc0:	8811883a 	mov	r8,r17
 8007fc4:	e0800c04 	addi	r2,fp,48
 8007fc8:	9023883a 	mov	r17,r18
 8007fcc:	8025883a 	mov	r18,r16
 8007fd0:	913fffc4 	addi	r4,r18,-1
 8007fd4:	90bfffc5 	stb	r2,-1(r18)
 8007fd8:	dc002b17 	ldw	r16,172(sp)
 8007fdc:	25408e2e 	bgeu	r4,r21,8008218 <___svfprintf_internal_r+0x1f6c>
 8007fe0:	d9402384 	addi	r5,sp,142
 8007fe4:	2c8bc83a 	sub	r5,r5,r18
 8007fe8:	d8c02344 	addi	r3,sp,141
 8007fec:	a94b883a 	add	r5,r21,r5
 8007ff0:	00000106 	br	8007ff8 <___svfprintf_internal_r+0x1d4c>
 8007ff4:	20800003 	ldbu	r2,0(r4)
 8007ff8:	18800005 	stb	r2,0(r3)
 8007ffc:	18c00044 	addi	r3,r3,1
 8008000:	21000044 	addi	r4,r4,1
 8008004:	197ffb1e 	bne	r3,r5,8007ff4 <__alt_data_end+0xfc007ff4>
 8008008:	d8802304 	addi	r2,sp,140
 800800c:	1485c83a 	sub	r2,r2,r18
 8008010:	d8c02344 	addi	r3,sp,141
 8008014:	1885883a 	add	r2,r3,r2
 8008018:	dac03317 	ldw	r11,204(sp)
 800801c:	156bc83a 	sub	r21,r2,r21
 8008020:	dd403a15 	stw	r21,232(sp)
 8008024:	00800044 	movi	r2,1
 8008028:	5d65883a 	add	r18,r11,r21
 800802c:	12c0770e 	bge	r2,r11,800820c <___svfprintf_internal_r+0x1f60>
 8008030:	94800044 	addi	r18,r18,1
 8008034:	9005883a 	mov	r2,r18
 8008038:	90007216 	blt	r18,zero,8008204 <___svfprintf_internal_r+0x1f58>
 800803c:	d8003415 	stw	zero,208(sp)
 8008040:	003f0506 	br	8007c58 <__alt_data_end+0xfc007c58>
 8008044:	da402a15 	stw	r9,168(sp)
 8008048:	dd402783 	ldbu	r21,158(sp)
 800804c:	4825883a 	mov	r18,r9
 8008050:	dcc02d15 	stw	r19,180(sp)
 8008054:	d8003215 	stw	zero,200(sp)
 8008058:	d8003415 	stw	zero,208(sp)
 800805c:	0039cc06 	br	8006790 <__alt_data_end+0xfc006790>
 8008060:	483eb01e 	bne	r9,zero,8007b24 <__alt_data_end+0xfc007b24>
 8008064:	9013883a 	mov	r9,r18
 8008068:	003eae06 	br	8007b24 <__alt_data_end+0xfc007b24>
 800806c:	d9002f17 	ldw	r4,188(sp)
 8008070:	b80b883a 	mov	r5,r23
 8008074:	b00d883a 	mov	r6,r22
 8008078:	800ee4c0 	call	800ee4c <__ssprint_r>
 800807c:	1039531e 	bne	r2,zero,80065cc <__alt_data_end+0xfc0065cc>
 8008080:	dc002617 	ldw	r16,152(sp)
 8008084:	d8c02017 	ldw	r3,128(sp)
 8008088:	d8801f17 	ldw	r2,124(sp)
 800808c:	da000404 	addi	r8,sp,16
 8008090:	003e6f06 	br	8007a50 <__alt_data_end+0xfc007a50>
 8008094:	00c00b44 	movi	r3,45
 8008098:	64a0003c 	xorhi	r18,r12,32768
 800809c:	d8c02a05 	stb	r3,168(sp)
 80080a0:	003ea606 	br	8007b3c <__alt_data_end+0xfc007b3c>
 80080a4:	4f000044 	addi	fp,r9,1
 80080a8:	003eab06 	br	8007b58 <__alt_data_end+0xfc007b58>
 80080ac:	d8c03417 	ldw	r3,208(sp)
 80080b0:	00c0410e 	bge	zero,r3,80081b8 <___svfprintf_internal_r+0x1f0c>
 80080b4:	04800044 	movi	r18,1
 80080b8:	dac03317 	ldw	r11,204(sp)
 80080bc:	92e5883a 	add	r18,r18,r11
 80080c0:	9005883a 	mov	r2,r18
 80080c4:	903ee40e 	bge	r18,zero,8007c58 <__alt_data_end+0xfc007c58>
 80080c8:	0005883a 	mov	r2,zero
 80080cc:	003ee206 	br	8007c58 <__alt_data_end+0xfc007c58>
 80080d0:	d8c02617 	ldw	r3,152(sp)
 80080d4:	d8c03415 	stw	r3,208(sp)
 80080d8:	00c0310e 	bge	zero,r3,80081a0 <___svfprintf_internal_r+0x1ef4>
 80080dc:	48001f1e 	bne	r9,zero,800815c <___svfprintf_internal_r+0x1eb0>
 80080e0:	8c40004c 	andi	r17,r17,1
 80080e4:	88001d1e 	bne	r17,zero,800815c <___svfprintf_internal_r+0x1eb0>
 80080e8:	1805883a 	mov	r2,r3
 80080ec:	183ed90e 	bge	r3,zero,8007c54 <__alt_data_end+0xfc007c54>
 80080f0:	0005883a 	mov	r2,zero
 80080f4:	003ed706 	br	8007c54 <__alt_data_end+0xfc007c54>
 80080f8:	d8802117 	ldw	r2,132(sp)
 80080fc:	003ec306 	br	8007c0c <__alt_data_end+0xfc007c0c>
 8008100:	d9003717 	ldw	r4,220(sp)
 8008104:	900b883a 	mov	r5,r18
 8008108:	000d883a 	mov	r6,zero
 800810c:	000f883a 	mov	r7,zero
 8008110:	da004015 	stw	r8,256(sp)
 8008114:	da403f15 	stw	r9,252(sp)
 8008118:	da803e15 	stw	r10,248(sp)
 800811c:	80137900 	call	8013790 <__eqdf2>
 8008120:	da004017 	ldw	r8,256(sp)
 8008124:	da403f17 	ldw	r9,252(sp)
 8008128:	da803e17 	ldw	r10,248(sp)
 800812c:	103f2a26 	beq	r2,zero,8007dd8 <__alt_data_end+0xfc007dd8>
 8008130:	00800044 	movi	r2,1
 8008134:	1707c83a 	sub	r3,r2,fp
 8008138:	d8c02615 	stw	r3,152(sp)
 800813c:	003f2706 	br	8007ddc <__alt_data_end+0xfc007ddc>
 8008140:	db003417 	ldw	r12,208(sp)
 8008144:	64800044 	addi	r18,r12,1
 8008148:	9005883a 	mov	r2,r18
 800814c:	903ec20e 	bge	r18,zero,8007c58 <__alt_data_end+0xfc007c58>
 8008150:	003fdd06 	br	80080c8 <__alt_data_end+0xfc0080c8>
 8008154:	0005883a 	mov	r2,zero
 8008158:	003f5a06 	br	8007ec4 <__alt_data_end+0xfc007ec4>
 800815c:	dac03417 	ldw	r11,208(sp)
 8008160:	4a400044 	addi	r9,r9,1
 8008164:	5a65883a 	add	r18,r11,r9
 8008168:	9005883a 	mov	r2,r18
 800816c:	903eba0e 	bge	r18,zero,8007c58 <__alt_data_end+0xfc007c58>
 8008170:	003fd506 	br	80080c8 <__alt_data_end+0xfc0080c8>
 8008174:	008200b4 	movhi	r2,2050
 8008178:	1085fe84 	addi	r2,r2,6138
 800817c:	d8802b15 	stw	r2,172(sp)
 8008180:	003d2906 	br	8007628 <__alt_data_end+0xfc007628>
 8008184:	00800c04 	movi	r2,48
 8008188:	e0c00c04 	addi	r3,fp,48
 800818c:	d8802345 	stb	r2,141(sp)
 8008190:	d8c02385 	stb	r3,142(sp)
 8008194:	d88023c4 	addi	r2,sp,143
 8008198:	dd4022c4 	addi	r21,sp,139
 800819c:	003f9e06 	br	8008018 <__alt_data_end+0xfc008018>
 80081a0:	4800081e 	bne	r9,zero,80081c4 <___svfprintf_internal_r+0x1f18>
 80081a4:	8c40004c 	andi	r17,r17,1
 80081a8:	8800061e 	bne	r17,zero,80081c4 <___svfprintf_internal_r+0x1f18>
 80081ac:	00800044 	movi	r2,1
 80081b0:	1025883a 	mov	r18,r2
 80081b4:	003ea806 	br	8007c58 <__alt_data_end+0xfc007c58>
 80081b8:	04800084 	movi	r18,2
 80081bc:	90e5c83a 	sub	r18,r18,r3
 80081c0:	003fbd06 	br	80080b8 <__alt_data_end+0xfc0080b8>
 80081c4:	4c800084 	addi	r18,r9,2
 80081c8:	9005883a 	mov	r2,r18
 80081cc:	903ea20e 	bge	r18,zero,8007c58 <__alt_data_end+0xfc007c58>
 80081d0:	003fbd06 	br	80080c8 <__alt_data_end+0xfc0080c8>
 80081d4:	dac02d17 	ldw	r11,180(sp)
 80081d8:	5a400017 	ldw	r9,0(r11)
 80081dc:	5ac00104 	addi	r11,r11,4
 80081e0:	dac02d15 	stw	r11,180(sp)
 80081e4:	483e3f0e 	bge	r9,zero,8007ae4 <__alt_data_end+0xfc007ae4>
 80081e8:	027fffc4 	movi	r9,-1
 80081ec:	1c000047 	ldb	r16,1(r3)
 80081f0:	00388406 	br	8006404 <__alt_data_end+0xfc006404>
 80081f4:	00800b44 	movi	r2,45
 80081f8:	0739c83a 	sub	fp,zero,fp
 80081fc:	d8802305 	stb	r2,140(sp)
 8008200:	003f5c06 	br	8007f74 <__alt_data_end+0xfc007f74>
 8008204:	0005883a 	mov	r2,zero
 8008208:	003f8c06 	br	800803c <__alt_data_end+0xfc00803c>
 800820c:	88a2703a 	and	r17,r17,r2
 8008210:	883f8826 	beq	r17,zero,8008034 <__alt_data_end+0xfc008034>
 8008214:	003f8606 	br	8008030 <__alt_data_end+0xfc008030>
 8008218:	d8802344 	addi	r2,sp,141
 800821c:	003f7e06 	br	8008018 <__alt_data_end+0xfc008018>
 8008220:	d8c02617 	ldw	r3,152(sp)
 8008224:	003f4d06 	br	8007f5c <__alt_data_end+0xfc007f5c>
 8008228:	dac02f17 	ldw	r11,188(sp)
 800822c:	00800304 	movi	r2,12
 8008230:	58800015 	stw	r2,0(r11)
 8008234:	00bfffc4 	movi	r2,-1
 8008238:	0038e806 	br	80065dc <__alt_data_end+0xfc0065dc>

0800823c <time>:
 800823c:	008200b4 	movhi	r2,2050
 8008240:	defffc04 	addi	sp,sp,-16
 8008244:	108d4d04 	addi	r2,r2,13620
 8008248:	dc000215 	stw	r16,8(sp)
 800824c:	2021883a 	mov	r16,r4
 8008250:	11000017 	ldw	r4,0(r2)
 8008254:	d80b883a 	mov	r5,sp
 8008258:	000d883a 	mov	r6,zero
 800825c:	dfc00315 	stw	ra,12(sp)
 8008260:	800d4b40 	call	800d4b4 <_gettimeofday_r>
 8008264:	10000716 	blt	r2,zero,8008284 <time+0x48>
 8008268:	d8800017 	ldw	r2,0(sp)
 800826c:	80000126 	beq	r16,zero,8008274 <time+0x38>
 8008270:	80800015 	stw	r2,0(r16)
 8008274:	dfc00317 	ldw	ra,12(sp)
 8008278:	dc000217 	ldw	r16,8(sp)
 800827c:	dec00404 	addi	sp,sp,16
 8008280:	f800283a 	ret
 8008284:	00bfffc4 	movi	r2,-1
 8008288:	003ffa06 	br	8008274 <__alt_data_end+0xfc008274>

0800828c <___vfprintf_internal_r>:
 800828c:	defeb604 	addi	sp,sp,-1320
 8008290:	dfc14915 	stw	ra,1316(sp)
 8008294:	ddc14715 	stw	r23,1308(sp)
 8008298:	dd814615 	stw	r22,1304(sp)
 800829c:	282f883a 	mov	r23,r5
 80082a0:	202d883a 	mov	r22,r4
 80082a4:	d9812a15 	stw	r6,1192(sp)
 80082a8:	d9c12d15 	stw	r7,1204(sp)
 80082ac:	df014815 	stw	fp,1312(sp)
 80082b0:	dd414515 	stw	r21,1300(sp)
 80082b4:	dd014415 	stw	r20,1296(sp)
 80082b8:	dcc14315 	stw	r19,1292(sp)
 80082bc:	dc814215 	stw	r18,1288(sp)
 80082c0:	dc414115 	stw	r17,1284(sp)
 80082c4:	dc014015 	stw	r16,1280(sp)
 80082c8:	800d5b80 	call	800d5b8 <_localeconv_r>
 80082cc:	10800017 	ldw	r2,0(r2)
 80082d0:	1009883a 	mov	r4,r2
 80082d4:	d8813515 	stw	r2,1236(sp)
 80082d8:	8004afc0 	call	8004afc <strlen>
 80082dc:	d8813815 	stw	r2,1248(sp)
 80082e0:	b0000226 	beq	r22,zero,80082ec <___vfprintf_internal_r+0x60>
 80082e4:	b0800e17 	ldw	r2,56(r22)
 80082e8:	10010426 	beq	r2,zero,80086fc <___vfprintf_internal_r+0x470>
 80082ec:	b8c0030b 	ldhu	r3,12(r23)
 80082f0:	1908000c 	andi	r4,r3,8192
 80082f4:	1805883a 	mov	r2,r3
 80082f8:	2000071e 	bne	r4,zero,8008318 <___vfprintf_internal_r+0x8c>
 80082fc:	b9001917 	ldw	r4,100(r23)
 8008300:	18880014 	ori	r2,r3,8192
 8008304:	00f7ffc4 	movi	r3,-8193
 8008308:	20c8703a 	and	r4,r4,r3
 800830c:	b880030d 	sth	r2,12(r23)
 8008310:	1007883a 	mov	r3,r2
 8008314:	b9001915 	stw	r4,100(r23)
 8008318:	1100020c 	andi	r4,r2,8
 800831c:	2000a726 	beq	r4,zero,80085bc <___vfprintf_internal_r+0x330>
 8008320:	b9000417 	ldw	r4,16(r23)
 8008324:	2000a526 	beq	r4,zero,80085bc <___vfprintf_internal_r+0x330>
 8008328:	1080068c 	andi	r2,r2,26
 800832c:	01000284 	movi	r4,10
 8008330:	1100ab26 	beq	r2,r4,80085e0 <___vfprintf_internal_r+0x354>
 8008334:	dac10e04 	addi	r11,sp,1080
 8008338:	db010dc4 	addi	r12,sp,1079
 800833c:	d8800404 	addi	r2,sp,16
 8008340:	050200b4 	movhi	r20,2050
 8008344:	dac12815 	stw	r11,1184(sp)
 8008348:	5b17c83a 	sub	r11,r11,r12
 800834c:	a5060684 	addi	r20,r20,6170
 8008350:	db012915 	stw	r12,1188(sp)
 8008354:	d8811e15 	stw	r2,1144(sp)
 8008358:	d8012015 	stw	zero,1152(sp)
 800835c:	d8011f15 	stw	zero,1148(sp)
 8008360:	d8013315 	stw	zero,1228(sp)
 8008364:	d8013715 	stw	zero,1244(sp)
 8008368:	d8013915 	stw	zero,1252(sp)
 800836c:	d8013b15 	stw	zero,1260(sp)
 8008370:	d8013a15 	stw	zero,1256(sp)
 8008374:	d8012f15 	stw	zero,1212(sp)
 8008378:	1011883a 	mov	r8,r2
 800837c:	dac13c15 	stw	r11,1264(sp)
 8008380:	db012a17 	ldw	r12,1192(sp)
 8008384:	60800007 	ldb	r2,0(r12)
 8008388:	1000df26 	beq	r2,zero,8008708 <___vfprintf_internal_r+0x47c>
 800838c:	00c00944 	movi	r3,37
 8008390:	10c0dd26 	beq	r2,r3,8008708 <___vfprintf_internal_r+0x47c>
 8008394:	6021883a 	mov	r16,r12
 8008398:	00000106 	br	80083a0 <___vfprintf_internal_r+0x114>
 800839c:	10c08426 	beq	r2,r3,80085b0 <___vfprintf_internal_r+0x324>
 80083a0:	84000044 	addi	r16,r16,1
 80083a4:	80800007 	ldb	r2,0(r16)
 80083a8:	103ffc1e 	bne	r2,zero,800839c <__alt_data_end+0xfc00839c>
 80083ac:	dac12a17 	ldw	r11,1192(sp)
 80083b0:	82e3c83a 	sub	r17,r16,r11
 80083b4:	88000f26 	beq	r17,zero,80083f4 <___vfprintf_internal_r+0x168>
 80083b8:	d8c12017 	ldw	r3,1152(sp)
 80083bc:	d8811f17 	ldw	r2,1148(sp)
 80083c0:	dac12a17 	ldw	r11,1192(sp)
 80083c4:	1c47883a 	add	r3,r3,r17
 80083c8:	10800044 	addi	r2,r2,1
 80083cc:	d8c12015 	stw	r3,1152(sp)
 80083d0:	42c00015 	stw	r11,0(r8)
 80083d4:	44400115 	stw	r17,4(r8)
 80083d8:	d8811f15 	stw	r2,1148(sp)
 80083dc:	00c001c4 	movi	r3,7
 80083e0:	1880b416 	blt	r3,r2,80086b4 <___vfprintf_internal_r+0x428>
 80083e4:	42000204 	addi	r8,r8,8
 80083e8:	db012f17 	ldw	r12,1212(sp)
 80083ec:	6459883a 	add	r12,r12,r17
 80083f0:	db012f15 	stw	r12,1212(sp)
 80083f4:	80800007 	ldb	r2,0(r16)
 80083f8:	1000b526 	beq	r2,zero,80086d0 <___vfprintf_internal_r+0x444>
 80083fc:	80800044 	addi	r2,r16,1
 8008400:	84000047 	ldb	r16,1(r16)
 8008404:	d8012785 	stb	zero,1182(sp)
 8008408:	000d883a 	mov	r6,zero
 800840c:	027fffc4 	movi	r9,-1
 8008410:	d8012e15 	stw	zero,1208(sp)
 8008414:	0023883a 	mov	r17,zero
 8008418:	01001604 	movi	r4,88
 800841c:	01400244 	movi	r5,9
 8008420:	02800a84 	movi	r10,42
 8008424:	01c01b04 	movi	r7,108
 8008428:	10c00044 	addi	r3,r2,1
 800842c:	80bff804 	addi	r2,r16,-32
 8008430:	2082f236 	bltu	r4,r2,8008ffc <___vfprintf_internal_r+0xd70>
 8008434:	100490ba 	slli	r2,r2,2
 8008438:	02c20074 	movhi	r11,2049
 800843c:	5ae11304 	addi	r11,r11,-31668
 8008440:	12c5883a 	add	r2,r2,r11
 8008444:	10800017 	ldw	r2,0(r2)
 8008448:	1000683a 	jmp	r2
 800844c:	08008e44 	addi	zero,at,569
 8008450:	08008ffc 	xorhi	zero,at,575
 8008454:	08008ffc 	xorhi	zero,at,575
 8008458:	08008e64 	muli	zero,at,569
 800845c:	08008ffc 	xorhi	zero,at,575
 8008460:	08008ffc 	xorhi	zero,at,575
 8008464:	08008ffc 	xorhi	zero,at,575
 8008468:	08008ffc 	xorhi	zero,at,575
 800846c:	08008ffc 	xorhi	zero,at,575
 8008470:	08008ffc 	xorhi	zero,at,575
 8008474:	08008fc0 	call	8008fc <__alt_mem_sdram-0x77ff704>
 8008478:	08008fec 	andhi	zero,at,575
 800847c:	08008ffc 	xorhi	zero,at,575
 8008480:	08008710 	cmplti	zero,at,540
 8008484:	08008720 	cmpeqi	zero,at,540
 8008488:	08008ffc 	xorhi	zero,at,575
 800848c:	08008760 	cmpeqi	zero,at,541
 8008490:	08008c54 	ori	zero,at,561
 8008494:	08008c54 	ori	zero,at,561
 8008498:	08008c54 	ori	zero,at,561
 800849c:	08008c54 	ori	zero,at,561
 80084a0:	08008c54 	ori	zero,at,561
 80084a4:	08008c54 	ori	zero,at,561
 80084a8:	08008c54 	ori	zero,at,561
 80084ac:	08008c54 	ori	zero,at,561
 80084b0:	08008c54 	ori	zero,at,561
 80084b4:	08008ffc 	xorhi	zero,at,575
 80084b8:	08008ffc 	xorhi	zero,at,575
 80084bc:	08008ffc 	xorhi	zero,at,575
 80084c0:	08008ffc 	xorhi	zero,at,575
 80084c4:	08008ffc 	xorhi	zero,at,575
 80084c8:	08008ffc 	xorhi	zero,at,575
 80084cc:	08008ffc 	xorhi	zero,at,575
 80084d0:	08008ffc 	xorhi	zero,at,575
 80084d4:	08008ffc 	xorhi	zero,at,575
 80084d8:	08008ffc 	xorhi	zero,at,575
 80084dc:	08008c88 	cmpgei	zero,at,562
 80084e0:	08008770 	cmpltui	zero,at,541
 80084e4:	08008ffc 	xorhi	zero,at,575
 80084e8:	08008770 	cmpltui	zero,at,541
 80084ec:	08008ffc 	xorhi	zero,at,575
 80084f0:	08008ffc 	xorhi	zero,at,575
 80084f4:	08008ffc 	xorhi	zero,at,575
 80084f8:	08008ffc 	xorhi	zero,at,575
 80084fc:	08008814 	ori	zero,at,544
 8008500:	08008ffc 	xorhi	zero,at,575
 8008504:	08008ffc 	xorhi	zero,at,575
 8008508:	08008824 	muli	zero,at,544
 800850c:	08008ffc 	xorhi	zero,at,575
 8008510:	08008ffc 	xorhi	zero,at,575
 8008514:	08008ffc 	xorhi	zero,at,575
 8008518:	08008ffc 	xorhi	zero,at,575
 800851c:	08008ffc 	xorhi	zero,at,575
 8008520:	08008c20 	cmpeqi	zero,at,560
 8008524:	08008ffc 	xorhi	zero,at,575
 8008528:	08008ffc 	xorhi	zero,at,575
 800852c:	08008cd0 	cmplti	zero,at,563
 8008530:	08008ffc 	xorhi	zero,at,575
 8008534:	08008ffc 	xorhi	zero,at,575
 8008538:	08008ffc 	xorhi	zero,at,575
 800853c:	08008ffc 	xorhi	zero,at,575
 8008540:	08008ffc 	xorhi	zero,at,575
 8008544:	08008ffc 	xorhi	zero,at,575
 8008548:	08008ffc 	xorhi	zero,at,575
 800854c:	08008ffc 	xorhi	zero,at,575
 8008550:	08008ffc 	xorhi	zero,at,575
 8008554:	08008ffc 	xorhi	zero,at,575
 8008558:	08008ec4 	addi	zero,at,571
 800855c:	08008e74 	orhi	zero,at,569
 8008560:	08008770 	cmpltui	zero,at,541
 8008564:	08008770 	cmpltui	zero,at,541
 8008568:	08008770 	cmpltui	zero,at,541
 800856c:	08008eb4 	orhi	zero,at,570
 8008570:	08008e74 	orhi	zero,at,569
 8008574:	08008ffc 	xorhi	zero,at,575
 8008578:	08008ffc 	xorhi	zero,at,575
 800857c:	08008dbc 	xorhi	zero,at,566
 8008580:	08008ffc 	xorhi	zero,at,575
 8008584:	08008dd0 	cmplti	zero,at,567
 8008588:	08008e04 	addi	zero,at,568
 800858c:	08008f04 	addi	zero,at,572
 8008590:	08008d2c 	andhi	zero,at,564
 8008594:	08008ffc 	xorhi	zero,at,575
 8008598:	08008f4c 	andi	zero,at,573
 800859c:	08008ffc 	xorhi	zero,at,575
 80085a0:	08008d3c 	xorhi	zero,at,564
 80085a4:	08008ffc 	xorhi	zero,at,575
 80085a8:	08008ffc 	xorhi	zero,at,575
 80085ac:	08008d7c 	xorhi	zero,at,565
 80085b0:	db012a17 	ldw	r12,1192(sp)
 80085b4:	8323c83a 	sub	r17,r16,r12
 80085b8:	003f7e06 	br	80083b4 <__alt_data_end+0xfc0083b4>
 80085bc:	b009883a 	mov	r4,r22
 80085c0:	b80b883a 	mov	r5,r23
 80085c4:	800a2ac0 	call	800a2ac <__swsetup_r>
 80085c8:	10002d1e 	bne	r2,zero,8008680 <___vfprintf_internal_r+0x3f4>
 80085cc:	b8c0030b 	ldhu	r3,12(r23)
 80085d0:	01000284 	movi	r4,10
 80085d4:	1805883a 	mov	r2,r3
 80085d8:	1080068c 	andi	r2,r2,26
 80085dc:	113f551e 	bne	r2,r4,8008334 <__alt_data_end+0xfc008334>
 80085e0:	b880038b 	ldhu	r2,14(r23)
 80085e4:	113fffcc 	andi	r4,r2,65535
 80085e8:	2120001c 	xori	r4,r4,32768
 80085ec:	21200004 	addi	r4,r4,-32768
 80085f0:	203f5016 	blt	r4,zero,8008334 <__alt_data_end+0xfc008334>
 80085f4:	bac01917 	ldw	r11,100(r23)
 80085f8:	ba800717 	ldw	r10,28(r23)
 80085fc:	ba400917 	ldw	r9,36(r23)
 8008600:	d9812a17 	ldw	r6,1192(sp)
 8008604:	d9c12d17 	ldw	r7,1204(sp)
 8008608:	02010004 	movi	r8,1024
 800860c:	18ffff4c 	andi	r3,r3,65533
 8008610:	d881078d 	sth	r2,1054(sp)
 8008614:	b009883a 	mov	r4,r22
 8008618:	d8800404 	addi	r2,sp,16
 800861c:	d9410404 	addi	r5,sp,1040
 8008620:	d8c1070d 	sth	r3,1052(sp)
 8008624:	dac11d15 	stw	r11,1140(sp)
 8008628:	da810b15 	stw	r10,1068(sp)
 800862c:	da410d15 	stw	r9,1076(sp)
 8008630:	d8810415 	stw	r2,1040(sp)
 8008634:	d8810815 	stw	r2,1056(sp)
 8008638:	da010615 	stw	r8,1048(sp)
 800863c:	da010915 	stw	r8,1060(sp)
 8008640:	d8010a15 	stw	zero,1064(sp)
 8008644:	800828c0 	call	800828c <___vfprintf_internal_r>
 8008648:	1021883a 	mov	r16,r2
 800864c:	10000416 	blt	r2,zero,8008660 <___vfprintf_internal_r+0x3d4>
 8008650:	b009883a 	mov	r4,r22
 8008654:	d9410404 	addi	r5,sp,1040
 8008658:	800bd040 	call	800bd04 <_fflush_r>
 800865c:	1006ee1e 	bne	r2,zero,800a218 <___vfprintf_internal_r+0x1f8c>
 8008660:	d881070b 	ldhu	r2,1052(sp)
 8008664:	1080100c 	andi	r2,r2,64
 8008668:	10000326 	beq	r2,zero,8008678 <___vfprintf_internal_r+0x3ec>
 800866c:	b880030b 	ldhu	r2,12(r23)
 8008670:	10801014 	ori	r2,r2,64
 8008674:	b880030d 	sth	r2,12(r23)
 8008678:	8005883a 	mov	r2,r16
 800867c:	00000106 	br	8008684 <___vfprintf_internal_r+0x3f8>
 8008680:	00bfffc4 	movi	r2,-1
 8008684:	dfc14917 	ldw	ra,1316(sp)
 8008688:	df014817 	ldw	fp,1312(sp)
 800868c:	ddc14717 	ldw	r23,1308(sp)
 8008690:	dd814617 	ldw	r22,1304(sp)
 8008694:	dd414517 	ldw	r21,1300(sp)
 8008698:	dd014417 	ldw	r20,1296(sp)
 800869c:	dcc14317 	ldw	r19,1292(sp)
 80086a0:	dc814217 	ldw	r18,1288(sp)
 80086a4:	dc414117 	ldw	r17,1284(sp)
 80086a8:	dc014017 	ldw	r16,1280(sp)
 80086ac:	dec14a04 	addi	sp,sp,1320
 80086b0:	f800283a 	ret
 80086b4:	b009883a 	mov	r4,r22
 80086b8:	b80b883a 	mov	r5,r23
 80086bc:	d9811e04 	addi	r6,sp,1144
 80086c0:	80101780 	call	8010178 <__sprint_r>
 80086c4:	1000081e 	bne	r2,zero,80086e8 <___vfprintf_internal_r+0x45c>
 80086c8:	da000404 	addi	r8,sp,16
 80086cc:	003f4606 	br	80083e8 <__alt_data_end+0xfc0083e8>
 80086d0:	d8812017 	ldw	r2,1152(sp)
 80086d4:	10000426 	beq	r2,zero,80086e8 <___vfprintf_internal_r+0x45c>
 80086d8:	b009883a 	mov	r4,r22
 80086dc:	b80b883a 	mov	r5,r23
 80086e0:	d9811e04 	addi	r6,sp,1144
 80086e4:	80101780 	call	8010178 <__sprint_r>
 80086e8:	b880030b 	ldhu	r2,12(r23)
 80086ec:	1080100c 	andi	r2,r2,64
 80086f0:	103fe31e 	bne	r2,zero,8008680 <__alt_data_end+0xfc008680>
 80086f4:	d8812f17 	ldw	r2,1212(sp)
 80086f8:	003fe206 	br	8008684 <__alt_data_end+0xfc008684>
 80086fc:	b009883a 	mov	r4,r22
 8008700:	800c2ac0 	call	800c2ac <__sinit>
 8008704:	003ef906 	br	80082ec <__alt_data_end+0xfc0082ec>
 8008708:	dc012a17 	ldw	r16,1192(sp)
 800870c:	003f3906 	br	80083f4 <__alt_data_end+0xfc0083f4>
 8008710:	1805883a 	mov	r2,r3
 8008714:	8c400114 	ori	r17,r17,4
 8008718:	1c000007 	ldb	r16,0(r3)
 800871c:	003f4206 	br	8008428 <__alt_data_end+0xfc008428>
 8008720:	1c000007 	ldb	r16,0(r3)
 8008724:	18800044 	addi	r2,r3,1
 8008728:	8286b326 	beq	r16,r10,800a1f8 <___vfprintf_internal_r+0x1f6c>
 800872c:	82fff404 	addi	r11,r16,-48
 8008730:	1007883a 	mov	r3,r2
 8008734:	0013883a 	mov	r9,zero
 8008738:	2aff3c36 	bltu	r5,r11,800842c <__alt_data_end+0xfc00842c>
 800873c:	1c000007 	ldb	r16,0(r3)
 8008740:	4a4002a4 	muli	r9,r9,10
 8008744:	18c00044 	addi	r3,r3,1
 8008748:	5a53883a 	add	r9,r11,r9
 800874c:	82fff404 	addi	r11,r16,-48
 8008750:	2afffa2e 	bgeu	r5,r11,800873c <__alt_data_end+0xfc00873c>
 8008754:	483f350e 	bge	r9,zero,800842c <__alt_data_end+0xfc00842c>
 8008758:	027fffc4 	movi	r9,-1
 800875c:	003f3306 	br	800842c <__alt_data_end+0xfc00842c>
 8008760:	8c402014 	ori	r17,r17,128
 8008764:	1805883a 	mov	r2,r3
 8008768:	1c000007 	ldb	r16,0(r3)
 800876c:	003f2e06 	br	8008428 <__alt_data_end+0xfc008428>
 8008770:	db012d17 	ldw	r12,1204(sp)
 8008774:	dac12d17 	ldw	r11,1204(sp)
 8008778:	d8c12a15 	stw	r3,1192(sp)
 800877c:	63000017 	ldw	r12,0(r12)
 8008780:	5ac00117 	ldw	r11,4(r11)
 8008784:	d9812785 	stb	r6,1182(sp)
 8008788:	6009883a 	mov	r4,r12
 800878c:	580b883a 	mov	r5,r11
 8008790:	db013715 	stw	r12,1244(sp)
 8008794:	da013f15 	stw	r8,1276(sp)
 8008798:	da413e15 	stw	r9,1272(sp)
 800879c:	dac13915 	stw	r11,1252(sp)
 80087a0:	800ebdc0 	call	800ebdc <__fpclassifyd>
 80087a4:	db012d17 	ldw	r12,1204(sp)
 80087a8:	04800044 	movi	r18,1
 80087ac:	da013f17 	ldw	r8,1276(sp)
 80087b0:	64c00204 	addi	r19,r12,8
 80087b4:	da413e17 	ldw	r9,1272(sp)
 80087b8:	d9013717 	ldw	r4,1244(sp)
 80087bc:	d9413917 	ldw	r5,1252(sp)
 80087c0:	1484581e 	bne	r2,r18,8009924 <___vfprintf_internal_r+0x1698>
 80087c4:	000d883a 	mov	r6,zero
 80087c8:	000f883a 	mov	r7,zero
 80087cc:	80138140 	call	8013814 <__ledf2>
 80087d0:	da013f17 	ldw	r8,1276(sp)
 80087d4:	1005ef16 	blt	r2,zero,8009f94 <___vfprintf_internal_r+0x1d08>
 80087d8:	dd412783 	ldbu	r21,1182(sp)
 80087dc:	008011c4 	movi	r2,71
 80087e0:	14053b0e 	bge	r2,r16,8009cd0 <___vfprintf_internal_r+0x1a44>
 80087e4:	00c200b4 	movhi	r3,2050
 80087e8:	18c5ef04 	addi	r3,r3,6076
 80087ec:	d8c13115 	stw	r3,1220(sp)
 80087f0:	02c000c4 	movi	r11,3
 80087f4:	00bfdfc4 	movi	r2,-129
 80087f8:	dac12b15 	stw	r11,1196(sp)
 80087fc:	88a2703a 	and	r17,r17,r2
 8008800:	dcc12d15 	stw	r19,1204(sp)
 8008804:	5825883a 	mov	r18,r11
 8008808:	d8013215 	stw	zero,1224(sp)
 800880c:	d8013415 	stw	zero,1232(sp)
 8008810:	00003206 	br	80088dc <___vfprintf_internal_r+0x650>
 8008814:	8c400214 	ori	r17,r17,8
 8008818:	1805883a 	mov	r2,r3
 800881c:	1c000007 	ldb	r16,0(r3)
 8008820:	003f0106 	br	8008428 <__alt_data_end+0xfc008428>
 8008824:	8c400414 	ori	r17,r17,16
 8008828:	d8c12a15 	stw	r3,1192(sp)
 800882c:	88c0080c 	andi	r3,r17,32
 8008830:	d8812d17 	ldw	r2,1204(sp)
 8008834:	18017726 	beq	r3,zero,8008e14 <___vfprintf_internal_r+0xb88>
 8008838:	db012d17 	ldw	r12,1204(sp)
 800883c:	14c00017 	ldw	r19,0(r2)
 8008840:	17000117 	ldw	fp,4(r2)
 8008844:	63000204 	addi	r12,r12,8
 8008848:	db012d15 	stw	r12,1204(sp)
 800884c:	0005883a 	mov	r2,zero
 8008850:	9f06b03a 	or	r3,r19,fp
 8008854:	d8012785 	stb	zero,1182(sp)
 8008858:	da413215 	stw	r9,1224(sp)
 800885c:	002b883a 	mov	r21,zero
 8008860:	48000216 	blt	r9,zero,800886c <___vfprintf_internal_r+0x5e0>
 8008864:	013fdfc4 	movi	r4,-129
 8008868:	8922703a 	and	r17,r17,r4
 800886c:	1801ed1e 	bne	r3,zero,8009024 <___vfprintf_internal_r+0xd98>
 8008870:	4802e026 	beq	r9,zero,80093f4 <___vfprintf_internal_r+0x1168>
 8008874:	10803fcc 	andi	r2,r2,255
 8008878:	00c00044 	movi	r3,1
 800887c:	10c20f26 	beq	r2,r3,80090bc <___vfprintf_internal_r+0xe30>
 8008880:	00c00084 	movi	r3,2
 8008884:	10c2fd26 	beq	r2,r3,800947c <___vfprintf_internal_r+0x11f0>
 8008888:	d8c10e04 	addi	r3,sp,1080
 800888c:	9808d0fa 	srli	r4,r19,3
 8008890:	e00a977a 	slli	r5,fp,29
 8008894:	e038d0fa 	srli	fp,fp,3
 8008898:	9cc001cc 	andi	r19,r19,7
 800889c:	98800c04 	addi	r2,r19,48
 80088a0:	18ffffc4 	addi	r3,r3,-1
 80088a4:	2926b03a 	or	r19,r5,r4
 80088a8:	18800005 	stb	r2,0(r3)
 80088ac:	9f08b03a 	or	r4,r19,fp
 80088b0:	203ff61e 	bne	r4,zero,800888c <__alt_data_end+0xfc00888c>
 80088b4:	8900004c 	andi	r4,r17,1
 80088b8:	d8c13115 	stw	r3,1220(sp)
 80088bc:	2003791e 	bne	r4,zero,80096a4 <___vfprintf_internal_r+0x1418>
 80088c0:	dac12817 	ldw	r11,1184(sp)
 80088c4:	58e5c83a 	sub	r18,r11,r3
 80088c8:	9005883a 	mov	r2,r18
 80088cc:	9240010e 	bge	r18,r9,80088d4 <___vfprintf_internal_r+0x648>
 80088d0:	4805883a 	mov	r2,r9
 80088d4:	d8812b15 	stw	r2,1196(sp)
 80088d8:	d8013415 	stw	zero,1232(sp)
 80088dc:	a8803fcc 	andi	r2,r21,255
 80088e0:	1080201c 	xori	r2,r2,128
 80088e4:	10bfe004 	addi	r2,r2,-128
 80088e8:	10000326 	beq	r2,zero,80088f8 <___vfprintf_internal_r+0x66c>
 80088ec:	db012b17 	ldw	r12,1196(sp)
 80088f0:	63000044 	addi	r12,r12,1
 80088f4:	db012b15 	stw	r12,1196(sp)
 80088f8:	88c0008c 	andi	r3,r17,2
 80088fc:	d8c12c15 	stw	r3,1200(sp)
 8008900:	18000326 	beq	r3,zero,8008910 <___vfprintf_internal_r+0x684>
 8008904:	dac12b17 	ldw	r11,1196(sp)
 8008908:	5ac00084 	addi	r11,r11,2
 800890c:	dac12b15 	stw	r11,1196(sp)
 8008910:	8b00210c 	andi	r12,r17,132
 8008914:	db013015 	stw	r12,1216(sp)
 8008918:	6001c01e 	bne	r12,zero,800901c <___vfprintf_internal_r+0xd90>
 800891c:	dac12e17 	ldw	r11,1208(sp)
 8008920:	db012b17 	ldw	r12,1196(sp)
 8008924:	5b39c83a 	sub	fp,r11,r12
 8008928:	0701bc0e 	bge	zero,fp,800901c <___vfprintf_internal_r+0xd90>
 800892c:	02400404 	movi	r9,16
 8008930:	d8c12017 	ldw	r3,1152(sp)
 8008934:	d8811f17 	ldw	r2,1148(sp)
 8008938:	4f05220e 	bge	r9,fp,8009dc4 <___vfprintf_internal_r+0x1b38>
 800893c:	014200b4 	movhi	r5,2050
 8008940:	29460a84 	addi	r5,r5,6186
 8008944:	d9413615 	stw	r5,1240(sp)
 8008948:	482b883a 	mov	r21,r9
 800894c:	04c001c4 	movi	r19,7
 8008950:	00000306 	br	8008960 <___vfprintf_internal_r+0x6d4>
 8008954:	e73ffc04 	addi	fp,fp,-16
 8008958:	42000204 	addi	r8,r8,8
 800895c:	af00130e 	bge	r21,fp,80089ac <___vfprintf_internal_r+0x720>
 8008960:	02c200b4 	movhi	r11,2050
 8008964:	18c00404 	addi	r3,r3,16
 8008968:	10800044 	addi	r2,r2,1
 800896c:	5ac60a84 	addi	r11,r11,6186
 8008970:	42c00015 	stw	r11,0(r8)
 8008974:	45400115 	stw	r21,4(r8)
 8008978:	d8c12015 	stw	r3,1152(sp)
 800897c:	d8811f15 	stw	r2,1148(sp)
 8008980:	98bff40e 	bge	r19,r2,8008954 <__alt_data_end+0xfc008954>
 8008984:	b009883a 	mov	r4,r22
 8008988:	b80b883a 	mov	r5,r23
 800898c:	d9811e04 	addi	r6,sp,1144
 8008990:	80101780 	call	8010178 <__sprint_r>
 8008994:	103f541e 	bne	r2,zero,80086e8 <__alt_data_end+0xfc0086e8>
 8008998:	e73ffc04 	addi	fp,fp,-16
 800899c:	d8c12017 	ldw	r3,1152(sp)
 80089a0:	d8811f17 	ldw	r2,1148(sp)
 80089a4:	da000404 	addi	r8,sp,16
 80089a8:	af3fed16 	blt	r21,fp,8008960 <__alt_data_end+0xfc008960>
 80089ac:	db013617 	ldw	r12,1240(sp)
 80089b0:	e0c7883a 	add	r3,fp,r3
 80089b4:	10800044 	addi	r2,r2,1
 80089b8:	43000015 	stw	r12,0(r8)
 80089bc:	47000115 	stw	fp,4(r8)
 80089c0:	d8c12015 	stw	r3,1152(sp)
 80089c4:	d8811f15 	stw	r2,1148(sp)
 80089c8:	010001c4 	movi	r4,7
 80089cc:	2082f416 	blt	r4,r2,80095a0 <___vfprintf_internal_r+0x1314>
 80089d0:	d8812787 	ldb	r2,1182(sp)
 80089d4:	42000204 	addi	r8,r8,8
 80089d8:	10000c26 	beq	r2,zero,8008a0c <___vfprintf_internal_r+0x780>
 80089dc:	d8811f17 	ldw	r2,1148(sp)
 80089e0:	d9012784 	addi	r4,sp,1182
 80089e4:	18c00044 	addi	r3,r3,1
 80089e8:	10800044 	addi	r2,r2,1
 80089ec:	41000015 	stw	r4,0(r8)
 80089f0:	01000044 	movi	r4,1
 80089f4:	41000115 	stw	r4,4(r8)
 80089f8:	d8c12015 	stw	r3,1152(sp)
 80089fc:	d8811f15 	stw	r2,1148(sp)
 8008a00:	010001c4 	movi	r4,7
 8008a04:	20828d16 	blt	r4,r2,800943c <___vfprintf_internal_r+0x11b0>
 8008a08:	42000204 	addi	r8,r8,8
 8008a0c:	dac12c17 	ldw	r11,1200(sp)
 8008a10:	58000c26 	beq	r11,zero,8008a44 <___vfprintf_internal_r+0x7b8>
 8008a14:	d8811f17 	ldw	r2,1148(sp)
 8008a18:	d9012704 	addi	r4,sp,1180
 8008a1c:	18c00084 	addi	r3,r3,2
 8008a20:	10800044 	addi	r2,r2,1
 8008a24:	41000015 	stw	r4,0(r8)
 8008a28:	01000084 	movi	r4,2
 8008a2c:	41000115 	stw	r4,4(r8)
 8008a30:	d8c12015 	stw	r3,1152(sp)
 8008a34:	d8811f15 	stw	r2,1148(sp)
 8008a38:	010001c4 	movi	r4,7
 8008a3c:	20828716 	blt	r4,r2,800945c <___vfprintf_internal_r+0x11d0>
 8008a40:	42000204 	addi	r8,r8,8
 8008a44:	db013017 	ldw	r12,1216(sp)
 8008a48:	00802004 	movi	r2,128
 8008a4c:	6081e926 	beq	r12,r2,80091f4 <___vfprintf_internal_r+0xf68>
 8008a50:	db013217 	ldw	r12,1224(sp)
 8008a54:	64abc83a 	sub	r21,r12,r18
 8008a58:	0540260e 	bge	zero,r21,8008af4 <___vfprintf_internal_r+0x868>
 8008a5c:	07000404 	movi	fp,16
 8008a60:	d8811f17 	ldw	r2,1148(sp)
 8008a64:	e5443d0e 	bge	fp,r21,8009b5c <___vfprintf_internal_r+0x18d0>
 8008a68:	014200b4 	movhi	r5,2050
 8008a6c:	29460684 	addi	r5,r5,6170
 8008a70:	d9412c15 	stw	r5,1200(sp)
 8008a74:	04c001c4 	movi	r19,7
 8008a78:	00000306 	br	8008a88 <___vfprintf_internal_r+0x7fc>
 8008a7c:	ad7ffc04 	addi	r21,r21,-16
 8008a80:	42000204 	addi	r8,r8,8
 8008a84:	e540110e 	bge	fp,r21,8008acc <___vfprintf_internal_r+0x840>
 8008a88:	18c00404 	addi	r3,r3,16
 8008a8c:	10800044 	addi	r2,r2,1
 8008a90:	45000015 	stw	r20,0(r8)
 8008a94:	47000115 	stw	fp,4(r8)
 8008a98:	d8c12015 	stw	r3,1152(sp)
 8008a9c:	d8811f15 	stw	r2,1148(sp)
 8008aa0:	98bff60e 	bge	r19,r2,8008a7c <__alt_data_end+0xfc008a7c>
 8008aa4:	b009883a 	mov	r4,r22
 8008aa8:	b80b883a 	mov	r5,r23
 8008aac:	d9811e04 	addi	r6,sp,1144
 8008ab0:	80101780 	call	8010178 <__sprint_r>
 8008ab4:	103f0c1e 	bne	r2,zero,80086e8 <__alt_data_end+0xfc0086e8>
 8008ab8:	ad7ffc04 	addi	r21,r21,-16
 8008abc:	d8c12017 	ldw	r3,1152(sp)
 8008ac0:	d8811f17 	ldw	r2,1148(sp)
 8008ac4:	da000404 	addi	r8,sp,16
 8008ac8:	e57fef16 	blt	fp,r21,8008a88 <__alt_data_end+0xfc008a88>
 8008acc:	dac12c17 	ldw	r11,1200(sp)
 8008ad0:	1d47883a 	add	r3,r3,r21
 8008ad4:	10800044 	addi	r2,r2,1
 8008ad8:	42c00015 	stw	r11,0(r8)
 8008adc:	45400115 	stw	r21,4(r8)
 8008ae0:	d8c12015 	stw	r3,1152(sp)
 8008ae4:	d8811f15 	stw	r2,1148(sp)
 8008ae8:	010001c4 	movi	r4,7
 8008aec:	20824b16 	blt	r4,r2,800941c <___vfprintf_internal_r+0x1190>
 8008af0:	42000204 	addi	r8,r8,8
 8008af4:	8880400c 	andi	r2,r17,256
 8008af8:	1001761e 	bne	r2,zero,80090d4 <___vfprintf_internal_r+0xe48>
 8008afc:	d8811f17 	ldw	r2,1148(sp)
 8008b00:	db013117 	ldw	r12,1220(sp)
 8008b04:	1c87883a 	add	r3,r3,r18
 8008b08:	10800044 	addi	r2,r2,1
 8008b0c:	43000015 	stw	r12,0(r8)
 8008b10:	44800115 	stw	r18,4(r8)
 8008b14:	d8c12015 	stw	r3,1152(sp)
 8008b18:	d8811f15 	stw	r2,1148(sp)
 8008b1c:	010001c4 	movi	r4,7
 8008b20:	20822616 	blt	r4,r2,80093bc <___vfprintf_internal_r+0x1130>
 8008b24:	42000204 	addi	r8,r8,8
 8008b28:	8c40010c 	andi	r17,r17,4
 8008b2c:	88003126 	beq	r17,zero,8008bf4 <___vfprintf_internal_r+0x968>
 8008b30:	db012e17 	ldw	r12,1208(sp)
 8008b34:	dac12b17 	ldw	r11,1196(sp)
 8008b38:	62e1c83a 	sub	r16,r12,r11
 8008b3c:	04002d0e 	bge	zero,r16,8008bf4 <___vfprintf_internal_r+0x968>
 8008b40:	04400404 	movi	r17,16
 8008b44:	d8811f17 	ldw	r2,1148(sp)
 8008b48:	8c04df0e 	bge	r17,r16,8009ec8 <___vfprintf_internal_r+0x1c3c>
 8008b4c:	010200b4 	movhi	r4,2050
 8008b50:	21060a84 	addi	r4,r4,6186
 8008b54:	d9013615 	stw	r4,1240(sp)
 8008b58:	048001c4 	movi	r18,7
 8008b5c:	00000306 	br	8008b6c <___vfprintf_internal_r+0x8e0>
 8008b60:	843ffc04 	addi	r16,r16,-16
 8008b64:	42000204 	addi	r8,r8,8
 8008b68:	8c00130e 	bge	r17,r16,8008bb8 <___vfprintf_internal_r+0x92c>
 8008b6c:	014200b4 	movhi	r5,2050
 8008b70:	18c00404 	addi	r3,r3,16
 8008b74:	10800044 	addi	r2,r2,1
 8008b78:	29460a84 	addi	r5,r5,6186
 8008b7c:	41400015 	stw	r5,0(r8)
 8008b80:	44400115 	stw	r17,4(r8)
 8008b84:	d8c12015 	stw	r3,1152(sp)
 8008b88:	d8811f15 	stw	r2,1148(sp)
 8008b8c:	90bff40e 	bge	r18,r2,8008b60 <__alt_data_end+0xfc008b60>
 8008b90:	b009883a 	mov	r4,r22
 8008b94:	b80b883a 	mov	r5,r23
 8008b98:	d9811e04 	addi	r6,sp,1144
 8008b9c:	80101780 	call	8010178 <__sprint_r>
 8008ba0:	103ed11e 	bne	r2,zero,80086e8 <__alt_data_end+0xfc0086e8>
 8008ba4:	843ffc04 	addi	r16,r16,-16
 8008ba8:	d8c12017 	ldw	r3,1152(sp)
 8008bac:	d8811f17 	ldw	r2,1148(sp)
 8008bb0:	da000404 	addi	r8,sp,16
 8008bb4:	8c3fed16 	blt	r17,r16,8008b6c <__alt_data_end+0xfc008b6c>
 8008bb8:	dac13617 	ldw	r11,1240(sp)
 8008bbc:	1c07883a 	add	r3,r3,r16
 8008bc0:	10800044 	addi	r2,r2,1
 8008bc4:	42c00015 	stw	r11,0(r8)
 8008bc8:	44000115 	stw	r16,4(r8)
 8008bcc:	d8c12015 	stw	r3,1152(sp)
 8008bd0:	d8811f15 	stw	r2,1148(sp)
 8008bd4:	010001c4 	movi	r4,7
 8008bd8:	2080060e 	bge	r4,r2,8008bf4 <___vfprintf_internal_r+0x968>
 8008bdc:	b009883a 	mov	r4,r22
 8008be0:	b80b883a 	mov	r5,r23
 8008be4:	d9811e04 	addi	r6,sp,1144
 8008be8:	80101780 	call	8010178 <__sprint_r>
 8008bec:	103ebe1e 	bne	r2,zero,80086e8 <__alt_data_end+0xfc0086e8>
 8008bf0:	d8c12017 	ldw	r3,1152(sp)
 8008bf4:	d8812b17 	ldw	r2,1196(sp)
 8008bf8:	db012e17 	ldw	r12,1208(sp)
 8008bfc:	1300010e 	bge	r2,r12,8008c04 <___vfprintf_internal_r+0x978>
 8008c00:	6005883a 	mov	r2,r12
 8008c04:	dac12f17 	ldw	r11,1212(sp)
 8008c08:	5897883a 	add	r11,r11,r2
 8008c0c:	dac12f15 	stw	r11,1212(sp)
 8008c10:	1801f21e 	bne	r3,zero,80093dc <___vfprintf_internal_r+0x1150>
 8008c14:	d8011f15 	stw	zero,1148(sp)
 8008c18:	da000404 	addi	r8,sp,16
 8008c1c:	003dd806 	br	8008380 <__alt_data_end+0xfc008380>
 8008c20:	8c400414 	ori	r17,r17,16
 8008c24:	d8c12a15 	stw	r3,1192(sp)
 8008c28:	88c0080c 	andi	r3,r17,32
 8008c2c:	d8812d17 	ldw	r2,1204(sp)
 8008c30:	18004626 	beq	r3,zero,8008d4c <___vfprintf_internal_r+0xac0>
 8008c34:	dac12d17 	ldw	r11,1204(sp)
 8008c38:	14c00017 	ldw	r19,0(r2)
 8008c3c:	17000117 	ldw	fp,4(r2)
 8008c40:	5ac00204 	addi	r11,r11,8
 8008c44:	dac12d15 	stw	r11,1204(sp)
 8008c48:	00800044 	movi	r2,1
 8008c4c:	9f06b03a 	or	r3,r19,fp
 8008c50:	003f0006 	br	8008854 <__alt_data_end+0xfc008854>
 8008c54:	1805883a 	mov	r2,r3
 8008c58:	d8012e15 	stw	zero,1208(sp)
 8008c5c:	82fff404 	addi	r11,r16,-48
 8008c60:	0019883a 	mov	r12,zero
 8008c64:	14000007 	ldb	r16,0(r2)
 8008c68:	630002a4 	muli	r12,r12,10
 8008c6c:	18c00044 	addi	r3,r3,1
 8008c70:	1805883a 	mov	r2,r3
 8008c74:	62d9883a 	add	r12,r12,r11
 8008c78:	82fff404 	addi	r11,r16,-48
 8008c7c:	2afff92e 	bgeu	r5,r11,8008c64 <__alt_data_end+0xfc008c64>
 8008c80:	db012e15 	stw	r12,1208(sp)
 8008c84:	003de906 	br	800842c <__alt_data_end+0xfc00842c>
 8008c88:	8c400414 	ori	r17,r17,16
 8008c8c:	d8c12a15 	stw	r3,1192(sp)
 8008c90:	d9812785 	stb	r6,1182(sp)
 8008c94:	8880080c 	andi	r2,r17,32
 8008c98:	d8c12d17 	ldw	r3,1204(sp)
 8008c9c:	10007a26 	beq	r2,zero,8008e88 <___vfprintf_internal_r+0xbfc>
 8008ca0:	db012d17 	ldw	r12,1204(sp)
 8008ca4:	18800117 	ldw	r2,4(r3)
 8008ca8:	1cc00017 	ldw	r19,0(r3)
 8008cac:	63000204 	addi	r12,r12,8
 8008cb0:	db012d15 	stw	r12,1204(sp)
 8008cb4:	1039883a 	mov	fp,r2
 8008cb8:	10031016 	blt	r2,zero,80098fc <___vfprintf_internal_r+0x1670>
 8008cbc:	dd412783 	ldbu	r21,1182(sp)
 8008cc0:	da413215 	stw	r9,1224(sp)
 8008cc4:	00800044 	movi	r2,1
 8008cc8:	9f06b03a 	or	r3,r19,fp
 8008ccc:	003ee406 	br	8008860 <__alt_data_end+0xfc008860>
 8008cd0:	030200b4 	movhi	r12,2050
 8008cd4:	6305f204 	addi	r12,r12,6088
 8008cd8:	d8c12a15 	stw	r3,1192(sp)
 8008cdc:	d9812785 	stb	r6,1182(sp)
 8008ce0:	db013b15 	stw	r12,1260(sp)
 8008ce4:	88c0080c 	andi	r3,r17,32
 8008ce8:	d8812d17 	ldw	r2,1204(sp)
 8008cec:	18002b26 	beq	r3,zero,8008d9c <___vfprintf_internal_r+0xb10>
 8008cf0:	dac12d17 	ldw	r11,1204(sp)
 8008cf4:	14c00017 	ldw	r19,0(r2)
 8008cf8:	17000117 	ldw	fp,4(r2)
 8008cfc:	5ac00204 	addi	r11,r11,8
 8008d00:	dac12d15 	stw	r11,1204(sp)
 8008d04:	8880004c 	andi	r2,r17,1
 8008d08:	10025b26 	beq	r2,zero,8009678 <___vfprintf_internal_r+0x13ec>
 8008d0c:	9f06b03a 	or	r3,r19,fp
 8008d10:	18037026 	beq	r3,zero,8009ad4 <___vfprintf_internal_r+0x1848>
 8008d14:	00800c04 	movi	r2,48
 8008d18:	d8812705 	stb	r2,1180(sp)
 8008d1c:	dc012745 	stb	r16,1181(sp)
 8008d20:	8c400094 	ori	r17,r17,2
 8008d24:	00800084 	movi	r2,2
 8008d28:	003eca06 	br	8008854 <__alt_data_end+0xfc008854>
 8008d2c:	8c400814 	ori	r17,r17,32
 8008d30:	1805883a 	mov	r2,r3
 8008d34:	1c000007 	ldb	r16,0(r3)
 8008d38:	003dbb06 	br	8008428 <__alt_data_end+0xfc008428>
 8008d3c:	d8c12a15 	stw	r3,1192(sp)
 8008d40:	88c0080c 	andi	r3,r17,32
 8008d44:	d8812d17 	ldw	r2,1204(sp)
 8008d48:	183fba1e 	bne	r3,zero,8008c34 <__alt_data_end+0xfc008c34>
 8008d4c:	88c0040c 	andi	r3,r17,16
 8008d50:	18024c1e 	bne	r3,zero,8009684 <___vfprintf_internal_r+0x13f8>
 8008d54:	88c0100c 	andi	r3,r17,64
 8008d58:	18024a26 	beq	r3,zero,8009684 <___vfprintf_internal_r+0x13f8>
 8008d5c:	dac12d17 	ldw	r11,1204(sp)
 8008d60:	14c0000b 	ldhu	r19,0(r2)
 8008d64:	0039883a 	mov	fp,zero
 8008d68:	5ac00104 	addi	r11,r11,4
 8008d6c:	dac12d15 	stw	r11,1204(sp)
 8008d70:	00800044 	movi	r2,1
 8008d74:	9807883a 	mov	r3,r19
 8008d78:	003eb606 	br	8008854 <__alt_data_end+0xfc008854>
 8008d7c:	008200b4 	movhi	r2,2050
 8008d80:	1085f704 	addi	r2,r2,6108
 8008d84:	d8c12a15 	stw	r3,1192(sp)
 8008d88:	d8813b15 	stw	r2,1260(sp)
 8008d8c:	d9812785 	stb	r6,1182(sp)
 8008d90:	88c0080c 	andi	r3,r17,32
 8008d94:	d8812d17 	ldw	r2,1204(sp)
 8008d98:	183fd51e 	bne	r3,zero,8008cf0 <__alt_data_end+0xfc008cf0>
 8008d9c:	88c0040c 	andi	r3,r17,16
 8008da0:	18034126 	beq	r3,zero,8009aa8 <___vfprintf_internal_r+0x181c>
 8008da4:	db012d17 	ldw	r12,1204(sp)
 8008da8:	14c00017 	ldw	r19,0(r2)
 8008dac:	0039883a 	mov	fp,zero
 8008db0:	63000104 	addi	r12,r12,4
 8008db4:	db012d15 	stw	r12,1204(sp)
 8008db8:	003fd206 	br	8008d04 <__alt_data_end+0xfc008d04>
 8008dbc:	1c000007 	ldb	r16,0(r3)
 8008dc0:	81c3d626 	beq	r16,r7,8009d1c <___vfprintf_internal_r+0x1a90>
 8008dc4:	8c400414 	ori	r17,r17,16
 8008dc8:	1805883a 	mov	r2,r3
 8008dcc:	003d9606 	br	8008428 <__alt_data_end+0xfc008428>
 8008dd0:	d8c12a15 	stw	r3,1192(sp)
 8008dd4:	d9812785 	stb	r6,1182(sp)
 8008dd8:	8880080c 	andi	r2,r17,32
 8008ddc:	10033f26 	beq	r2,zero,8009adc <___vfprintf_internal_r+0x1850>
 8008de0:	db012d17 	ldw	r12,1204(sp)
 8008de4:	dac12f17 	ldw	r11,1212(sp)
 8008de8:	60800017 	ldw	r2,0(r12)
 8008dec:	5807d7fa 	srai	r3,r11,31
 8008df0:	63000104 	addi	r12,r12,4
 8008df4:	db012d15 	stw	r12,1204(sp)
 8008df8:	12c00015 	stw	r11,0(r2)
 8008dfc:	10c00115 	stw	r3,4(r2)
 8008e00:	003d5f06 	br	8008380 <__alt_data_end+0xfc008380>
 8008e04:	d8c12a15 	stw	r3,1192(sp)
 8008e08:	88c0080c 	andi	r3,r17,32
 8008e0c:	d8812d17 	ldw	r2,1204(sp)
 8008e10:	183e891e 	bne	r3,zero,8008838 <__alt_data_end+0xfc008838>
 8008e14:	88c0040c 	andi	r3,r17,16
 8008e18:	1801ea1e 	bne	r3,zero,80095c4 <___vfprintf_internal_r+0x1338>
 8008e1c:	88c0100c 	andi	r3,r17,64
 8008e20:	1801e826 	beq	r3,zero,80095c4 <___vfprintf_internal_r+0x1338>
 8008e24:	db012d17 	ldw	r12,1204(sp)
 8008e28:	14c0000b 	ldhu	r19,0(r2)
 8008e2c:	0039883a 	mov	fp,zero
 8008e30:	63000104 	addi	r12,r12,4
 8008e34:	db012d15 	stw	r12,1204(sp)
 8008e38:	0005883a 	mov	r2,zero
 8008e3c:	9807883a 	mov	r3,r19
 8008e40:	003e8406 	br	8008854 <__alt_data_end+0xfc008854>
 8008e44:	30803fcc 	andi	r2,r6,255
 8008e48:	1080201c 	xori	r2,r2,128
 8008e4c:	10bfe004 	addi	r2,r2,-128
 8008e50:	10031d1e 	bne	r2,zero,8009ac8 <___vfprintf_internal_r+0x183c>
 8008e54:	1805883a 	mov	r2,r3
 8008e58:	01800804 	movi	r6,32
 8008e5c:	1c000007 	ldb	r16,0(r3)
 8008e60:	003d7106 	br	8008428 <__alt_data_end+0xfc008428>
 8008e64:	8c400054 	ori	r17,r17,1
 8008e68:	1805883a 	mov	r2,r3
 8008e6c:	1c000007 	ldb	r16,0(r3)
 8008e70:	003d6d06 	br	8008428 <__alt_data_end+0xfc008428>
 8008e74:	d8c12a15 	stw	r3,1192(sp)
 8008e78:	d9812785 	stb	r6,1182(sp)
 8008e7c:	8880080c 	andi	r2,r17,32
 8008e80:	d8c12d17 	ldw	r3,1204(sp)
 8008e84:	103f861e 	bne	r2,zero,8008ca0 <__alt_data_end+0xfc008ca0>
 8008e88:	8880040c 	andi	r2,r17,16
 8008e8c:	1001f31e 	bne	r2,zero,800965c <___vfprintf_internal_r+0x13d0>
 8008e90:	8880100c 	andi	r2,r17,64
 8008e94:	1001f126 	beq	r2,zero,800965c <___vfprintf_internal_r+0x13d0>
 8008e98:	1cc0000f 	ldh	r19,0(r3)
 8008e9c:	db012d17 	ldw	r12,1204(sp)
 8008ea0:	9839d7fa 	srai	fp,r19,31
 8008ea4:	63000104 	addi	r12,r12,4
 8008ea8:	db012d15 	stw	r12,1204(sp)
 8008eac:	e005883a 	mov	r2,fp
 8008eb0:	003f8106 	br	8008cb8 <__alt_data_end+0xfc008cb8>
 8008eb4:	8c401014 	ori	r17,r17,64
 8008eb8:	1805883a 	mov	r2,r3
 8008ebc:	1c000007 	ldb	r16,0(r3)
 8008ec0:	003d5906 	br	8008428 <__alt_data_end+0xfc008428>
 8008ec4:	db012d17 	ldw	r12,1204(sp)
 8008ec8:	d8c12a15 	stw	r3,1192(sp)
 8008ecc:	00c00044 	movi	r3,1
 8008ed0:	60800017 	ldw	r2,0(r12)
 8008ed4:	63000104 	addi	r12,r12,4
 8008ed8:	d8c12b15 	stw	r3,1196(sp)
 8008edc:	d8012785 	stb	zero,1182(sp)
 8008ee0:	d8810405 	stb	r2,1040(sp)
 8008ee4:	db012d15 	stw	r12,1204(sp)
 8008ee8:	dac10404 	addi	r11,sp,1040
 8008eec:	1825883a 	mov	r18,r3
 8008ef0:	d8013215 	stw	zero,1224(sp)
 8008ef4:	d8013415 	stw	zero,1232(sp)
 8008ef8:	dac13115 	stw	r11,1220(sp)
 8008efc:	0005883a 	mov	r2,zero
 8008f00:	003e7d06 	br	80088f8 <__alt_data_end+0xfc0088f8>
 8008f04:	db012d17 	ldw	r12,1204(sp)
 8008f08:	00800c04 	movi	r2,48
 8008f0c:	d8812705 	stb	r2,1180(sp)
 8008f10:	64c00017 	ldw	r19,0(r12)
 8008f14:	00801e04 	movi	r2,120
 8008f18:	d8812745 	stb	r2,1181(sp)
 8008f1c:	008200b4 	movhi	r2,2050
 8008f20:	1085f704 	addi	r2,r2,6108
 8008f24:	63000104 	addi	r12,r12,4
 8008f28:	d8c12a15 	stw	r3,1192(sp)
 8008f2c:	d8813b15 	stw	r2,1260(sp)
 8008f30:	0039883a 	mov	fp,zero
 8008f34:	8c400094 	ori	r17,r17,2
 8008f38:	db012d15 	stw	r12,1204(sp)
 8008f3c:	00800084 	movi	r2,2
 8008f40:	04001e04 	movi	r16,120
 8008f44:	9807883a 	mov	r3,r19
 8008f48:	003e4206 	br	8008854 <__alt_data_end+0xfc008854>
 8008f4c:	dac12d17 	ldw	r11,1204(sp)
 8008f50:	db012d17 	ldw	r12,1204(sp)
 8008f54:	d8c12a15 	stw	r3,1192(sp)
 8008f58:	5ac00017 	ldw	r11,0(r11)
 8008f5c:	d8012785 	stb	zero,1182(sp)
 8008f60:	64c00104 	addi	r19,r12,4
 8008f64:	dac13115 	stw	r11,1220(sp)
 8008f68:	5803e826 	beq	r11,zero,8009f0c <___vfprintf_internal_r+0x1c80>
 8008f6c:	d9013117 	ldw	r4,1220(sp)
 8008f70:	48037a16 	blt	r9,zero,8009d5c <___vfprintf_internal_r+0x1ad0>
 8008f74:	480d883a 	mov	r6,r9
 8008f78:	000b883a 	mov	r5,zero
 8008f7c:	da013f15 	stw	r8,1276(sp)
 8008f80:	da413e15 	stw	r9,1272(sp)
 8008f84:	800d7a40 	call	800d7a4 <memchr>
 8008f88:	da013f17 	ldw	r8,1276(sp)
 8008f8c:	da413e17 	ldw	r9,1272(sp)
 8008f90:	10044426 	beq	r2,zero,800a0a4 <___vfprintf_internal_r+0x1e18>
 8008f94:	d8c13117 	ldw	r3,1220(sp)
 8008f98:	10e5c83a 	sub	r18,r2,r3
 8008f9c:	4c834416 	blt	r9,r18,8009cb0 <___vfprintf_internal_r+0x1a24>
 8008fa0:	9005883a 	mov	r2,r18
 8008fa4:	90037216 	blt	r18,zero,8009d70 <___vfprintf_internal_r+0x1ae4>
 8008fa8:	dd412783 	ldbu	r21,1182(sp)
 8008fac:	d8812b15 	stw	r2,1196(sp)
 8008fb0:	dcc12d15 	stw	r19,1204(sp)
 8008fb4:	d8013215 	stw	zero,1224(sp)
 8008fb8:	d8013415 	stw	zero,1232(sp)
 8008fbc:	003e4706 	br	80088dc <__alt_data_end+0xfc0088dc>
 8008fc0:	dac12d17 	ldw	r11,1204(sp)
 8008fc4:	db012d17 	ldw	r12,1204(sp)
 8008fc8:	5ac00017 	ldw	r11,0(r11)
 8008fcc:	dac12e15 	stw	r11,1208(sp)
 8008fd0:	62c00104 	addi	r11,r12,4
 8008fd4:	db012e17 	ldw	r12,1208(sp)
 8008fd8:	60034a16 	blt	r12,zero,8009d04 <___vfprintf_internal_r+0x1a78>
 8008fdc:	dac12d15 	stw	r11,1204(sp)
 8008fe0:	1805883a 	mov	r2,r3
 8008fe4:	1c000007 	ldb	r16,0(r3)
 8008fe8:	003d0f06 	br	8008428 <__alt_data_end+0xfc008428>
 8008fec:	1805883a 	mov	r2,r3
 8008ff0:	01800ac4 	movi	r6,43
 8008ff4:	1c000007 	ldb	r16,0(r3)
 8008ff8:	003d0b06 	br	8008428 <__alt_data_end+0xfc008428>
 8008ffc:	d8c12a15 	stw	r3,1192(sp)
 8009000:	d9812785 	stb	r6,1182(sp)
 8009004:	803db226 	beq	r16,zero,80086d0 <__alt_data_end+0xfc0086d0>
 8009008:	00c00044 	movi	r3,1
 800900c:	d8c12b15 	stw	r3,1196(sp)
 8009010:	dc010405 	stb	r16,1040(sp)
 8009014:	d8012785 	stb	zero,1182(sp)
 8009018:	003fb306 	br	8008ee8 <__alt_data_end+0xfc008ee8>
 800901c:	d8c12017 	ldw	r3,1152(sp)
 8009020:	003e6d06 	br	80089d8 <__alt_data_end+0xfc0089d8>
 8009024:	10803fcc 	andi	r2,r2,255
 8009028:	00c00044 	movi	r3,1
 800902c:	10fe141e 	bne	r2,r3,8008880 <__alt_data_end+0xfc008880>
 8009030:	e000021e 	bne	fp,zero,800903c <___vfprintf_internal_r+0xdb0>
 8009034:	00800244 	movi	r2,9
 8009038:	14c0202e 	bgeu	r2,r19,80090bc <___vfprintf_internal_r+0xe30>
 800903c:	dc012b15 	stw	r16,1196(sp)
 8009040:	dc412c15 	stw	r17,1200(sp)
 8009044:	9821883a 	mov	r16,r19
 8009048:	e023883a 	mov	r17,fp
 800904c:	dc810e04 	addi	r18,sp,1080
 8009050:	4027883a 	mov	r19,r8
 8009054:	4839883a 	mov	fp,r9
 8009058:	8009883a 	mov	r4,r16
 800905c:	880b883a 	mov	r5,r17
 8009060:	01800284 	movi	r6,10
 8009064:	000f883a 	mov	r7,zero
 8009068:	801301c0 	call	801301c <__umoddi3>
 800906c:	10800c04 	addi	r2,r2,48
 8009070:	94bfffc4 	addi	r18,r18,-1
 8009074:	8009883a 	mov	r4,r16
 8009078:	880b883a 	mov	r5,r17
 800907c:	01800284 	movi	r6,10
 8009080:	000f883a 	mov	r7,zero
 8009084:	90800005 	stb	r2,0(r18)
 8009088:	8012a5c0 	call	8012a5c <__udivdi3>
 800908c:	1021883a 	mov	r16,r2
 8009090:	10c4b03a 	or	r2,r2,r3
 8009094:	1823883a 	mov	r17,r3
 8009098:	103fef1e 	bne	r2,zero,8009058 <__alt_data_end+0xfc009058>
 800909c:	dac12817 	ldw	r11,1184(sp)
 80090a0:	dc813115 	stw	r18,1220(sp)
 80090a4:	dc012b17 	ldw	r16,1196(sp)
 80090a8:	9811883a 	mov	r8,r19
 80090ac:	dc412c17 	ldw	r17,1200(sp)
 80090b0:	e013883a 	mov	r9,fp
 80090b4:	5ca5c83a 	sub	r18,r11,r18
 80090b8:	003e0306 	br	80088c8 <__alt_data_end+0xfc0088c8>
 80090bc:	9cc00c04 	addi	r19,r19,48
 80090c0:	d8c10dc4 	addi	r3,sp,1079
 80090c4:	dcc10dc5 	stb	r19,1079(sp)
 80090c8:	dc813c17 	ldw	r18,1264(sp)
 80090cc:	d8c13115 	stw	r3,1220(sp)
 80090d0:	003dfd06 	br	80088c8 <__alt_data_end+0xfc0088c8>
 80090d4:	00801944 	movi	r2,101
 80090d8:	1400710e 	bge	r2,r16,80092a0 <___vfprintf_internal_r+0x1014>
 80090dc:	d9013717 	ldw	r4,1244(sp)
 80090e0:	d9413917 	ldw	r5,1252(sp)
 80090e4:	000d883a 	mov	r6,zero
 80090e8:	000f883a 	mov	r7,zero
 80090ec:	d8c13d15 	stw	r3,1268(sp)
 80090f0:	da013f15 	stw	r8,1276(sp)
 80090f4:	80137900 	call	8013790 <__eqdf2>
 80090f8:	d8c13d17 	ldw	r3,1268(sp)
 80090fc:	da013f17 	ldw	r8,1276(sp)
 8009100:	1000ef1e 	bne	r2,zero,80094c0 <___vfprintf_internal_r+0x1234>
 8009104:	d8811f17 	ldw	r2,1148(sp)
 8009108:	010200b4 	movhi	r4,2050
 800910c:	2105fe04 	addi	r4,r4,6136
 8009110:	18c00044 	addi	r3,r3,1
 8009114:	10800044 	addi	r2,r2,1
 8009118:	41000015 	stw	r4,0(r8)
 800911c:	01000044 	movi	r4,1
 8009120:	41000115 	stw	r4,4(r8)
 8009124:	d8c12015 	stw	r3,1152(sp)
 8009128:	d8811f15 	stw	r2,1148(sp)
 800912c:	010001c4 	movi	r4,7
 8009130:	20828e16 	blt	r4,r2,8009b6c <___vfprintf_internal_r+0x18e0>
 8009134:	42000204 	addi	r8,r8,8
 8009138:	d8812617 	ldw	r2,1176(sp)
 800913c:	dac13317 	ldw	r11,1228(sp)
 8009140:	12c00216 	blt	r2,r11,800914c <___vfprintf_internal_r+0xec0>
 8009144:	8880004c 	andi	r2,r17,1
 8009148:	103e7726 	beq	r2,zero,8008b28 <__alt_data_end+0xfc008b28>
 800914c:	db013817 	ldw	r12,1248(sp)
 8009150:	d8811f17 	ldw	r2,1148(sp)
 8009154:	dac13517 	ldw	r11,1236(sp)
 8009158:	1b07883a 	add	r3,r3,r12
 800915c:	10800044 	addi	r2,r2,1
 8009160:	42c00015 	stw	r11,0(r8)
 8009164:	43000115 	stw	r12,4(r8)
 8009168:	d8c12015 	stw	r3,1152(sp)
 800916c:	d8811f15 	stw	r2,1148(sp)
 8009170:	010001c4 	movi	r4,7
 8009174:	2082ed16 	blt	r4,r2,8009d2c <___vfprintf_internal_r+0x1aa0>
 8009178:	42000204 	addi	r8,r8,8
 800917c:	db013317 	ldw	r12,1228(sp)
 8009180:	643fffc4 	addi	r16,r12,-1
 8009184:	043e680e 	bge	zero,r16,8008b28 <__alt_data_end+0xfc008b28>
 8009188:	04800404 	movi	r18,16
 800918c:	d8811f17 	ldw	r2,1148(sp)
 8009190:	94007e0e 	bge	r18,r16,800938c <___vfprintf_internal_r+0x1100>
 8009194:	014200b4 	movhi	r5,2050
 8009198:	29460684 	addi	r5,r5,6170
 800919c:	d9412c15 	stw	r5,1200(sp)
 80091a0:	054001c4 	movi	r21,7
 80091a4:	00000306 	br	80091b4 <___vfprintf_internal_r+0xf28>
 80091a8:	42000204 	addi	r8,r8,8
 80091ac:	843ffc04 	addi	r16,r16,-16
 80091b0:	9400790e 	bge	r18,r16,8009398 <___vfprintf_internal_r+0x110c>
 80091b4:	18c00404 	addi	r3,r3,16
 80091b8:	10800044 	addi	r2,r2,1
 80091bc:	45000015 	stw	r20,0(r8)
 80091c0:	44800115 	stw	r18,4(r8)
 80091c4:	d8c12015 	stw	r3,1152(sp)
 80091c8:	d8811f15 	stw	r2,1148(sp)
 80091cc:	a8bff60e 	bge	r21,r2,80091a8 <__alt_data_end+0xfc0091a8>
 80091d0:	b009883a 	mov	r4,r22
 80091d4:	b80b883a 	mov	r5,r23
 80091d8:	d9811e04 	addi	r6,sp,1144
 80091dc:	80101780 	call	8010178 <__sprint_r>
 80091e0:	103d411e 	bne	r2,zero,80086e8 <__alt_data_end+0xfc0086e8>
 80091e4:	d8c12017 	ldw	r3,1152(sp)
 80091e8:	d8811f17 	ldw	r2,1148(sp)
 80091ec:	da000404 	addi	r8,sp,16
 80091f0:	003fee06 	br	80091ac <__alt_data_end+0xfc0091ac>
 80091f4:	dac12e17 	ldw	r11,1208(sp)
 80091f8:	db012b17 	ldw	r12,1196(sp)
 80091fc:	5b2bc83a 	sub	r21,r11,r12
 8009200:	057e130e 	bge	zero,r21,8008a50 <__alt_data_end+0xfc008a50>
 8009204:	07000404 	movi	fp,16
 8009208:	d8811f17 	ldw	r2,1148(sp)
 800920c:	e543640e 	bge	fp,r21,8009fa0 <___vfprintf_internal_r+0x1d14>
 8009210:	014200b4 	movhi	r5,2050
 8009214:	29460684 	addi	r5,r5,6170
 8009218:	d9412c15 	stw	r5,1200(sp)
 800921c:	04c001c4 	movi	r19,7
 8009220:	00000306 	br	8009230 <___vfprintf_internal_r+0xfa4>
 8009224:	ad7ffc04 	addi	r21,r21,-16
 8009228:	42000204 	addi	r8,r8,8
 800922c:	e540110e 	bge	fp,r21,8009274 <___vfprintf_internal_r+0xfe8>
 8009230:	18c00404 	addi	r3,r3,16
 8009234:	10800044 	addi	r2,r2,1
 8009238:	45000015 	stw	r20,0(r8)
 800923c:	47000115 	stw	fp,4(r8)
 8009240:	d8c12015 	stw	r3,1152(sp)
 8009244:	d8811f15 	stw	r2,1148(sp)
 8009248:	98bff60e 	bge	r19,r2,8009224 <__alt_data_end+0xfc009224>
 800924c:	b009883a 	mov	r4,r22
 8009250:	b80b883a 	mov	r5,r23
 8009254:	d9811e04 	addi	r6,sp,1144
 8009258:	80101780 	call	8010178 <__sprint_r>
 800925c:	103d221e 	bne	r2,zero,80086e8 <__alt_data_end+0xfc0086e8>
 8009260:	ad7ffc04 	addi	r21,r21,-16
 8009264:	d8c12017 	ldw	r3,1152(sp)
 8009268:	d8811f17 	ldw	r2,1148(sp)
 800926c:	da000404 	addi	r8,sp,16
 8009270:	e57fef16 	blt	fp,r21,8009230 <__alt_data_end+0xfc009230>
 8009274:	dac12c17 	ldw	r11,1200(sp)
 8009278:	1d47883a 	add	r3,r3,r21
 800927c:	10800044 	addi	r2,r2,1
 8009280:	42c00015 	stw	r11,0(r8)
 8009284:	45400115 	stw	r21,4(r8)
 8009288:	d8c12015 	stw	r3,1152(sp)
 800928c:	d8811f15 	stw	r2,1148(sp)
 8009290:	010001c4 	movi	r4,7
 8009294:	20819116 	blt	r4,r2,80098dc <___vfprintf_internal_r+0x1650>
 8009298:	42000204 	addi	r8,r8,8
 800929c:	003dec06 	br	8008a50 <__alt_data_end+0xfc008a50>
 80092a0:	db013317 	ldw	r12,1228(sp)
 80092a4:	00800044 	movi	r2,1
 80092a8:	18c00044 	addi	r3,r3,1
 80092ac:	1301530e 	bge	r2,r12,80097fc <___vfprintf_internal_r+0x1570>
 80092b0:	dc011f17 	ldw	r16,1148(sp)
 80092b4:	dac13117 	ldw	r11,1220(sp)
 80092b8:	00800044 	movi	r2,1
 80092bc:	84000044 	addi	r16,r16,1
 80092c0:	40800115 	stw	r2,4(r8)
 80092c4:	42c00015 	stw	r11,0(r8)
 80092c8:	d8c12015 	stw	r3,1152(sp)
 80092cc:	dc011f15 	stw	r16,1148(sp)
 80092d0:	008001c4 	movi	r2,7
 80092d4:	14016b16 	blt	r2,r16,8009884 <___vfprintf_internal_r+0x15f8>
 80092d8:	42000204 	addi	r8,r8,8
 80092dc:	db013817 	ldw	r12,1248(sp)
 80092e0:	dac13517 	ldw	r11,1236(sp)
 80092e4:	84000044 	addi	r16,r16,1
 80092e8:	1b07883a 	add	r3,r3,r12
 80092ec:	42c00015 	stw	r11,0(r8)
 80092f0:	43000115 	stw	r12,4(r8)
 80092f4:	d8c12015 	stw	r3,1152(sp)
 80092f8:	dc011f15 	stw	r16,1148(sp)
 80092fc:	008001c4 	movi	r2,7
 8009300:	14016916 	blt	r2,r16,80098a8 <___vfprintf_internal_r+0x161c>
 8009304:	44800204 	addi	r18,r8,8
 8009308:	d9013717 	ldw	r4,1244(sp)
 800930c:	d9413917 	ldw	r5,1252(sp)
 8009310:	000d883a 	mov	r6,zero
 8009314:	000f883a 	mov	r7,zero
 8009318:	d8c13d15 	stw	r3,1268(sp)
 800931c:	80137900 	call	8013790 <__eqdf2>
 8009320:	d8c13d17 	ldw	r3,1268(sp)
 8009324:	db013317 	ldw	r12,1228(sp)
 8009328:	1000ae26 	beq	r2,zero,80095e4 <___vfprintf_internal_r+0x1358>
 800932c:	dac13117 	ldw	r11,1220(sp)
 8009330:	60bfffc4 	addi	r2,r12,-1
 8009334:	1887883a 	add	r3,r3,r2
 8009338:	59000044 	addi	r4,r11,1
 800933c:	84000044 	addi	r16,r16,1
 8009340:	90800115 	stw	r2,4(r18)
 8009344:	91000015 	stw	r4,0(r18)
 8009348:	d8c12015 	stw	r3,1152(sp)
 800934c:	dc011f15 	stw	r16,1148(sp)
 8009350:	008001c4 	movi	r2,7
 8009354:	14014216 	blt	r2,r16,8009860 <___vfprintf_internal_r+0x15d4>
 8009358:	94800204 	addi	r18,r18,8
 800935c:	dac13a17 	ldw	r11,1256(sp)
 8009360:	dd4122c4 	addi	r21,sp,1163
 8009364:	84000044 	addi	r16,r16,1
 8009368:	58c7883a 	add	r3,r11,r3
 800936c:	95400015 	stw	r21,0(r18)
 8009370:	92c00115 	stw	r11,4(r18)
 8009374:	d8c12015 	stw	r3,1152(sp)
 8009378:	dc011f15 	stw	r16,1148(sp)
 800937c:	008001c4 	movi	r2,7
 8009380:	14000e16 	blt	r2,r16,80093bc <___vfprintf_internal_r+0x1130>
 8009384:	92000204 	addi	r8,r18,8
 8009388:	003de706 	br	8008b28 <__alt_data_end+0xfc008b28>
 800938c:	010200b4 	movhi	r4,2050
 8009390:	21060684 	addi	r4,r4,6170
 8009394:	d9012c15 	stw	r4,1200(sp)
 8009398:	dac12c17 	ldw	r11,1200(sp)
 800939c:	1c07883a 	add	r3,r3,r16
 80093a0:	44000115 	stw	r16,4(r8)
 80093a4:	42c00015 	stw	r11,0(r8)
 80093a8:	10800044 	addi	r2,r2,1
 80093ac:	d8c12015 	stw	r3,1152(sp)
 80093b0:	d8811f15 	stw	r2,1148(sp)
 80093b4:	010001c4 	movi	r4,7
 80093b8:	20bdda0e 	bge	r4,r2,8008b24 <__alt_data_end+0xfc008b24>
 80093bc:	b009883a 	mov	r4,r22
 80093c0:	b80b883a 	mov	r5,r23
 80093c4:	d9811e04 	addi	r6,sp,1144
 80093c8:	80101780 	call	8010178 <__sprint_r>
 80093cc:	103cc61e 	bne	r2,zero,80086e8 <__alt_data_end+0xfc0086e8>
 80093d0:	d8c12017 	ldw	r3,1152(sp)
 80093d4:	da000404 	addi	r8,sp,16
 80093d8:	003dd306 	br	8008b28 <__alt_data_end+0xfc008b28>
 80093dc:	b009883a 	mov	r4,r22
 80093e0:	b80b883a 	mov	r5,r23
 80093e4:	d9811e04 	addi	r6,sp,1144
 80093e8:	80101780 	call	8010178 <__sprint_r>
 80093ec:	103e0926 	beq	r2,zero,8008c14 <__alt_data_end+0xfc008c14>
 80093f0:	003cbd06 	br	80086e8 <__alt_data_end+0xfc0086e8>
 80093f4:	10803fcc 	andi	r2,r2,255
 80093f8:	1000651e 	bne	r2,zero,8009590 <___vfprintf_internal_r+0x1304>
 80093fc:	8880004c 	andi	r2,r17,1
 8009400:	10013226 	beq	r2,zero,80098cc <___vfprintf_internal_r+0x1640>
 8009404:	00800c04 	movi	r2,48
 8009408:	d8c10dc4 	addi	r3,sp,1079
 800940c:	d8810dc5 	stb	r2,1079(sp)
 8009410:	dc813c17 	ldw	r18,1264(sp)
 8009414:	d8c13115 	stw	r3,1220(sp)
 8009418:	003d2b06 	br	80088c8 <__alt_data_end+0xfc0088c8>
 800941c:	b009883a 	mov	r4,r22
 8009420:	b80b883a 	mov	r5,r23
 8009424:	d9811e04 	addi	r6,sp,1144
 8009428:	80101780 	call	8010178 <__sprint_r>
 800942c:	103cae1e 	bne	r2,zero,80086e8 <__alt_data_end+0xfc0086e8>
 8009430:	d8c12017 	ldw	r3,1152(sp)
 8009434:	da000404 	addi	r8,sp,16
 8009438:	003dae06 	br	8008af4 <__alt_data_end+0xfc008af4>
 800943c:	b009883a 	mov	r4,r22
 8009440:	b80b883a 	mov	r5,r23
 8009444:	d9811e04 	addi	r6,sp,1144
 8009448:	80101780 	call	8010178 <__sprint_r>
 800944c:	103ca61e 	bne	r2,zero,80086e8 <__alt_data_end+0xfc0086e8>
 8009450:	d8c12017 	ldw	r3,1152(sp)
 8009454:	da000404 	addi	r8,sp,16
 8009458:	003d6c06 	br	8008a0c <__alt_data_end+0xfc008a0c>
 800945c:	b009883a 	mov	r4,r22
 8009460:	b80b883a 	mov	r5,r23
 8009464:	d9811e04 	addi	r6,sp,1144
 8009468:	80101780 	call	8010178 <__sprint_r>
 800946c:	103c9e1e 	bne	r2,zero,80086e8 <__alt_data_end+0xfc0086e8>
 8009470:	d8c12017 	ldw	r3,1152(sp)
 8009474:	da000404 	addi	r8,sp,16
 8009478:	003d7206 	br	8008a44 <__alt_data_end+0xfc008a44>
 800947c:	d9413b17 	ldw	r5,1260(sp)
 8009480:	d8c10e04 	addi	r3,sp,1080
 8009484:	988003cc 	andi	r2,r19,15
 8009488:	e008973a 	slli	r4,fp,28
 800948c:	2885883a 	add	r2,r5,r2
 8009490:	9826d13a 	srli	r19,r19,4
 8009494:	10800003 	ldbu	r2,0(r2)
 8009498:	e038d13a 	srli	fp,fp,4
 800949c:	18ffffc4 	addi	r3,r3,-1
 80094a0:	24e6b03a 	or	r19,r4,r19
 80094a4:	18800005 	stb	r2,0(r3)
 80094a8:	9f04b03a 	or	r2,r19,fp
 80094ac:	103ff51e 	bne	r2,zero,8009484 <__alt_data_end+0xfc009484>
 80094b0:	db012817 	ldw	r12,1184(sp)
 80094b4:	d8c13115 	stw	r3,1220(sp)
 80094b8:	60e5c83a 	sub	r18,r12,r3
 80094bc:	003d0206 	br	80088c8 <__alt_data_end+0xfc0088c8>
 80094c0:	dc012617 	ldw	r16,1176(sp)
 80094c4:	0401b10e 	bge	zero,r16,8009b8c <___vfprintf_internal_r+0x1900>
 80094c8:	db013117 	ldw	r12,1220(sp)
 80094cc:	dac13317 	ldw	r11,1228(sp)
 80094d0:	62e1883a 	add	r16,r12,r11
 80094d4:	db013417 	ldw	r12,1232(sp)
 80094d8:	5825883a 	mov	r18,r11
 80094dc:	62c0010e 	bge	r12,r11,80094e4 <___vfprintf_internal_r+0x1258>
 80094e0:	6025883a 	mov	r18,r12
 80094e4:	04800b0e 	bge	zero,r18,8009514 <___vfprintf_internal_r+0x1288>
 80094e8:	d8811f17 	ldw	r2,1148(sp)
 80094ec:	dac13117 	ldw	r11,1220(sp)
 80094f0:	1c87883a 	add	r3,r3,r18
 80094f4:	10800044 	addi	r2,r2,1
 80094f8:	42c00015 	stw	r11,0(r8)
 80094fc:	44800115 	stw	r18,4(r8)
 8009500:	d8c12015 	stw	r3,1152(sp)
 8009504:	d8811f15 	stw	r2,1148(sp)
 8009508:	010001c4 	movi	r4,7
 800950c:	20824f16 	blt	r4,r2,8009e4c <___vfprintf_internal_r+0x1bc0>
 8009510:	42000204 	addi	r8,r8,8
 8009514:	90024b16 	blt	r18,zero,8009e44 <___vfprintf_internal_r+0x1bb8>
 8009518:	db013417 	ldw	r12,1232(sp)
 800951c:	64a5c83a 	sub	r18,r12,r18
 8009520:	0480730e 	bge	zero,r18,80096f0 <___vfprintf_internal_r+0x1464>
 8009524:	05400404 	movi	r21,16
 8009528:	d8811f17 	ldw	r2,1148(sp)
 800952c:	ac817d0e 	bge	r21,r18,8009b24 <___vfprintf_internal_r+0x1898>
 8009530:	014200b4 	movhi	r5,2050
 8009534:	29460684 	addi	r5,r5,6170
 8009538:	d9412c15 	stw	r5,1200(sp)
 800953c:	070001c4 	movi	fp,7
 8009540:	00000306 	br	8009550 <___vfprintf_internal_r+0x12c4>
 8009544:	42000204 	addi	r8,r8,8
 8009548:	94bffc04 	addi	r18,r18,-16
 800954c:	ac81780e 	bge	r21,r18,8009b30 <___vfprintf_internal_r+0x18a4>
 8009550:	18c00404 	addi	r3,r3,16
 8009554:	10800044 	addi	r2,r2,1
 8009558:	45000015 	stw	r20,0(r8)
 800955c:	45400115 	stw	r21,4(r8)
 8009560:	d8c12015 	stw	r3,1152(sp)
 8009564:	d8811f15 	stw	r2,1148(sp)
 8009568:	e0bff60e 	bge	fp,r2,8009544 <__alt_data_end+0xfc009544>
 800956c:	b009883a 	mov	r4,r22
 8009570:	b80b883a 	mov	r5,r23
 8009574:	d9811e04 	addi	r6,sp,1144
 8009578:	80101780 	call	8010178 <__sprint_r>
 800957c:	103c5a1e 	bne	r2,zero,80086e8 <__alt_data_end+0xfc0086e8>
 8009580:	d8c12017 	ldw	r3,1152(sp)
 8009584:	d8811f17 	ldw	r2,1148(sp)
 8009588:	da000404 	addi	r8,sp,16
 800958c:	003fee06 	br	8009548 <__alt_data_end+0xfc009548>
 8009590:	dac10e04 	addi	r11,sp,1080
 8009594:	0025883a 	mov	r18,zero
 8009598:	dac13115 	stw	r11,1220(sp)
 800959c:	003cca06 	br	80088c8 <__alt_data_end+0xfc0088c8>
 80095a0:	b009883a 	mov	r4,r22
 80095a4:	b80b883a 	mov	r5,r23
 80095a8:	d9811e04 	addi	r6,sp,1144
 80095ac:	80101780 	call	8010178 <__sprint_r>
 80095b0:	103c4d1e 	bne	r2,zero,80086e8 <__alt_data_end+0xfc0086e8>
 80095b4:	d8c12017 	ldw	r3,1152(sp)
 80095b8:	d8812787 	ldb	r2,1182(sp)
 80095bc:	da000404 	addi	r8,sp,16
 80095c0:	003d0506 	br	80089d8 <__alt_data_end+0xfc0089d8>
 80095c4:	dac12d17 	ldw	r11,1204(sp)
 80095c8:	14c00017 	ldw	r19,0(r2)
 80095cc:	0039883a 	mov	fp,zero
 80095d0:	5ac00104 	addi	r11,r11,4
 80095d4:	dac12d15 	stw	r11,1204(sp)
 80095d8:	0005883a 	mov	r2,zero
 80095dc:	9807883a 	mov	r3,r19
 80095e0:	003c9c06 	br	8008854 <__alt_data_end+0xfc008854>
 80095e4:	657fffc4 	addi	r21,r12,-1
 80095e8:	057f5c0e 	bge	zero,r21,800935c <__alt_data_end+0xfc00935c>
 80095ec:	07000404 	movi	fp,16
 80095f0:	e5408f0e 	bge	fp,r21,8009830 <___vfprintf_internal_r+0x15a4>
 80095f4:	010200b4 	movhi	r4,2050
 80095f8:	21060684 	addi	r4,r4,6170
 80095fc:	d9012c15 	stw	r4,1200(sp)
 8009600:	01c001c4 	movi	r7,7
 8009604:	00000306 	br	8009614 <___vfprintf_internal_r+0x1388>
 8009608:	94800204 	addi	r18,r18,8
 800960c:	ad7ffc04 	addi	r21,r21,-16
 8009610:	e5408a0e 	bge	fp,r21,800983c <___vfprintf_internal_r+0x15b0>
 8009614:	18c00404 	addi	r3,r3,16
 8009618:	84000044 	addi	r16,r16,1
 800961c:	95000015 	stw	r20,0(r18)
 8009620:	97000115 	stw	fp,4(r18)
 8009624:	d8c12015 	stw	r3,1152(sp)
 8009628:	dc011f15 	stw	r16,1148(sp)
 800962c:	3c3ff60e 	bge	r7,r16,8009608 <__alt_data_end+0xfc009608>
 8009630:	b009883a 	mov	r4,r22
 8009634:	b80b883a 	mov	r5,r23
 8009638:	d9811e04 	addi	r6,sp,1144
 800963c:	d9c13d15 	stw	r7,1268(sp)
 8009640:	80101780 	call	8010178 <__sprint_r>
 8009644:	d9c13d17 	ldw	r7,1268(sp)
 8009648:	103c271e 	bne	r2,zero,80086e8 <__alt_data_end+0xfc0086e8>
 800964c:	d8c12017 	ldw	r3,1152(sp)
 8009650:	dc011f17 	ldw	r16,1148(sp)
 8009654:	dc800404 	addi	r18,sp,16
 8009658:	003fec06 	br	800960c <__alt_data_end+0xfc00960c>
 800965c:	1cc00017 	ldw	r19,0(r3)
 8009660:	dac12d17 	ldw	r11,1204(sp)
 8009664:	9839d7fa 	srai	fp,r19,31
 8009668:	5ac00104 	addi	r11,r11,4
 800966c:	dac12d15 	stw	r11,1204(sp)
 8009670:	e005883a 	mov	r2,fp
 8009674:	003d9006 	br	8008cb8 <__alt_data_end+0xfc008cb8>
 8009678:	00800084 	movi	r2,2
 800967c:	9f06b03a 	or	r3,r19,fp
 8009680:	003c7406 	br	8008854 <__alt_data_end+0xfc008854>
 8009684:	db012d17 	ldw	r12,1204(sp)
 8009688:	14c00017 	ldw	r19,0(r2)
 800968c:	0039883a 	mov	fp,zero
 8009690:	63000104 	addi	r12,r12,4
 8009694:	db012d15 	stw	r12,1204(sp)
 8009698:	00800044 	movi	r2,1
 800969c:	9807883a 	mov	r3,r19
 80096a0:	003c6c06 	br	8008854 <__alt_data_end+0xfc008854>
 80096a4:	10803fcc 	andi	r2,r2,255
 80096a8:	1080201c 	xori	r2,r2,128
 80096ac:	10bfe004 	addi	r2,r2,-128
 80096b0:	01000c04 	movi	r4,48
 80096b4:	1101a526 	beq	r2,r4,8009d4c <___vfprintf_internal_r+0x1ac0>
 80096b8:	dac13117 	ldw	r11,1220(sp)
 80096bc:	db012817 	ldw	r12,1184(sp)
 80096c0:	193fffc5 	stb	r4,-1(r3)
 80096c4:	5affffc4 	addi	r11,r11,-1
 80096c8:	dac13115 	stw	r11,1220(sp)
 80096cc:	62e5c83a 	sub	r18,r12,r11
 80096d0:	003c7d06 	br	80088c8 <__alt_data_end+0xfc0088c8>
 80096d4:	b009883a 	mov	r4,r22
 80096d8:	b80b883a 	mov	r5,r23
 80096dc:	d9811e04 	addi	r6,sp,1144
 80096e0:	80101780 	call	8010178 <__sprint_r>
 80096e4:	103c001e 	bne	r2,zero,80086e8 <__alt_data_end+0xfc0086e8>
 80096e8:	d8c12017 	ldw	r3,1152(sp)
 80096ec:	da000404 	addi	r8,sp,16
 80096f0:	db013117 	ldw	r12,1220(sp)
 80096f4:	dac13417 	ldw	r11,1232(sp)
 80096f8:	d8812617 	ldw	r2,1176(sp)
 80096fc:	62e5883a 	add	r18,r12,r11
 8009700:	db013317 	ldw	r12,1228(sp)
 8009704:	13000216 	blt	r2,r12,8009710 <___vfprintf_internal_r+0x1484>
 8009708:	8900004c 	andi	r4,r17,1
 800970c:	20000c26 	beq	r4,zero,8009740 <___vfprintf_internal_r+0x14b4>
 8009710:	dac13817 	ldw	r11,1248(sp)
 8009714:	d9011f17 	ldw	r4,1148(sp)
 8009718:	db013517 	ldw	r12,1236(sp)
 800971c:	1ac7883a 	add	r3,r3,r11
 8009720:	21000044 	addi	r4,r4,1
 8009724:	43000015 	stw	r12,0(r8)
 8009728:	42c00115 	stw	r11,4(r8)
 800972c:	d8c12015 	stw	r3,1152(sp)
 8009730:	d9011f15 	stw	r4,1148(sp)
 8009734:	014001c4 	movi	r5,7
 8009738:	2901cc16 	blt	r5,r4,8009e6c <___vfprintf_internal_r+0x1be0>
 800973c:	42000204 	addi	r8,r8,8
 8009740:	dac13317 	ldw	r11,1228(sp)
 8009744:	8489c83a 	sub	r4,r16,r18
 8009748:	5885c83a 	sub	r2,r11,r2
 800974c:	1021883a 	mov	r16,r2
 8009750:	2080010e 	bge	r4,r2,8009758 <___vfprintf_internal_r+0x14cc>
 8009754:	2021883a 	mov	r16,r4
 8009758:	04000a0e 	bge	zero,r16,8009784 <___vfprintf_internal_r+0x14f8>
 800975c:	d9011f17 	ldw	r4,1148(sp)
 8009760:	1c07883a 	add	r3,r3,r16
 8009764:	44800015 	stw	r18,0(r8)
 8009768:	21000044 	addi	r4,r4,1
 800976c:	44000115 	stw	r16,4(r8)
 8009770:	d8c12015 	stw	r3,1152(sp)
 8009774:	d9011f15 	stw	r4,1148(sp)
 8009778:	014001c4 	movi	r5,7
 800977c:	2901d616 	blt	r5,r4,8009ed8 <___vfprintf_internal_r+0x1c4c>
 8009780:	42000204 	addi	r8,r8,8
 8009784:	8001df16 	blt	r16,zero,8009f04 <___vfprintf_internal_r+0x1c78>
 8009788:	1421c83a 	sub	r16,r2,r16
 800978c:	043ce60e 	bge	zero,r16,8008b28 <__alt_data_end+0xfc008b28>
 8009790:	04800404 	movi	r18,16
 8009794:	d8811f17 	ldw	r2,1148(sp)
 8009798:	943efc0e 	bge	r18,r16,800938c <__alt_data_end+0xfc00938c>
 800979c:	014200b4 	movhi	r5,2050
 80097a0:	29460684 	addi	r5,r5,6170
 80097a4:	d9412c15 	stw	r5,1200(sp)
 80097a8:	054001c4 	movi	r21,7
 80097ac:	00000306 	br	80097bc <___vfprintf_internal_r+0x1530>
 80097b0:	42000204 	addi	r8,r8,8
 80097b4:	843ffc04 	addi	r16,r16,-16
 80097b8:	943ef70e 	bge	r18,r16,8009398 <__alt_data_end+0xfc009398>
 80097bc:	18c00404 	addi	r3,r3,16
 80097c0:	10800044 	addi	r2,r2,1
 80097c4:	45000015 	stw	r20,0(r8)
 80097c8:	44800115 	stw	r18,4(r8)
 80097cc:	d8c12015 	stw	r3,1152(sp)
 80097d0:	d8811f15 	stw	r2,1148(sp)
 80097d4:	a8bff60e 	bge	r21,r2,80097b0 <__alt_data_end+0xfc0097b0>
 80097d8:	b009883a 	mov	r4,r22
 80097dc:	b80b883a 	mov	r5,r23
 80097e0:	d9811e04 	addi	r6,sp,1144
 80097e4:	80101780 	call	8010178 <__sprint_r>
 80097e8:	103bbf1e 	bne	r2,zero,80086e8 <__alt_data_end+0xfc0086e8>
 80097ec:	d8c12017 	ldw	r3,1152(sp)
 80097f0:	d8811f17 	ldw	r2,1148(sp)
 80097f4:	da000404 	addi	r8,sp,16
 80097f8:	003fee06 	br	80097b4 <__alt_data_end+0xfc0097b4>
 80097fc:	8888703a 	and	r4,r17,r2
 8009800:	203eab1e 	bne	r4,zero,80092b0 <__alt_data_end+0xfc0092b0>
 8009804:	dc011f17 	ldw	r16,1148(sp)
 8009808:	db013117 	ldw	r12,1220(sp)
 800980c:	40800115 	stw	r2,4(r8)
 8009810:	84000044 	addi	r16,r16,1
 8009814:	43000015 	stw	r12,0(r8)
 8009818:	d8c12015 	stw	r3,1152(sp)
 800981c:	dc011f15 	stw	r16,1148(sp)
 8009820:	008001c4 	movi	r2,7
 8009824:	14000e16 	blt	r2,r16,8009860 <___vfprintf_internal_r+0x15d4>
 8009828:	44800204 	addi	r18,r8,8
 800982c:	003ecb06 	br	800935c <__alt_data_end+0xfc00935c>
 8009830:	008200b4 	movhi	r2,2050
 8009834:	10860684 	addi	r2,r2,6170
 8009838:	d8812c15 	stw	r2,1200(sp)
 800983c:	dac12c17 	ldw	r11,1200(sp)
 8009840:	1d47883a 	add	r3,r3,r21
 8009844:	84000044 	addi	r16,r16,1
 8009848:	92c00015 	stw	r11,0(r18)
 800984c:	95400115 	stw	r21,4(r18)
 8009850:	d8c12015 	stw	r3,1152(sp)
 8009854:	dc011f15 	stw	r16,1148(sp)
 8009858:	008001c4 	movi	r2,7
 800985c:	143ebe0e 	bge	r2,r16,8009358 <__alt_data_end+0xfc009358>
 8009860:	b009883a 	mov	r4,r22
 8009864:	b80b883a 	mov	r5,r23
 8009868:	d9811e04 	addi	r6,sp,1144
 800986c:	80101780 	call	8010178 <__sprint_r>
 8009870:	103b9d1e 	bne	r2,zero,80086e8 <__alt_data_end+0xfc0086e8>
 8009874:	d8c12017 	ldw	r3,1152(sp)
 8009878:	dc011f17 	ldw	r16,1148(sp)
 800987c:	dc800404 	addi	r18,sp,16
 8009880:	003eb606 	br	800935c <__alt_data_end+0xfc00935c>
 8009884:	b009883a 	mov	r4,r22
 8009888:	b80b883a 	mov	r5,r23
 800988c:	d9811e04 	addi	r6,sp,1144
 8009890:	80101780 	call	8010178 <__sprint_r>
 8009894:	103b941e 	bne	r2,zero,80086e8 <__alt_data_end+0xfc0086e8>
 8009898:	d8c12017 	ldw	r3,1152(sp)
 800989c:	dc011f17 	ldw	r16,1148(sp)
 80098a0:	da000404 	addi	r8,sp,16
 80098a4:	003e8d06 	br	80092dc <__alt_data_end+0xfc0092dc>
 80098a8:	b009883a 	mov	r4,r22
 80098ac:	b80b883a 	mov	r5,r23
 80098b0:	d9811e04 	addi	r6,sp,1144
 80098b4:	80101780 	call	8010178 <__sprint_r>
 80098b8:	103b8b1e 	bne	r2,zero,80086e8 <__alt_data_end+0xfc0086e8>
 80098bc:	d8c12017 	ldw	r3,1152(sp)
 80098c0:	dc011f17 	ldw	r16,1148(sp)
 80098c4:	dc800404 	addi	r18,sp,16
 80098c8:	003e8f06 	br	8009308 <__alt_data_end+0xfc009308>
 80098cc:	db010e04 	addi	r12,sp,1080
 80098d0:	0025883a 	mov	r18,zero
 80098d4:	db013115 	stw	r12,1220(sp)
 80098d8:	003bfb06 	br	80088c8 <__alt_data_end+0xfc0088c8>
 80098dc:	b009883a 	mov	r4,r22
 80098e0:	b80b883a 	mov	r5,r23
 80098e4:	d9811e04 	addi	r6,sp,1144
 80098e8:	80101780 	call	8010178 <__sprint_r>
 80098ec:	103b7e1e 	bne	r2,zero,80086e8 <__alt_data_end+0xfc0086e8>
 80098f0:	d8c12017 	ldw	r3,1152(sp)
 80098f4:	da000404 	addi	r8,sp,16
 80098f8:	003c5506 	br	8008a50 <__alt_data_end+0xfc008a50>
 80098fc:	04e7c83a 	sub	r19,zero,r19
 8009900:	9804c03a 	cmpne	r2,r19,zero
 8009904:	0739c83a 	sub	fp,zero,fp
 8009908:	e0b9c83a 	sub	fp,fp,r2
 800990c:	05400b44 	movi	r21,45
 8009910:	dd412785 	stb	r21,1182(sp)
 8009914:	da413215 	stw	r9,1224(sp)
 8009918:	00800044 	movi	r2,1
 800991c:	9f06b03a 	or	r3,r19,fp
 8009920:	003bcf06 	br	8008860 <__alt_data_end+0xfc008860>
 8009924:	da013f15 	stw	r8,1276(sp)
 8009928:	da413e15 	stw	r9,1272(sp)
 800992c:	800ebdc0 	call	800ebdc <__fpclassifyd>
 8009930:	da013f17 	ldw	r8,1276(sp)
 8009934:	da413e17 	ldw	r9,1272(sp)
 8009938:	1000ce26 	beq	r2,zero,8009c74 <___vfprintf_internal_r+0x19e8>
 800993c:	057ff7c4 	movi	r21,-33
 8009940:	00bfffc4 	movi	r2,-1
 8009944:	856a703a 	and	r21,r16,r21
 8009948:	4881f026 	beq	r9,r2,800a10c <___vfprintf_internal_r+0x1e80>
 800994c:	008011c4 	movi	r2,71
 8009950:	a881e526 	beq	r21,r2,800a0e8 <___vfprintf_internal_r+0x1e5c>
 8009954:	db013917 	ldw	r12,1252(sp)
 8009958:	8ac04014 	ori	r11,r17,256
 800995c:	dac12d15 	stw	r11,1204(sp)
 8009960:	6001e416 	blt	r12,zero,800a0f4 <___vfprintf_internal_r+0x1e68>
 8009964:	dc813917 	ldw	r18,1252(sp)
 8009968:	d8012b05 	stb	zero,1196(sp)
 800996c:	00801984 	movi	r2,102
 8009970:	80811826 	beq	r16,r2,8009dd4 <___vfprintf_internal_r+0x1b48>
 8009974:	00801184 	movi	r2,70
 8009978:	80811626 	beq	r16,r2,8009dd4 <___vfprintf_internal_r+0x1b48>
 800997c:	00801144 	movi	r2,69
 8009980:	a881e026 	beq	r21,r2,800a104 <___vfprintf_internal_r+0x1e78>
 8009984:	4839883a 	mov	fp,r9
 8009988:	d8812604 	addi	r2,sp,1176
 800998c:	d8800115 	stw	r2,4(sp)
 8009990:	d9413717 	ldw	r5,1244(sp)
 8009994:	d8812504 	addi	r2,sp,1172
 8009998:	d8800215 	stw	r2,8(sp)
 800999c:	d8812104 	addi	r2,sp,1156
 80099a0:	df000015 	stw	fp,0(sp)
 80099a4:	d8800315 	stw	r2,12(sp)
 80099a8:	b009883a 	mov	r4,r22
 80099ac:	900d883a 	mov	r6,r18
 80099b0:	01c00084 	movi	r7,2
 80099b4:	da013f15 	stw	r8,1276(sp)
 80099b8:	da413e15 	stw	r9,1272(sp)
 80099bc:	800a5dc0 	call	800a5dc <_dtoa_r>
 80099c0:	d8813115 	stw	r2,1220(sp)
 80099c4:	008019c4 	movi	r2,103
 80099c8:	da013f17 	ldw	r8,1276(sp)
 80099cc:	da413e17 	ldw	r9,1272(sp)
 80099d0:	80800226 	beq	r16,r2,80099dc <___vfprintf_internal_r+0x1750>
 80099d4:	008011c4 	movi	r2,71
 80099d8:	8081101e 	bne	r16,r2,8009e1c <___vfprintf_internal_r+0x1b90>
 80099dc:	8880004c 	andi	r2,r17,1
 80099e0:	1001df26 	beq	r2,zero,800a160 <___vfprintf_internal_r+0x1ed4>
 80099e4:	db013117 	ldw	r12,1220(sp)
 80099e8:	6715883a 	add	r10,r12,fp
 80099ec:	d9013717 	ldw	r4,1244(sp)
 80099f0:	900b883a 	mov	r5,r18
 80099f4:	000d883a 	mov	r6,zero
 80099f8:	000f883a 	mov	r7,zero
 80099fc:	da013f15 	stw	r8,1276(sp)
 8009a00:	da413e15 	stw	r9,1272(sp)
 8009a04:	da813d15 	stw	r10,1268(sp)
 8009a08:	80137900 	call	8013790 <__eqdf2>
 8009a0c:	da013f17 	ldw	r8,1276(sp)
 8009a10:	da413e17 	ldw	r9,1272(sp)
 8009a14:	da813d17 	ldw	r10,1268(sp)
 8009a18:	10016526 	beq	r2,zero,8009fb0 <___vfprintf_internal_r+0x1d24>
 8009a1c:	d8812117 	ldw	r2,1156(sp)
 8009a20:	1280062e 	bgeu	r2,r10,8009a3c <___vfprintf_internal_r+0x17b0>
 8009a24:	01000c04 	movi	r4,48
 8009a28:	10c00044 	addi	r3,r2,1
 8009a2c:	d8c12115 	stw	r3,1156(sp)
 8009a30:	11000005 	stb	r4,0(r2)
 8009a34:	d8812117 	ldw	r2,1156(sp)
 8009a38:	12bffb36 	bltu	r2,r10,8009a28 <__alt_data_end+0xfc009a28>
 8009a3c:	db013117 	ldw	r12,1220(sp)
 8009a40:	1305c83a 	sub	r2,r2,r12
 8009a44:	d8813315 	stw	r2,1228(sp)
 8009a48:	008011c4 	movi	r2,71
 8009a4c:	a8814a26 	beq	r21,r2,8009f78 <___vfprintf_internal_r+0x1cec>
 8009a50:	00801944 	movi	r2,101
 8009a54:	14020a0e 	bge	r2,r16,800a280 <___vfprintf_internal_r+0x1ff4>
 8009a58:	00801984 	movi	r2,102
 8009a5c:	8081b626 	beq	r16,r2,800a138 <___vfprintf_internal_r+0x1eac>
 8009a60:	db012617 	ldw	r12,1176(sp)
 8009a64:	db013415 	stw	r12,1232(sp)
 8009a68:	db013417 	ldw	r12,1232(sp)
 8009a6c:	dac13317 	ldw	r11,1228(sp)
 8009a70:	62c1a816 	blt	r12,r11,800a114 <___vfprintf_internal_r+0x1e88>
 8009a74:	8c40004c 	andi	r17,r17,1
 8009a78:	8801ca1e 	bne	r17,zero,800a1a4 <___vfprintf_internal_r+0x1f18>
 8009a7c:	6005883a 	mov	r2,r12
 8009a80:	6001b516 	blt	r12,zero,800a158 <___vfprintf_internal_r+0x1ecc>
 8009a84:	dc813417 	ldw	r18,1232(sp)
 8009a88:	df012b07 	ldb	fp,1196(sp)
 8009a8c:	e001321e 	bne	fp,zero,8009f58 <___vfprintf_internal_r+0x1ccc>
 8009a90:	dc412d17 	ldw	r17,1204(sp)
 8009a94:	dd412783 	ldbu	r21,1182(sp)
 8009a98:	d8812b15 	stw	r2,1196(sp)
 8009a9c:	dcc12d15 	stw	r19,1204(sp)
 8009aa0:	d8013215 	stw	zero,1224(sp)
 8009aa4:	003b8d06 	br	80088dc <__alt_data_end+0xfc0088dc>
 8009aa8:	88c0100c 	andi	r3,r17,64
 8009aac:	18008226 	beq	r3,zero,8009cb8 <___vfprintf_internal_r+0x1a2c>
 8009ab0:	dac12d17 	ldw	r11,1204(sp)
 8009ab4:	14c0000b 	ldhu	r19,0(r2)
 8009ab8:	0039883a 	mov	fp,zero
 8009abc:	5ac00104 	addi	r11,r11,4
 8009ac0:	dac12d15 	stw	r11,1204(sp)
 8009ac4:	003c8f06 	br	8008d04 <__alt_data_end+0xfc008d04>
 8009ac8:	1c000007 	ldb	r16,0(r3)
 8009acc:	1805883a 	mov	r2,r3
 8009ad0:	003a5506 	br	8008428 <__alt_data_end+0xfc008428>
 8009ad4:	00800084 	movi	r2,2
 8009ad8:	003b5e06 	br	8008854 <__alt_data_end+0xfc008854>
 8009adc:	8880040c 	andi	r2,r17,16
 8009ae0:	1000091e 	bne	r2,zero,8009b08 <___vfprintf_internal_r+0x187c>
 8009ae4:	8c40100c 	andi	r17,r17,64
 8009ae8:	88000726 	beq	r17,zero,8009b08 <___vfprintf_internal_r+0x187c>
 8009aec:	db012d17 	ldw	r12,1204(sp)
 8009af0:	dac12f17 	ldw	r11,1212(sp)
 8009af4:	60800017 	ldw	r2,0(r12)
 8009af8:	63000104 	addi	r12,r12,4
 8009afc:	db012d15 	stw	r12,1204(sp)
 8009b00:	12c0000d 	sth	r11,0(r2)
 8009b04:	003a1e06 	br	8008380 <__alt_data_end+0xfc008380>
 8009b08:	db012d17 	ldw	r12,1204(sp)
 8009b0c:	dac12f17 	ldw	r11,1212(sp)
 8009b10:	60800017 	ldw	r2,0(r12)
 8009b14:	63000104 	addi	r12,r12,4
 8009b18:	db012d15 	stw	r12,1204(sp)
 8009b1c:	12c00015 	stw	r11,0(r2)
 8009b20:	003a1706 	br	8008380 <__alt_data_end+0xfc008380>
 8009b24:	010200b4 	movhi	r4,2050
 8009b28:	21060684 	addi	r4,r4,6170
 8009b2c:	d9012c15 	stw	r4,1200(sp)
 8009b30:	dac12c17 	ldw	r11,1200(sp)
 8009b34:	1c87883a 	add	r3,r3,r18
 8009b38:	10800044 	addi	r2,r2,1
 8009b3c:	42c00015 	stw	r11,0(r8)
 8009b40:	44800115 	stw	r18,4(r8)
 8009b44:	d8c12015 	stw	r3,1152(sp)
 8009b48:	d8811f15 	stw	r2,1148(sp)
 8009b4c:	010001c4 	movi	r4,7
 8009b50:	20bee016 	blt	r4,r2,80096d4 <__alt_data_end+0xfc0096d4>
 8009b54:	42000204 	addi	r8,r8,8
 8009b58:	003ee506 	br	80096f0 <__alt_data_end+0xfc0096f0>
 8009b5c:	010200b4 	movhi	r4,2050
 8009b60:	21060684 	addi	r4,r4,6170
 8009b64:	d9012c15 	stw	r4,1200(sp)
 8009b68:	003bd806 	br	8008acc <__alt_data_end+0xfc008acc>
 8009b6c:	b009883a 	mov	r4,r22
 8009b70:	b80b883a 	mov	r5,r23
 8009b74:	d9811e04 	addi	r6,sp,1144
 8009b78:	80101780 	call	8010178 <__sprint_r>
 8009b7c:	103ada1e 	bne	r2,zero,80086e8 <__alt_data_end+0xfc0086e8>
 8009b80:	d8c12017 	ldw	r3,1152(sp)
 8009b84:	da000404 	addi	r8,sp,16
 8009b88:	003d6b06 	br	8009138 <__alt_data_end+0xfc009138>
 8009b8c:	d8811f17 	ldw	r2,1148(sp)
 8009b90:	030200b4 	movhi	r12,2050
 8009b94:	01000044 	movi	r4,1
 8009b98:	18c00044 	addi	r3,r3,1
 8009b9c:	10800044 	addi	r2,r2,1
 8009ba0:	6305fe04 	addi	r12,r12,6136
 8009ba4:	41000115 	stw	r4,4(r8)
 8009ba8:	43000015 	stw	r12,0(r8)
 8009bac:	d8c12015 	stw	r3,1152(sp)
 8009bb0:	d8811f15 	stw	r2,1148(sp)
 8009bb4:	010001c4 	movi	r4,7
 8009bb8:	20804916 	blt	r4,r2,8009ce0 <___vfprintf_internal_r+0x1a54>
 8009bbc:	42000204 	addi	r8,r8,8
 8009bc0:	8000041e 	bne	r16,zero,8009bd4 <___vfprintf_internal_r+0x1948>
 8009bc4:	dac13317 	ldw	r11,1228(sp)
 8009bc8:	5800021e 	bne	r11,zero,8009bd4 <___vfprintf_internal_r+0x1948>
 8009bcc:	8880004c 	andi	r2,r17,1
 8009bd0:	103bd526 	beq	r2,zero,8008b28 <__alt_data_end+0xfc008b28>
 8009bd4:	db013817 	ldw	r12,1248(sp)
 8009bd8:	d8811f17 	ldw	r2,1148(sp)
 8009bdc:	dac13517 	ldw	r11,1236(sp)
 8009be0:	1b07883a 	add	r3,r3,r12
 8009be4:	10800044 	addi	r2,r2,1
 8009be8:	42c00015 	stw	r11,0(r8)
 8009bec:	43000115 	stw	r12,4(r8)
 8009bf0:	d8c12015 	stw	r3,1152(sp)
 8009bf4:	d8811f15 	stw	r2,1148(sp)
 8009bf8:	010001c4 	movi	r4,7
 8009bfc:	20813016 	blt	r4,r2,800a0c0 <___vfprintf_internal_r+0x1e34>
 8009c00:	42000204 	addi	r8,r8,8
 8009c04:	0421c83a 	sub	r16,zero,r16
 8009c08:	0400630e 	bge	zero,r16,8009d98 <___vfprintf_internal_r+0x1b0c>
 8009c0c:	04800404 	movi	r18,16
 8009c10:	94009f0e 	bge	r18,r16,8009e90 <___vfprintf_internal_r+0x1c04>
 8009c14:	010200b4 	movhi	r4,2050
 8009c18:	21060684 	addi	r4,r4,6170
 8009c1c:	d9012c15 	stw	r4,1200(sp)
 8009c20:	054001c4 	movi	r21,7
 8009c24:	00000306 	br	8009c34 <___vfprintf_internal_r+0x19a8>
 8009c28:	42000204 	addi	r8,r8,8
 8009c2c:	843ffc04 	addi	r16,r16,-16
 8009c30:	94009a0e 	bge	r18,r16,8009e9c <___vfprintf_internal_r+0x1c10>
 8009c34:	18c00404 	addi	r3,r3,16
 8009c38:	10800044 	addi	r2,r2,1
 8009c3c:	45000015 	stw	r20,0(r8)
 8009c40:	44800115 	stw	r18,4(r8)
 8009c44:	d8c12015 	stw	r3,1152(sp)
 8009c48:	d8811f15 	stw	r2,1148(sp)
 8009c4c:	a8bff60e 	bge	r21,r2,8009c28 <__alt_data_end+0xfc009c28>
 8009c50:	b009883a 	mov	r4,r22
 8009c54:	b80b883a 	mov	r5,r23
 8009c58:	d9811e04 	addi	r6,sp,1144
 8009c5c:	80101780 	call	8010178 <__sprint_r>
 8009c60:	103aa11e 	bne	r2,zero,80086e8 <__alt_data_end+0xfc0086e8>
 8009c64:	d8c12017 	ldw	r3,1152(sp)
 8009c68:	d8811f17 	ldw	r2,1148(sp)
 8009c6c:	da000404 	addi	r8,sp,16
 8009c70:	003fee06 	br	8009c2c <__alt_data_end+0xfc009c2c>
 8009c74:	008011c4 	movi	r2,71
 8009c78:	1400b316 	blt	r2,r16,8009f48 <___vfprintf_internal_r+0x1cbc>
 8009c7c:	030200b4 	movhi	r12,2050
 8009c80:	6305f004 	addi	r12,r12,6080
 8009c84:	db013115 	stw	r12,1220(sp)
 8009c88:	00c000c4 	movi	r3,3
 8009c8c:	00bfdfc4 	movi	r2,-129
 8009c90:	d8c12b15 	stw	r3,1196(sp)
 8009c94:	88a2703a 	and	r17,r17,r2
 8009c98:	dd412783 	ldbu	r21,1182(sp)
 8009c9c:	dcc12d15 	stw	r19,1204(sp)
 8009ca0:	1825883a 	mov	r18,r3
 8009ca4:	d8013215 	stw	zero,1224(sp)
 8009ca8:	d8013415 	stw	zero,1232(sp)
 8009cac:	003b0b06 	br	80088dc <__alt_data_end+0xfc0088dc>
 8009cb0:	4825883a 	mov	r18,r9
 8009cb4:	003cba06 	br	8008fa0 <__alt_data_end+0xfc008fa0>
 8009cb8:	db012d17 	ldw	r12,1204(sp)
 8009cbc:	14c00017 	ldw	r19,0(r2)
 8009cc0:	0039883a 	mov	fp,zero
 8009cc4:	63000104 	addi	r12,r12,4
 8009cc8:	db012d15 	stw	r12,1204(sp)
 8009ccc:	003c0d06 	br	8008d04 <__alt_data_end+0xfc008d04>
 8009cd0:	008200b4 	movhi	r2,2050
 8009cd4:	1085ee04 	addi	r2,r2,6072
 8009cd8:	d8813115 	stw	r2,1220(sp)
 8009cdc:	003ac406 	br	80087f0 <__alt_data_end+0xfc0087f0>
 8009ce0:	b009883a 	mov	r4,r22
 8009ce4:	b80b883a 	mov	r5,r23
 8009ce8:	d9811e04 	addi	r6,sp,1144
 8009cec:	80101780 	call	8010178 <__sprint_r>
 8009cf0:	103a7d1e 	bne	r2,zero,80086e8 <__alt_data_end+0xfc0086e8>
 8009cf4:	dc012617 	ldw	r16,1176(sp)
 8009cf8:	d8c12017 	ldw	r3,1152(sp)
 8009cfc:	da000404 	addi	r8,sp,16
 8009d00:	003faf06 	br	8009bc0 <__alt_data_end+0xfc009bc0>
 8009d04:	db012e17 	ldw	r12,1208(sp)
 8009d08:	1805883a 	mov	r2,r3
 8009d0c:	dac12d15 	stw	r11,1204(sp)
 8009d10:	0319c83a 	sub	r12,zero,r12
 8009d14:	db012e15 	stw	r12,1208(sp)
 8009d18:	003a7e06 	br	8008714 <__alt_data_end+0xfc008714>
 8009d1c:	18800044 	addi	r2,r3,1
 8009d20:	8c400814 	ori	r17,r17,32
 8009d24:	1c000047 	ldb	r16,1(r3)
 8009d28:	0039bf06 	br	8008428 <__alt_data_end+0xfc008428>
 8009d2c:	b009883a 	mov	r4,r22
 8009d30:	b80b883a 	mov	r5,r23
 8009d34:	d9811e04 	addi	r6,sp,1144
 8009d38:	80101780 	call	8010178 <__sprint_r>
 8009d3c:	103a6a1e 	bne	r2,zero,80086e8 <__alt_data_end+0xfc0086e8>
 8009d40:	d8c12017 	ldw	r3,1152(sp)
 8009d44:	da000404 	addi	r8,sp,16
 8009d48:	003d0c06 	br	800917c <__alt_data_end+0xfc00917c>
 8009d4c:	db012817 	ldw	r12,1184(sp)
 8009d50:	d8c13117 	ldw	r3,1220(sp)
 8009d54:	60e5c83a 	sub	r18,r12,r3
 8009d58:	003adb06 	br	80088c8 <__alt_data_end+0xfc0088c8>
 8009d5c:	da013f15 	stw	r8,1276(sp)
 8009d60:	8004afc0 	call	8004afc <strlen>
 8009d64:	1025883a 	mov	r18,r2
 8009d68:	da013f17 	ldw	r8,1276(sp)
 8009d6c:	903c8e0e 	bge	r18,zero,8008fa8 <__alt_data_end+0xfc008fa8>
 8009d70:	0005883a 	mov	r2,zero
 8009d74:	003c8c06 	br	8008fa8 <__alt_data_end+0xfc008fa8>
 8009d78:	b009883a 	mov	r4,r22
 8009d7c:	b80b883a 	mov	r5,r23
 8009d80:	d9811e04 	addi	r6,sp,1144
 8009d84:	80101780 	call	8010178 <__sprint_r>
 8009d88:	103a571e 	bne	r2,zero,80086e8 <__alt_data_end+0xfc0086e8>
 8009d8c:	d8c12017 	ldw	r3,1152(sp)
 8009d90:	d8811f17 	ldw	r2,1148(sp)
 8009d94:	da000404 	addi	r8,sp,16
 8009d98:	db013317 	ldw	r12,1228(sp)
 8009d9c:	dac13117 	ldw	r11,1220(sp)
 8009da0:	10800044 	addi	r2,r2,1
 8009da4:	60c7883a 	add	r3,r12,r3
 8009da8:	42c00015 	stw	r11,0(r8)
 8009dac:	43000115 	stw	r12,4(r8)
 8009db0:	d8c12015 	stw	r3,1152(sp)
 8009db4:	d8811f15 	stw	r2,1148(sp)
 8009db8:	010001c4 	movi	r4,7
 8009dbc:	20bb590e 	bge	r4,r2,8008b24 <__alt_data_end+0xfc008b24>
 8009dc0:	003d7e06 	br	80093bc <__alt_data_end+0xfc0093bc>
 8009dc4:	010200b4 	movhi	r4,2050
 8009dc8:	21060a84 	addi	r4,r4,6186
 8009dcc:	d9013615 	stw	r4,1240(sp)
 8009dd0:	003af606 	br	80089ac <__alt_data_end+0xfc0089ac>
 8009dd4:	d8812604 	addi	r2,sp,1176
 8009dd8:	d8800115 	stw	r2,4(sp)
 8009ddc:	d9413717 	ldw	r5,1244(sp)
 8009de0:	d8812504 	addi	r2,sp,1172
 8009de4:	d8800215 	stw	r2,8(sp)
 8009de8:	d8812104 	addi	r2,sp,1156
 8009dec:	da400015 	stw	r9,0(sp)
 8009df0:	d8800315 	stw	r2,12(sp)
 8009df4:	b009883a 	mov	r4,r22
 8009df8:	900d883a 	mov	r6,r18
 8009dfc:	01c000c4 	movi	r7,3
 8009e00:	da013f15 	stw	r8,1276(sp)
 8009e04:	da413e15 	stw	r9,1272(sp)
 8009e08:	800a5dc0 	call	800a5dc <_dtoa_r>
 8009e0c:	da413e17 	ldw	r9,1272(sp)
 8009e10:	da013f17 	ldw	r8,1276(sp)
 8009e14:	d8813115 	stw	r2,1220(sp)
 8009e18:	4839883a 	mov	fp,r9
 8009e1c:	dac13117 	ldw	r11,1220(sp)
 8009e20:	00801184 	movi	r2,70
 8009e24:	5f15883a 	add	r10,r11,fp
 8009e28:	a8bef01e 	bne	r21,r2,80099ec <__alt_data_end+0xfc0099ec>
 8009e2c:	59000007 	ldb	r4,0(r11)
 8009e30:	00800c04 	movi	r2,48
 8009e34:	2080e026 	beq	r4,r2,800a1b8 <___vfprintf_internal_r+0x1f2c>
 8009e38:	d8c12617 	ldw	r3,1176(sp)
 8009e3c:	50d5883a 	add	r10,r10,r3
 8009e40:	003eea06 	br	80099ec <__alt_data_end+0xfc0099ec>
 8009e44:	0025883a 	mov	r18,zero
 8009e48:	003db306 	br	8009518 <__alt_data_end+0xfc009518>
 8009e4c:	b009883a 	mov	r4,r22
 8009e50:	b80b883a 	mov	r5,r23
 8009e54:	d9811e04 	addi	r6,sp,1144
 8009e58:	80101780 	call	8010178 <__sprint_r>
 8009e5c:	103a221e 	bne	r2,zero,80086e8 <__alt_data_end+0xfc0086e8>
 8009e60:	d8c12017 	ldw	r3,1152(sp)
 8009e64:	da000404 	addi	r8,sp,16
 8009e68:	003daa06 	br	8009514 <__alt_data_end+0xfc009514>
 8009e6c:	b009883a 	mov	r4,r22
 8009e70:	b80b883a 	mov	r5,r23
 8009e74:	d9811e04 	addi	r6,sp,1144
 8009e78:	80101780 	call	8010178 <__sprint_r>
 8009e7c:	103a1a1e 	bne	r2,zero,80086e8 <__alt_data_end+0xfc0086e8>
 8009e80:	d8812617 	ldw	r2,1176(sp)
 8009e84:	d8c12017 	ldw	r3,1152(sp)
 8009e88:	da000404 	addi	r8,sp,16
 8009e8c:	003e2c06 	br	8009740 <__alt_data_end+0xfc009740>
 8009e90:	030200b4 	movhi	r12,2050
 8009e94:	63060684 	addi	r12,r12,6170
 8009e98:	db012c15 	stw	r12,1200(sp)
 8009e9c:	dac12c17 	ldw	r11,1200(sp)
 8009ea0:	1c07883a 	add	r3,r3,r16
 8009ea4:	10800044 	addi	r2,r2,1
 8009ea8:	42c00015 	stw	r11,0(r8)
 8009eac:	44000115 	stw	r16,4(r8)
 8009eb0:	d8c12015 	stw	r3,1152(sp)
 8009eb4:	d8811f15 	stw	r2,1148(sp)
 8009eb8:	010001c4 	movi	r4,7
 8009ebc:	20bfae16 	blt	r4,r2,8009d78 <__alt_data_end+0xfc009d78>
 8009ec0:	42000204 	addi	r8,r8,8
 8009ec4:	003fb406 	br	8009d98 <__alt_data_end+0xfc009d98>
 8009ec8:	030200b4 	movhi	r12,2050
 8009ecc:	63060a84 	addi	r12,r12,6186
 8009ed0:	db013615 	stw	r12,1240(sp)
 8009ed4:	003b3806 	br	8008bb8 <__alt_data_end+0xfc008bb8>
 8009ed8:	b009883a 	mov	r4,r22
 8009edc:	b80b883a 	mov	r5,r23
 8009ee0:	d9811e04 	addi	r6,sp,1144
 8009ee4:	80101780 	call	8010178 <__sprint_r>
 8009ee8:	1039ff1e 	bne	r2,zero,80086e8 <__alt_data_end+0xfc0086e8>
 8009eec:	d8812617 	ldw	r2,1176(sp)
 8009ef0:	db013317 	ldw	r12,1228(sp)
 8009ef4:	d8c12017 	ldw	r3,1152(sp)
 8009ef8:	da000404 	addi	r8,sp,16
 8009efc:	6085c83a 	sub	r2,r12,r2
 8009f00:	003e2006 	br	8009784 <__alt_data_end+0xfc009784>
 8009f04:	0021883a 	mov	r16,zero
 8009f08:	003e1f06 	br	8009788 <__alt_data_end+0xfc009788>
 8009f0c:	00800184 	movi	r2,6
 8009f10:	1240012e 	bgeu	r2,r9,8009f18 <___vfprintf_internal_r+0x1c8c>
 8009f14:	1013883a 	mov	r9,r2
 8009f18:	4825883a 	mov	r18,r9
 8009f1c:	4805883a 	mov	r2,r9
 8009f20:	48009e16 	blt	r9,zero,800a19c <___vfprintf_internal_r+0x1f10>
 8009f24:	d8812b15 	stw	r2,1196(sp)
 8009f28:	008200b4 	movhi	r2,2050
 8009f2c:	1085fc04 	addi	r2,r2,6128
 8009f30:	d8813115 	stw	r2,1220(sp)
 8009f34:	dcc12d15 	stw	r19,1204(sp)
 8009f38:	d8013215 	stw	zero,1224(sp)
 8009f3c:	d8013415 	stw	zero,1232(sp)
 8009f40:	0005883a 	mov	r2,zero
 8009f44:	003a6c06 	br	80088f8 <__alt_data_end+0xfc0088f8>
 8009f48:	008200b4 	movhi	r2,2050
 8009f4c:	1085f104 	addi	r2,r2,6084
 8009f50:	d8813115 	stw	r2,1220(sp)
 8009f54:	003f4c06 	br	8009c88 <__alt_data_end+0xfc009c88>
 8009f58:	00c00b44 	movi	r3,45
 8009f5c:	d8812b15 	stw	r2,1196(sp)
 8009f60:	dc412d17 	ldw	r17,1204(sp)
 8009f64:	d8c12785 	stb	r3,1182(sp)
 8009f68:	dcc12d15 	stw	r19,1204(sp)
 8009f6c:	d8013215 	stw	zero,1224(sp)
 8009f70:	00800b44 	movi	r2,45
 8009f74:	003a5d06 	br	80088ec <__alt_data_end+0xfc0088ec>
 8009f78:	d8c12617 	ldw	r3,1176(sp)
 8009f7c:	00bfff44 	movi	r2,-3
 8009f80:	18800d16 	blt	r3,r2,8009fb8 <___vfprintf_internal_r+0x1d2c>
 8009f84:	48c00c16 	blt	r9,r3,8009fb8 <___vfprintf_internal_r+0x1d2c>
 8009f88:	d8c13415 	stw	r3,1232(sp)
 8009f8c:	040019c4 	movi	r16,103
 8009f90:	003eb506 	br	8009a68 <__alt_data_end+0xfc009a68>
 8009f94:	05400b44 	movi	r21,45
 8009f98:	dd412785 	stb	r21,1182(sp)
 8009f9c:	003a0f06 	br	80087dc <__alt_data_end+0xfc0087dc>
 8009fa0:	010200b4 	movhi	r4,2050
 8009fa4:	21060684 	addi	r4,r4,6170
 8009fa8:	d9012c15 	stw	r4,1200(sp)
 8009fac:	003cb106 	br	8009274 <__alt_data_end+0xfc009274>
 8009fb0:	5005883a 	mov	r2,r10
 8009fb4:	003ea106 	br	8009a3c <__alt_data_end+0xfc009a3c>
 8009fb8:	843fff84 	addi	r16,r16,-2
 8009fbc:	1f3fffc4 	addi	fp,r3,-1
 8009fc0:	df012615 	stw	fp,1176(sp)
 8009fc4:	dc0122c5 	stb	r16,1163(sp)
 8009fc8:	e0009516 	blt	fp,zero,800a220 <___vfprintf_internal_r+0x1f94>
 8009fcc:	00800ac4 	movi	r2,43
 8009fd0:	d8812305 	stb	r2,1164(sp)
 8009fd4:	00800244 	movi	r2,9
 8009fd8:	1700690e 	bge	r2,fp,800a180 <___vfprintf_internal_r+0x1ef4>
 8009fdc:	dd4122c4 	addi	r21,sp,1163
 8009fe0:	dc012c15 	stw	r16,1200(sp)
 8009fe4:	8825883a 	mov	r18,r17
 8009fe8:	a821883a 	mov	r16,r21
 8009fec:	4023883a 	mov	r17,r8
 8009ff0:	e009883a 	mov	r4,fp
 8009ff4:	01400284 	movi	r5,10
 8009ff8:	8003e480 	call	8003e48 <__modsi3>
 8009ffc:	10800c04 	addi	r2,r2,48
 800a000:	843fffc4 	addi	r16,r16,-1
 800a004:	e009883a 	mov	r4,fp
 800a008:	01400284 	movi	r5,10
 800a00c:	80800005 	stb	r2,0(r16)
 800a010:	8003df40 	call	8003df4 <__divsi3>
 800a014:	1039883a 	mov	fp,r2
 800a018:	00800244 	movi	r2,9
 800a01c:	173ff416 	blt	r2,fp,8009ff0 <__alt_data_end+0xfc009ff0>
 800a020:	8811883a 	mov	r8,r17
 800a024:	e0800c04 	addi	r2,fp,48
 800a028:	9023883a 	mov	r17,r18
 800a02c:	8025883a 	mov	r18,r16
 800a030:	913fffc4 	addi	r4,r18,-1
 800a034:	90bfffc5 	stb	r2,-1(r18)
 800a038:	dc012c17 	ldw	r16,1200(sp)
 800a03c:	25408e2e 	bgeu	r4,r21,800a278 <___vfprintf_internal_r+0x1fec>
 800a040:	d9412384 	addi	r5,sp,1166
 800a044:	2c8bc83a 	sub	r5,r5,r18
 800a048:	d8c12344 	addi	r3,sp,1165
 800a04c:	a94b883a 	add	r5,r21,r5
 800a050:	00000106 	br	800a058 <___vfprintf_internal_r+0x1dcc>
 800a054:	20800003 	ldbu	r2,0(r4)
 800a058:	18800005 	stb	r2,0(r3)
 800a05c:	18c00044 	addi	r3,r3,1
 800a060:	21000044 	addi	r4,r4,1
 800a064:	197ffb1e 	bne	r3,r5,800a054 <__alt_data_end+0xfc00a054>
 800a068:	d8812304 	addi	r2,sp,1164
 800a06c:	1485c83a 	sub	r2,r2,r18
 800a070:	d8c12344 	addi	r3,sp,1165
 800a074:	1885883a 	add	r2,r3,r2
 800a078:	dac13317 	ldw	r11,1228(sp)
 800a07c:	156bc83a 	sub	r21,r2,r21
 800a080:	dd413a15 	stw	r21,1256(sp)
 800a084:	00800044 	movi	r2,1
 800a088:	5d65883a 	add	r18,r11,r21
 800a08c:	12c0770e 	bge	r2,r11,800a26c <___vfprintf_internal_r+0x1fe0>
 800a090:	94800044 	addi	r18,r18,1
 800a094:	9005883a 	mov	r2,r18
 800a098:	90007216 	blt	r18,zero,800a264 <___vfprintf_internal_r+0x1fd8>
 800a09c:	d8013415 	stw	zero,1232(sp)
 800a0a0:	003e7906 	br	8009a88 <__alt_data_end+0xfc009a88>
 800a0a4:	da412b15 	stw	r9,1196(sp)
 800a0a8:	dd412783 	ldbu	r21,1182(sp)
 800a0ac:	4825883a 	mov	r18,r9
 800a0b0:	dcc12d15 	stw	r19,1204(sp)
 800a0b4:	d8013215 	stw	zero,1224(sp)
 800a0b8:	d8013415 	stw	zero,1232(sp)
 800a0bc:	003a0706 	br	80088dc <__alt_data_end+0xfc0088dc>
 800a0c0:	b009883a 	mov	r4,r22
 800a0c4:	b80b883a 	mov	r5,r23
 800a0c8:	d9811e04 	addi	r6,sp,1144
 800a0cc:	80101780 	call	8010178 <__sprint_r>
 800a0d0:	1039851e 	bne	r2,zero,80086e8 <__alt_data_end+0xfc0086e8>
 800a0d4:	dc012617 	ldw	r16,1176(sp)
 800a0d8:	d8c12017 	ldw	r3,1152(sp)
 800a0dc:	d8811f17 	ldw	r2,1148(sp)
 800a0e0:	da000404 	addi	r8,sp,16
 800a0e4:	003ec706 	br	8009c04 <__alt_data_end+0xfc009c04>
 800a0e8:	483e1a1e 	bne	r9,zero,8009954 <__alt_data_end+0xfc009954>
 800a0ec:	9013883a 	mov	r9,r18
 800a0f0:	003e1806 	br	8009954 <__alt_data_end+0xfc009954>
 800a0f4:	00c00b44 	movi	r3,45
 800a0f8:	64a0003c 	xorhi	r18,r12,32768
 800a0fc:	d8c12b05 	stb	r3,1196(sp)
 800a100:	003e1a06 	br	800996c <__alt_data_end+0xfc00996c>
 800a104:	4f000044 	addi	fp,r9,1
 800a108:	003e1f06 	br	8009988 <__alt_data_end+0xfc009988>
 800a10c:	02400184 	movi	r9,6
 800a110:	003e1006 	br	8009954 <__alt_data_end+0xfc009954>
 800a114:	d8c13417 	ldw	r3,1232(sp)
 800a118:	00c04b0e 	bge	zero,r3,800a248 <___vfprintf_internal_r+0x1fbc>
 800a11c:	04800044 	movi	r18,1
 800a120:	dac13317 	ldw	r11,1228(sp)
 800a124:	92e5883a 	add	r18,r18,r11
 800a128:	9005883a 	mov	r2,r18
 800a12c:	903e560e 	bge	r18,zero,8009a88 <__alt_data_end+0xfc009a88>
 800a130:	0005883a 	mov	r2,zero
 800a134:	003e5406 	br	8009a88 <__alt_data_end+0xfc009a88>
 800a138:	d8c12617 	ldw	r3,1176(sp)
 800a13c:	d8c13415 	stw	r3,1232(sp)
 800a140:	00c03b0e 	bge	zero,r3,800a230 <___vfprintf_internal_r+0x1fa4>
 800a144:	4800081e 	bne	r9,zero,800a168 <___vfprintf_internal_r+0x1edc>
 800a148:	8c40004c 	andi	r17,r17,1
 800a14c:	8800061e 	bne	r17,zero,800a168 <___vfprintf_internal_r+0x1edc>
 800a150:	1805883a 	mov	r2,r3
 800a154:	183e4b0e 	bge	r3,zero,8009a84 <__alt_data_end+0xfc009a84>
 800a158:	0005883a 	mov	r2,zero
 800a15c:	003e4906 	br	8009a84 <__alt_data_end+0xfc009a84>
 800a160:	d8812117 	ldw	r2,1156(sp)
 800a164:	003e3506 	br	8009a3c <__alt_data_end+0xfc009a3c>
 800a168:	dac13417 	ldw	r11,1232(sp)
 800a16c:	4a400044 	addi	r9,r9,1
 800a170:	5a65883a 	add	r18,r11,r9
 800a174:	9005883a 	mov	r2,r18
 800a178:	903e430e 	bge	r18,zero,8009a88 <__alt_data_end+0xfc009a88>
 800a17c:	003fec06 	br	800a130 <__alt_data_end+0xfc00a130>
 800a180:	00800c04 	movi	r2,48
 800a184:	e0c00c04 	addi	r3,fp,48
 800a188:	d8812345 	stb	r2,1165(sp)
 800a18c:	d8c12385 	stb	r3,1166(sp)
 800a190:	d88123c4 	addi	r2,sp,1167
 800a194:	dd4122c4 	addi	r21,sp,1163
 800a198:	003fb706 	br	800a078 <__alt_data_end+0xfc00a078>
 800a19c:	0005883a 	mov	r2,zero
 800a1a0:	003f6006 	br	8009f24 <__alt_data_end+0xfc009f24>
 800a1a4:	db013417 	ldw	r12,1232(sp)
 800a1a8:	64800044 	addi	r18,r12,1
 800a1ac:	9005883a 	mov	r2,r18
 800a1b0:	903e350e 	bge	r18,zero,8009a88 <__alt_data_end+0xfc009a88>
 800a1b4:	003fde06 	br	800a130 <__alt_data_end+0xfc00a130>
 800a1b8:	d9013717 	ldw	r4,1244(sp)
 800a1bc:	900b883a 	mov	r5,r18
 800a1c0:	000d883a 	mov	r6,zero
 800a1c4:	000f883a 	mov	r7,zero
 800a1c8:	da013f15 	stw	r8,1276(sp)
 800a1cc:	da413e15 	stw	r9,1272(sp)
 800a1d0:	da813d15 	stw	r10,1268(sp)
 800a1d4:	80137900 	call	8013790 <__eqdf2>
 800a1d8:	da013f17 	ldw	r8,1276(sp)
 800a1dc:	da413e17 	ldw	r9,1272(sp)
 800a1e0:	da813d17 	ldw	r10,1268(sp)
 800a1e4:	103f1426 	beq	r2,zero,8009e38 <__alt_data_end+0xfc009e38>
 800a1e8:	00800044 	movi	r2,1
 800a1ec:	1707c83a 	sub	r3,r2,fp
 800a1f0:	d8c12615 	stw	r3,1176(sp)
 800a1f4:	003f1106 	br	8009e3c <__alt_data_end+0xfc009e3c>
 800a1f8:	dac12d17 	ldw	r11,1204(sp)
 800a1fc:	5a400017 	ldw	r9,0(r11)
 800a200:	5ac00104 	addi	r11,r11,4
 800a204:	dac12d15 	stw	r11,1204(sp)
 800a208:	483ec60e 	bge	r9,zero,8009d24 <__alt_data_end+0xfc009d24>
 800a20c:	027fffc4 	movi	r9,-1
 800a210:	1c000047 	ldb	r16,1(r3)
 800a214:	00388406 	br	8008428 <__alt_data_end+0xfc008428>
 800a218:	043fffc4 	movi	r16,-1
 800a21c:	00391006 	br	8008660 <__alt_data_end+0xfc008660>
 800a220:	00800b44 	movi	r2,45
 800a224:	0739c83a 	sub	fp,zero,fp
 800a228:	d8812305 	stb	r2,1164(sp)
 800a22c:	003f6906 	br	8009fd4 <__alt_data_end+0xfc009fd4>
 800a230:	4800081e 	bne	r9,zero,800a254 <___vfprintf_internal_r+0x1fc8>
 800a234:	8c40004c 	andi	r17,r17,1
 800a238:	8800061e 	bne	r17,zero,800a254 <___vfprintf_internal_r+0x1fc8>
 800a23c:	00800044 	movi	r2,1
 800a240:	1025883a 	mov	r18,r2
 800a244:	003e1006 	br	8009a88 <__alt_data_end+0xfc009a88>
 800a248:	04800084 	movi	r18,2
 800a24c:	90e5c83a 	sub	r18,r18,r3
 800a250:	003fb306 	br	800a120 <__alt_data_end+0xfc00a120>
 800a254:	4c800084 	addi	r18,r9,2
 800a258:	9005883a 	mov	r2,r18
 800a25c:	903e0a0e 	bge	r18,zero,8009a88 <__alt_data_end+0xfc009a88>
 800a260:	003fb306 	br	800a130 <__alt_data_end+0xfc00a130>
 800a264:	0005883a 	mov	r2,zero
 800a268:	003f8c06 	br	800a09c <__alt_data_end+0xfc00a09c>
 800a26c:	88a2703a 	and	r17,r17,r2
 800a270:	883f8826 	beq	r17,zero,800a094 <__alt_data_end+0xfc00a094>
 800a274:	003f8606 	br	800a090 <__alt_data_end+0xfc00a090>
 800a278:	d8812344 	addi	r2,sp,1165
 800a27c:	003f7e06 	br	800a078 <__alt_data_end+0xfc00a078>
 800a280:	d8c12617 	ldw	r3,1176(sp)
 800a284:	003f4d06 	br	8009fbc <__alt_data_end+0xfc009fbc>

0800a288 <__vfprintf_internal>:
 800a288:	2007883a 	mov	r3,r4
 800a28c:	010200b4 	movhi	r4,2050
 800a290:	210d4d04 	addi	r4,r4,13620
 800a294:	21000017 	ldw	r4,0(r4)
 800a298:	2805883a 	mov	r2,r5
 800a29c:	300f883a 	mov	r7,r6
 800a2a0:	180b883a 	mov	r5,r3
 800a2a4:	100d883a 	mov	r6,r2
 800a2a8:	800828c1 	jmpi	800828c <___vfprintf_internal_r>

0800a2ac <__swsetup_r>:
 800a2ac:	008200b4 	movhi	r2,2050
 800a2b0:	defffd04 	addi	sp,sp,-12
 800a2b4:	108d4d04 	addi	r2,r2,13620
 800a2b8:	dc400115 	stw	r17,4(sp)
 800a2bc:	2023883a 	mov	r17,r4
 800a2c0:	11000017 	ldw	r4,0(r2)
 800a2c4:	dc000015 	stw	r16,0(sp)
 800a2c8:	dfc00215 	stw	ra,8(sp)
 800a2cc:	2821883a 	mov	r16,r5
 800a2d0:	20000226 	beq	r4,zero,800a2dc <__swsetup_r+0x30>
 800a2d4:	20c00e17 	ldw	r3,56(r4)
 800a2d8:	18002e26 	beq	r3,zero,800a394 <__swsetup_r+0xe8>
 800a2dc:	8080030b 	ldhu	r2,12(r16)
 800a2e0:	10c0020c 	andi	r3,r2,8
 800a2e4:	100d883a 	mov	r6,r2
 800a2e8:	18000f26 	beq	r3,zero,800a328 <__swsetup_r+0x7c>
 800a2ec:	80c00417 	ldw	r3,16(r16)
 800a2f0:	18001526 	beq	r3,zero,800a348 <__swsetup_r+0x9c>
 800a2f4:	1100004c 	andi	r4,r2,1
 800a2f8:	20001c1e 	bne	r4,zero,800a36c <__swsetup_r+0xc0>
 800a2fc:	1080008c 	andi	r2,r2,2
 800a300:	1000261e 	bne	r2,zero,800a39c <__swsetup_r+0xf0>
 800a304:	80800517 	ldw	r2,20(r16)
 800a308:	80800215 	stw	r2,8(r16)
 800a30c:	18001c26 	beq	r3,zero,800a380 <__swsetup_r+0xd4>
 800a310:	0005883a 	mov	r2,zero
 800a314:	dfc00217 	ldw	ra,8(sp)
 800a318:	dc400117 	ldw	r17,4(sp)
 800a31c:	dc000017 	ldw	r16,0(sp)
 800a320:	dec00304 	addi	sp,sp,12
 800a324:	f800283a 	ret
 800a328:	3080040c 	andi	r2,r6,16
 800a32c:	10001726 	beq	r2,zero,800a38c <__swsetup_r+0xe0>
 800a330:	3080010c 	andi	r2,r6,4
 800a334:	10001b1e 	bne	r2,zero,800a3a4 <__swsetup_r+0xf8>
 800a338:	80c00417 	ldw	r3,16(r16)
 800a33c:	30800214 	ori	r2,r6,8
 800a340:	8080030d 	sth	r2,12(r16)
 800a344:	183feb1e 	bne	r3,zero,800a2f4 <__alt_data_end+0xfc00a2f4>
 800a348:	1140a00c 	andi	r5,r2,640
 800a34c:	01008004 	movi	r4,512
 800a350:	293fe826 	beq	r5,r4,800a2f4 <__alt_data_end+0xfc00a2f4>
 800a354:	8809883a 	mov	r4,r17
 800a358:	800b883a 	mov	r5,r16
 800a35c:	800d5ec0 	call	800d5ec <__smakebuf_r>
 800a360:	8080030b 	ldhu	r2,12(r16)
 800a364:	80c00417 	ldw	r3,16(r16)
 800a368:	003fe206 	br	800a2f4 <__alt_data_end+0xfc00a2f4>
 800a36c:	80800517 	ldw	r2,20(r16)
 800a370:	80000215 	stw	zero,8(r16)
 800a374:	0085c83a 	sub	r2,zero,r2
 800a378:	80800615 	stw	r2,24(r16)
 800a37c:	183fe41e 	bne	r3,zero,800a310 <__alt_data_end+0xfc00a310>
 800a380:	8080030b 	ldhu	r2,12(r16)
 800a384:	1080200c 	andi	r2,r2,128
 800a388:	103fe226 	beq	r2,zero,800a314 <__alt_data_end+0xfc00a314>
 800a38c:	00bfffc4 	movi	r2,-1
 800a390:	003fe006 	br	800a314 <__alt_data_end+0xfc00a314>
 800a394:	800c2ac0 	call	800c2ac <__sinit>
 800a398:	003fd006 	br	800a2dc <__alt_data_end+0xfc00a2dc>
 800a39c:	0005883a 	mov	r2,zero
 800a3a0:	003fd906 	br	800a308 <__alt_data_end+0xfc00a308>
 800a3a4:	81400c17 	ldw	r5,48(r16)
 800a3a8:	28000626 	beq	r5,zero,800a3c4 <__swsetup_r+0x118>
 800a3ac:	80801004 	addi	r2,r16,64
 800a3b0:	28800326 	beq	r5,r2,800a3c0 <__swsetup_r+0x114>
 800a3b4:	8809883a 	mov	r4,r17
 800a3b8:	800c4200 	call	800c420 <_free_r>
 800a3bc:	8180030b 	ldhu	r6,12(r16)
 800a3c0:	80000c15 	stw	zero,48(r16)
 800a3c4:	80c00417 	ldw	r3,16(r16)
 800a3c8:	00bff6c4 	movi	r2,-37
 800a3cc:	118c703a 	and	r6,r2,r6
 800a3d0:	80000115 	stw	zero,4(r16)
 800a3d4:	80c00015 	stw	r3,0(r16)
 800a3d8:	003fd806 	br	800a33c <__alt_data_end+0xfc00a33c>

0800a3dc <quorem>:
 800a3dc:	defff704 	addi	sp,sp,-36
 800a3e0:	dc800215 	stw	r18,8(sp)
 800a3e4:	20800417 	ldw	r2,16(r4)
 800a3e8:	2c800417 	ldw	r18,16(r5)
 800a3ec:	dfc00815 	stw	ra,32(sp)
 800a3f0:	ddc00715 	stw	r23,28(sp)
 800a3f4:	dd800615 	stw	r22,24(sp)
 800a3f8:	dd400515 	stw	r21,20(sp)
 800a3fc:	dd000415 	stw	r20,16(sp)
 800a400:	dcc00315 	stw	r19,12(sp)
 800a404:	dc400115 	stw	r17,4(sp)
 800a408:	dc000015 	stw	r16,0(sp)
 800a40c:	14807116 	blt	r2,r18,800a5d4 <quorem+0x1f8>
 800a410:	94bfffc4 	addi	r18,r18,-1
 800a414:	94ad883a 	add	r22,r18,r18
 800a418:	b5ad883a 	add	r22,r22,r22
 800a41c:	2c400504 	addi	r17,r5,20
 800a420:	8da9883a 	add	r20,r17,r22
 800a424:	25400504 	addi	r21,r4,20
 800a428:	282f883a 	mov	r23,r5
 800a42c:	adad883a 	add	r22,r21,r22
 800a430:	a1400017 	ldw	r5,0(r20)
 800a434:	2021883a 	mov	r16,r4
 800a438:	b1000017 	ldw	r4,0(r22)
 800a43c:	29400044 	addi	r5,r5,1
 800a440:	8003ea40 	call	8003ea4 <__udivsi3>
 800a444:	1027883a 	mov	r19,r2
 800a448:	10002c26 	beq	r2,zero,800a4fc <quorem+0x120>
 800a44c:	a813883a 	mov	r9,r21
 800a450:	8811883a 	mov	r8,r17
 800a454:	0009883a 	mov	r4,zero
 800a458:	000d883a 	mov	r6,zero
 800a45c:	41c00017 	ldw	r7,0(r8)
 800a460:	49400017 	ldw	r5,0(r9)
 800a464:	42000104 	addi	r8,r8,4
 800a468:	38bfffcc 	andi	r2,r7,65535
 800a46c:	14c5383a 	mul	r2,r2,r19
 800a470:	380ed43a 	srli	r7,r7,16
 800a474:	28ffffcc 	andi	r3,r5,65535
 800a478:	2085883a 	add	r2,r4,r2
 800a47c:	1008d43a 	srli	r4,r2,16
 800a480:	3ccf383a 	mul	r7,r7,r19
 800a484:	198d883a 	add	r6,r3,r6
 800a488:	10ffffcc 	andi	r3,r2,65535
 800a48c:	30c7c83a 	sub	r3,r6,r3
 800a490:	280ad43a 	srli	r5,r5,16
 800a494:	21c9883a 	add	r4,r4,r7
 800a498:	180dd43a 	srai	r6,r3,16
 800a49c:	20bfffcc 	andi	r2,r4,65535
 800a4a0:	288bc83a 	sub	r5,r5,r2
 800a4a4:	298b883a 	add	r5,r5,r6
 800a4a8:	280e943a 	slli	r7,r5,16
 800a4ac:	18ffffcc 	andi	r3,r3,65535
 800a4b0:	2008d43a 	srli	r4,r4,16
 800a4b4:	38ceb03a 	or	r7,r7,r3
 800a4b8:	49c00015 	stw	r7,0(r9)
 800a4bc:	280dd43a 	srai	r6,r5,16
 800a4c0:	4a400104 	addi	r9,r9,4
 800a4c4:	a23fe52e 	bgeu	r20,r8,800a45c <__alt_data_end+0xfc00a45c>
 800a4c8:	b0800017 	ldw	r2,0(r22)
 800a4cc:	10000b1e 	bne	r2,zero,800a4fc <quorem+0x120>
 800a4d0:	b0bfff04 	addi	r2,r22,-4
 800a4d4:	a880082e 	bgeu	r21,r2,800a4f8 <quorem+0x11c>
 800a4d8:	b0ffff17 	ldw	r3,-4(r22)
 800a4dc:	18000326 	beq	r3,zero,800a4ec <quorem+0x110>
 800a4e0:	00000506 	br	800a4f8 <quorem+0x11c>
 800a4e4:	10c00017 	ldw	r3,0(r2)
 800a4e8:	1800031e 	bne	r3,zero,800a4f8 <quorem+0x11c>
 800a4ec:	10bfff04 	addi	r2,r2,-4
 800a4f0:	94bfffc4 	addi	r18,r18,-1
 800a4f4:	a8bffb36 	bltu	r21,r2,800a4e4 <__alt_data_end+0xfc00a4e4>
 800a4f8:	84800415 	stw	r18,16(r16)
 800a4fc:	8009883a 	mov	r4,r16
 800a500:	b80b883a 	mov	r5,r23
 800a504:	800e3a80 	call	800e3a8 <__mcmp>
 800a508:	10002616 	blt	r2,zero,800a5a4 <quorem+0x1c8>
 800a50c:	9cc00044 	addi	r19,r19,1
 800a510:	a80d883a 	mov	r6,r21
 800a514:	000b883a 	mov	r5,zero
 800a518:	31000017 	ldw	r4,0(r6)
 800a51c:	88800017 	ldw	r2,0(r17)
 800a520:	31800104 	addi	r6,r6,4
 800a524:	20ffffcc 	andi	r3,r4,65535
 800a528:	194b883a 	add	r5,r3,r5
 800a52c:	10ffffcc 	andi	r3,r2,65535
 800a530:	28c7c83a 	sub	r3,r5,r3
 800a534:	1004d43a 	srli	r2,r2,16
 800a538:	2008d43a 	srli	r4,r4,16
 800a53c:	180bd43a 	srai	r5,r3,16
 800a540:	18ffffcc 	andi	r3,r3,65535
 800a544:	2089c83a 	sub	r4,r4,r2
 800a548:	2149883a 	add	r4,r4,r5
 800a54c:	2004943a 	slli	r2,r4,16
 800a550:	8c400104 	addi	r17,r17,4
 800a554:	200bd43a 	srai	r5,r4,16
 800a558:	10c6b03a 	or	r3,r2,r3
 800a55c:	30ffff15 	stw	r3,-4(r6)
 800a560:	a47fed2e 	bgeu	r20,r17,800a518 <__alt_data_end+0xfc00a518>
 800a564:	9485883a 	add	r2,r18,r18
 800a568:	1085883a 	add	r2,r2,r2
 800a56c:	a887883a 	add	r3,r21,r2
 800a570:	18800017 	ldw	r2,0(r3)
 800a574:	10000b1e 	bne	r2,zero,800a5a4 <quorem+0x1c8>
 800a578:	18bfff04 	addi	r2,r3,-4
 800a57c:	a880082e 	bgeu	r21,r2,800a5a0 <quorem+0x1c4>
 800a580:	18ffff17 	ldw	r3,-4(r3)
 800a584:	18000326 	beq	r3,zero,800a594 <quorem+0x1b8>
 800a588:	00000506 	br	800a5a0 <quorem+0x1c4>
 800a58c:	10c00017 	ldw	r3,0(r2)
 800a590:	1800031e 	bne	r3,zero,800a5a0 <quorem+0x1c4>
 800a594:	10bfff04 	addi	r2,r2,-4
 800a598:	94bfffc4 	addi	r18,r18,-1
 800a59c:	a8bffb36 	bltu	r21,r2,800a58c <__alt_data_end+0xfc00a58c>
 800a5a0:	84800415 	stw	r18,16(r16)
 800a5a4:	9805883a 	mov	r2,r19
 800a5a8:	dfc00817 	ldw	ra,32(sp)
 800a5ac:	ddc00717 	ldw	r23,28(sp)
 800a5b0:	dd800617 	ldw	r22,24(sp)
 800a5b4:	dd400517 	ldw	r21,20(sp)
 800a5b8:	dd000417 	ldw	r20,16(sp)
 800a5bc:	dcc00317 	ldw	r19,12(sp)
 800a5c0:	dc800217 	ldw	r18,8(sp)
 800a5c4:	dc400117 	ldw	r17,4(sp)
 800a5c8:	dc000017 	ldw	r16,0(sp)
 800a5cc:	dec00904 	addi	sp,sp,36
 800a5d0:	f800283a 	ret
 800a5d4:	0005883a 	mov	r2,zero
 800a5d8:	003ff306 	br	800a5a8 <__alt_data_end+0xfc00a5a8>

0800a5dc <_dtoa_r>:
 800a5dc:	20801017 	ldw	r2,64(r4)
 800a5e0:	deffde04 	addi	sp,sp,-136
 800a5e4:	dd401d15 	stw	r21,116(sp)
 800a5e8:	dcc01b15 	stw	r19,108(sp)
 800a5ec:	dc801a15 	stw	r18,104(sp)
 800a5f0:	dc401915 	stw	r17,100(sp)
 800a5f4:	dc001815 	stw	r16,96(sp)
 800a5f8:	dfc02115 	stw	ra,132(sp)
 800a5fc:	df002015 	stw	fp,128(sp)
 800a600:	ddc01f15 	stw	r23,124(sp)
 800a604:	dd801e15 	stw	r22,120(sp)
 800a608:	dd001c15 	stw	r20,112(sp)
 800a60c:	d9c00315 	stw	r7,12(sp)
 800a610:	2021883a 	mov	r16,r4
 800a614:	302b883a 	mov	r21,r6
 800a618:	2825883a 	mov	r18,r5
 800a61c:	dc402417 	ldw	r17,144(sp)
 800a620:	3027883a 	mov	r19,r6
 800a624:	10000826 	beq	r2,zero,800a648 <_dtoa_r+0x6c>
 800a628:	21801117 	ldw	r6,68(r4)
 800a62c:	00c00044 	movi	r3,1
 800a630:	100b883a 	mov	r5,r2
 800a634:	1986983a 	sll	r3,r3,r6
 800a638:	11800115 	stw	r6,4(r2)
 800a63c:	10c00215 	stw	r3,8(r2)
 800a640:	800db900 	call	800db90 <_Bfree>
 800a644:	80001015 	stw	zero,64(r16)
 800a648:	a8002d16 	blt	r21,zero,800a700 <_dtoa_r+0x124>
 800a64c:	88000015 	stw	zero,0(r17)
 800a650:	a8dffc2c 	andhi	r3,r21,32752
 800a654:	009ffc34 	movhi	r2,32752
 800a658:	18801b26 	beq	r3,r2,800a6c8 <_dtoa_r+0xec>
 800a65c:	9009883a 	mov	r4,r18
 800a660:	980b883a 	mov	r5,r19
 800a664:	000d883a 	mov	r6,zero
 800a668:	000f883a 	mov	r7,zero
 800a66c:	80137900 	call	8013790 <__eqdf2>
 800a670:	10002a1e 	bne	r2,zero,800a71c <_dtoa_r+0x140>
 800a674:	d8c02317 	ldw	r3,140(sp)
 800a678:	d9002517 	ldw	r4,148(sp)
 800a67c:	00800044 	movi	r2,1
 800a680:	18800015 	stw	r2,0(r3)
 800a684:	2001a226 	beq	r4,zero,800ad10 <_dtoa_r+0x734>
 800a688:	008200b4 	movhi	r2,2050
 800a68c:	1085fe44 	addi	r2,r2,6137
 800a690:	20800015 	stw	r2,0(r4)
 800a694:	10bfffc4 	addi	r2,r2,-1
 800a698:	dfc02117 	ldw	ra,132(sp)
 800a69c:	df002017 	ldw	fp,128(sp)
 800a6a0:	ddc01f17 	ldw	r23,124(sp)
 800a6a4:	dd801e17 	ldw	r22,120(sp)
 800a6a8:	dd401d17 	ldw	r21,116(sp)
 800a6ac:	dd001c17 	ldw	r20,112(sp)
 800a6b0:	dcc01b17 	ldw	r19,108(sp)
 800a6b4:	dc801a17 	ldw	r18,104(sp)
 800a6b8:	dc401917 	ldw	r17,100(sp)
 800a6bc:	dc001817 	ldw	r16,96(sp)
 800a6c0:	dec02204 	addi	sp,sp,136
 800a6c4:	f800283a 	ret
 800a6c8:	d8c02317 	ldw	r3,140(sp)
 800a6cc:	0089c3c4 	movi	r2,9999
 800a6d0:	18800015 	stw	r2,0(r3)
 800a6d4:	90017c26 	beq	r18,zero,800acc8 <_dtoa_r+0x6ec>
 800a6d8:	008200b4 	movhi	r2,2050
 800a6dc:	10861204 	addi	r2,r2,6216
 800a6e0:	d9002517 	ldw	r4,148(sp)
 800a6e4:	203fec26 	beq	r4,zero,800a698 <__alt_data_end+0xfc00a698>
 800a6e8:	10c000c7 	ldb	r3,3(r2)
 800a6ec:	18017d1e 	bne	r3,zero,800ace4 <_dtoa_r+0x708>
 800a6f0:	10c000c4 	addi	r3,r2,3
 800a6f4:	d9802517 	ldw	r6,148(sp)
 800a6f8:	30c00015 	stw	r3,0(r6)
 800a6fc:	003fe606 	br	800a698 <__alt_data_end+0xfc00a698>
 800a700:	04e00034 	movhi	r19,32768
 800a704:	9cffffc4 	addi	r19,r19,-1
 800a708:	00800044 	movi	r2,1
 800a70c:	ace6703a 	and	r19,r21,r19
 800a710:	88800015 	stw	r2,0(r17)
 800a714:	982b883a 	mov	r21,r19
 800a718:	003fcd06 	br	800a650 <__alt_data_end+0xfc00a650>
 800a71c:	d8800204 	addi	r2,sp,8
 800a720:	a822d53a 	srli	r17,r21,20
 800a724:	d8800015 	stw	r2,0(sp)
 800a728:	8009883a 	mov	r4,r16
 800a72c:	900b883a 	mov	r5,r18
 800a730:	980d883a 	mov	r6,r19
 800a734:	d9c00104 	addi	r7,sp,4
 800a738:	800e71c0 	call	800e71c <__d2b>
 800a73c:	1039883a 	mov	fp,r2
 800a740:	88016a1e 	bne	r17,zero,800acec <_dtoa_r+0x710>
 800a744:	dd000217 	ldw	r20,8(sp)
 800a748:	dc400117 	ldw	r17,4(sp)
 800a74c:	00befbc4 	movi	r2,-1041
 800a750:	a463883a 	add	r17,r20,r17
 800a754:	8882ea16 	blt	r17,r2,800b300 <_dtoa_r+0xd24>
 800a758:	00bf0384 	movi	r2,-1010
 800a75c:	1445c83a 	sub	r2,r2,r17
 800a760:	89010484 	addi	r4,r17,1042
 800a764:	a8aa983a 	sll	r21,r21,r2
 800a768:	9108d83a 	srl	r4,r18,r4
 800a76c:	a908b03a 	or	r4,r21,r4
 800a770:	80140180 	call	8014018 <__floatunsidf>
 800a774:	017f8434 	movhi	r5,65040
 800a778:	01800044 	movi	r6,1
 800a77c:	1009883a 	mov	r4,r2
 800a780:	194b883a 	add	r5,r3,r5
 800a784:	8c7fffc4 	addi	r17,r17,-1
 800a788:	d9800f15 	stw	r6,60(sp)
 800a78c:	000d883a 	mov	r6,zero
 800a790:	01cffe34 	movhi	r7,16376
 800a794:	80032fc0 	call	80032fc <__subdf3>
 800a798:	0198dbf4 	movhi	r6,25455
 800a79c:	01cff4f4 	movhi	r7,16339
 800a7a0:	1009883a 	mov	r4,r2
 800a7a4:	180b883a 	mov	r5,r3
 800a7a8:	3190d844 	addi	r6,r6,17249
 800a7ac:	39e1e9c4 	addi	r7,r7,-30809
 800a7b0:	80138f40 	call	80138f4 <__muldf3>
 800a7b4:	01a2d874 	movhi	r6,35681
 800a7b8:	01cff1f4 	movhi	r7,16327
 800a7bc:	180b883a 	mov	r5,r3
 800a7c0:	31b22cc4 	addi	r6,r6,-14157
 800a7c4:	39e28a04 	addi	r7,r7,-30168
 800a7c8:	1009883a 	mov	r4,r2
 800a7cc:	80020b40 	call	80020b4 <__adddf3>
 800a7d0:	8809883a 	mov	r4,r17
 800a7d4:	102d883a 	mov	r22,r2
 800a7d8:	182b883a 	mov	r21,r3
 800a7dc:	8003c540 	call	8003c54 <__floatsidf>
 800a7e0:	019427f4 	movhi	r6,20639
 800a7e4:	01cff4f4 	movhi	r7,16339
 800a7e8:	1009883a 	mov	r4,r2
 800a7ec:	180b883a 	mov	r5,r3
 800a7f0:	319e7ec4 	addi	r6,r6,31227
 800a7f4:	39d104c4 	addi	r7,r7,17427
 800a7f8:	80138f40 	call	80138f4 <__muldf3>
 800a7fc:	b009883a 	mov	r4,r22
 800a800:	a80b883a 	mov	r5,r21
 800a804:	100d883a 	mov	r6,r2
 800a808:	180f883a 	mov	r7,r3
 800a80c:	80020b40 	call	80020b4 <__adddf3>
 800a810:	1009883a 	mov	r4,r2
 800a814:	180b883a 	mov	r5,r3
 800a818:	102d883a 	mov	r22,r2
 800a81c:	182b883a 	mov	r21,r3
 800a820:	8003bcc0 	call	8003bcc <__fixdfsi>
 800a824:	b009883a 	mov	r4,r22
 800a828:	a80b883a 	mov	r5,r21
 800a82c:	000d883a 	mov	r6,zero
 800a830:	000f883a 	mov	r7,zero
 800a834:	d8800515 	stw	r2,20(sp)
 800a838:	80138140 	call	8013814 <__ledf2>
 800a83c:	10023116 	blt	r2,zero,800b104 <_dtoa_r+0xb28>
 800a840:	d8c00517 	ldw	r3,20(sp)
 800a844:	00800584 	movi	r2,22
 800a848:	10c21f36 	bltu	r2,r3,800b0c8 <_dtoa_r+0xaec>
 800a84c:	180490fa 	slli	r2,r3,3
 800a850:	00c200b4 	movhi	r3,2050
 800a854:	18c63504 	addi	r3,r3,6356
 800a858:	1885883a 	add	r2,r3,r2
 800a85c:	11000017 	ldw	r4,0(r2)
 800a860:	11400117 	ldw	r5,4(r2)
 800a864:	900d883a 	mov	r6,r18
 800a868:	980f883a 	mov	r7,r19
 800a86c:	800321c0 	call	800321c <__gedf2>
 800a870:	0082a70e 	bge	zero,r2,800b310 <_dtoa_r+0xd34>
 800a874:	d9000517 	ldw	r4,20(sp)
 800a878:	d8000c15 	stw	zero,48(sp)
 800a87c:	213fffc4 	addi	r4,r4,-1
 800a880:	d9000515 	stw	r4,20(sp)
 800a884:	a463c83a 	sub	r17,r20,r17
 800a888:	8dbfffc4 	addi	r22,r17,-1
 800a88c:	b0021916 	blt	r22,zero,800b0f4 <_dtoa_r+0xb18>
 800a890:	d8000815 	stw	zero,32(sp)
 800a894:	d8800517 	ldw	r2,20(sp)
 800a898:	10020e16 	blt	r2,zero,800b0d4 <_dtoa_r+0xaf8>
 800a89c:	b0ad883a 	add	r22,r22,r2
 800a8a0:	d8800a15 	stw	r2,40(sp)
 800a8a4:	d8000915 	stw	zero,36(sp)
 800a8a8:	d8c00317 	ldw	r3,12(sp)
 800a8ac:	00800244 	movi	r2,9
 800a8b0:	10c11a36 	bltu	r2,r3,800ad1c <_dtoa_r+0x740>
 800a8b4:	00800144 	movi	r2,5
 800a8b8:	10c4fc0e 	bge	r2,r3,800bcac <_dtoa_r+0x16d0>
 800a8bc:	18ffff04 	addi	r3,r3,-4
 800a8c0:	d8c00315 	stw	r3,12(sp)
 800a8c4:	0029883a 	mov	r20,zero
 800a8c8:	d9800317 	ldw	r6,12(sp)
 800a8cc:	008000c4 	movi	r2,3
 800a8d0:	3083bd26 	beq	r6,r2,800b7c8 <_dtoa_r+0x11ec>
 800a8d4:	1183670e 	bge	r2,r6,800b674 <_dtoa_r+0x1098>
 800a8d8:	d8c00317 	ldw	r3,12(sp)
 800a8dc:	00800104 	movi	r2,4
 800a8e0:	1882e726 	beq	r3,r2,800b480 <_dtoa_r+0xea4>
 800a8e4:	00800144 	movi	r2,5
 800a8e8:	1884f21e 	bne	r3,r2,800bcb4 <_dtoa_r+0x16d8>
 800a8ec:	00800044 	movi	r2,1
 800a8f0:	d8800b15 	stw	r2,44(sp)
 800a8f4:	d8c02217 	ldw	r3,136(sp)
 800a8f8:	d9000517 	ldw	r4,20(sp)
 800a8fc:	1907883a 	add	r3,r3,r4
 800a900:	19800044 	addi	r6,r3,1
 800a904:	d8c00d15 	stw	r3,52(sp)
 800a908:	d9800615 	stw	r6,24(sp)
 800a90c:	0183c30e 	bge	zero,r6,800b81c <_dtoa_r+0x1240>
 800a910:	d9800617 	ldw	r6,24(sp)
 800a914:	3023883a 	mov	r17,r6
 800a918:	80001115 	stw	zero,68(r16)
 800a91c:	008005c4 	movi	r2,23
 800a920:	1184f62e 	bgeu	r2,r6,800bcfc <_dtoa_r+0x1720>
 800a924:	00c00044 	movi	r3,1
 800a928:	00800104 	movi	r2,4
 800a92c:	1085883a 	add	r2,r2,r2
 800a930:	11000504 	addi	r4,r2,20
 800a934:	180b883a 	mov	r5,r3
 800a938:	18c00044 	addi	r3,r3,1
 800a93c:	313ffb2e 	bgeu	r6,r4,800a92c <__alt_data_end+0xfc00a92c>
 800a940:	81401115 	stw	r5,68(r16)
 800a944:	8009883a 	mov	r4,r16
 800a948:	800dae80 	call	800dae8 <_Balloc>
 800a94c:	d8800715 	stw	r2,28(sp)
 800a950:	80801015 	stw	r2,64(r16)
 800a954:	00800384 	movi	r2,14
 800a958:	1440fd36 	bltu	r2,r17,800ad50 <_dtoa_r+0x774>
 800a95c:	a000fc26 	beq	r20,zero,800ad50 <_dtoa_r+0x774>
 800a960:	d8800517 	ldw	r2,20(sp)
 800a964:	0083b90e 	bge	zero,r2,800b84c <_dtoa_r+0x1270>
 800a968:	d8c00517 	ldw	r3,20(sp)
 800a96c:	108003cc 	andi	r2,r2,15
 800a970:	100490fa 	slli	r2,r2,3
 800a974:	182fd13a 	srai	r23,r3,4
 800a978:	00c200b4 	movhi	r3,2050
 800a97c:	18c63504 	addi	r3,r3,6356
 800a980:	1885883a 	add	r2,r3,r2
 800a984:	b8c0040c 	andi	r3,r23,16
 800a988:	12c00017 	ldw	r11,0(r2)
 800a98c:	12800117 	ldw	r10,4(r2)
 800a990:	18039726 	beq	r3,zero,800b7f0 <_dtoa_r+0x1214>
 800a994:	008200b4 	movhi	r2,2050
 800a998:	10862b04 	addi	r2,r2,6316
 800a99c:	11800817 	ldw	r6,32(r2)
 800a9a0:	11c00917 	ldw	r7,36(r2)
 800a9a4:	9009883a 	mov	r4,r18
 800a9a8:	980b883a 	mov	r5,r19
 800a9ac:	da801615 	stw	r10,88(sp)
 800a9b0:	dac01515 	stw	r11,84(sp)
 800a9b4:	80029500 	call	8002950 <__divdf3>
 800a9b8:	da801617 	ldw	r10,88(sp)
 800a9bc:	dac01517 	ldw	r11,84(sp)
 800a9c0:	bdc003cc 	andi	r23,r23,15
 800a9c4:	044000c4 	movi	r17,3
 800a9c8:	d8800e15 	stw	r2,56(sp)
 800a9cc:	182b883a 	mov	r21,r3
 800a9d0:	b8001126 	beq	r23,zero,800aa18 <_dtoa_r+0x43c>
 800a9d4:	050200b4 	movhi	r20,2050
 800a9d8:	a5062b04 	addi	r20,r20,6316
 800a9dc:	5805883a 	mov	r2,r11
 800a9e0:	5007883a 	mov	r3,r10
 800a9e4:	b980004c 	andi	r6,r23,1
 800a9e8:	1009883a 	mov	r4,r2
 800a9ec:	b82fd07a 	srai	r23,r23,1
 800a9f0:	180b883a 	mov	r5,r3
 800a9f4:	30000426 	beq	r6,zero,800aa08 <_dtoa_r+0x42c>
 800a9f8:	a1800017 	ldw	r6,0(r20)
 800a9fc:	a1c00117 	ldw	r7,4(r20)
 800aa00:	8c400044 	addi	r17,r17,1
 800aa04:	80138f40 	call	80138f4 <__muldf3>
 800aa08:	a5000204 	addi	r20,r20,8
 800aa0c:	b83ff51e 	bne	r23,zero,800a9e4 <__alt_data_end+0xfc00a9e4>
 800aa10:	1017883a 	mov	r11,r2
 800aa14:	1815883a 	mov	r10,r3
 800aa18:	d9000e17 	ldw	r4,56(sp)
 800aa1c:	a80b883a 	mov	r5,r21
 800aa20:	580d883a 	mov	r6,r11
 800aa24:	500f883a 	mov	r7,r10
 800aa28:	80029500 	call	8002950 <__divdf3>
 800aa2c:	1029883a 	mov	r20,r2
 800aa30:	182b883a 	mov	r21,r3
 800aa34:	d9800c17 	ldw	r6,48(sp)
 800aa38:	30000626 	beq	r6,zero,800aa54 <_dtoa_r+0x478>
 800aa3c:	a009883a 	mov	r4,r20
 800aa40:	a80b883a 	mov	r5,r21
 800aa44:	000d883a 	mov	r6,zero
 800aa48:	01cffc34 	movhi	r7,16368
 800aa4c:	80138140 	call	8013814 <__ledf2>
 800aa50:	10043216 	blt	r2,zero,800bb1c <_dtoa_r+0x1540>
 800aa54:	8809883a 	mov	r4,r17
 800aa58:	8003c540 	call	8003c54 <__floatsidf>
 800aa5c:	1009883a 	mov	r4,r2
 800aa60:	180b883a 	mov	r5,r3
 800aa64:	a00d883a 	mov	r6,r20
 800aa68:	a80f883a 	mov	r7,r21
 800aa6c:	80138f40 	call	80138f4 <__muldf3>
 800aa70:	000d883a 	mov	r6,zero
 800aa74:	1009883a 	mov	r4,r2
 800aa78:	180b883a 	mov	r5,r3
 800aa7c:	01d00734 	movhi	r7,16412
 800aa80:	80020b40 	call	80020b4 <__adddf3>
 800aa84:	1023883a 	mov	r17,r2
 800aa88:	d9800617 	ldw	r6,24(sp)
 800aa8c:	00bf3034 	movhi	r2,64704
 800aa90:	1885883a 	add	r2,r3,r2
 800aa94:	d8800e15 	stw	r2,56(sp)
 800aa98:	30032e26 	beq	r6,zero,800b754 <_dtoa_r+0x1178>
 800aa9c:	d8c00517 	ldw	r3,20(sp)
 800aaa0:	da800617 	ldw	r10,24(sp)
 800aaa4:	d8c01215 	stw	r3,72(sp)
 800aaa8:	d9000b17 	ldw	r4,44(sp)
 800aaac:	2003b026 	beq	r4,zero,800b970 <_dtoa_r+0x1394>
 800aab0:	50bfffc4 	addi	r2,r10,-1
 800aab4:	100490fa 	slli	r2,r2,3
 800aab8:	00c200b4 	movhi	r3,2050
 800aabc:	18c63504 	addi	r3,r3,6356
 800aac0:	1885883a 	add	r2,r3,r2
 800aac4:	11800017 	ldw	r6,0(r2)
 800aac8:	11c00117 	ldw	r7,4(r2)
 800aacc:	d8800717 	ldw	r2,28(sp)
 800aad0:	0009883a 	mov	r4,zero
 800aad4:	014ff834 	movhi	r5,16352
 800aad8:	da801615 	stw	r10,88(sp)
 800aadc:	15c00044 	addi	r23,r2,1
 800aae0:	80029500 	call	8002950 <__divdf3>
 800aae4:	d9c00e17 	ldw	r7,56(sp)
 800aae8:	880d883a 	mov	r6,r17
 800aaec:	1009883a 	mov	r4,r2
 800aaf0:	180b883a 	mov	r5,r3
 800aaf4:	80032fc0 	call	80032fc <__subdf3>
 800aaf8:	a80b883a 	mov	r5,r21
 800aafc:	a009883a 	mov	r4,r20
 800ab00:	d8c01015 	stw	r3,64(sp)
 800ab04:	d8800e15 	stw	r2,56(sp)
 800ab08:	8003bcc0 	call	8003bcc <__fixdfsi>
 800ab0c:	1009883a 	mov	r4,r2
 800ab10:	d8801715 	stw	r2,92(sp)
 800ab14:	8003c540 	call	8003c54 <__floatsidf>
 800ab18:	a009883a 	mov	r4,r20
 800ab1c:	a80b883a 	mov	r5,r21
 800ab20:	100d883a 	mov	r6,r2
 800ab24:	180f883a 	mov	r7,r3
 800ab28:	80032fc0 	call	80032fc <__subdf3>
 800ab2c:	da001717 	ldw	r8,92(sp)
 800ab30:	1829883a 	mov	r20,r3
 800ab34:	d8c00717 	ldw	r3,28(sp)
 800ab38:	d9000e17 	ldw	r4,56(sp)
 800ab3c:	d9401017 	ldw	r5,64(sp)
 800ab40:	42000c04 	addi	r8,r8,48
 800ab44:	1023883a 	mov	r17,r2
 800ab48:	1a000005 	stb	r8,0(r3)
 800ab4c:	880d883a 	mov	r6,r17
 800ab50:	a00f883a 	mov	r7,r20
 800ab54:	402b883a 	mov	r21,r8
 800ab58:	800321c0 	call	800321c <__gedf2>
 800ab5c:	00844516 	blt	zero,r2,800bc74 <_dtoa_r+0x1698>
 800ab60:	0009883a 	mov	r4,zero
 800ab64:	014ffc34 	movhi	r5,16368
 800ab68:	880d883a 	mov	r6,r17
 800ab6c:	a00f883a 	mov	r7,r20
 800ab70:	80032fc0 	call	80032fc <__subdf3>
 800ab74:	d9000e17 	ldw	r4,56(sp)
 800ab78:	d9401017 	ldw	r5,64(sp)
 800ab7c:	100d883a 	mov	r6,r2
 800ab80:	180f883a 	mov	r7,r3
 800ab84:	800321c0 	call	800321c <__gedf2>
 800ab88:	da801617 	ldw	r10,88(sp)
 800ab8c:	00843616 	blt	zero,r2,800bc68 <_dtoa_r+0x168c>
 800ab90:	00800044 	movi	r2,1
 800ab94:	12806e0e 	bge	r2,r10,800ad50 <_dtoa_r+0x774>
 800ab98:	d9000717 	ldw	r4,28(sp)
 800ab9c:	dd801315 	stw	r22,76(sp)
 800aba0:	dc001115 	stw	r16,68(sp)
 800aba4:	2295883a 	add	r10,r4,r10
 800aba8:	dcc01415 	stw	r19,80(sp)
 800abac:	502d883a 	mov	r22,r10
 800abb0:	dcc01017 	ldw	r19,64(sp)
 800abb4:	b821883a 	mov	r16,r23
 800abb8:	dc801015 	stw	r18,64(sp)
 800abbc:	dc800e17 	ldw	r18,56(sp)
 800abc0:	00000906 	br	800abe8 <_dtoa_r+0x60c>
 800abc4:	80032fc0 	call	80032fc <__subdf3>
 800abc8:	1009883a 	mov	r4,r2
 800abcc:	180b883a 	mov	r5,r3
 800abd0:	900d883a 	mov	r6,r18
 800abd4:	980f883a 	mov	r7,r19
 800abd8:	80138140 	call	8013814 <__ledf2>
 800abdc:	10040e16 	blt	r2,zero,800bc18 <_dtoa_r+0x163c>
 800abe0:	b821883a 	mov	r16,r23
 800abe4:	bd841026 	beq	r23,r22,800bc28 <_dtoa_r+0x164c>
 800abe8:	9009883a 	mov	r4,r18
 800abec:	980b883a 	mov	r5,r19
 800abf0:	000d883a 	mov	r6,zero
 800abf4:	01d00934 	movhi	r7,16420
 800abf8:	80138f40 	call	80138f4 <__muldf3>
 800abfc:	000d883a 	mov	r6,zero
 800ac00:	01d00934 	movhi	r7,16420
 800ac04:	8809883a 	mov	r4,r17
 800ac08:	a00b883a 	mov	r5,r20
 800ac0c:	1025883a 	mov	r18,r2
 800ac10:	1827883a 	mov	r19,r3
 800ac14:	80138f40 	call	80138f4 <__muldf3>
 800ac18:	180b883a 	mov	r5,r3
 800ac1c:	1009883a 	mov	r4,r2
 800ac20:	1823883a 	mov	r17,r3
 800ac24:	1029883a 	mov	r20,r2
 800ac28:	8003bcc0 	call	8003bcc <__fixdfsi>
 800ac2c:	1009883a 	mov	r4,r2
 800ac30:	102b883a 	mov	r21,r2
 800ac34:	8003c540 	call	8003c54 <__floatsidf>
 800ac38:	a009883a 	mov	r4,r20
 800ac3c:	880b883a 	mov	r5,r17
 800ac40:	100d883a 	mov	r6,r2
 800ac44:	180f883a 	mov	r7,r3
 800ac48:	80032fc0 	call	80032fc <__subdf3>
 800ac4c:	ad400c04 	addi	r21,r21,48
 800ac50:	1009883a 	mov	r4,r2
 800ac54:	180b883a 	mov	r5,r3
 800ac58:	900d883a 	mov	r6,r18
 800ac5c:	980f883a 	mov	r7,r19
 800ac60:	85400005 	stb	r21,0(r16)
 800ac64:	1023883a 	mov	r17,r2
 800ac68:	1829883a 	mov	r20,r3
 800ac6c:	80138140 	call	8013814 <__ledf2>
 800ac70:	bdc00044 	addi	r23,r23,1
 800ac74:	0009883a 	mov	r4,zero
 800ac78:	014ffc34 	movhi	r5,16368
 800ac7c:	880d883a 	mov	r6,r17
 800ac80:	a00f883a 	mov	r7,r20
 800ac84:	103fcf0e 	bge	r2,zero,800abc4 <__alt_data_end+0xfc00abc4>
 800ac88:	d9801217 	ldw	r6,72(sp)
 800ac8c:	dc001117 	ldw	r16,68(sp)
 800ac90:	d9800515 	stw	r6,20(sp)
 800ac94:	8009883a 	mov	r4,r16
 800ac98:	e00b883a 	mov	r5,fp
 800ac9c:	800db900 	call	800db90 <_Bfree>
 800aca0:	d8c00517 	ldw	r3,20(sp)
 800aca4:	d9002317 	ldw	r4,140(sp)
 800aca8:	d9802517 	ldw	r6,148(sp)
 800acac:	b8000005 	stb	zero,0(r23)
 800acb0:	18800044 	addi	r2,r3,1
 800acb4:	20800015 	stw	r2,0(r4)
 800acb8:	30027226 	beq	r6,zero,800b684 <_dtoa_r+0x10a8>
 800acbc:	35c00015 	stw	r23,0(r6)
 800acc0:	d8800717 	ldw	r2,28(sp)
 800acc4:	003e7406 	br	800a698 <__alt_data_end+0xfc00a698>
 800acc8:	00800434 	movhi	r2,16
 800accc:	10bfffc4 	addi	r2,r2,-1
 800acd0:	a8aa703a 	and	r21,r21,r2
 800acd4:	a83e801e 	bne	r21,zero,800a6d8 <__alt_data_end+0xfc00a6d8>
 800acd8:	008200b4 	movhi	r2,2050
 800acdc:	10860f04 	addi	r2,r2,6204
 800ace0:	003e7f06 	br	800a6e0 <__alt_data_end+0xfc00a6e0>
 800ace4:	10c00204 	addi	r3,r2,8
 800ace8:	003e8206 	br	800a6f4 <__alt_data_end+0xfc00a6f4>
 800acec:	01400434 	movhi	r5,16
 800acf0:	297fffc4 	addi	r5,r5,-1
 800acf4:	994a703a 	and	r5,r19,r5
 800acf8:	9009883a 	mov	r4,r18
 800acfc:	8c7f0044 	addi	r17,r17,-1023
 800ad00:	294ffc34 	orhi	r5,r5,16368
 800ad04:	dd000217 	ldw	r20,8(sp)
 800ad08:	d8000f15 	stw	zero,60(sp)
 800ad0c:	003e9f06 	br	800a78c <__alt_data_end+0xfc00a78c>
 800ad10:	008200b4 	movhi	r2,2050
 800ad14:	1085fe04 	addi	r2,r2,6136
 800ad18:	003e5f06 	br	800a698 <__alt_data_end+0xfc00a698>
 800ad1c:	80001115 	stw	zero,68(r16)
 800ad20:	8009883a 	mov	r4,r16
 800ad24:	000b883a 	mov	r5,zero
 800ad28:	800dae80 	call	800dae8 <_Balloc>
 800ad2c:	01bfffc4 	movi	r6,-1
 800ad30:	d8800715 	stw	r2,28(sp)
 800ad34:	80801015 	stw	r2,64(r16)
 800ad38:	00800044 	movi	r2,1
 800ad3c:	d9800615 	stw	r6,24(sp)
 800ad40:	d8800b15 	stw	r2,44(sp)
 800ad44:	d8002215 	stw	zero,136(sp)
 800ad48:	d9800d15 	stw	r6,52(sp)
 800ad4c:	d8000315 	stw	zero,12(sp)
 800ad50:	d8800117 	ldw	r2,4(sp)
 800ad54:	10008e16 	blt	r2,zero,800af90 <_dtoa_r+0x9b4>
 800ad58:	d9000517 	ldw	r4,20(sp)
 800ad5c:	00c00384 	movi	r3,14
 800ad60:	19008b16 	blt	r3,r4,800af90 <_dtoa_r+0x9b4>
 800ad64:	200490fa 	slli	r2,r4,3
 800ad68:	00c200b4 	movhi	r3,2050
 800ad6c:	d9802217 	ldw	r6,136(sp)
 800ad70:	18c63504 	addi	r3,r3,6356
 800ad74:	1885883a 	add	r2,r3,r2
 800ad78:	14400017 	ldw	r17,0(r2)
 800ad7c:	15000117 	ldw	r20,4(r2)
 800ad80:	3001c716 	blt	r6,zero,800b4a0 <_dtoa_r+0xec4>
 800ad84:	880d883a 	mov	r6,r17
 800ad88:	a00f883a 	mov	r7,r20
 800ad8c:	9009883a 	mov	r4,r18
 800ad90:	980b883a 	mov	r5,r19
 800ad94:	80029500 	call	8002950 <__divdf3>
 800ad98:	180b883a 	mov	r5,r3
 800ad9c:	1009883a 	mov	r4,r2
 800ada0:	8003bcc0 	call	8003bcc <__fixdfsi>
 800ada4:	1009883a 	mov	r4,r2
 800ada8:	102d883a 	mov	r22,r2
 800adac:	8003c540 	call	8003c54 <__floatsidf>
 800adb0:	1009883a 	mov	r4,r2
 800adb4:	180b883a 	mov	r5,r3
 800adb8:	880d883a 	mov	r6,r17
 800adbc:	a00f883a 	mov	r7,r20
 800adc0:	80138f40 	call	80138f4 <__muldf3>
 800adc4:	9009883a 	mov	r4,r18
 800adc8:	980b883a 	mov	r5,r19
 800adcc:	100d883a 	mov	r6,r2
 800add0:	180f883a 	mov	r7,r3
 800add4:	80032fc0 	call	80032fc <__subdf3>
 800add8:	d9000717 	ldw	r4,28(sp)
 800addc:	d9800617 	ldw	r6,24(sp)
 800ade0:	180b883a 	mov	r5,r3
 800ade4:	b0c00c04 	addi	r3,r22,48
 800ade8:	20c00005 	stb	r3,0(r4)
 800adec:	25c00044 	addi	r23,r4,1
 800adf0:	01000044 	movi	r4,1
 800adf4:	1011883a 	mov	r8,r2
 800adf8:	2807883a 	mov	r3,r5
 800adfc:	31003d26 	beq	r6,r4,800aef4 <_dtoa_r+0x918>
 800ae00:	000d883a 	mov	r6,zero
 800ae04:	01d00934 	movhi	r7,16420
 800ae08:	1009883a 	mov	r4,r2
 800ae0c:	80138f40 	call	80138f4 <__muldf3>
 800ae10:	1009883a 	mov	r4,r2
 800ae14:	180b883a 	mov	r5,r3
 800ae18:	000d883a 	mov	r6,zero
 800ae1c:	000f883a 	mov	r7,zero
 800ae20:	1027883a 	mov	r19,r2
 800ae24:	182b883a 	mov	r21,r3
 800ae28:	80137900 	call	8013790 <__eqdf2>
 800ae2c:	103f9926 	beq	r2,zero,800ac94 <__alt_data_end+0xfc00ac94>
 800ae30:	d8c00617 	ldw	r3,24(sp)
 800ae34:	d9000717 	ldw	r4,28(sp)
 800ae38:	b825883a 	mov	r18,r23
 800ae3c:	18bfffc4 	addi	r2,r3,-1
 800ae40:	20ad883a 	add	r22,r4,r2
 800ae44:	dc000315 	stw	r16,12(sp)
 800ae48:	00000a06 	br	800ae74 <_dtoa_r+0x898>
 800ae4c:	80138f40 	call	80138f4 <__muldf3>
 800ae50:	1009883a 	mov	r4,r2
 800ae54:	180b883a 	mov	r5,r3
 800ae58:	000d883a 	mov	r6,zero
 800ae5c:	000f883a 	mov	r7,zero
 800ae60:	1027883a 	mov	r19,r2
 800ae64:	182b883a 	mov	r21,r3
 800ae68:	b825883a 	mov	r18,r23
 800ae6c:	80137900 	call	8013790 <__eqdf2>
 800ae70:	10022626 	beq	r2,zero,800b70c <_dtoa_r+0x1130>
 800ae74:	880d883a 	mov	r6,r17
 800ae78:	a00f883a 	mov	r7,r20
 800ae7c:	9809883a 	mov	r4,r19
 800ae80:	a80b883a 	mov	r5,r21
 800ae84:	80029500 	call	8002950 <__divdf3>
 800ae88:	180b883a 	mov	r5,r3
 800ae8c:	1009883a 	mov	r4,r2
 800ae90:	8003bcc0 	call	8003bcc <__fixdfsi>
 800ae94:	1009883a 	mov	r4,r2
 800ae98:	1021883a 	mov	r16,r2
 800ae9c:	8003c540 	call	8003c54 <__floatsidf>
 800aea0:	1009883a 	mov	r4,r2
 800aea4:	180b883a 	mov	r5,r3
 800aea8:	880d883a 	mov	r6,r17
 800aeac:	a00f883a 	mov	r7,r20
 800aeb0:	80138f40 	call	80138f4 <__muldf3>
 800aeb4:	9809883a 	mov	r4,r19
 800aeb8:	a80b883a 	mov	r5,r21
 800aebc:	100d883a 	mov	r6,r2
 800aec0:	180f883a 	mov	r7,r3
 800aec4:	80032fc0 	call	80032fc <__subdf3>
 800aec8:	82000c04 	addi	r8,r16,48
 800aecc:	92000005 	stb	r8,0(r18)
 800aed0:	1009883a 	mov	r4,r2
 800aed4:	180b883a 	mov	r5,r3
 800aed8:	000d883a 	mov	r6,zero
 800aedc:	01d00934 	movhi	r7,16420
 800aee0:	1011883a 	mov	r8,r2
 800aee4:	bdc00044 	addi	r23,r23,1
 800aee8:	95bfd81e 	bne	r18,r22,800ae4c <__alt_data_end+0xfc00ae4c>
 800aeec:	802d883a 	mov	r22,r16
 800aef0:	dc000317 	ldw	r16,12(sp)
 800aef4:	4009883a 	mov	r4,r8
 800aef8:	180b883a 	mov	r5,r3
 800aefc:	400d883a 	mov	r6,r8
 800af00:	180f883a 	mov	r7,r3
 800af04:	80020b40 	call	80020b4 <__adddf3>
 800af08:	8809883a 	mov	r4,r17
 800af0c:	a00b883a 	mov	r5,r20
 800af10:	100d883a 	mov	r6,r2
 800af14:	180f883a 	mov	r7,r3
 800af18:	1027883a 	mov	r19,r2
 800af1c:	1825883a 	mov	r18,r3
 800af20:	80138140 	call	8013814 <__ledf2>
 800af24:	10000816 	blt	r2,zero,800af48 <_dtoa_r+0x96c>
 800af28:	8809883a 	mov	r4,r17
 800af2c:	a00b883a 	mov	r5,r20
 800af30:	980d883a 	mov	r6,r19
 800af34:	900f883a 	mov	r7,r18
 800af38:	80137900 	call	8013790 <__eqdf2>
 800af3c:	103f551e 	bne	r2,zero,800ac94 <__alt_data_end+0xfc00ac94>
 800af40:	b580004c 	andi	r22,r22,1
 800af44:	b03f5326 	beq	r22,zero,800ac94 <__alt_data_end+0xfc00ac94>
 800af48:	bd7fffc3 	ldbu	r21,-1(r23)
 800af4c:	b8bfffc4 	addi	r2,r23,-1
 800af50:	1007883a 	mov	r3,r2
 800af54:	01400e44 	movi	r5,57
 800af58:	d9800717 	ldw	r6,28(sp)
 800af5c:	00000506 	br	800af74 <_dtoa_r+0x998>
 800af60:	18ffffc4 	addi	r3,r3,-1
 800af64:	30825e26 	beq	r6,r2,800b8e0 <_dtoa_r+0x1304>
 800af68:	1d400003 	ldbu	r21,0(r3)
 800af6c:	102f883a 	mov	r23,r2
 800af70:	10bfffc4 	addi	r2,r2,-1
 800af74:	a9003fcc 	andi	r4,r21,255
 800af78:	2100201c 	xori	r4,r4,128
 800af7c:	213fe004 	addi	r4,r4,-128
 800af80:	217ff726 	beq	r4,r5,800af60 <__alt_data_end+0xfc00af60>
 800af84:	aa000044 	addi	r8,r21,1
 800af88:	12000005 	stb	r8,0(r2)
 800af8c:	003f4106 	br	800ac94 <__alt_data_end+0xfc00ac94>
 800af90:	d8c00b17 	ldw	r3,44(sp)
 800af94:	18006726 	beq	r3,zero,800b134 <_dtoa_r+0xb58>
 800af98:	d9000317 	ldw	r4,12(sp)
 800af9c:	00c00044 	movi	r3,1
 800afa0:	19016a0e 	bge	r3,r4,800b54c <_dtoa_r+0xf70>
 800afa4:	d8800617 	ldw	r2,24(sp)
 800afa8:	d8c00917 	ldw	r3,36(sp)
 800afac:	157fffc4 	addi	r21,r2,-1
 800afb0:	1d420716 	blt	r3,r21,800b7d0 <_dtoa_r+0x11f4>
 800afb4:	1d6bc83a 	sub	r21,r3,r21
 800afb8:	d8800617 	ldw	r2,24(sp)
 800afbc:	1002c716 	blt	r2,zero,800badc <_dtoa_r+0x1500>
 800afc0:	dd000817 	ldw	r20,32(sp)
 800afc4:	d8800617 	ldw	r2,24(sp)
 800afc8:	d9800817 	ldw	r6,32(sp)
 800afcc:	8009883a 	mov	r4,r16
 800afd0:	01400044 	movi	r5,1
 800afd4:	308d883a 	add	r6,r6,r2
 800afd8:	d9800815 	stw	r6,32(sp)
 800afdc:	b0ad883a 	add	r22,r22,r2
 800afe0:	800dee80 	call	800dee8 <__i2b>
 800afe4:	1023883a 	mov	r17,r2
 800afe8:	a0000826 	beq	r20,zero,800b00c <_dtoa_r+0xa30>
 800afec:	0580070e 	bge	zero,r22,800b00c <_dtoa_r+0xa30>
 800aff0:	b005883a 	mov	r2,r22
 800aff4:	a5812016 	blt	r20,r22,800b478 <_dtoa_r+0xe9c>
 800aff8:	d8c00817 	ldw	r3,32(sp)
 800affc:	a0a9c83a 	sub	r20,r20,r2
 800b000:	b0adc83a 	sub	r22,r22,r2
 800b004:	1887c83a 	sub	r3,r3,r2
 800b008:	d8c00815 	stw	r3,32(sp)
 800b00c:	d9000917 	ldw	r4,36(sp)
 800b010:	0100140e 	bge	zero,r4,800b064 <_dtoa_r+0xa88>
 800b014:	d9800b17 	ldw	r6,44(sp)
 800b018:	3001e526 	beq	r6,zero,800b7b0 <_dtoa_r+0x11d4>
 800b01c:	05400e0e 	bge	zero,r21,800b058 <_dtoa_r+0xa7c>
 800b020:	880b883a 	mov	r5,r17
 800b024:	8009883a 	mov	r4,r16
 800b028:	a80d883a 	mov	r6,r21
 800b02c:	800e1200 	call	800e120 <__pow5mult>
 800b030:	e00d883a 	mov	r6,fp
 800b034:	8009883a 	mov	r4,r16
 800b038:	100b883a 	mov	r5,r2
 800b03c:	1023883a 	mov	r17,r2
 800b040:	800df240 	call	800df24 <__multiply>
 800b044:	102f883a 	mov	r23,r2
 800b048:	e00b883a 	mov	r5,fp
 800b04c:	8009883a 	mov	r4,r16
 800b050:	800db900 	call	800db90 <_Bfree>
 800b054:	b839883a 	mov	fp,r23
 800b058:	d8800917 	ldw	r2,36(sp)
 800b05c:	154dc83a 	sub	r6,r2,r21
 800b060:	3001281e 	bne	r6,zero,800b504 <_dtoa_r+0xf28>
 800b064:	05c00044 	movi	r23,1
 800b068:	8009883a 	mov	r4,r16
 800b06c:	b80b883a 	mov	r5,r23
 800b070:	800dee80 	call	800dee8 <__i2b>
 800b074:	d8c00a17 	ldw	r3,40(sp)
 800b078:	102b883a 	mov	r21,r2
 800b07c:	00c0310e 	bge	zero,r3,800b144 <_dtoa_r+0xb68>
 800b080:	8009883a 	mov	r4,r16
 800b084:	100b883a 	mov	r5,r2
 800b088:	180d883a 	mov	r6,r3
 800b08c:	800e1200 	call	800e120 <__pow5mult>
 800b090:	d9000317 	ldw	r4,12(sp)
 800b094:	102b883a 	mov	r21,r2
 800b098:	b9011f0e 	bge	r23,r4,800b518 <_dtoa_r+0xf3c>
 800b09c:	0027883a 	mov	r19,zero
 800b0a0:	a8800417 	ldw	r2,16(r21)
 800b0a4:	10800104 	addi	r2,r2,4
 800b0a8:	1085883a 	add	r2,r2,r2
 800b0ac:	1085883a 	add	r2,r2,r2
 800b0b0:	a885883a 	add	r2,r21,r2
 800b0b4:	11000017 	ldw	r4,0(r2)
 800b0b8:	800ddd00 	call	800ddd0 <__hi0bits>
 800b0bc:	00c00804 	movi	r3,32
 800b0c0:	1885c83a 	sub	r2,r3,r2
 800b0c4:	00002506 	br	800b15c <_dtoa_r+0xb80>
 800b0c8:	01800044 	movi	r6,1
 800b0cc:	d9800c15 	stw	r6,48(sp)
 800b0d0:	003dec06 	br	800a884 <__alt_data_end+0xfc00a884>
 800b0d4:	d8c00817 	ldw	r3,32(sp)
 800b0d8:	d9000517 	ldw	r4,20(sp)
 800b0dc:	d8000a15 	stw	zero,40(sp)
 800b0e0:	1907c83a 	sub	r3,r3,r4
 800b0e4:	010dc83a 	sub	r6,zero,r4
 800b0e8:	d8c00815 	stw	r3,32(sp)
 800b0ec:	d9800915 	stw	r6,36(sp)
 800b0f0:	003ded06 	br	800a8a8 <__alt_data_end+0xfc00a8a8>
 800b0f4:	05adc83a 	sub	r22,zero,r22
 800b0f8:	dd800815 	stw	r22,32(sp)
 800b0fc:	002d883a 	mov	r22,zero
 800b100:	003de406 	br	800a894 <__alt_data_end+0xfc00a894>
 800b104:	d9000517 	ldw	r4,20(sp)
 800b108:	8003c540 	call	8003c54 <__floatsidf>
 800b10c:	1009883a 	mov	r4,r2
 800b110:	180b883a 	mov	r5,r3
 800b114:	b00d883a 	mov	r6,r22
 800b118:	a80f883a 	mov	r7,r21
 800b11c:	80137900 	call	8013790 <__eqdf2>
 800b120:	103dc726 	beq	r2,zero,800a840 <__alt_data_end+0xfc00a840>
 800b124:	d8800517 	ldw	r2,20(sp)
 800b128:	10bfffc4 	addi	r2,r2,-1
 800b12c:	d8800515 	stw	r2,20(sp)
 800b130:	003dc306 	br	800a840 <__alt_data_end+0xfc00a840>
 800b134:	dd400917 	ldw	r21,36(sp)
 800b138:	dd000817 	ldw	r20,32(sp)
 800b13c:	0023883a 	mov	r17,zero
 800b140:	003fa906 	br	800afe8 <__alt_data_end+0xfc00afe8>
 800b144:	d9800317 	ldw	r6,12(sp)
 800b148:	b981670e 	bge	r23,r6,800b6e8 <_dtoa_r+0x110c>
 800b14c:	0027883a 	mov	r19,zero
 800b150:	d8c00a17 	ldw	r3,40(sp)
 800b154:	183fd21e 	bne	r3,zero,800b0a0 <__alt_data_end+0xfc00b0a0>
 800b158:	00800044 	movi	r2,1
 800b15c:	1585883a 	add	r2,r2,r22
 800b160:	108007cc 	andi	r2,r2,31
 800b164:	10005f26 	beq	r2,zero,800b2e4 <_dtoa_r+0xd08>
 800b168:	00c00804 	movi	r3,32
 800b16c:	1887c83a 	sub	r3,r3,r2
 800b170:	01000104 	movi	r4,4
 800b174:	20c2dd0e 	bge	r4,r3,800bcec <_dtoa_r+0x1710>
 800b178:	d9000817 	ldw	r4,32(sp)
 800b17c:	00c00704 	movi	r3,28
 800b180:	1885c83a 	sub	r2,r3,r2
 800b184:	2089883a 	add	r4,r4,r2
 800b188:	d9000815 	stw	r4,32(sp)
 800b18c:	a0a9883a 	add	r20,r20,r2
 800b190:	b0ad883a 	add	r22,r22,r2
 800b194:	d8800817 	ldw	r2,32(sp)
 800b198:	0080050e 	bge	zero,r2,800b1b0 <_dtoa_r+0xbd4>
 800b19c:	e00b883a 	mov	r5,fp
 800b1a0:	8009883a 	mov	r4,r16
 800b1a4:	100d883a 	mov	r6,r2
 800b1a8:	800e2600 	call	800e260 <__lshift>
 800b1ac:	1039883a 	mov	fp,r2
 800b1b0:	0580050e 	bge	zero,r22,800b1c8 <_dtoa_r+0xbec>
 800b1b4:	a80b883a 	mov	r5,r21
 800b1b8:	8009883a 	mov	r4,r16
 800b1bc:	b00d883a 	mov	r6,r22
 800b1c0:	800e2600 	call	800e260 <__lshift>
 800b1c4:	102b883a 	mov	r21,r2
 800b1c8:	d8c00c17 	ldw	r3,48(sp)
 800b1cc:	1801161e 	bne	r3,zero,800b628 <_dtoa_r+0x104c>
 800b1d0:	d8c00617 	ldw	r3,24(sp)
 800b1d4:	00c12d0e 	bge	zero,r3,800b68c <_dtoa_r+0x10b0>
 800b1d8:	d8c00b17 	ldw	r3,44(sp)
 800b1dc:	1800571e 	bne	r3,zero,800b33c <_dtoa_r+0xd60>
 800b1e0:	dc800717 	ldw	r18,28(sp)
 800b1e4:	dcc00617 	ldw	r19,24(sp)
 800b1e8:	9029883a 	mov	r20,r18
 800b1ec:	00000206 	br	800b1f8 <_dtoa_r+0xc1c>
 800b1f0:	800dbb80 	call	800dbb8 <__multadd>
 800b1f4:	1039883a 	mov	fp,r2
 800b1f8:	e009883a 	mov	r4,fp
 800b1fc:	a80b883a 	mov	r5,r21
 800b200:	800a3dc0 	call	800a3dc <quorem>
 800b204:	10800c04 	addi	r2,r2,48
 800b208:	90800005 	stb	r2,0(r18)
 800b20c:	94800044 	addi	r18,r18,1
 800b210:	9507c83a 	sub	r3,r18,r20
 800b214:	8009883a 	mov	r4,r16
 800b218:	e00b883a 	mov	r5,fp
 800b21c:	01800284 	movi	r6,10
 800b220:	000f883a 	mov	r7,zero
 800b224:	1cfff216 	blt	r3,r19,800b1f0 <__alt_data_end+0xfc00b1f0>
 800b228:	1011883a 	mov	r8,r2
 800b22c:	d8800617 	ldw	r2,24(sp)
 800b230:	00822e0e 	bge	zero,r2,800baec <_dtoa_r+0x1510>
 800b234:	d9000717 	ldw	r4,28(sp)
 800b238:	0025883a 	mov	r18,zero
 800b23c:	20af883a 	add	r23,r4,r2
 800b240:	e00b883a 	mov	r5,fp
 800b244:	01800044 	movi	r6,1
 800b248:	8009883a 	mov	r4,r16
 800b24c:	da001715 	stw	r8,92(sp)
 800b250:	800e2600 	call	800e260 <__lshift>
 800b254:	1009883a 	mov	r4,r2
 800b258:	a80b883a 	mov	r5,r21
 800b25c:	1039883a 	mov	fp,r2
 800b260:	800e3a80 	call	800e3a8 <__mcmp>
 800b264:	da001717 	ldw	r8,92(sp)
 800b268:	00816e0e 	bge	zero,r2,800b824 <_dtoa_r+0x1248>
 800b26c:	b93fffc3 	ldbu	r4,-1(r23)
 800b270:	b8bfffc4 	addi	r2,r23,-1
 800b274:	1007883a 	mov	r3,r2
 800b278:	01800e44 	movi	r6,57
 800b27c:	d9c00717 	ldw	r7,28(sp)
 800b280:	00000506 	br	800b298 <_dtoa_r+0xcbc>
 800b284:	18ffffc4 	addi	r3,r3,-1
 800b288:	38811926 	beq	r7,r2,800b6f0 <_dtoa_r+0x1114>
 800b28c:	19000003 	ldbu	r4,0(r3)
 800b290:	102f883a 	mov	r23,r2
 800b294:	10bfffc4 	addi	r2,r2,-1
 800b298:	21403fcc 	andi	r5,r4,255
 800b29c:	2940201c 	xori	r5,r5,128
 800b2a0:	297fe004 	addi	r5,r5,-128
 800b2a4:	29bff726 	beq	r5,r6,800b284 <__alt_data_end+0xfc00b284>
 800b2a8:	21000044 	addi	r4,r4,1
 800b2ac:	11000005 	stb	r4,0(r2)
 800b2b0:	8009883a 	mov	r4,r16
 800b2b4:	a80b883a 	mov	r5,r21
 800b2b8:	800db900 	call	800db90 <_Bfree>
 800b2bc:	883e7526 	beq	r17,zero,800ac94 <__alt_data_end+0xfc00ac94>
 800b2c0:	90000426 	beq	r18,zero,800b2d4 <_dtoa_r+0xcf8>
 800b2c4:	94400326 	beq	r18,r17,800b2d4 <_dtoa_r+0xcf8>
 800b2c8:	8009883a 	mov	r4,r16
 800b2cc:	900b883a 	mov	r5,r18
 800b2d0:	800db900 	call	800db90 <_Bfree>
 800b2d4:	8009883a 	mov	r4,r16
 800b2d8:	880b883a 	mov	r5,r17
 800b2dc:	800db900 	call	800db90 <_Bfree>
 800b2e0:	003e6c06 	br	800ac94 <__alt_data_end+0xfc00ac94>
 800b2e4:	00800704 	movi	r2,28
 800b2e8:	d9800817 	ldw	r6,32(sp)
 800b2ec:	a0a9883a 	add	r20,r20,r2
 800b2f0:	b0ad883a 	add	r22,r22,r2
 800b2f4:	308d883a 	add	r6,r6,r2
 800b2f8:	d9800815 	stw	r6,32(sp)
 800b2fc:	003fa506 	br	800b194 <__alt_data_end+0xfc00b194>
 800b300:	013efb84 	movi	r4,-1042
 800b304:	246bc83a 	sub	r21,r4,r17
 800b308:	9548983a 	sll	r4,r18,r21
 800b30c:	003d1806 	br	800a770 <__alt_data_end+0xfc00a770>
 800b310:	d8000c15 	stw	zero,48(sp)
 800b314:	003d5b06 	br	800a884 <__alt_data_end+0xfc00a884>
 800b318:	880b883a 	mov	r5,r17
 800b31c:	8009883a 	mov	r4,r16
 800b320:	01800284 	movi	r6,10
 800b324:	000f883a 	mov	r7,zero
 800b328:	800dbb80 	call	800dbb8 <__multadd>
 800b32c:	1023883a 	mov	r17,r2
 800b330:	d8800d17 	ldw	r2,52(sp)
 800b334:	0082550e 	bge	zero,r2,800bc8c <_dtoa_r+0x16b0>
 800b338:	d8800615 	stw	r2,24(sp)
 800b33c:	0500050e 	bge	zero,r20,800b354 <_dtoa_r+0xd78>
 800b340:	880b883a 	mov	r5,r17
 800b344:	8009883a 	mov	r4,r16
 800b348:	a00d883a 	mov	r6,r20
 800b34c:	800e2600 	call	800e260 <__lshift>
 800b350:	1023883a 	mov	r17,r2
 800b354:	98016a1e 	bne	r19,zero,800b900 <_dtoa_r+0x1324>
 800b358:	8829883a 	mov	r20,r17
 800b35c:	d9000617 	ldw	r4,24(sp)
 800b360:	dcc00717 	ldw	r19,28(sp)
 800b364:	9480004c 	andi	r18,r18,1
 800b368:	20bfffc4 	addi	r2,r4,-1
 800b36c:	9885883a 	add	r2,r19,r2
 800b370:	d8800415 	stw	r2,16(sp)
 800b374:	dc800615 	stw	r18,24(sp)
 800b378:	e009883a 	mov	r4,fp
 800b37c:	a80b883a 	mov	r5,r21
 800b380:	800a3dc0 	call	800a3dc <quorem>
 800b384:	e009883a 	mov	r4,fp
 800b388:	880b883a 	mov	r5,r17
 800b38c:	102f883a 	mov	r23,r2
 800b390:	800e3a80 	call	800e3a8 <__mcmp>
 800b394:	8009883a 	mov	r4,r16
 800b398:	a80b883a 	mov	r5,r21
 800b39c:	a00d883a 	mov	r6,r20
 800b3a0:	102d883a 	mov	r22,r2
 800b3a4:	800e4080 	call	800e408 <__mdiff>
 800b3a8:	1007883a 	mov	r3,r2
 800b3ac:	10800317 	ldw	r2,12(r2)
 800b3b0:	bc800c04 	addi	r18,r23,48
 800b3b4:	1000971e 	bne	r2,zero,800b614 <_dtoa_r+0x1038>
 800b3b8:	180b883a 	mov	r5,r3
 800b3bc:	e009883a 	mov	r4,fp
 800b3c0:	d8c01515 	stw	r3,84(sp)
 800b3c4:	800e3a80 	call	800e3a8 <__mcmp>
 800b3c8:	d8c01517 	ldw	r3,84(sp)
 800b3cc:	8009883a 	mov	r4,r16
 800b3d0:	d8801515 	stw	r2,84(sp)
 800b3d4:	180b883a 	mov	r5,r3
 800b3d8:	800db900 	call	800db90 <_Bfree>
 800b3dc:	d8801517 	ldw	r2,84(sp)
 800b3e0:	1000041e 	bne	r2,zero,800b3f4 <_dtoa_r+0xe18>
 800b3e4:	d9800317 	ldw	r6,12(sp)
 800b3e8:	3000021e 	bne	r6,zero,800b3f4 <_dtoa_r+0xe18>
 800b3ec:	d8c00617 	ldw	r3,24(sp)
 800b3f0:	18007626 	beq	r3,zero,800b5cc <_dtoa_r+0xff0>
 800b3f4:	b0005b16 	blt	r22,zero,800b564 <_dtoa_r+0xf88>
 800b3f8:	b000041e 	bne	r22,zero,800b40c <_dtoa_r+0xe30>
 800b3fc:	d9000317 	ldw	r4,12(sp)
 800b400:	2000021e 	bne	r4,zero,800b40c <_dtoa_r+0xe30>
 800b404:	d8c00617 	ldw	r3,24(sp)
 800b408:	18005626 	beq	r3,zero,800b564 <_dtoa_r+0xf88>
 800b40c:	00814d16 	blt	zero,r2,800b944 <_dtoa_r+0x1368>
 800b410:	d8c00417 	ldw	r3,16(sp)
 800b414:	9d800044 	addi	r22,r19,1
 800b418:	9c800005 	stb	r18,0(r19)
 800b41c:	b02f883a 	mov	r23,r22
 800b420:	98c14c26 	beq	r19,r3,800b954 <_dtoa_r+0x1378>
 800b424:	e00b883a 	mov	r5,fp
 800b428:	8009883a 	mov	r4,r16
 800b42c:	01800284 	movi	r6,10
 800b430:	000f883a 	mov	r7,zero
 800b434:	800dbb80 	call	800dbb8 <__multadd>
 800b438:	1039883a 	mov	fp,r2
 800b43c:	8d006d26 	beq	r17,r20,800b5f4 <_dtoa_r+0x1018>
 800b440:	880b883a 	mov	r5,r17
 800b444:	01800284 	movi	r6,10
 800b448:	000f883a 	mov	r7,zero
 800b44c:	8009883a 	mov	r4,r16
 800b450:	800dbb80 	call	800dbb8 <__multadd>
 800b454:	a00b883a 	mov	r5,r20
 800b458:	8009883a 	mov	r4,r16
 800b45c:	01800284 	movi	r6,10
 800b460:	000f883a 	mov	r7,zero
 800b464:	1023883a 	mov	r17,r2
 800b468:	800dbb80 	call	800dbb8 <__multadd>
 800b46c:	1029883a 	mov	r20,r2
 800b470:	b027883a 	mov	r19,r22
 800b474:	003fc006 	br	800b378 <__alt_data_end+0xfc00b378>
 800b478:	a005883a 	mov	r2,r20
 800b47c:	003ede06 	br	800aff8 <__alt_data_end+0xfc00aff8>
 800b480:	01000044 	movi	r4,1
 800b484:	d9000b15 	stw	r4,44(sp)
 800b488:	d9802217 	ldw	r6,136(sp)
 800b48c:	0180dc0e 	bge	zero,r6,800b800 <_dtoa_r+0x1224>
 800b490:	3023883a 	mov	r17,r6
 800b494:	d9800d15 	stw	r6,52(sp)
 800b498:	d9800615 	stw	r6,24(sp)
 800b49c:	003d1e06 	br	800a918 <__alt_data_end+0xfc00a918>
 800b4a0:	d8800617 	ldw	r2,24(sp)
 800b4a4:	00be3716 	blt	zero,r2,800ad84 <__alt_data_end+0xfc00ad84>
 800b4a8:	1000be1e 	bne	r2,zero,800b7a4 <_dtoa_r+0x11c8>
 800b4ac:	8809883a 	mov	r4,r17
 800b4b0:	a00b883a 	mov	r5,r20
 800b4b4:	000d883a 	mov	r6,zero
 800b4b8:	01d00534 	movhi	r7,16404
 800b4bc:	80138f40 	call	80138f4 <__muldf3>
 800b4c0:	1009883a 	mov	r4,r2
 800b4c4:	180b883a 	mov	r5,r3
 800b4c8:	900d883a 	mov	r6,r18
 800b4cc:	980f883a 	mov	r7,r19
 800b4d0:	800321c0 	call	800321c <__gedf2>
 800b4d4:	002b883a 	mov	r21,zero
 800b4d8:	0023883a 	mov	r17,zero
 800b4dc:	10007a16 	blt	r2,zero,800b6c8 <_dtoa_r+0x10ec>
 800b4e0:	d9002217 	ldw	r4,136(sp)
 800b4e4:	ddc00717 	ldw	r23,28(sp)
 800b4e8:	0108303a 	nor	r4,zero,r4
 800b4ec:	d9000515 	stw	r4,20(sp)
 800b4f0:	8009883a 	mov	r4,r16
 800b4f4:	a80b883a 	mov	r5,r21
 800b4f8:	800db900 	call	800db90 <_Bfree>
 800b4fc:	883f751e 	bne	r17,zero,800b2d4 <__alt_data_end+0xfc00b2d4>
 800b500:	003de406 	br	800ac94 <__alt_data_end+0xfc00ac94>
 800b504:	e00b883a 	mov	r5,fp
 800b508:	8009883a 	mov	r4,r16
 800b50c:	800e1200 	call	800e120 <__pow5mult>
 800b510:	1039883a 	mov	fp,r2
 800b514:	003ed306 	br	800b064 <__alt_data_end+0xfc00b064>
 800b518:	903ee01e 	bne	r18,zero,800b09c <__alt_data_end+0xfc00b09c>
 800b51c:	00800434 	movhi	r2,16
 800b520:	10bfffc4 	addi	r2,r2,-1
 800b524:	9884703a 	and	r2,r19,r2
 800b528:	103f081e 	bne	r2,zero,800b14c <__alt_data_end+0xfc00b14c>
 800b52c:	9cdffc2c 	andhi	r19,r19,32752
 800b530:	983f0626 	beq	r19,zero,800b14c <__alt_data_end+0xfc00b14c>
 800b534:	d8800817 	ldw	r2,32(sp)
 800b538:	b5800044 	addi	r22,r22,1
 800b53c:	04c00044 	movi	r19,1
 800b540:	10800044 	addi	r2,r2,1
 800b544:	d8800815 	stw	r2,32(sp)
 800b548:	003f0106 	br	800b150 <__alt_data_end+0xfc00b150>
 800b54c:	d9800f17 	ldw	r6,60(sp)
 800b550:	30016826 	beq	r6,zero,800baf4 <_dtoa_r+0x1518>
 800b554:	10810cc4 	addi	r2,r2,1075
 800b558:	dd400917 	ldw	r21,36(sp)
 800b55c:	dd000817 	ldw	r20,32(sp)
 800b560:	003e9906 	br	800afc8 <__alt_data_end+0xfc00afc8>
 800b564:	9011883a 	mov	r8,r18
 800b568:	4007883a 	mov	r3,r8
 800b56c:	e02d883a 	mov	r22,fp
 800b570:	0080100e 	bge	zero,r2,800b5b4 <_dtoa_r+0xfd8>
 800b574:	01800044 	movi	r6,1
 800b578:	8009883a 	mov	r4,r16
 800b57c:	e00b883a 	mov	r5,fp
 800b580:	da001515 	stw	r8,84(sp)
 800b584:	da001715 	stw	r8,92(sp)
 800b588:	800e2600 	call	800e260 <__lshift>
 800b58c:	1009883a 	mov	r4,r2
 800b590:	a80b883a 	mov	r5,r21
 800b594:	102d883a 	mov	r22,r2
 800b598:	800e3a80 	call	800e3a8 <__mcmp>
 800b59c:	d8c01517 	ldw	r3,84(sp)
 800b5a0:	da001717 	ldw	r8,92(sp)
 800b5a4:	0081a50e 	bge	zero,r2,800bc3c <_dtoa_r+0x1660>
 800b5a8:	00800e44 	movi	r2,57
 800b5ac:	40817b26 	beq	r8,r2,800bb9c <_dtoa_r+0x15c0>
 800b5b0:	40c00044 	addi	r3,r8,1
 800b5b4:	8825883a 	mov	r18,r17
 800b5b8:	9dc00044 	addi	r23,r19,1
 800b5bc:	98c00005 	stb	r3,0(r19)
 800b5c0:	a023883a 	mov	r17,r20
 800b5c4:	b039883a 	mov	fp,r22
 800b5c8:	003f3906 	br	800b2b0 <__alt_data_end+0xfc00b2b0>
 800b5cc:	00800e44 	movi	r2,57
 800b5d0:	9011883a 	mov	r8,r18
 800b5d4:	90817226 	beq	r18,r2,800bba0 <_dtoa_r+0x15c4>
 800b5d8:	0580010e 	bge	zero,r22,800b5e0 <_dtoa_r+0x1004>
 800b5dc:	ba000c44 	addi	r8,r23,49
 800b5e0:	8825883a 	mov	r18,r17
 800b5e4:	9dc00044 	addi	r23,r19,1
 800b5e8:	9a000005 	stb	r8,0(r19)
 800b5ec:	a023883a 	mov	r17,r20
 800b5f0:	003f2f06 	br	800b2b0 <__alt_data_end+0xfc00b2b0>
 800b5f4:	880b883a 	mov	r5,r17
 800b5f8:	8009883a 	mov	r4,r16
 800b5fc:	01800284 	movi	r6,10
 800b600:	000f883a 	mov	r7,zero
 800b604:	800dbb80 	call	800dbb8 <__multadd>
 800b608:	1023883a 	mov	r17,r2
 800b60c:	1029883a 	mov	r20,r2
 800b610:	003f9706 	br	800b470 <__alt_data_end+0xfc00b470>
 800b614:	8009883a 	mov	r4,r16
 800b618:	180b883a 	mov	r5,r3
 800b61c:	800db900 	call	800db90 <_Bfree>
 800b620:	00800044 	movi	r2,1
 800b624:	003f7306 	br	800b3f4 <__alt_data_end+0xfc00b3f4>
 800b628:	e009883a 	mov	r4,fp
 800b62c:	a80b883a 	mov	r5,r21
 800b630:	800e3a80 	call	800e3a8 <__mcmp>
 800b634:	103ee60e 	bge	r2,zero,800b1d0 <__alt_data_end+0xfc00b1d0>
 800b638:	8009883a 	mov	r4,r16
 800b63c:	e00b883a 	mov	r5,fp
 800b640:	01800284 	movi	r6,10
 800b644:	000f883a 	mov	r7,zero
 800b648:	800dbb80 	call	800dbb8 <__multadd>
 800b64c:	d9000517 	ldw	r4,20(sp)
 800b650:	d9800b17 	ldw	r6,44(sp)
 800b654:	1039883a 	mov	fp,r2
 800b658:	213fffc4 	addi	r4,r4,-1
 800b65c:	d9000515 	stw	r4,20(sp)
 800b660:	303f2d1e 	bne	r6,zero,800b318 <__alt_data_end+0xfc00b318>
 800b664:	d9000d17 	ldw	r4,52(sp)
 800b668:	0101780e 	bge	zero,r4,800bc4c <_dtoa_r+0x1670>
 800b66c:	d9000615 	stw	r4,24(sp)
 800b670:	003edb06 	br	800b1e0 <__alt_data_end+0xfc00b1e0>
 800b674:	00800084 	movi	r2,2
 800b678:	30818e1e 	bne	r6,r2,800bcb4 <_dtoa_r+0x16d8>
 800b67c:	d8000b15 	stw	zero,44(sp)
 800b680:	003f8106 	br	800b488 <__alt_data_end+0xfc00b488>
 800b684:	d8800717 	ldw	r2,28(sp)
 800b688:	003c0306 	br	800a698 <__alt_data_end+0xfc00a698>
 800b68c:	d9000317 	ldw	r4,12(sp)
 800b690:	00800084 	movi	r2,2
 800b694:	113ed00e 	bge	r2,r4,800b1d8 <__alt_data_end+0xfc00b1d8>
 800b698:	d8c00617 	ldw	r3,24(sp)
 800b69c:	183f901e 	bne	r3,zero,800b4e0 <__alt_data_end+0xfc00b4e0>
 800b6a0:	a80b883a 	mov	r5,r21
 800b6a4:	8009883a 	mov	r4,r16
 800b6a8:	01800144 	movi	r6,5
 800b6ac:	000f883a 	mov	r7,zero
 800b6b0:	800dbb80 	call	800dbb8 <__multadd>
 800b6b4:	e009883a 	mov	r4,fp
 800b6b8:	100b883a 	mov	r5,r2
 800b6bc:	102b883a 	mov	r21,r2
 800b6c0:	800e3a80 	call	800e3a8 <__mcmp>
 800b6c4:	00bf860e 	bge	zero,r2,800b4e0 <__alt_data_end+0xfc00b4e0>
 800b6c8:	d9800717 	ldw	r6,28(sp)
 800b6cc:	00800c44 	movi	r2,49
 800b6d0:	30800005 	stb	r2,0(r6)
 800b6d4:	d8800517 	ldw	r2,20(sp)
 800b6d8:	35c00044 	addi	r23,r6,1
 800b6dc:	10800044 	addi	r2,r2,1
 800b6e0:	d8800515 	stw	r2,20(sp)
 800b6e4:	003f8206 	br	800b4f0 <__alt_data_end+0xfc00b4f0>
 800b6e8:	903e981e 	bne	r18,zero,800b14c <__alt_data_end+0xfc00b14c>
 800b6ec:	003f8b06 	br	800b51c <__alt_data_end+0xfc00b51c>
 800b6f0:	d9800517 	ldw	r6,20(sp)
 800b6f4:	d8c00717 	ldw	r3,28(sp)
 800b6f8:	00800c44 	movi	r2,49
 800b6fc:	31800044 	addi	r6,r6,1
 800b700:	d9800515 	stw	r6,20(sp)
 800b704:	18800005 	stb	r2,0(r3)
 800b708:	003ee906 	br	800b2b0 <__alt_data_end+0xfc00b2b0>
 800b70c:	dc000317 	ldw	r16,12(sp)
 800b710:	003d6006 	br	800ac94 <__alt_data_end+0xfc00ac94>
 800b714:	8809883a 	mov	r4,r17
 800b718:	8003c540 	call	8003c54 <__floatsidf>
 800b71c:	a009883a 	mov	r4,r20
 800b720:	a80b883a 	mov	r5,r21
 800b724:	100d883a 	mov	r6,r2
 800b728:	180f883a 	mov	r7,r3
 800b72c:	80138f40 	call	80138f4 <__muldf3>
 800b730:	1009883a 	mov	r4,r2
 800b734:	180b883a 	mov	r5,r3
 800b738:	000d883a 	mov	r6,zero
 800b73c:	01d00734 	movhi	r7,16412
 800b740:	80020b40 	call	80020b4 <__adddf3>
 800b744:	1023883a 	mov	r17,r2
 800b748:	00bf3034 	movhi	r2,64704
 800b74c:	1885883a 	add	r2,r3,r2
 800b750:	d8800e15 	stw	r2,56(sp)
 800b754:	a009883a 	mov	r4,r20
 800b758:	a80b883a 	mov	r5,r21
 800b75c:	000d883a 	mov	r6,zero
 800b760:	01d00534 	movhi	r7,16404
 800b764:	80032fc0 	call	80032fc <__subdf3>
 800b768:	d9c00e17 	ldw	r7,56(sp)
 800b76c:	1009883a 	mov	r4,r2
 800b770:	180b883a 	mov	r5,r3
 800b774:	880d883a 	mov	r6,r17
 800b778:	102b883a 	mov	r21,r2
 800b77c:	1829883a 	mov	r20,r3
 800b780:	800321c0 	call	800321c <__gedf2>
 800b784:	00807716 	blt	zero,r2,800b964 <_dtoa_r+0x1388>
 800b788:	d8800e17 	ldw	r2,56(sp)
 800b78c:	a809883a 	mov	r4,r21
 800b790:	a00b883a 	mov	r5,r20
 800b794:	11e0003c 	xorhi	r7,r2,32768
 800b798:	880d883a 	mov	r6,r17
 800b79c:	80138140 	call	8013814 <__ledf2>
 800b7a0:	103d6b0e 	bge	r2,zero,800ad50 <__alt_data_end+0xfc00ad50>
 800b7a4:	002b883a 	mov	r21,zero
 800b7a8:	0023883a 	mov	r17,zero
 800b7ac:	003f4c06 	br	800b4e0 <__alt_data_end+0xfc00b4e0>
 800b7b0:	d9800917 	ldw	r6,36(sp)
 800b7b4:	e00b883a 	mov	r5,fp
 800b7b8:	8009883a 	mov	r4,r16
 800b7bc:	800e1200 	call	800e120 <__pow5mult>
 800b7c0:	1039883a 	mov	fp,r2
 800b7c4:	003e2706 	br	800b064 <__alt_data_end+0xfc00b064>
 800b7c8:	d8000b15 	stw	zero,44(sp)
 800b7cc:	003c4906 	br	800a8f4 <__alt_data_end+0xfc00a8f4>
 800b7d0:	d9000917 	ldw	r4,36(sp)
 800b7d4:	d9800a17 	ldw	r6,40(sp)
 800b7d8:	dd400915 	stw	r21,36(sp)
 800b7dc:	a905c83a 	sub	r2,r21,r4
 800b7e0:	308d883a 	add	r6,r6,r2
 800b7e4:	d9800a15 	stw	r6,40(sp)
 800b7e8:	002b883a 	mov	r21,zero
 800b7ec:	003df206 	br	800afb8 <__alt_data_end+0xfc00afb8>
 800b7f0:	dc800e15 	stw	r18,56(sp)
 800b7f4:	982b883a 	mov	r21,r19
 800b7f8:	04400084 	movi	r17,2
 800b7fc:	003c7406 	br	800a9d0 <__alt_data_end+0xfc00a9d0>
 800b800:	04400044 	movi	r17,1
 800b804:	dc400d15 	stw	r17,52(sp)
 800b808:	dc400615 	stw	r17,24(sp)
 800b80c:	dc402215 	stw	r17,136(sp)
 800b810:	80001115 	stw	zero,68(r16)
 800b814:	000b883a 	mov	r5,zero
 800b818:	003c4a06 	br	800a944 <__alt_data_end+0xfc00a944>
 800b81c:	3023883a 	mov	r17,r6
 800b820:	003ffb06 	br	800b810 <__alt_data_end+0xfc00b810>
 800b824:	1000021e 	bne	r2,zero,800b830 <_dtoa_r+0x1254>
 800b828:	4200004c 	andi	r8,r8,1
 800b82c:	403e8f1e 	bne	r8,zero,800b26c <__alt_data_end+0xfc00b26c>
 800b830:	01000c04 	movi	r4,48
 800b834:	00000106 	br	800b83c <_dtoa_r+0x1260>
 800b838:	102f883a 	mov	r23,r2
 800b83c:	b8bfffc4 	addi	r2,r23,-1
 800b840:	10c00007 	ldb	r3,0(r2)
 800b844:	193ffc26 	beq	r3,r4,800b838 <__alt_data_end+0xfc00b838>
 800b848:	003e9906 	br	800b2b0 <__alt_data_end+0xfc00b2b0>
 800b84c:	d9000517 	ldw	r4,20(sp)
 800b850:	012fc83a 	sub	r23,zero,r4
 800b854:	b800ad26 	beq	r23,zero,800bb0c <_dtoa_r+0x1530>
 800b858:	b88003cc 	andi	r2,r23,15
 800b85c:	100490fa 	slli	r2,r2,3
 800b860:	00c200b4 	movhi	r3,2050
 800b864:	18c63504 	addi	r3,r3,6356
 800b868:	1885883a 	add	r2,r3,r2
 800b86c:	11800017 	ldw	r6,0(r2)
 800b870:	11c00117 	ldw	r7,4(r2)
 800b874:	b82fd13a 	srai	r23,r23,4
 800b878:	9009883a 	mov	r4,r18
 800b87c:	980b883a 	mov	r5,r19
 800b880:	80138f40 	call	80138f4 <__muldf3>
 800b884:	1029883a 	mov	r20,r2
 800b888:	182b883a 	mov	r21,r3
 800b88c:	b800f426 	beq	r23,zero,800bc60 <_dtoa_r+0x1684>
 800b890:	020200b4 	movhi	r8,2050
 800b894:	42062b04 	addi	r8,r8,6316
 800b898:	8029883a 	mov	r20,r16
 800b89c:	04400084 	movi	r17,2
 800b8a0:	4021883a 	mov	r16,r8
 800b8a4:	b980004c 	andi	r6,r23,1
 800b8a8:	1009883a 	mov	r4,r2
 800b8ac:	b82fd07a 	srai	r23,r23,1
 800b8b0:	180b883a 	mov	r5,r3
 800b8b4:	30000426 	beq	r6,zero,800b8c8 <_dtoa_r+0x12ec>
 800b8b8:	81800017 	ldw	r6,0(r16)
 800b8bc:	81c00117 	ldw	r7,4(r16)
 800b8c0:	8c400044 	addi	r17,r17,1
 800b8c4:	80138f40 	call	80138f4 <__muldf3>
 800b8c8:	84000204 	addi	r16,r16,8
 800b8cc:	b83ff51e 	bne	r23,zero,800b8a4 <__alt_data_end+0xfc00b8a4>
 800b8d0:	a021883a 	mov	r16,r20
 800b8d4:	182b883a 	mov	r21,r3
 800b8d8:	1029883a 	mov	r20,r2
 800b8dc:	003c5506 	br	800aa34 <__alt_data_end+0xfc00aa34>
 800b8e0:	d9800517 	ldw	r6,20(sp)
 800b8e4:	d9000717 	ldw	r4,28(sp)
 800b8e8:	00c00c04 	movi	r3,48
 800b8ec:	31800044 	addi	r6,r6,1
 800b8f0:	d9800515 	stw	r6,20(sp)
 800b8f4:	20c00005 	stb	r3,0(r4)
 800b8f8:	02000c44 	movi	r8,49
 800b8fc:	003da206 	br	800af88 <__alt_data_end+0xfc00af88>
 800b900:	89400117 	ldw	r5,4(r17)
 800b904:	8009883a 	mov	r4,r16
 800b908:	800dae80 	call	800dae8 <_Balloc>
 800b90c:	89800417 	ldw	r6,16(r17)
 800b910:	11000304 	addi	r4,r2,12
 800b914:	89400304 	addi	r5,r17,12
 800b918:	31800084 	addi	r6,r6,2
 800b91c:	318d883a 	add	r6,r6,r6
 800b920:	318d883a 	add	r6,r6,r6
 800b924:	1027883a 	mov	r19,r2
 800b928:	800d88c0 	call	800d88c <memcpy>
 800b92c:	8009883a 	mov	r4,r16
 800b930:	980b883a 	mov	r5,r19
 800b934:	01800044 	movi	r6,1
 800b938:	800e2600 	call	800e260 <__lshift>
 800b93c:	1029883a 	mov	r20,r2
 800b940:	003e8606 	br	800b35c <__alt_data_end+0xfc00b35c>
 800b944:	00800e44 	movi	r2,57
 800b948:	90809526 	beq	r18,r2,800bba0 <_dtoa_r+0x15c4>
 800b94c:	92000044 	addi	r8,r18,1
 800b950:	003f2306 	br	800b5e0 <__alt_data_end+0xfc00b5e0>
 800b954:	9011883a 	mov	r8,r18
 800b958:	8825883a 	mov	r18,r17
 800b95c:	a023883a 	mov	r17,r20
 800b960:	003e3706 	br	800b240 <__alt_data_end+0xfc00b240>
 800b964:	002b883a 	mov	r21,zero
 800b968:	0023883a 	mov	r17,zero
 800b96c:	003f5606 	br	800b6c8 <__alt_data_end+0xfc00b6c8>
 800b970:	51bfffc4 	addi	r6,r10,-1
 800b974:	300490fa 	slli	r2,r6,3
 800b978:	00c200b4 	movhi	r3,2050
 800b97c:	18c63504 	addi	r3,r3,6356
 800b980:	1885883a 	add	r2,r3,r2
 800b984:	d9c00e17 	ldw	r7,56(sp)
 800b988:	11000017 	ldw	r4,0(r2)
 800b98c:	11400117 	ldw	r5,4(r2)
 800b990:	d8800717 	ldw	r2,28(sp)
 800b994:	d9801015 	stw	r6,64(sp)
 800b998:	880d883a 	mov	r6,r17
 800b99c:	da801615 	stw	r10,88(sp)
 800b9a0:	15c00044 	addi	r23,r2,1
 800b9a4:	80138f40 	call	80138f4 <__muldf3>
 800b9a8:	a80b883a 	mov	r5,r21
 800b9ac:	a009883a 	mov	r4,r20
 800b9b0:	d8c01115 	stw	r3,68(sp)
 800b9b4:	d8800e15 	stw	r2,56(sp)
 800b9b8:	8003bcc0 	call	8003bcc <__fixdfsi>
 800b9bc:	1009883a 	mov	r4,r2
 800b9c0:	1023883a 	mov	r17,r2
 800b9c4:	8003c540 	call	8003c54 <__floatsidf>
 800b9c8:	a009883a 	mov	r4,r20
 800b9cc:	a80b883a 	mov	r5,r21
 800b9d0:	100d883a 	mov	r6,r2
 800b9d4:	180f883a 	mov	r7,r3
 800b9d8:	80032fc0 	call	80032fc <__subdf3>
 800b9dc:	1813883a 	mov	r9,r3
 800b9e0:	d8c00717 	ldw	r3,28(sp)
 800b9e4:	8c400c04 	addi	r17,r17,48
 800b9e8:	1011883a 	mov	r8,r2
 800b9ec:	1c400005 	stb	r17,0(r3)
 800b9f0:	da801617 	ldw	r10,88(sp)
 800b9f4:	00800044 	movi	r2,1
 800b9f8:	50802326 	beq	r10,r2,800ba88 <_dtoa_r+0x14ac>
 800b9fc:	d8800717 	ldw	r2,28(sp)
 800ba00:	b82b883a 	mov	r21,r23
 800ba04:	dc001315 	stw	r16,76(sp)
 800ba08:	12a9883a 	add	r20,r2,r10
 800ba0c:	4807883a 	mov	r3,r9
 800ba10:	4005883a 	mov	r2,r8
 800ba14:	dc801415 	stw	r18,80(sp)
 800ba18:	000d883a 	mov	r6,zero
 800ba1c:	01d00934 	movhi	r7,16420
 800ba20:	1009883a 	mov	r4,r2
 800ba24:	180b883a 	mov	r5,r3
 800ba28:	80138f40 	call	80138f4 <__muldf3>
 800ba2c:	180b883a 	mov	r5,r3
 800ba30:	1009883a 	mov	r4,r2
 800ba34:	1821883a 	mov	r16,r3
 800ba38:	1025883a 	mov	r18,r2
 800ba3c:	8003bcc0 	call	8003bcc <__fixdfsi>
 800ba40:	1009883a 	mov	r4,r2
 800ba44:	1023883a 	mov	r17,r2
 800ba48:	8003c540 	call	8003c54 <__floatsidf>
 800ba4c:	9009883a 	mov	r4,r18
 800ba50:	800b883a 	mov	r5,r16
 800ba54:	100d883a 	mov	r6,r2
 800ba58:	180f883a 	mov	r7,r3
 800ba5c:	8c400c04 	addi	r17,r17,48
 800ba60:	80032fc0 	call	80032fc <__subdf3>
 800ba64:	ad400044 	addi	r21,r21,1
 800ba68:	ac7fffc5 	stb	r17,-1(r21)
 800ba6c:	ad3fea1e 	bne	r21,r20,800ba18 <__alt_data_end+0xfc00ba18>
 800ba70:	1813883a 	mov	r9,r3
 800ba74:	d8c01017 	ldw	r3,64(sp)
 800ba78:	dc001317 	ldw	r16,76(sp)
 800ba7c:	dc801417 	ldw	r18,80(sp)
 800ba80:	1011883a 	mov	r8,r2
 800ba84:	b8ef883a 	add	r23,r23,r3
 800ba88:	d9000e17 	ldw	r4,56(sp)
 800ba8c:	d9401117 	ldw	r5,68(sp)
 800ba90:	000d883a 	mov	r6,zero
 800ba94:	01cff834 	movhi	r7,16352
 800ba98:	da001715 	stw	r8,92(sp)
 800ba9c:	da401515 	stw	r9,84(sp)
 800baa0:	80020b40 	call	80020b4 <__adddf3>
 800baa4:	da001717 	ldw	r8,92(sp)
 800baa8:	da401517 	ldw	r9,84(sp)
 800baac:	1009883a 	mov	r4,r2
 800bab0:	400d883a 	mov	r6,r8
 800bab4:	480f883a 	mov	r7,r9
 800bab8:	180b883a 	mov	r5,r3
 800babc:	80138140 	call	8013814 <__ledf2>
 800bac0:	da001717 	ldw	r8,92(sp)
 800bac4:	da401517 	ldw	r9,84(sp)
 800bac8:	10003b0e 	bge	r2,zero,800bbb8 <_dtoa_r+0x15dc>
 800bacc:	d9001217 	ldw	r4,72(sp)
 800bad0:	bd7fffc3 	ldbu	r21,-1(r23)
 800bad4:	d9000515 	stw	r4,20(sp)
 800bad8:	003d1c06 	br	800af4c <__alt_data_end+0xfc00af4c>
 800badc:	d8c00817 	ldw	r3,32(sp)
 800bae0:	18a9c83a 	sub	r20,r3,r2
 800bae4:	0005883a 	mov	r2,zero
 800bae8:	003d3706 	br	800afc8 <__alt_data_end+0xfc00afc8>
 800baec:	00800044 	movi	r2,1
 800baf0:	003dd006 	br	800b234 <__alt_data_end+0xfc00b234>
 800baf4:	d8c00217 	ldw	r3,8(sp)
 800baf8:	00800d84 	movi	r2,54
 800bafc:	dd400917 	ldw	r21,36(sp)
 800bb00:	10c5c83a 	sub	r2,r2,r3
 800bb04:	dd000817 	ldw	r20,32(sp)
 800bb08:	003d2f06 	br	800afc8 <__alt_data_end+0xfc00afc8>
 800bb0c:	9029883a 	mov	r20,r18
 800bb10:	982b883a 	mov	r21,r19
 800bb14:	04400084 	movi	r17,2
 800bb18:	003bc606 	br	800aa34 <__alt_data_end+0xfc00aa34>
 800bb1c:	d8800617 	ldw	r2,24(sp)
 800bb20:	103efc26 	beq	r2,zero,800b714 <__alt_data_end+0xfc00b714>
 800bb24:	d8c00d17 	ldw	r3,52(sp)
 800bb28:	00fc890e 	bge	zero,r3,800ad50 <__alt_data_end+0xfc00ad50>
 800bb2c:	a80b883a 	mov	r5,r21
 800bb30:	a009883a 	mov	r4,r20
 800bb34:	000d883a 	mov	r6,zero
 800bb38:	01d00934 	movhi	r7,16420
 800bb3c:	80138f40 	call	80138f4 <__muldf3>
 800bb40:	89000044 	addi	r4,r17,1
 800bb44:	1029883a 	mov	r20,r2
 800bb48:	182b883a 	mov	r21,r3
 800bb4c:	8003c540 	call	8003c54 <__floatsidf>
 800bb50:	a009883a 	mov	r4,r20
 800bb54:	a80b883a 	mov	r5,r21
 800bb58:	100d883a 	mov	r6,r2
 800bb5c:	180f883a 	mov	r7,r3
 800bb60:	80138f40 	call	80138f4 <__muldf3>
 800bb64:	1009883a 	mov	r4,r2
 800bb68:	180b883a 	mov	r5,r3
 800bb6c:	000d883a 	mov	r6,zero
 800bb70:	01d00734 	movhi	r7,16412
 800bb74:	80020b40 	call	80020b4 <__adddf3>
 800bb78:	d9000517 	ldw	r4,20(sp)
 800bb7c:	1023883a 	mov	r17,r2
 800bb80:	00bf3034 	movhi	r2,64704
 800bb84:	213fffc4 	addi	r4,r4,-1
 800bb88:	1885883a 	add	r2,r3,r2
 800bb8c:	d9001215 	stw	r4,72(sp)
 800bb90:	d8800e15 	stw	r2,56(sp)
 800bb94:	da800d17 	ldw	r10,52(sp)
 800bb98:	003bc306 	br	800aaa8 <__alt_data_end+0xfc00aaa8>
 800bb9c:	b039883a 	mov	fp,r22
 800bba0:	01000e44 	movi	r4,57
 800bba4:	8825883a 	mov	r18,r17
 800bba8:	9dc00044 	addi	r23,r19,1
 800bbac:	99000005 	stb	r4,0(r19)
 800bbb0:	a023883a 	mov	r17,r20
 800bbb4:	003dae06 	br	800b270 <__alt_data_end+0xfc00b270>
 800bbb8:	d9800e17 	ldw	r6,56(sp)
 800bbbc:	d9c01117 	ldw	r7,68(sp)
 800bbc0:	0009883a 	mov	r4,zero
 800bbc4:	014ff834 	movhi	r5,16352
 800bbc8:	da001715 	stw	r8,92(sp)
 800bbcc:	da401515 	stw	r9,84(sp)
 800bbd0:	80032fc0 	call	80032fc <__subdf3>
 800bbd4:	da001717 	ldw	r8,92(sp)
 800bbd8:	da401517 	ldw	r9,84(sp)
 800bbdc:	1009883a 	mov	r4,r2
 800bbe0:	180b883a 	mov	r5,r3
 800bbe4:	400d883a 	mov	r6,r8
 800bbe8:	480f883a 	mov	r7,r9
 800bbec:	800321c0 	call	800321c <__gedf2>
 800bbf0:	00bc570e 	bge	zero,r2,800ad50 <__alt_data_end+0xfc00ad50>
 800bbf4:	01000c04 	movi	r4,48
 800bbf8:	00000106 	br	800bc00 <_dtoa_r+0x1624>
 800bbfc:	102f883a 	mov	r23,r2
 800bc00:	b8bfffc4 	addi	r2,r23,-1
 800bc04:	10c00007 	ldb	r3,0(r2)
 800bc08:	193ffc26 	beq	r3,r4,800bbfc <__alt_data_end+0xfc00bbfc>
 800bc0c:	d9801217 	ldw	r6,72(sp)
 800bc10:	d9800515 	stw	r6,20(sp)
 800bc14:	003c1f06 	br	800ac94 <__alt_data_end+0xfc00ac94>
 800bc18:	d8801217 	ldw	r2,72(sp)
 800bc1c:	dc001117 	ldw	r16,68(sp)
 800bc20:	d8800515 	stw	r2,20(sp)
 800bc24:	003cc906 	br	800af4c <__alt_data_end+0xfc00af4c>
 800bc28:	dd801317 	ldw	r22,76(sp)
 800bc2c:	dc001117 	ldw	r16,68(sp)
 800bc30:	dcc01417 	ldw	r19,80(sp)
 800bc34:	dc801017 	ldw	r18,64(sp)
 800bc38:	003c4506 	br	800ad50 <__alt_data_end+0xfc00ad50>
 800bc3c:	103e5d1e 	bne	r2,zero,800b5b4 <__alt_data_end+0xfc00b5b4>
 800bc40:	4080004c 	andi	r2,r8,1
 800bc44:	103e5b26 	beq	r2,zero,800b5b4 <__alt_data_end+0xfc00b5b4>
 800bc48:	003e5706 	br	800b5a8 <__alt_data_end+0xfc00b5a8>
 800bc4c:	d8c00317 	ldw	r3,12(sp)
 800bc50:	00800084 	movi	r2,2
 800bc54:	10c00a16 	blt	r2,r3,800bc80 <_dtoa_r+0x16a4>
 800bc58:	d9000d17 	ldw	r4,52(sp)
 800bc5c:	003e8306 	br	800b66c <__alt_data_end+0xfc00b66c>
 800bc60:	04400084 	movi	r17,2
 800bc64:	003b7306 	br	800aa34 <__alt_data_end+0xfc00aa34>
 800bc68:	d9801217 	ldw	r6,72(sp)
 800bc6c:	d9800515 	stw	r6,20(sp)
 800bc70:	003cb606 	br	800af4c <__alt_data_end+0xfc00af4c>
 800bc74:	d9001217 	ldw	r4,72(sp)
 800bc78:	d9000515 	stw	r4,20(sp)
 800bc7c:	003c0506 	br	800ac94 <__alt_data_end+0xfc00ac94>
 800bc80:	d9800d17 	ldw	r6,52(sp)
 800bc84:	d9800615 	stw	r6,24(sp)
 800bc88:	003e8306 	br	800b698 <__alt_data_end+0xfc00b698>
 800bc8c:	d9800317 	ldw	r6,12(sp)
 800bc90:	00800084 	movi	r2,2
 800bc94:	11800216 	blt	r2,r6,800bca0 <_dtoa_r+0x16c4>
 800bc98:	d8800d17 	ldw	r2,52(sp)
 800bc9c:	003da606 	br	800b338 <__alt_data_end+0xfc00b338>
 800bca0:	d8800d17 	ldw	r2,52(sp)
 800bca4:	d8800615 	stw	r2,24(sp)
 800bca8:	003e7b06 	br	800b698 <__alt_data_end+0xfc00b698>
 800bcac:	05000044 	movi	r20,1
 800bcb0:	003b0506 	br	800a8c8 <__alt_data_end+0xfc00a8c8>
 800bcb4:	8009883a 	mov	r4,r16
 800bcb8:	80001115 	stw	zero,68(r16)
 800bcbc:	000b883a 	mov	r5,zero
 800bcc0:	800dae80 	call	800dae8 <_Balloc>
 800bcc4:	d8800715 	stw	r2,28(sp)
 800bcc8:	d8c00717 	ldw	r3,28(sp)
 800bccc:	00bfffc4 	movi	r2,-1
 800bcd0:	01000044 	movi	r4,1
 800bcd4:	d8800615 	stw	r2,24(sp)
 800bcd8:	80c01015 	stw	r3,64(r16)
 800bcdc:	d9000b15 	stw	r4,44(sp)
 800bce0:	d8002215 	stw	zero,136(sp)
 800bce4:	d8800d15 	stw	r2,52(sp)
 800bce8:	003c1906 	br	800ad50 <__alt_data_end+0xfc00ad50>
 800bcec:	193d2926 	beq	r3,r4,800b194 <__alt_data_end+0xfc00b194>
 800bcf0:	00c00f04 	movi	r3,60
 800bcf4:	1885c83a 	sub	r2,r3,r2
 800bcf8:	003d7b06 	br	800b2e8 <__alt_data_end+0xfc00b2e8>
 800bcfc:	000b883a 	mov	r5,zero
 800bd00:	003b1006 	br	800a944 <__alt_data_end+0xfc00a944>

0800bd04 <_fflush_r>:
 800bd04:	defffb04 	addi	sp,sp,-20
 800bd08:	dcc00315 	stw	r19,12(sp)
 800bd0c:	dc000015 	stw	r16,0(sp)
 800bd10:	dfc00415 	stw	ra,16(sp)
 800bd14:	dc800215 	stw	r18,8(sp)
 800bd18:	dc400115 	stw	r17,4(sp)
 800bd1c:	2027883a 	mov	r19,r4
 800bd20:	2821883a 	mov	r16,r5
 800bd24:	20000226 	beq	r4,zero,800bd30 <_fflush_r+0x2c>
 800bd28:	20800e17 	ldw	r2,56(r4)
 800bd2c:	10005326 	beq	r2,zero,800be7c <_fflush_r+0x178>
 800bd30:	8080030b 	ldhu	r2,12(r16)
 800bd34:	10ffffcc 	andi	r3,r2,65535
 800bd38:	18e0001c 	xori	r3,r3,32768
 800bd3c:	18e00004 	addi	r3,r3,-32768
 800bd40:	18002c26 	beq	r3,zero,800bdf4 <_fflush_r+0xf0>
 800bd44:	10c0020c 	andi	r3,r2,8
 800bd48:	1800321e 	bne	r3,zero,800be14 <_fflush_r+0x110>
 800bd4c:	80c00117 	ldw	r3,4(r16)
 800bd50:	10820014 	ori	r2,r2,2048
 800bd54:	8080030d 	sth	r2,12(r16)
 800bd58:	00c0570e 	bge	zero,r3,800beb8 <_fflush_r+0x1b4>
 800bd5c:	82000a17 	ldw	r8,40(r16)
 800bd60:	40002426 	beq	r8,zero,800bdf4 <_fflush_r+0xf0>
 800bd64:	9c400017 	ldw	r17,0(r19)
 800bd68:	10c4000c 	andi	r3,r2,4096
 800bd6c:	98000015 	stw	zero,0(r19)
 800bd70:	18004626 	beq	r3,zero,800be8c <_fflush_r+0x188>
 800bd74:	81801417 	ldw	r6,80(r16)
 800bd78:	10c0010c 	andi	r3,r2,4
 800bd7c:	18000626 	beq	r3,zero,800bd98 <_fflush_r+0x94>
 800bd80:	80c00117 	ldw	r3,4(r16)
 800bd84:	80800c17 	ldw	r2,48(r16)
 800bd88:	30cdc83a 	sub	r6,r6,r3
 800bd8c:	10000226 	beq	r2,zero,800bd98 <_fflush_r+0x94>
 800bd90:	80800f17 	ldw	r2,60(r16)
 800bd94:	308dc83a 	sub	r6,r6,r2
 800bd98:	81400717 	ldw	r5,28(r16)
 800bd9c:	9809883a 	mov	r4,r19
 800bda0:	000f883a 	mov	r7,zero
 800bda4:	403ee83a 	callr	r8
 800bda8:	00ffffc4 	movi	r3,-1
 800bdac:	10c04526 	beq	r2,r3,800bec4 <_fflush_r+0x1c0>
 800bdb0:	80c0030b 	ldhu	r3,12(r16)
 800bdb4:	81000417 	ldw	r4,16(r16)
 800bdb8:	80000115 	stw	zero,4(r16)
 800bdbc:	197dffcc 	andi	r5,r3,63487
 800bdc0:	8140030d 	sth	r5,12(r16)
 800bdc4:	81000015 	stw	r4,0(r16)
 800bdc8:	18c4000c 	andi	r3,r3,4096
 800bdcc:	18000126 	beq	r3,zero,800bdd4 <_fflush_r+0xd0>
 800bdd0:	80801415 	stw	r2,80(r16)
 800bdd4:	81400c17 	ldw	r5,48(r16)
 800bdd8:	9c400015 	stw	r17,0(r19)
 800bddc:	28000526 	beq	r5,zero,800bdf4 <_fflush_r+0xf0>
 800bde0:	80801004 	addi	r2,r16,64
 800bde4:	28800226 	beq	r5,r2,800bdf0 <_fflush_r+0xec>
 800bde8:	9809883a 	mov	r4,r19
 800bdec:	800c4200 	call	800c420 <_free_r>
 800bdf0:	80000c15 	stw	zero,48(r16)
 800bdf4:	0005883a 	mov	r2,zero
 800bdf8:	dfc00417 	ldw	ra,16(sp)
 800bdfc:	dcc00317 	ldw	r19,12(sp)
 800be00:	dc800217 	ldw	r18,8(sp)
 800be04:	dc400117 	ldw	r17,4(sp)
 800be08:	dc000017 	ldw	r16,0(sp)
 800be0c:	dec00504 	addi	sp,sp,20
 800be10:	f800283a 	ret
 800be14:	84800417 	ldw	r18,16(r16)
 800be18:	903ff626 	beq	r18,zero,800bdf4 <__alt_data_end+0xfc00bdf4>
 800be1c:	84400017 	ldw	r17,0(r16)
 800be20:	108000cc 	andi	r2,r2,3
 800be24:	84800015 	stw	r18,0(r16)
 800be28:	8ca3c83a 	sub	r17,r17,r18
 800be2c:	10001526 	beq	r2,zero,800be84 <_fflush_r+0x180>
 800be30:	0005883a 	mov	r2,zero
 800be34:	80800215 	stw	r2,8(r16)
 800be38:	04400316 	blt	zero,r17,800be48 <_fflush_r+0x144>
 800be3c:	003fed06 	br	800bdf4 <__alt_data_end+0xfc00bdf4>
 800be40:	90a5883a 	add	r18,r18,r2
 800be44:	047feb0e 	bge	zero,r17,800bdf4 <__alt_data_end+0xfc00bdf4>
 800be48:	80800917 	ldw	r2,36(r16)
 800be4c:	81400717 	ldw	r5,28(r16)
 800be50:	880f883a 	mov	r7,r17
 800be54:	900d883a 	mov	r6,r18
 800be58:	9809883a 	mov	r4,r19
 800be5c:	103ee83a 	callr	r2
 800be60:	88a3c83a 	sub	r17,r17,r2
 800be64:	00bff616 	blt	zero,r2,800be40 <__alt_data_end+0xfc00be40>
 800be68:	80c0030b 	ldhu	r3,12(r16)
 800be6c:	00bfffc4 	movi	r2,-1
 800be70:	18c01014 	ori	r3,r3,64
 800be74:	80c0030d 	sth	r3,12(r16)
 800be78:	003fdf06 	br	800bdf8 <__alt_data_end+0xfc00bdf8>
 800be7c:	800c2ac0 	call	800c2ac <__sinit>
 800be80:	003fab06 	br	800bd30 <__alt_data_end+0xfc00bd30>
 800be84:	80800517 	ldw	r2,20(r16)
 800be88:	003fea06 	br	800be34 <__alt_data_end+0xfc00be34>
 800be8c:	81400717 	ldw	r5,28(r16)
 800be90:	000d883a 	mov	r6,zero
 800be94:	9809883a 	mov	r4,r19
 800be98:	01c00044 	movi	r7,1
 800be9c:	403ee83a 	callr	r8
 800bea0:	100d883a 	mov	r6,r2
 800bea4:	00bfffc4 	movi	r2,-1
 800bea8:	30801326 	beq	r6,r2,800bef8 <_fflush_r+0x1f4>
 800beac:	8080030b 	ldhu	r2,12(r16)
 800beb0:	82000a17 	ldw	r8,40(r16)
 800beb4:	003fb006 	br	800bd78 <__alt_data_end+0xfc00bd78>
 800beb8:	80c00f17 	ldw	r3,60(r16)
 800bebc:	00ffa716 	blt	zero,r3,800bd5c <__alt_data_end+0xfc00bd5c>
 800bec0:	003fcc06 	br	800bdf4 <__alt_data_end+0xfc00bdf4>
 800bec4:	98c00017 	ldw	r3,0(r19)
 800bec8:	183fb926 	beq	r3,zero,800bdb0 <__alt_data_end+0xfc00bdb0>
 800becc:	01000744 	movi	r4,29
 800bed0:	19000226 	beq	r3,r4,800bedc <_fflush_r+0x1d8>
 800bed4:	01000584 	movi	r4,22
 800bed8:	1900101e 	bne	r3,r4,800bf1c <_fflush_r+0x218>
 800bedc:	8080030b 	ldhu	r2,12(r16)
 800bee0:	80c00417 	ldw	r3,16(r16)
 800bee4:	80000115 	stw	zero,4(r16)
 800bee8:	10bdffcc 	andi	r2,r2,63487
 800beec:	8080030d 	sth	r2,12(r16)
 800bef0:	80c00015 	stw	r3,0(r16)
 800bef4:	003fb706 	br	800bdd4 <__alt_data_end+0xfc00bdd4>
 800bef8:	98800017 	ldw	r2,0(r19)
 800befc:	103feb26 	beq	r2,zero,800beac <__alt_data_end+0xfc00beac>
 800bf00:	00c00744 	movi	r3,29
 800bf04:	10c00226 	beq	r2,r3,800bf10 <_fflush_r+0x20c>
 800bf08:	00c00584 	movi	r3,22
 800bf0c:	10ffd61e 	bne	r2,r3,800be68 <__alt_data_end+0xfc00be68>
 800bf10:	9c400015 	stw	r17,0(r19)
 800bf14:	0005883a 	mov	r2,zero
 800bf18:	003fb706 	br	800bdf8 <__alt_data_end+0xfc00bdf8>
 800bf1c:	80c0030b 	ldhu	r3,12(r16)
 800bf20:	18c01014 	ori	r3,r3,64
 800bf24:	80c0030d 	sth	r3,12(r16)
 800bf28:	003fb306 	br	800bdf8 <__alt_data_end+0xfc00bdf8>

0800bf2c <fflush>:
 800bf2c:	20000526 	beq	r4,zero,800bf44 <fflush+0x18>
 800bf30:	008200b4 	movhi	r2,2050
 800bf34:	108d4d04 	addi	r2,r2,13620
 800bf38:	200b883a 	mov	r5,r4
 800bf3c:	11000017 	ldw	r4,0(r2)
 800bf40:	800bd041 	jmpi	800bd04 <_fflush_r>
 800bf44:	008200b4 	movhi	r2,2050
 800bf48:	108d4c04 	addi	r2,r2,13616
 800bf4c:	11000017 	ldw	r4,0(r2)
 800bf50:	01420074 	movhi	r5,2049
 800bf54:	296f4104 	addi	r5,r5,-17148
 800bf58:	800c7c81 	jmpi	800c7c8 <_fwalk_reent>

0800bf5c <__fp_lock>:
 800bf5c:	0005883a 	mov	r2,zero
 800bf60:	f800283a 	ret

0800bf64 <__fp_unlock>:
 800bf64:	0005883a 	mov	r2,zero
 800bf68:	f800283a 	ret

0800bf6c <_cleanup_r>:
 800bf6c:	01420074 	movhi	r5,2049
 800bf70:	29463d04 	addi	r5,r5,6388
 800bf74:	800c7101 	jmpi	800c710 <_fwalk>

0800bf78 <__sinit.part.1>:
 800bf78:	defff604 	addi	sp,sp,-40
 800bf7c:	00c20074 	movhi	r3,2049
 800bf80:	dfc00915 	stw	ra,36(sp)
 800bf84:	df000815 	stw	fp,32(sp)
 800bf88:	ddc00715 	stw	r23,28(sp)
 800bf8c:	dd800615 	stw	r22,24(sp)
 800bf90:	dd400515 	stw	r21,20(sp)
 800bf94:	dd000415 	stw	r20,16(sp)
 800bf98:	dcc00315 	stw	r19,12(sp)
 800bf9c:	dc800215 	stw	r18,8(sp)
 800bfa0:	dc400115 	stw	r17,4(sp)
 800bfa4:	dc000015 	stw	r16,0(sp)
 800bfa8:	18efdb04 	addi	r3,r3,-16532
 800bfac:	24000117 	ldw	r16,4(r4)
 800bfb0:	20c00f15 	stw	r3,60(r4)
 800bfb4:	07000044 	movi	fp,1
 800bfb8:	00c000c4 	movi	r3,3
 800bfbc:	2080bb04 	addi	r2,r4,748
 800bfc0:	20c0b915 	stw	r3,740(r4)
 800bfc4:	27000e15 	stw	fp,56(r4)
 800bfc8:	2080ba15 	stw	r2,744(r4)
 800bfcc:	2000b815 	stw	zero,736(r4)
 800bfd0:	05c00204 	movi	r23,8
 800bfd4:	00800104 	movi	r2,4
 800bfd8:	2025883a 	mov	r18,r4
 800bfdc:	b80d883a 	mov	r6,r23
 800bfe0:	81001704 	addi	r4,r16,92
 800bfe4:	000b883a 	mov	r5,zero
 800bfe8:	80000015 	stw	zero,0(r16)
 800bfec:	80000115 	stw	zero,4(r16)
 800bff0:	80000215 	stw	zero,8(r16)
 800bff4:	8080030d 	sth	r2,12(r16)
 800bff8:	80001915 	stw	zero,100(r16)
 800bffc:	8000038d 	sth	zero,14(r16)
 800c000:	80000415 	stw	zero,16(r16)
 800c004:	80000515 	stw	zero,20(r16)
 800c008:	80000615 	stw	zero,24(r16)
 800c00c:	800d9c40 	call	800d9c4 <memset>
 800c010:	05820074 	movhi	r22,2049
 800c014:	94400217 	ldw	r17,8(r18)
 800c018:	05420074 	movhi	r21,2049
 800c01c:	05020074 	movhi	r20,2049
 800c020:	04c20074 	movhi	r19,2049
 800c024:	b5bb1404 	addi	r22,r22,-5040
 800c028:	ad7b2b04 	addi	r21,r21,-4948
 800c02c:	a53b4a04 	addi	r20,r20,-4824
 800c030:	9cfb6104 	addi	r19,r19,-4732
 800c034:	85800815 	stw	r22,32(r16)
 800c038:	85400915 	stw	r21,36(r16)
 800c03c:	85000a15 	stw	r20,40(r16)
 800c040:	84c00b15 	stw	r19,44(r16)
 800c044:	84000715 	stw	r16,28(r16)
 800c048:	00800284 	movi	r2,10
 800c04c:	89001704 	addi	r4,r17,92
 800c050:	b80d883a 	mov	r6,r23
 800c054:	000b883a 	mov	r5,zero
 800c058:	88000015 	stw	zero,0(r17)
 800c05c:	88000115 	stw	zero,4(r17)
 800c060:	88000215 	stw	zero,8(r17)
 800c064:	8880030d 	sth	r2,12(r17)
 800c068:	88001915 	stw	zero,100(r17)
 800c06c:	8f00038d 	sth	fp,14(r17)
 800c070:	88000415 	stw	zero,16(r17)
 800c074:	88000515 	stw	zero,20(r17)
 800c078:	88000615 	stw	zero,24(r17)
 800c07c:	800d9c40 	call	800d9c4 <memset>
 800c080:	94000317 	ldw	r16,12(r18)
 800c084:	00800484 	movi	r2,18
 800c088:	8c400715 	stw	r17,28(r17)
 800c08c:	8d800815 	stw	r22,32(r17)
 800c090:	8d400915 	stw	r21,36(r17)
 800c094:	8d000a15 	stw	r20,40(r17)
 800c098:	8cc00b15 	stw	r19,44(r17)
 800c09c:	8080030d 	sth	r2,12(r16)
 800c0a0:	00800084 	movi	r2,2
 800c0a4:	80000015 	stw	zero,0(r16)
 800c0a8:	80000115 	stw	zero,4(r16)
 800c0ac:	80000215 	stw	zero,8(r16)
 800c0b0:	80001915 	stw	zero,100(r16)
 800c0b4:	8080038d 	sth	r2,14(r16)
 800c0b8:	80000415 	stw	zero,16(r16)
 800c0bc:	80000515 	stw	zero,20(r16)
 800c0c0:	80000615 	stw	zero,24(r16)
 800c0c4:	81001704 	addi	r4,r16,92
 800c0c8:	000b883a 	mov	r5,zero
 800c0cc:	b80d883a 	mov	r6,r23
 800c0d0:	800d9c40 	call	800d9c4 <memset>
 800c0d4:	84000715 	stw	r16,28(r16)
 800c0d8:	85800815 	stw	r22,32(r16)
 800c0dc:	85400915 	stw	r21,36(r16)
 800c0e0:	85000a15 	stw	r20,40(r16)
 800c0e4:	84c00b15 	stw	r19,44(r16)
 800c0e8:	dfc00917 	ldw	ra,36(sp)
 800c0ec:	df000817 	ldw	fp,32(sp)
 800c0f0:	ddc00717 	ldw	r23,28(sp)
 800c0f4:	dd800617 	ldw	r22,24(sp)
 800c0f8:	dd400517 	ldw	r21,20(sp)
 800c0fc:	dd000417 	ldw	r20,16(sp)
 800c100:	dcc00317 	ldw	r19,12(sp)
 800c104:	dc800217 	ldw	r18,8(sp)
 800c108:	dc400117 	ldw	r17,4(sp)
 800c10c:	dc000017 	ldw	r16,0(sp)
 800c110:	dec00a04 	addi	sp,sp,40
 800c114:	f800283a 	ret

0800c118 <__sfmoreglue>:
 800c118:	defffc04 	addi	sp,sp,-16
 800c11c:	dc400115 	stw	r17,4(sp)
 800c120:	2c401a24 	muli	r17,r5,104
 800c124:	dc800215 	stw	r18,8(sp)
 800c128:	2825883a 	mov	r18,r5
 800c12c:	89400304 	addi	r5,r17,12
 800c130:	dc000015 	stw	r16,0(sp)
 800c134:	dfc00315 	stw	ra,12(sp)
 800c138:	8003f000 	call	8003f00 <_malloc_r>
 800c13c:	1021883a 	mov	r16,r2
 800c140:	10000726 	beq	r2,zero,800c160 <__sfmoreglue+0x48>
 800c144:	11000304 	addi	r4,r2,12
 800c148:	10000015 	stw	zero,0(r2)
 800c14c:	14800115 	stw	r18,4(r2)
 800c150:	11000215 	stw	r4,8(r2)
 800c154:	000b883a 	mov	r5,zero
 800c158:	880d883a 	mov	r6,r17
 800c15c:	800d9c40 	call	800d9c4 <memset>
 800c160:	8005883a 	mov	r2,r16
 800c164:	dfc00317 	ldw	ra,12(sp)
 800c168:	dc800217 	ldw	r18,8(sp)
 800c16c:	dc400117 	ldw	r17,4(sp)
 800c170:	dc000017 	ldw	r16,0(sp)
 800c174:	dec00404 	addi	sp,sp,16
 800c178:	f800283a 	ret

0800c17c <__sfp>:
 800c17c:	008200b4 	movhi	r2,2050
 800c180:	defffb04 	addi	sp,sp,-20
 800c184:	108d4c04 	addi	r2,r2,13616
 800c188:	dc800215 	stw	r18,8(sp)
 800c18c:	14800017 	ldw	r18,0(r2)
 800c190:	dcc00315 	stw	r19,12(sp)
 800c194:	dfc00415 	stw	ra,16(sp)
 800c198:	90800e17 	ldw	r2,56(r18)
 800c19c:	dc400115 	stw	r17,4(sp)
 800c1a0:	dc000015 	stw	r16,0(sp)
 800c1a4:	2027883a 	mov	r19,r4
 800c1a8:	1000021e 	bne	r2,zero,800c1b4 <__sfp+0x38>
 800c1ac:	9009883a 	mov	r4,r18
 800c1b0:	800bf780 	call	800bf78 <__sinit.part.1>
 800c1b4:	9480b804 	addi	r18,r18,736
 800c1b8:	047fffc4 	movi	r17,-1
 800c1bc:	91400117 	ldw	r5,4(r18)
 800c1c0:	94000217 	ldw	r16,8(r18)
 800c1c4:	297fffc4 	addi	r5,r5,-1
 800c1c8:	28000a16 	blt	r5,zero,800c1f4 <__sfp+0x78>
 800c1cc:	8080030f 	ldh	r2,12(r16)
 800c1d0:	10000c26 	beq	r2,zero,800c204 <__sfp+0x88>
 800c1d4:	80c01d04 	addi	r3,r16,116
 800c1d8:	00000206 	br	800c1e4 <__sfp+0x68>
 800c1dc:	18bfe60f 	ldh	r2,-104(r3)
 800c1e0:	10000826 	beq	r2,zero,800c204 <__sfp+0x88>
 800c1e4:	297fffc4 	addi	r5,r5,-1
 800c1e8:	1c3ffd04 	addi	r16,r3,-12
 800c1ec:	18c01a04 	addi	r3,r3,104
 800c1f0:	2c7ffa1e 	bne	r5,r17,800c1dc <__alt_data_end+0xfc00c1dc>
 800c1f4:	90800017 	ldw	r2,0(r18)
 800c1f8:	10001d26 	beq	r2,zero,800c270 <__sfp+0xf4>
 800c1fc:	1025883a 	mov	r18,r2
 800c200:	003fee06 	br	800c1bc <__alt_data_end+0xfc00c1bc>
 800c204:	00bfffc4 	movi	r2,-1
 800c208:	8080038d 	sth	r2,14(r16)
 800c20c:	00800044 	movi	r2,1
 800c210:	8080030d 	sth	r2,12(r16)
 800c214:	80001915 	stw	zero,100(r16)
 800c218:	80000015 	stw	zero,0(r16)
 800c21c:	80000215 	stw	zero,8(r16)
 800c220:	80000115 	stw	zero,4(r16)
 800c224:	80000415 	stw	zero,16(r16)
 800c228:	80000515 	stw	zero,20(r16)
 800c22c:	80000615 	stw	zero,24(r16)
 800c230:	81001704 	addi	r4,r16,92
 800c234:	000b883a 	mov	r5,zero
 800c238:	01800204 	movi	r6,8
 800c23c:	800d9c40 	call	800d9c4 <memset>
 800c240:	8005883a 	mov	r2,r16
 800c244:	80000c15 	stw	zero,48(r16)
 800c248:	80000d15 	stw	zero,52(r16)
 800c24c:	80001115 	stw	zero,68(r16)
 800c250:	80001215 	stw	zero,72(r16)
 800c254:	dfc00417 	ldw	ra,16(sp)
 800c258:	dcc00317 	ldw	r19,12(sp)
 800c25c:	dc800217 	ldw	r18,8(sp)
 800c260:	dc400117 	ldw	r17,4(sp)
 800c264:	dc000017 	ldw	r16,0(sp)
 800c268:	dec00504 	addi	sp,sp,20
 800c26c:	f800283a 	ret
 800c270:	9809883a 	mov	r4,r19
 800c274:	01400104 	movi	r5,4
 800c278:	800c1180 	call	800c118 <__sfmoreglue>
 800c27c:	90800015 	stw	r2,0(r18)
 800c280:	103fde1e 	bne	r2,zero,800c1fc <__alt_data_end+0xfc00c1fc>
 800c284:	00800304 	movi	r2,12
 800c288:	98800015 	stw	r2,0(r19)
 800c28c:	0005883a 	mov	r2,zero
 800c290:	003ff006 	br	800c254 <__alt_data_end+0xfc00c254>

0800c294 <_cleanup>:
 800c294:	008200b4 	movhi	r2,2050
 800c298:	108d4c04 	addi	r2,r2,13616
 800c29c:	11000017 	ldw	r4,0(r2)
 800c2a0:	01420074 	movhi	r5,2049
 800c2a4:	29463d04 	addi	r5,r5,6388
 800c2a8:	800c7101 	jmpi	800c710 <_fwalk>

0800c2ac <__sinit>:
 800c2ac:	20800e17 	ldw	r2,56(r4)
 800c2b0:	10000126 	beq	r2,zero,800c2b8 <__sinit+0xc>
 800c2b4:	f800283a 	ret
 800c2b8:	800bf781 	jmpi	800bf78 <__sinit.part.1>

0800c2bc <__sfp_lock_acquire>:
 800c2bc:	f800283a 	ret

0800c2c0 <__sfp_lock_release>:
 800c2c0:	f800283a 	ret

0800c2c4 <__sinit_lock_acquire>:
 800c2c4:	f800283a 	ret

0800c2c8 <__sinit_lock_release>:
 800c2c8:	f800283a 	ret

0800c2cc <__fp_lock_all>:
 800c2cc:	008200b4 	movhi	r2,2050
 800c2d0:	108d4d04 	addi	r2,r2,13620
 800c2d4:	11000017 	ldw	r4,0(r2)
 800c2d8:	01420074 	movhi	r5,2049
 800c2dc:	296fd704 	addi	r5,r5,-16548
 800c2e0:	800c7101 	jmpi	800c710 <_fwalk>

0800c2e4 <__fp_unlock_all>:
 800c2e4:	008200b4 	movhi	r2,2050
 800c2e8:	108d4d04 	addi	r2,r2,13620
 800c2ec:	11000017 	ldw	r4,0(r2)
 800c2f0:	01420074 	movhi	r5,2049
 800c2f4:	296fd904 	addi	r5,r5,-16540
 800c2f8:	800c7101 	jmpi	800c710 <_fwalk>

0800c2fc <_malloc_trim_r>:
 800c2fc:	defffb04 	addi	sp,sp,-20
 800c300:	dcc00315 	stw	r19,12(sp)
 800c304:	04c200b4 	movhi	r19,2050
 800c308:	dc800215 	stw	r18,8(sp)
 800c30c:	dc400115 	stw	r17,4(sp)
 800c310:	dc000015 	stw	r16,0(sp)
 800c314:	dfc00415 	stw	ra,16(sp)
 800c318:	2821883a 	mov	r16,r5
 800c31c:	9cc68a04 	addi	r19,r19,6696
 800c320:	2025883a 	mov	r18,r4
 800c324:	8014a080 	call	8014a08 <__malloc_lock>
 800c328:	98800217 	ldw	r2,8(r19)
 800c32c:	14400117 	ldw	r17,4(r2)
 800c330:	00bfff04 	movi	r2,-4
 800c334:	88a2703a 	and	r17,r17,r2
 800c338:	8c21c83a 	sub	r16,r17,r16
 800c33c:	8403fbc4 	addi	r16,r16,4079
 800c340:	8020d33a 	srli	r16,r16,12
 800c344:	0083ffc4 	movi	r2,4095
 800c348:	843fffc4 	addi	r16,r16,-1
 800c34c:	8020933a 	slli	r16,r16,12
 800c350:	1400060e 	bge	r2,r16,800c36c <_malloc_trim_r+0x70>
 800c354:	9009883a 	mov	r4,r18
 800c358:	000b883a 	mov	r5,zero
 800c35c:	80047300 	call	8004730 <_sbrk_r>
 800c360:	98c00217 	ldw	r3,8(r19)
 800c364:	1c47883a 	add	r3,r3,r17
 800c368:	10c00a26 	beq	r2,r3,800c394 <_malloc_trim_r+0x98>
 800c36c:	9009883a 	mov	r4,r18
 800c370:	8014a280 	call	8014a28 <__malloc_unlock>
 800c374:	0005883a 	mov	r2,zero
 800c378:	dfc00417 	ldw	ra,16(sp)
 800c37c:	dcc00317 	ldw	r19,12(sp)
 800c380:	dc800217 	ldw	r18,8(sp)
 800c384:	dc400117 	ldw	r17,4(sp)
 800c388:	dc000017 	ldw	r16,0(sp)
 800c38c:	dec00504 	addi	sp,sp,20
 800c390:	f800283a 	ret
 800c394:	9009883a 	mov	r4,r18
 800c398:	040bc83a 	sub	r5,zero,r16
 800c39c:	80047300 	call	8004730 <_sbrk_r>
 800c3a0:	00ffffc4 	movi	r3,-1
 800c3a4:	10c00d26 	beq	r2,r3,800c3dc <_malloc_trim_r+0xe0>
 800c3a8:	00c200b4 	movhi	r3,2050
 800c3ac:	18d43e04 	addi	r3,r3,20728
 800c3b0:	18800017 	ldw	r2,0(r3)
 800c3b4:	99000217 	ldw	r4,8(r19)
 800c3b8:	8c23c83a 	sub	r17,r17,r16
 800c3bc:	8c400054 	ori	r17,r17,1
 800c3c0:	1421c83a 	sub	r16,r2,r16
 800c3c4:	24400115 	stw	r17,4(r4)
 800c3c8:	9009883a 	mov	r4,r18
 800c3cc:	1c000015 	stw	r16,0(r3)
 800c3d0:	8014a280 	call	8014a28 <__malloc_unlock>
 800c3d4:	00800044 	movi	r2,1
 800c3d8:	003fe706 	br	800c378 <__alt_data_end+0xfc00c378>
 800c3dc:	9009883a 	mov	r4,r18
 800c3e0:	000b883a 	mov	r5,zero
 800c3e4:	80047300 	call	8004730 <_sbrk_r>
 800c3e8:	99000217 	ldw	r4,8(r19)
 800c3ec:	014003c4 	movi	r5,15
 800c3f0:	1107c83a 	sub	r3,r2,r4
 800c3f4:	28ffdd0e 	bge	r5,r3,800c36c <__alt_data_end+0xfc00c36c>
 800c3f8:	014200b4 	movhi	r5,2050
 800c3fc:	294d4a04 	addi	r5,r5,13608
 800c400:	29400017 	ldw	r5,0(r5)
 800c404:	18c00054 	ori	r3,r3,1
 800c408:	20c00115 	stw	r3,4(r4)
 800c40c:	00c200b4 	movhi	r3,2050
 800c410:	1145c83a 	sub	r2,r2,r5
 800c414:	18d43e04 	addi	r3,r3,20728
 800c418:	18800015 	stw	r2,0(r3)
 800c41c:	003fd306 	br	800c36c <__alt_data_end+0xfc00c36c>

0800c420 <_free_r>:
 800c420:	28004c26 	beq	r5,zero,800c554 <_free_r+0x134>
 800c424:	defffd04 	addi	sp,sp,-12
 800c428:	dc400115 	stw	r17,4(sp)
 800c42c:	dc000015 	stw	r16,0(sp)
 800c430:	2023883a 	mov	r17,r4
 800c434:	2821883a 	mov	r16,r5
 800c438:	dfc00215 	stw	ra,8(sp)
 800c43c:	8014a080 	call	8014a08 <__malloc_lock>
 800c440:	813fff17 	ldw	r4,-4(r16)
 800c444:	00bfff84 	movi	r2,-2
 800c448:	024200b4 	movhi	r9,2050
 800c44c:	81bffe04 	addi	r6,r16,-8
 800c450:	2084703a 	and	r2,r4,r2
 800c454:	4a468a04 	addi	r9,r9,6696
 800c458:	308b883a 	add	r5,r6,r2
 800c45c:	2a000117 	ldw	r8,4(r5)
 800c460:	49c00217 	ldw	r7,8(r9)
 800c464:	00ffff04 	movi	r3,-4
 800c468:	40c6703a 	and	r3,r8,r3
 800c46c:	39405326 	beq	r7,r5,800c5bc <_free_r+0x19c>
 800c470:	28c00115 	stw	r3,4(r5)
 800c474:	2100004c 	andi	r4,r4,1
 800c478:	2000091e 	bne	r4,zero,800c4a0 <_free_r+0x80>
 800c47c:	81fffe17 	ldw	r7,-8(r16)
 800c480:	4a000204 	addi	r8,r9,8
 800c484:	31cdc83a 	sub	r6,r6,r7
 800c488:	31000217 	ldw	r4,8(r6)
 800c48c:	11c5883a 	add	r2,r2,r7
 800c490:	22006126 	beq	r4,r8,800c618 <_free_r+0x1f8>
 800c494:	31c00317 	ldw	r7,12(r6)
 800c498:	21c00315 	stw	r7,12(r4)
 800c49c:	39000215 	stw	r4,8(r7)
 800c4a0:	28c9883a 	add	r4,r5,r3
 800c4a4:	21c00117 	ldw	r7,4(r4)
 800c4a8:	39c0004c 	andi	r7,r7,1
 800c4ac:	38000d1e 	bne	r7,zero,800c4e4 <_free_r+0xc4>
 800c4b0:	29000217 	ldw	r4,8(r5)
 800c4b4:	10c5883a 	add	r2,r2,r3
 800c4b8:	00c200b4 	movhi	r3,2050
 800c4bc:	18c68c04 	addi	r3,r3,6704
 800c4c0:	20c07526 	beq	r4,r3,800c698 <_free_r+0x278>
 800c4c4:	29c00317 	ldw	r7,12(r5)
 800c4c8:	11400054 	ori	r5,r2,1
 800c4cc:	3087883a 	add	r3,r6,r2
 800c4d0:	21c00315 	stw	r7,12(r4)
 800c4d4:	39000215 	stw	r4,8(r7)
 800c4d8:	31400115 	stw	r5,4(r6)
 800c4dc:	18800015 	stw	r2,0(r3)
 800c4e0:	00000406 	br	800c4f4 <_free_r+0xd4>
 800c4e4:	10c00054 	ori	r3,r2,1
 800c4e8:	30c00115 	stw	r3,4(r6)
 800c4ec:	3087883a 	add	r3,r6,r2
 800c4f0:	18800015 	stw	r2,0(r3)
 800c4f4:	00c07fc4 	movi	r3,511
 800c4f8:	18801736 	bltu	r3,r2,800c558 <_free_r+0x138>
 800c4fc:	1004d0fa 	srli	r2,r2,3
 800c500:	01400044 	movi	r5,1
 800c504:	49000117 	ldw	r4,4(r9)
 800c508:	1087883a 	add	r3,r2,r2
 800c50c:	18c7883a 	add	r3,r3,r3
 800c510:	1005d0ba 	srai	r2,r2,2
 800c514:	18c7883a 	add	r3,r3,r3
 800c518:	1a47883a 	add	r3,r3,r9
 800c51c:	19c00217 	ldw	r7,8(r3)
 800c520:	2884983a 	sll	r2,r5,r2
 800c524:	30c00315 	stw	r3,12(r6)
 800c528:	31c00215 	stw	r7,8(r6)
 800c52c:	1104b03a 	or	r2,r2,r4
 800c530:	19800215 	stw	r6,8(r3)
 800c534:	48800115 	stw	r2,4(r9)
 800c538:	39800315 	stw	r6,12(r7)
 800c53c:	8809883a 	mov	r4,r17
 800c540:	dfc00217 	ldw	ra,8(sp)
 800c544:	dc400117 	ldw	r17,4(sp)
 800c548:	dc000017 	ldw	r16,0(sp)
 800c54c:	dec00304 	addi	sp,sp,12
 800c550:	8014a281 	jmpi	8014a28 <__malloc_unlock>
 800c554:	f800283a 	ret
 800c558:	1006d27a 	srli	r3,r2,9
 800c55c:	01000104 	movi	r4,4
 800c560:	20c04036 	bltu	r4,r3,800c664 <_free_r+0x244>
 800c564:	1006d1ba 	srli	r3,r2,6
 800c568:	19400e04 	addi	r5,r3,56
 800c56c:	2947883a 	add	r3,r5,r5
 800c570:	18c7883a 	add	r3,r3,r3
 800c574:	18c7883a 	add	r3,r3,r3
 800c578:	1a49883a 	add	r4,r3,r9
 800c57c:	20c00217 	ldw	r3,8(r4)
 800c580:	01c200b4 	movhi	r7,2050
 800c584:	39c68a04 	addi	r7,r7,6696
 800c588:	19003b26 	beq	r3,r4,800c678 <_free_r+0x258>
 800c58c:	01ffff04 	movi	r7,-4
 800c590:	19400117 	ldw	r5,4(r3)
 800c594:	29ca703a 	and	r5,r5,r7
 800c598:	1140022e 	bgeu	r2,r5,800c5a4 <_free_r+0x184>
 800c59c:	18c00217 	ldw	r3,8(r3)
 800c5a0:	20fffb1e 	bne	r4,r3,800c590 <__alt_data_end+0xfc00c590>
 800c5a4:	18800317 	ldw	r2,12(r3)
 800c5a8:	30800315 	stw	r2,12(r6)
 800c5ac:	30c00215 	stw	r3,8(r6)
 800c5b0:	11800215 	stw	r6,8(r2)
 800c5b4:	19800315 	stw	r6,12(r3)
 800c5b8:	003fe006 	br	800c53c <__alt_data_end+0xfc00c53c>
 800c5bc:	2100004c 	andi	r4,r4,1
 800c5c0:	1885883a 	add	r2,r3,r2
 800c5c4:	2000071e 	bne	r4,zero,800c5e4 <_free_r+0x1c4>
 800c5c8:	817ffe17 	ldw	r5,-8(r16)
 800c5cc:	314dc83a 	sub	r6,r6,r5
 800c5d0:	30c00317 	ldw	r3,12(r6)
 800c5d4:	31000217 	ldw	r4,8(r6)
 800c5d8:	1145883a 	add	r2,r2,r5
 800c5dc:	20c00315 	stw	r3,12(r4)
 800c5e0:	19000215 	stw	r4,8(r3)
 800c5e4:	10c00054 	ori	r3,r2,1
 800c5e8:	30c00115 	stw	r3,4(r6)
 800c5ec:	00c200b4 	movhi	r3,2050
 800c5f0:	18cd4b04 	addi	r3,r3,13612
 800c5f4:	18c00017 	ldw	r3,0(r3)
 800c5f8:	49800215 	stw	r6,8(r9)
 800c5fc:	10ffcf36 	bltu	r2,r3,800c53c <__alt_data_end+0xfc00c53c>
 800c600:	008200b4 	movhi	r2,2050
 800c604:	10942f04 	addi	r2,r2,20668
 800c608:	11400017 	ldw	r5,0(r2)
 800c60c:	8809883a 	mov	r4,r17
 800c610:	800c2fc0 	call	800c2fc <_malloc_trim_r>
 800c614:	003fc906 	br	800c53c <__alt_data_end+0xfc00c53c>
 800c618:	28c9883a 	add	r4,r5,r3
 800c61c:	21000117 	ldw	r4,4(r4)
 800c620:	2100004c 	andi	r4,r4,1
 800c624:	20000a1e 	bne	r4,zero,800c650 <_free_r+0x230>
 800c628:	29000317 	ldw	r4,12(r5)
 800c62c:	29400217 	ldw	r5,8(r5)
 800c630:	10c5883a 	add	r2,r2,r3
 800c634:	10c00054 	ori	r3,r2,1
 800c638:	29000315 	stw	r4,12(r5)
 800c63c:	21400215 	stw	r5,8(r4)
 800c640:	30c00115 	stw	r3,4(r6)
 800c644:	308d883a 	add	r6,r6,r2
 800c648:	30800015 	stw	r2,0(r6)
 800c64c:	003fbb06 	br	800c53c <__alt_data_end+0xfc00c53c>
 800c650:	10c00054 	ori	r3,r2,1
 800c654:	30c00115 	stw	r3,4(r6)
 800c658:	308d883a 	add	r6,r6,r2
 800c65c:	30800015 	stw	r2,0(r6)
 800c660:	003fb606 	br	800c53c <__alt_data_end+0xfc00c53c>
 800c664:	01000504 	movi	r4,20
 800c668:	20c01436 	bltu	r4,r3,800c6bc <_free_r+0x29c>
 800c66c:	194016c4 	addi	r5,r3,91
 800c670:	2947883a 	add	r3,r5,r5
 800c674:	003fbe06 	br	800c570 <__alt_data_end+0xfc00c570>
 800c678:	280bd0ba 	srai	r5,r5,2
 800c67c:	00800044 	movi	r2,1
 800c680:	39000117 	ldw	r4,4(r7)
 800c684:	114a983a 	sll	r5,r2,r5
 800c688:	1805883a 	mov	r2,r3
 800c68c:	2908b03a 	or	r4,r5,r4
 800c690:	39000115 	stw	r4,4(r7)
 800c694:	003fc406 	br	800c5a8 <__alt_data_end+0xfc00c5a8>
 800c698:	49800515 	stw	r6,20(r9)
 800c69c:	49800415 	stw	r6,16(r9)
 800c6a0:	10c00054 	ori	r3,r2,1
 800c6a4:	31000315 	stw	r4,12(r6)
 800c6a8:	31000215 	stw	r4,8(r6)
 800c6ac:	30c00115 	stw	r3,4(r6)
 800c6b0:	308d883a 	add	r6,r6,r2
 800c6b4:	30800015 	stw	r2,0(r6)
 800c6b8:	003fa006 	br	800c53c <__alt_data_end+0xfc00c53c>
 800c6bc:	01001504 	movi	r4,84
 800c6c0:	20c00436 	bltu	r4,r3,800c6d4 <_free_r+0x2b4>
 800c6c4:	1006d33a 	srli	r3,r2,12
 800c6c8:	19401b84 	addi	r5,r3,110
 800c6cc:	2947883a 	add	r3,r5,r5
 800c6d0:	003fa706 	br	800c570 <__alt_data_end+0xfc00c570>
 800c6d4:	01005504 	movi	r4,340
 800c6d8:	20c00436 	bltu	r4,r3,800c6ec <_free_r+0x2cc>
 800c6dc:	1006d3fa 	srli	r3,r2,15
 800c6e0:	19401dc4 	addi	r5,r3,119
 800c6e4:	2947883a 	add	r3,r5,r5
 800c6e8:	003fa106 	br	800c570 <__alt_data_end+0xfc00c570>
 800c6ec:	01015504 	movi	r4,1364
 800c6f0:	20c00436 	bltu	r4,r3,800c704 <_free_r+0x2e4>
 800c6f4:	1006d4ba 	srli	r3,r2,18
 800c6f8:	19401f04 	addi	r5,r3,124
 800c6fc:	2947883a 	add	r3,r5,r5
 800c700:	003f9b06 	br	800c570 <__alt_data_end+0xfc00c570>
 800c704:	00c03f04 	movi	r3,252
 800c708:	01401f84 	movi	r5,126
 800c70c:	003f9806 	br	800c570 <__alt_data_end+0xfc00c570>

0800c710 <_fwalk>:
 800c710:	defff804 	addi	sp,sp,-32
 800c714:	dd400515 	stw	r21,20(sp)
 800c718:	2540b804 	addi	r21,r4,736
 800c71c:	dd800615 	stw	r22,24(sp)
 800c720:	dd000415 	stw	r20,16(sp)
 800c724:	dfc00715 	stw	ra,28(sp)
 800c728:	dcc00315 	stw	r19,12(sp)
 800c72c:	dc800215 	stw	r18,8(sp)
 800c730:	dc400115 	stw	r17,4(sp)
 800c734:	dc000015 	stw	r16,0(sp)
 800c738:	2829883a 	mov	r20,r5
 800c73c:	002d883a 	mov	r22,zero
 800c740:	800c2bc0 	call	800c2bc <__sfp_lock_acquire>
 800c744:	a8001426 	beq	r21,zero,800c798 <_fwalk+0x88>
 800c748:	04ffffc4 	movi	r19,-1
 800c74c:	ac400117 	ldw	r17,4(r21)
 800c750:	ac800217 	ldw	r18,8(r21)
 800c754:	8c7fffc4 	addi	r17,r17,-1
 800c758:	88000d16 	blt	r17,zero,800c790 <_fwalk+0x80>
 800c75c:	94000304 	addi	r16,r18,12
 800c760:	94800384 	addi	r18,r18,14
 800c764:	80c0000f 	ldh	r3,0(r16)
 800c768:	8c7fffc4 	addi	r17,r17,-1
 800c76c:	813ffd04 	addi	r4,r16,-12
 800c770:	18000426 	beq	r3,zero,800c784 <_fwalk+0x74>
 800c774:	90c0000f 	ldh	r3,0(r18)
 800c778:	1cc00226 	beq	r3,r19,800c784 <_fwalk+0x74>
 800c77c:	a03ee83a 	callr	r20
 800c780:	b0acb03a 	or	r22,r22,r2
 800c784:	84001a04 	addi	r16,r16,104
 800c788:	94801a04 	addi	r18,r18,104
 800c78c:	8cfff51e 	bne	r17,r19,800c764 <__alt_data_end+0xfc00c764>
 800c790:	ad400017 	ldw	r21,0(r21)
 800c794:	a83fed1e 	bne	r21,zero,800c74c <__alt_data_end+0xfc00c74c>
 800c798:	800c2c00 	call	800c2c0 <__sfp_lock_release>
 800c79c:	b005883a 	mov	r2,r22
 800c7a0:	dfc00717 	ldw	ra,28(sp)
 800c7a4:	dd800617 	ldw	r22,24(sp)
 800c7a8:	dd400517 	ldw	r21,20(sp)
 800c7ac:	dd000417 	ldw	r20,16(sp)
 800c7b0:	dcc00317 	ldw	r19,12(sp)
 800c7b4:	dc800217 	ldw	r18,8(sp)
 800c7b8:	dc400117 	ldw	r17,4(sp)
 800c7bc:	dc000017 	ldw	r16,0(sp)
 800c7c0:	dec00804 	addi	sp,sp,32
 800c7c4:	f800283a 	ret

0800c7c8 <_fwalk_reent>:
 800c7c8:	defff804 	addi	sp,sp,-32
 800c7cc:	dd400515 	stw	r21,20(sp)
 800c7d0:	2540b804 	addi	r21,r4,736
 800c7d4:	dd800615 	stw	r22,24(sp)
 800c7d8:	dd000415 	stw	r20,16(sp)
 800c7dc:	dcc00315 	stw	r19,12(sp)
 800c7e0:	dfc00715 	stw	ra,28(sp)
 800c7e4:	dc800215 	stw	r18,8(sp)
 800c7e8:	dc400115 	stw	r17,4(sp)
 800c7ec:	dc000015 	stw	r16,0(sp)
 800c7f0:	2027883a 	mov	r19,r4
 800c7f4:	2829883a 	mov	r20,r5
 800c7f8:	002d883a 	mov	r22,zero
 800c7fc:	800c2bc0 	call	800c2bc <__sfp_lock_acquire>
 800c800:	a8001326 	beq	r21,zero,800c850 <_fwalk_reent+0x88>
 800c804:	04bfffc4 	movi	r18,-1
 800c808:	ac400117 	ldw	r17,4(r21)
 800c80c:	ac000217 	ldw	r16,8(r21)
 800c810:	8c7fffc4 	addi	r17,r17,-1
 800c814:	88000c16 	blt	r17,zero,800c848 <_fwalk_reent+0x80>
 800c818:	84000304 	addi	r16,r16,12
 800c81c:	80c0000f 	ldh	r3,0(r16)
 800c820:	8c7fffc4 	addi	r17,r17,-1
 800c824:	817ffd04 	addi	r5,r16,-12
 800c828:	18000526 	beq	r3,zero,800c840 <_fwalk_reent+0x78>
 800c82c:	80c0008f 	ldh	r3,2(r16)
 800c830:	9809883a 	mov	r4,r19
 800c834:	1c800226 	beq	r3,r18,800c840 <_fwalk_reent+0x78>
 800c838:	a03ee83a 	callr	r20
 800c83c:	b0acb03a 	or	r22,r22,r2
 800c840:	84001a04 	addi	r16,r16,104
 800c844:	8cbff51e 	bne	r17,r18,800c81c <__alt_data_end+0xfc00c81c>
 800c848:	ad400017 	ldw	r21,0(r21)
 800c84c:	a83fee1e 	bne	r21,zero,800c808 <__alt_data_end+0xfc00c808>
 800c850:	800c2c00 	call	800c2c0 <__sfp_lock_release>
 800c854:	b005883a 	mov	r2,r22
 800c858:	dfc00717 	ldw	ra,28(sp)
 800c85c:	dd800617 	ldw	r22,24(sp)
 800c860:	dd400517 	ldw	r21,20(sp)
 800c864:	dd000417 	ldw	r20,16(sp)
 800c868:	dcc00317 	ldw	r19,12(sp)
 800c86c:	dc800217 	ldw	r18,8(sp)
 800c870:	dc400117 	ldw	r17,4(sp)
 800c874:	dc000017 	ldw	r16,0(sp)
 800c878:	dec00804 	addi	sp,sp,32
 800c87c:	f800283a 	ret

0800c880 <rshift>:
 800c880:	2807d17a 	srai	r3,r5,5
 800c884:	20800417 	ldw	r2,16(r4)
 800c888:	22400504 	addi	r9,r4,20
 800c88c:	1880250e 	bge	r3,r2,800c924 <rshift+0xa4>
 800c890:	1085883a 	add	r2,r2,r2
 800c894:	18c7883a 	add	r3,r3,r3
 800c898:	1085883a 	add	r2,r2,r2
 800c89c:	18c7883a 	add	r3,r3,r3
 800c8a0:	294007cc 	andi	r5,r5,31
 800c8a4:	4885883a 	add	r2,r9,r2
 800c8a8:	48c7883a 	add	r3,r9,r3
 800c8ac:	28002026 	beq	r5,zero,800c930 <rshift+0xb0>
 800c8b0:	19800017 	ldw	r6,0(r3)
 800c8b4:	02c00804 	movi	r11,32
 800c8b8:	19c00104 	addi	r7,r3,4
 800c8bc:	5957c83a 	sub	r11,r11,r5
 800c8c0:	3150d83a 	srl	r8,r6,r5
 800c8c4:	38802c2e 	bgeu	r7,r2,800c978 <rshift+0xf8>
 800c8c8:	4815883a 	mov	r10,r9
 800c8cc:	39800017 	ldw	r6,0(r7)
 800c8d0:	52800104 	addi	r10,r10,4
 800c8d4:	39c00104 	addi	r7,r7,4
 800c8d8:	32cc983a 	sll	r6,r6,r11
 800c8dc:	418cb03a 	or	r6,r8,r6
 800c8e0:	51bfff15 	stw	r6,-4(r10)
 800c8e4:	39bfff17 	ldw	r6,-4(r7)
 800c8e8:	3150d83a 	srl	r8,r6,r5
 800c8ec:	38bff736 	bltu	r7,r2,800c8cc <__alt_data_end+0xfc00c8cc>
 800c8f0:	10c7c83a 	sub	r3,r2,r3
 800c8f4:	18fffec4 	addi	r3,r3,-5
 800c8f8:	1806d0ba 	srli	r3,r3,2
 800c8fc:	18c00044 	addi	r3,r3,1
 800c900:	18c7883a 	add	r3,r3,r3
 800c904:	18c7883a 	add	r3,r3,r3
 800c908:	48c7883a 	add	r3,r9,r3
 800c90c:	1a000015 	stw	r8,0(r3)
 800c910:	40000126 	beq	r8,zero,800c918 <rshift+0x98>
 800c914:	18c00104 	addi	r3,r3,4
 800c918:	1a45c83a 	sub	r2,r3,r9
 800c91c:	1005d0ba 	srai	r2,r2,2
 800c920:	00001206 	br	800c96c <rshift+0xec>
 800c924:	20000415 	stw	zero,16(r4)
 800c928:	20000515 	stw	zero,20(r4)
 800c92c:	f800283a 	ret
 800c930:	18bffc2e 	bgeu	r3,r2,800c924 <__alt_data_end+0xfc00c924>
 800c934:	180d883a 	mov	r6,r3
 800c938:	480b883a 	mov	r5,r9
 800c93c:	31c00017 	ldw	r7,0(r6)
 800c940:	29400104 	addi	r5,r5,4
 800c944:	31800104 	addi	r6,r6,4
 800c948:	29ffff15 	stw	r7,-4(r5)
 800c94c:	30bffb36 	bltu	r6,r2,800c93c <__alt_data_end+0xfc00c93c>
 800c950:	00c6303a 	nor	r3,zero,r3
 800c954:	1885883a 	add	r2,r3,r2
 800c958:	1004d0ba 	srli	r2,r2,2
 800c95c:	10800044 	addi	r2,r2,1
 800c960:	1085883a 	add	r2,r2,r2
 800c964:	1085883a 	add	r2,r2,r2
 800c968:	1005d0ba 	srai	r2,r2,2
 800c96c:	20800415 	stw	r2,16(r4)
 800c970:	103fed26 	beq	r2,zero,800c928 <__alt_data_end+0xfc00c928>
 800c974:	f800283a 	ret
 800c978:	4807883a 	mov	r3,r9
 800c97c:	003fe306 	br	800c90c <__alt_data_end+0xfc00c90c>

0800c980 <__hexdig_init>:
 800c980:	014200b4 	movhi	r5,2050
 800c984:	00c200b4 	movhi	r3,2050
 800c988:	29461744 	addi	r5,r5,6237
 800c98c:	18d44804 	addi	r3,r3,20768
 800c990:	01000404 	movi	r4,16
 800c994:	00800c04 	movi	r2,48
 800c998:	10c5883a 	add	r2,r2,r3
 800c99c:	11000005 	stb	r4,0(r2)
 800c9a0:	28800003 	ldbu	r2,0(r5)
 800c9a4:	21000044 	addi	r4,r4,1
 800c9a8:	29400044 	addi	r5,r5,1
 800c9ac:	103ffa1e 	bne	r2,zero,800c998 <__alt_data_end+0xfc00c998>
 800c9b0:	014200b4 	movhi	r5,2050
 800c9b4:	29461544 	addi	r5,r5,6229
 800c9b8:	01000684 	movi	r4,26
 800c9bc:	00801844 	movi	r2,97
 800c9c0:	10c5883a 	add	r2,r2,r3
 800c9c4:	11000005 	stb	r4,0(r2)
 800c9c8:	28800003 	ldbu	r2,0(r5)
 800c9cc:	21000044 	addi	r4,r4,1
 800c9d0:	29400044 	addi	r5,r5,1
 800c9d4:	103ffa1e 	bne	r2,zero,800c9c0 <__alt_data_end+0xfc00c9c0>
 800c9d8:	014200b4 	movhi	r5,2050
 800c9dc:	29461344 	addi	r5,r5,6221
 800c9e0:	01000684 	movi	r4,26
 800c9e4:	00801044 	movi	r2,65
 800c9e8:	10c5883a 	add	r2,r2,r3
 800c9ec:	11000005 	stb	r4,0(r2)
 800c9f0:	28800003 	ldbu	r2,0(r5)
 800c9f4:	21000044 	addi	r4,r4,1
 800c9f8:	29400044 	addi	r5,r5,1
 800c9fc:	103ffa1e 	bne	r2,zero,800c9e8 <__alt_data_end+0xfc00c9e8>
 800ca00:	f800283a 	ret

0800ca04 <__gethex>:
 800ca04:	deffeb04 	addi	sp,sp,-84
 800ca08:	dfc01415 	stw	ra,80(sp)
 800ca0c:	dd401015 	stw	r21,64(sp)
 800ca10:	dd000f15 	stw	r20,60(sp)
 800ca14:	dcc00e15 	stw	r19,56(sp)
 800ca18:	dc800d15 	stw	r18,52(sp)
 800ca1c:	d9000115 	stw	r4,4(sp)
 800ca20:	2829883a 	mov	r20,r5
 800ca24:	d9800015 	stw	r6,0(sp)
 800ca28:	d9c00315 	stw	r7,12(sp)
 800ca2c:	df001315 	stw	fp,76(sp)
 800ca30:	ddc01215 	stw	r23,72(sp)
 800ca34:	dd801115 	stw	r22,68(sp)
 800ca38:	dc400c15 	stw	r17,48(sp)
 800ca3c:	dc000b15 	stw	r16,44(sp)
 800ca40:	800d5b80 	call	800d5b8 <_localeconv_r>
 800ca44:	14800017 	ldw	r18,0(r2)
 800ca48:	054200b4 	movhi	r21,2050
 800ca4c:	ad544804 	addi	r21,r21,20768
 800ca50:	9009883a 	mov	r4,r18
 800ca54:	8004afc0 	call	8004afc <strlen>
 800ca58:	1027883a 	mov	r19,r2
 800ca5c:	94c7883a 	add	r3,r18,r19
 800ca60:	18ffffc3 	ldbu	r3,-1(r3)
 800ca64:	a8800c03 	ldbu	r2,48(r21)
 800ca68:	d8c00205 	stb	r3,8(sp)
 800ca6c:	1000d726 	beq	r2,zero,800cdcc <__gethex+0x3c8>
 800ca70:	a2000017 	ldw	r8,0(r20)
 800ca74:	00c00c04 	movi	r3,48
 800ca78:	40800083 	ldbu	r2,2(r8)
 800ca7c:	10c14a1e 	bne	r2,r3,800cfa8 <__gethex+0x5a4>
 800ca80:	013fff84 	movi	r4,-2
 800ca84:	40c000c4 	addi	r3,r8,3
 800ca88:	2209c83a 	sub	r4,r4,r8
 800ca8c:	100b883a 	mov	r5,r2
 800ca90:	20ef883a 	add	r23,r4,r3
 800ca94:	182d883a 	mov	r22,r3
 800ca98:	18c00044 	addi	r3,r3,1
 800ca9c:	18bfffc3 	ldbu	r2,-1(r3)
 800caa0:	117ffb26 	beq	r2,r5,800ca90 <__alt_data_end+0xfc00ca90>
 800caa4:	a885883a 	add	r2,r21,r2
 800caa8:	10800003 	ldbu	r2,0(r2)
 800caac:	01c200b4 	movhi	r7,2050
 800cab0:	39d44804 	addi	r7,r7,20768
 800cab4:	1000c726 	beq	r2,zero,800cdd4 <__gethex+0x3d0>
 800cab8:	b0800003 	ldbu	r2,0(r22)
 800cabc:	0023883a 	mov	r17,zero
 800cac0:	0039883a 	mov	fp,zero
 800cac4:	3885883a 	add	r2,r7,r2
 800cac8:	10800003 	ldbu	r2,0(r2)
 800cacc:	b021883a 	mov	r16,r22
 800cad0:	10000526 	beq	r2,zero,800cae8 <__gethex+0xe4>
 800cad4:	84000044 	addi	r16,r16,1
 800cad8:	80800003 	ldbu	r2,0(r16)
 800cadc:	a885883a 	add	r2,r21,r2
 800cae0:	10800003 	ldbu	r2,0(r2)
 800cae4:	103ffb1e 	bne	r2,zero,800cad4 <__alt_data_end+0xfc00cad4>
 800cae8:	8009883a 	mov	r4,r16
 800caec:	900b883a 	mov	r5,r18
 800caf0:	980d883a 	mov	r6,r19
 800caf4:	800ed8c0 	call	800ed8c <strncmp>
 800caf8:	10007c26 	beq	r2,zero,800ccec <__gethex+0x2e8>
 800cafc:	80800003 	ldbu	r2,0(r16)
 800cb00:	e0000426 	beq	fp,zero,800cb14 <__gethex+0x110>
 800cb04:	8739c83a 	sub	fp,r16,fp
 800cb08:	e739883a 	add	fp,fp,fp
 800cb0c:	e739883a 	add	fp,fp,fp
 800cb10:	0739c83a 	sub	fp,zero,fp
 800cb14:	10803fcc 	andi	r2,r2,255
 800cb18:	01001404 	movi	r4,80
 800cb1c:	11007e26 	beq	r2,r4,800cd18 <__gethex+0x314>
 800cb20:	01001c04 	movi	r4,112
 800cb24:	11007c26 	beq	r2,r4,800cd18 <__gethex+0x314>
 800cb28:	800f883a 	mov	r7,r16
 800cb2c:	a4000015 	stw	r16,0(r20)
 800cb30:	88000e26 	beq	r17,zero,800cb6c <__gethex+0x168>
 800cb34:	b800b71e 	bne	r23,zero,800ce14 <__gethex+0x410>
 800cb38:	00800184 	movi	r2,6
 800cb3c:	dfc01417 	ldw	ra,80(sp)
 800cb40:	df001317 	ldw	fp,76(sp)
 800cb44:	ddc01217 	ldw	r23,72(sp)
 800cb48:	dd801117 	ldw	r22,68(sp)
 800cb4c:	dd401017 	ldw	r21,64(sp)
 800cb50:	dd000f17 	ldw	r20,60(sp)
 800cb54:	dcc00e17 	ldw	r19,56(sp)
 800cb58:	dc800d17 	ldw	r18,52(sp)
 800cb5c:	dc400c17 	ldw	r17,48(sp)
 800cb60:	dc000b17 	ldw	r16,44(sp)
 800cb64:	dec01504 	addi	sp,sp,84
 800cb68:	f800283a 	ret
 800cb6c:	3d85c83a 	sub	r2,r7,r22
 800cb70:	10bfffc4 	addi	r2,r2,-1
 800cb74:	00c001c4 	movi	r3,7
 800cb78:	000b883a 	mov	r5,zero
 800cb7c:	1880030e 	bge	r3,r2,800cb8c <__gethex+0x188>
 800cb80:	1005d07a 	srai	r2,r2,1
 800cb84:	29400044 	addi	r5,r5,1
 800cb88:	18bffd16 	blt	r3,r2,800cb80 <__alt_data_end+0xfc00cb80>
 800cb8c:	d9000117 	ldw	r4,4(sp)
 800cb90:	d9c00a15 	stw	r7,40(sp)
 800cb94:	800dae80 	call	800dae8 <_Balloc>
 800cb98:	d9c00a17 	ldw	r7,40(sp)
 800cb9c:	14000504 	addi	r16,r2,20
 800cba0:	102f883a 	mov	r23,r2
 800cba4:	8017883a 	mov	r11,r16
 800cba8:	0015883a 	mov	r10,zero
 800cbac:	b1c0132e 	bgeu	r22,r7,800cbfc <__gethex+0x1f8>
 800cbb0:	dc400203 	ldbu	r17,8(sp)
 800cbb4:	03800044 	movi	r14,1
 800cbb8:	0029883a 	mov	r20,zero
 800cbbc:	74ddc83a 	sub	r14,r14,r19
 800cbc0:	03000804 	movi	r12,32
 800cbc4:	38bfffc3 	ldbu	r2,-1(r7)
 800cbc8:	3bffffc4 	addi	r15,r7,-1
 800cbcc:	14402f26 	beq	r2,r17,800cc8c <__gethex+0x288>
 800cbd0:	a3004926 	beq	r20,r12,800ccf8 <__gethex+0x2f4>
 800cbd4:	a009883a 	mov	r4,r20
 800cbd8:	a5000104 	addi	r20,r20,4
 800cbdc:	38bfffc3 	ldbu	r2,-1(r7)
 800cbe0:	780f883a 	mov	r7,r15
 800cbe4:	a885883a 	add	r2,r21,r2
 800cbe8:	10c00003 	ldbu	r3,0(r2)
 800cbec:	18c003cc 	andi	r3,r3,15
 800cbf0:	1906983a 	sll	r3,r3,r4
 800cbf4:	50d4b03a 	or	r10,r10,r3
 800cbf8:	b1fff236 	bltu	r22,r7,800cbc4 <__alt_data_end+0xfc00cbc4>
 800cbfc:	58800104 	addi	r2,r11,4
 800cc00:	1405c83a 	sub	r2,r2,r16
 800cc04:	1005d0ba 	srai	r2,r2,2
 800cc08:	5a800015 	stw	r10,0(r11)
 800cc0c:	5009883a 	mov	r4,r10
 800cc10:	b8800415 	stw	r2,16(r23)
 800cc14:	1022917a 	slli	r17,r2,5
 800cc18:	800ddd00 	call	800ddd0 <__hi0bits>
 800cc1c:	d8c00017 	ldw	r3,0(sp)
 800cc20:	8885c83a 	sub	r2,r17,r2
 800cc24:	1c800017 	ldw	r18,0(r3)
 800cc28:	9080ba16 	blt	r18,r2,800cf14 <__gethex+0x510>
 800cc2c:	1480d416 	blt	r2,r18,800cf80 <__gethex+0x57c>
 800cc30:	0027883a 	mov	r19,zero
 800cc34:	d8c00017 	ldw	r3,0(sp)
 800cc38:	18800217 	ldw	r2,8(r3)
 800cc3c:	17008416 	blt	r2,fp,800ce50 <__gethex+0x44c>
 800cc40:	d8c00017 	ldw	r3,0(sp)
 800cc44:	18800117 	ldw	r2,4(r3)
 800cc48:	e0809f0e 	bge	fp,r2,800cec8 <__gethex+0x4c4>
 800cc4c:	1739c83a 	sub	fp,r2,fp
 800cc50:	e480dc16 	blt	fp,r18,800cfc4 <__gethex+0x5c0>
 800cc54:	18c00317 	ldw	r3,12(r3)
 800cc58:	01000084 	movi	r4,2
 800cc5c:	19013c26 	beq	r3,r4,800d150 <__gethex+0x74c>
 800cc60:	010000c4 	movi	r4,3
 800cc64:	19011d26 	beq	r3,r4,800d0dc <__gethex+0x6d8>
 800cc68:	01000044 	movi	r4,1
 800cc6c:	19012f26 	beq	r3,r4,800d12c <__gethex+0x728>
 800cc70:	d9000117 	ldw	r4,4(sp)
 800cc74:	b80b883a 	mov	r5,r23
 800cc78:	800db900 	call	800db90 <_Bfree>
 800cc7c:	d8801517 	ldw	r2,84(sp)
 800cc80:	10000015 	stw	zero,0(r2)
 800cc84:	00801404 	movi	r2,80
 800cc88:	003fac06 	br	800cb3c <__alt_data_end+0xfc00cb3c>
 800cc8c:	7b87883a 	add	r3,r15,r14
 800cc90:	1dbfcf36 	bltu	r3,r22,800cbd0 <__alt_data_end+0xfc00cbd0>
 800cc94:	1809883a 	mov	r4,r3
 800cc98:	900b883a 	mov	r5,r18
 800cc9c:	980d883a 	mov	r6,r19
 800cca0:	d8c00515 	stw	r3,20(sp)
 800cca4:	d9c00a15 	stw	r7,40(sp)
 800cca8:	da800615 	stw	r10,24(sp)
 800ccac:	dac00715 	stw	r11,28(sp)
 800ccb0:	db000915 	stw	r12,36(sp)
 800ccb4:	db800815 	stw	r14,32(sp)
 800ccb8:	dbc00415 	stw	r15,16(sp)
 800ccbc:	800ed8c0 	call	800ed8c <strncmp>
 800ccc0:	d8c00517 	ldw	r3,20(sp)
 800ccc4:	d9c00a17 	ldw	r7,40(sp)
 800ccc8:	da800617 	ldw	r10,24(sp)
 800cccc:	dac00717 	ldw	r11,28(sp)
 800ccd0:	db000917 	ldw	r12,36(sp)
 800ccd4:	db800817 	ldw	r14,32(sp)
 800ccd8:	dbc00417 	ldw	r15,16(sp)
 800ccdc:	103fbc1e 	bne	r2,zero,800cbd0 <__alt_data_end+0xfc00cbd0>
 800cce0:	180f883a 	mov	r7,r3
 800cce4:	b1ffb736 	bltu	r22,r7,800cbc4 <__alt_data_end+0xfc00cbc4>
 800cce8:	003fc406 	br	800cbfc <__alt_data_end+0xfc00cbfc>
 800ccec:	e000cf26 	beq	fp,zero,800d02c <__gethex+0x628>
 800ccf0:	80800003 	ldbu	r2,0(r16)
 800ccf4:	003f8306 	br	800cb04 <__alt_data_end+0xfc00cb04>
 800ccf8:	05000104 	movi	r20,4
 800ccfc:	5a800015 	stw	r10,0(r11)
 800cd00:	0009883a 	mov	r4,zero
 800cd04:	5d17883a 	add	r11,r11,r20
 800cd08:	0015883a 	mov	r10,zero
 800cd0c:	003fb306 	br	800cbdc <__alt_data_end+0xfc00cbdc>
 800cd10:	0039883a 	mov	fp,zero
 800cd14:	04400044 	movi	r17,1
 800cd18:	80800043 	ldbu	r2,1(r16)
 800cd1c:	01400ac4 	movi	r5,43
 800cd20:	11003fcc 	andi	r4,r2,255
 800cd24:	21407926 	beq	r4,r5,800cf0c <__gethex+0x508>
 800cd28:	01400b44 	movi	r5,45
 800cd2c:	21404f26 	beq	r4,r5,800ce6c <__gethex+0x468>
 800cd30:	81400044 	addi	r5,r16,1
 800cd34:	000d883a 	mov	r6,zero
 800cd38:	10803fcc 	andi	r2,r2,255
 800cd3c:	a885883a 	add	r2,r21,r2
 800cd40:	11000003 	ldbu	r4,0(r2)
 800cd44:	02c00604 	movi	r11,24
 800cd48:	20bfffc4 	addi	r2,r4,-1
 800cd4c:	10803fcc 	andi	r2,r2,255
 800cd50:	58bf7536 	bltu	r11,r2,800cb28 <__alt_data_end+0xfc00cb28>
 800cd54:	29c00043 	ldbu	r7,1(r5)
 800cd58:	20803fcc 	andi	r2,r4,255
 800cd5c:	010200b4 	movhi	r4,2050
 800cd60:	21144804 	addi	r4,r4,20768
 800cd64:	21c9883a 	add	r4,r4,r7
 800cd68:	23000003 	ldbu	r12,0(r4)
 800cd6c:	10bffc04 	addi	r2,r2,-16
 800cd70:	29400044 	addi	r5,r5,1
 800cd74:	613fffc4 	addi	r4,r12,-1
 800cd78:	21003fcc 	andi	r4,r4,255
 800cd7c:	63003fcc 	andi	r12,r12,255
 800cd80:	59000b36 	bltu	r11,r4,800cdb0 <__gethex+0x3ac>
 800cd84:	29400044 	addi	r5,r5,1
 800cd88:	29000003 	ldbu	r4,0(r5)
 800cd8c:	108002a4 	muli	r2,r2,10
 800cd90:	a909883a 	add	r4,r21,r4
 800cd94:	21c00003 	ldbu	r7,0(r4)
 800cd98:	1305883a 	add	r2,r2,r12
 800cd9c:	10bffc04 	addi	r2,r2,-16
 800cda0:	393fffc4 	addi	r4,r7,-1
 800cda4:	21003fcc 	andi	r4,r4,255
 800cda8:	3b003fcc 	andi	r12,r7,255
 800cdac:	593ff52e 	bgeu	r11,r4,800cd84 <__alt_data_end+0xfc00cd84>
 800cdb0:	0189c83a 	sub	r4,zero,r6
 800cdb4:	1104f03a 	xor	r2,r2,r4
 800cdb8:	118d883a 	add	r6,r2,r6
 800cdbc:	800f883a 	mov	r7,r16
 800cdc0:	e1b9883a 	add	fp,fp,r6
 800cdc4:	2821883a 	mov	r16,r5
 800cdc8:	003f5806 	br	800cb2c <__alt_data_end+0xfc00cb2c>
 800cdcc:	800c9800 	call	800c980 <__hexdig_init>
 800cdd0:	003f2706 	br	800ca70 <__alt_data_end+0xfc00ca70>
 800cdd4:	b009883a 	mov	r4,r22
 800cdd8:	900b883a 	mov	r5,r18
 800cddc:	980d883a 	mov	r6,r19
 800cde0:	d9c00a15 	stw	r7,40(sp)
 800cde4:	800ed8c0 	call	800ed8c <strncmp>
 800cde8:	d9c00a17 	ldw	r7,40(sp)
 800cdec:	10002326 	beq	r2,zero,800ce7c <__gethex+0x478>
 800cdf0:	b0800003 	ldbu	r2,0(r22)
 800cdf4:	b021883a 	mov	r16,r22
 800cdf8:	10803fcc 	andi	r2,r2,255
 800cdfc:	00c01404 	movi	r3,80
 800ce00:	10ffc326 	beq	r2,r3,800cd10 <__alt_data_end+0xfc00cd10>
 800ce04:	00c01c04 	movi	r3,112
 800ce08:	10ffc126 	beq	r2,r3,800cd10 <__alt_data_end+0xfc00cd10>
 800ce0c:	a4000015 	stw	r16,0(r20)
 800ce10:	b83f4926 	beq	r23,zero,800cb38 <__alt_data_end+0xfc00cb38>
 800ce14:	0005883a 	mov	r2,zero
 800ce18:	003f4806 	br	800cb3c <__alt_data_end+0xfc00cb3c>
 800ce1c:	84e7883a 	add	r19,r16,r19
 800ce20:	993fff17 	ldw	r4,-4(r19)
 800ce24:	800ddd00 	call	800ddd0 <__hi0bits>
 800ce28:	00c00804 	movi	r3,32
 800ce2c:	1c63c83a 	sub	r17,r3,r17
 800ce30:	1440a60e 	bge	r2,r17,800d0cc <__gethex+0x6c8>
 800ce34:	b809883a 	mov	r4,r23
 800ce38:	01400044 	movi	r5,1
 800ce3c:	800c8800 	call	800c880 <rshift>
 800ce40:	d8c00017 	ldw	r3,0(sp)
 800ce44:	e7000044 	addi	fp,fp,1
 800ce48:	18800217 	ldw	r2,8(r3)
 800ce4c:	17009f0e 	bge	r2,fp,800d0cc <__gethex+0x6c8>
 800ce50:	d9000117 	ldw	r4,4(sp)
 800ce54:	b80b883a 	mov	r5,r23
 800ce58:	800db900 	call	800db90 <_Bfree>
 800ce5c:	d9001517 	ldw	r4,84(sp)
 800ce60:	008028c4 	movi	r2,163
 800ce64:	20000015 	stw	zero,0(r4)
 800ce68:	003f3406 	br	800cb3c <__alt_data_end+0xfc00cb3c>
 800ce6c:	01800044 	movi	r6,1
 800ce70:	80800083 	ldbu	r2,2(r16)
 800ce74:	81400084 	addi	r5,r16,2
 800ce78:	003faf06 	br	800cd38 <__alt_data_end+0xfc00cd38>
 800ce7c:	b4e1883a 	add	r16,r22,r19
 800ce80:	80c00003 	ldbu	r3,0(r16)
 800ce84:	19003fcc 	andi	r4,r3,255
 800ce88:	3905883a 	add	r2,r7,r4
 800ce8c:	10800003 	ldbu	r2,0(r2)
 800ce90:	10004826 	beq	r2,zero,800cfb4 <__gethex+0x5b0>
 800ce94:	00c00c04 	movi	r3,48
 800ce98:	802d883a 	mov	r22,r16
 800ce9c:	20c0061e 	bne	r4,r3,800ceb8 <__gethex+0x4b4>
 800cea0:	2007883a 	mov	r3,r4
 800cea4:	b5800044 	addi	r22,r22,1
 800cea8:	b0800003 	ldbu	r2,0(r22)
 800ceac:	10fffd26 	beq	r2,r3,800cea4 <__alt_data_end+0xfc00cea4>
 800ceb0:	a885883a 	add	r2,r21,r2
 800ceb4:	10800003 	ldbu	r2,0(r2)
 800ceb8:	1023003a 	cmpeq	r17,r2,zero
 800cebc:	8039883a 	mov	fp,r16
 800cec0:	05c00044 	movi	r23,1
 800cec4:	003f0106 	br	800cacc <__alt_data_end+0xfc00cacc>
 800cec8:	04400044 	movi	r17,1
 800cecc:	98000926 	beq	r19,zero,800cef4 <__gethex+0x4f0>
 800ced0:	d8c00017 	ldw	r3,0(sp)
 800ced4:	18800317 	ldw	r2,12(r3)
 800ced8:	00c00084 	movi	r3,2
 800cedc:	10c06126 	beq	r2,r3,800d064 <__gethex+0x660>
 800cee0:	00c000c4 	movi	r3,3
 800cee4:	10c06326 	beq	r2,r3,800d074 <__gethex+0x670>
 800cee8:	00c00044 	movi	r3,1
 800ceec:	10c08626 	beq	r2,r3,800d108 <__gethex+0x704>
 800cef0:	8c400414 	ori	r17,r17,16
 800cef4:	d9001517 	ldw	r4,84(sp)
 800cef8:	d8c00317 	ldw	r3,12(sp)
 800cefc:	8805883a 	mov	r2,r17
 800cf00:	25c00015 	stw	r23,0(r4)
 800cf04:	1f000015 	stw	fp,0(r3)
 800cf08:	003f0c06 	br	800cb3c <__alt_data_end+0xfc00cb3c>
 800cf0c:	000d883a 	mov	r6,zero
 800cf10:	003fd706 	br	800ce70 <__alt_data_end+0xfc00ce70>
 800cf14:	14a3c83a 	sub	r17,r2,r18
 800cf18:	b809883a 	mov	r4,r23
 800cf1c:	880b883a 	mov	r5,r17
 800cf20:	800e9e80 	call	800e9e8 <__any_on>
 800cf24:	10002526 	beq	r2,zero,800cfbc <__gethex+0x5b8>
 800cf28:	897fffc4 	addi	r5,r17,-1
 800cf2c:	2807d17a 	srai	r3,r5,5
 800cf30:	290007cc 	andi	r4,r5,31
 800cf34:	04c00044 	movi	r19,1
 800cf38:	18c7883a 	add	r3,r3,r3
 800cf3c:	18c7883a 	add	r3,r3,r3
 800cf40:	80c7883a 	add	r3,r16,r3
 800cf44:	9908983a 	sll	r4,r19,r4
 800cf48:	18c00017 	ldw	r3,0(r3)
 800cf4c:	20c6703a 	and	r3,r4,r3
 800cf50:	18000626 	beq	r3,zero,800cf6c <__gethex+0x568>
 800cf54:	9940730e 	bge	r19,r5,800d124 <__gethex+0x720>
 800cf58:	b809883a 	mov	r4,r23
 800cf5c:	897fff84 	addi	r5,r17,-2
 800cf60:	800e9e80 	call	800e9e8 <__any_on>
 800cf64:	10006f26 	beq	r2,zero,800d124 <__gethex+0x720>
 800cf68:	04c000c4 	movi	r19,3
 800cf6c:	b809883a 	mov	r4,r23
 800cf70:	880b883a 	mov	r5,r17
 800cf74:	800c8800 	call	800c880 <rshift>
 800cf78:	e479883a 	add	fp,fp,r17
 800cf7c:	003f2d06 	br	800cc34 <__alt_data_end+0xfc00cc34>
 800cf80:	d9000117 	ldw	r4,4(sp)
 800cf84:	90a1c83a 	sub	r16,r18,r2
 800cf88:	b80b883a 	mov	r5,r23
 800cf8c:	800d883a 	mov	r6,r16
 800cf90:	800e2600 	call	800e260 <__lshift>
 800cf94:	e439c83a 	sub	fp,fp,r16
 800cf98:	102f883a 	mov	r23,r2
 800cf9c:	14000504 	addi	r16,r2,20
 800cfa0:	0027883a 	mov	r19,zero
 800cfa4:	003f2306 	br	800cc34 <__alt_data_end+0xfc00cc34>
 800cfa8:	45800084 	addi	r22,r8,2
 800cfac:	002f883a 	mov	r23,zero
 800cfb0:	003ebc06 	br	800caa4 <__alt_data_end+0xfc00caa4>
 800cfb4:	1805883a 	mov	r2,r3
 800cfb8:	003f8f06 	br	800cdf8 <__alt_data_end+0xfc00cdf8>
 800cfbc:	0027883a 	mov	r19,zero
 800cfc0:	003fea06 	br	800cf6c <__alt_data_end+0xfc00cf6c>
 800cfc4:	e47fffc4 	addi	r17,fp,-1
 800cfc8:	9800421e 	bne	r19,zero,800d0d4 <__gethex+0x6d0>
 800cfcc:	0440040e 	bge	zero,r17,800cfe0 <__gethex+0x5dc>
 800cfd0:	b809883a 	mov	r4,r23
 800cfd4:	880b883a 	mov	r5,r17
 800cfd8:	800e9e80 	call	800e9e8 <__any_on>
 800cfdc:	1027883a 	mov	r19,r2
 800cfe0:	8805d17a 	srai	r2,r17,5
 800cfe4:	00c00044 	movi	r3,1
 800cfe8:	8c4007cc 	andi	r17,r17,31
 800cfec:	1085883a 	add	r2,r2,r2
 800cff0:	1085883a 	add	r2,r2,r2
 800cff4:	8085883a 	add	r2,r16,r2
 800cff8:	1c62983a 	sll	r17,r3,r17
 800cffc:	10800017 	ldw	r2,0(r2)
 800d000:	8884703a 	and	r2,r17,r2
 800d004:	10000126 	beq	r2,zero,800d00c <__gethex+0x608>
 800d008:	9cc00094 	ori	r19,r19,2
 800d00c:	e00b883a 	mov	r5,fp
 800d010:	b809883a 	mov	r4,r23
 800d014:	800c8800 	call	800c880 <rshift>
 800d018:	d8c00017 	ldw	r3,0(sp)
 800d01c:	9725c83a 	sub	r18,r18,fp
 800d020:	04400084 	movi	r17,2
 800d024:	1f000117 	ldw	fp,4(r3)
 800d028:	003fa806 	br	800cecc <__alt_data_end+0xfc00cecc>
 800d02c:	84f9883a 	add	fp,r16,r19
 800d030:	e0800003 	ldbu	r2,0(fp)
 800d034:	e021883a 	mov	r16,fp
 800d038:	11003fcc 	andi	r4,r2,255
 800d03c:	a909883a 	add	r4,r21,r4
 800d040:	21000003 	ldbu	r4,0(r4)
 800d044:	203eaf26 	beq	r4,zero,800cb04 <__alt_data_end+0xfc00cb04>
 800d048:	84000044 	addi	r16,r16,1
 800d04c:	80800003 	ldbu	r2,0(r16)
 800d050:	11003fcc 	andi	r4,r2,255
 800d054:	a909883a 	add	r4,r21,r4
 800d058:	21000003 	ldbu	r4,0(r4)
 800d05c:	203ffa1e 	bne	r4,zero,800d048 <__alt_data_end+0xfc00d048>
 800d060:	003ea806 	br	800cb04 <__alt_data_end+0xfc00cb04>
 800d064:	d9001617 	ldw	r4,88(sp)
 800d068:	00800044 	movi	r2,1
 800d06c:	1109c83a 	sub	r4,r2,r4
 800d070:	d9001615 	stw	r4,88(sp)
 800d074:	d8801617 	ldw	r2,88(sp)
 800d078:	103f9d26 	beq	r2,zero,800cef0 <__alt_data_end+0xfc00cef0>
 800d07c:	bd000417 	ldw	r20,16(r23)
 800d080:	8005883a 	mov	r2,r16
 800d084:	013fffc4 	movi	r4,-1
 800d088:	a527883a 	add	r19,r20,r20
 800d08c:	9ce7883a 	add	r19,r19,r19
 800d090:	84cb883a 	add	r5,r16,r19
 800d094:	00000306 	br	800d0a4 <__gethex+0x6a0>
 800d098:	10000015 	stw	zero,0(r2)
 800d09c:	10800104 	addi	r2,r2,4
 800d0a0:	11402e2e 	bgeu	r2,r5,800d15c <__gethex+0x758>
 800d0a4:	10c00017 	ldw	r3,0(r2)
 800d0a8:	193ffb26 	beq	r3,r4,800d098 <__alt_data_end+0xfc00d098>
 800d0ac:	18c00044 	addi	r3,r3,1
 800d0b0:	10c00015 	stw	r3,0(r2)
 800d0b4:	00800084 	movi	r2,2
 800d0b8:	88803426 	beq	r17,r2,800d18c <__gethex+0x788>
 800d0bc:	b8800417 	ldw	r2,16(r23)
 800d0c0:	a0bf5c16 	blt	r20,r2,800ce34 <__alt_data_end+0xfc00ce34>
 800d0c4:	944007cc 	andi	r17,r18,31
 800d0c8:	883f541e 	bne	r17,zero,800ce1c <__alt_data_end+0xfc00ce1c>
 800d0cc:	04400844 	movi	r17,33
 800d0d0:	003f8806 	br	800cef4 <__alt_data_end+0xfc00cef4>
 800d0d4:	04c00044 	movi	r19,1
 800d0d8:	003fc106 	br	800cfe0 <__alt_data_end+0xfc00cfe0>
 800d0dc:	d8c01617 	ldw	r3,88(sp)
 800d0e0:	183ee326 	beq	r3,zero,800cc70 <__alt_data_end+0xfc00cc70>
 800d0e4:	d8c00317 	ldw	r3,12(sp)
 800d0e8:	d9001517 	ldw	r4,84(sp)
 800d0ec:	18800015 	stw	r2,0(r3)
 800d0f0:	00800044 	movi	r2,1
 800d0f4:	b8800415 	stw	r2,16(r23)
 800d0f8:	80800015 	stw	r2,0(r16)
 800d0fc:	25c00015 	stw	r23,0(r4)
 800d100:	00801884 	movi	r2,98
 800d104:	003e8d06 	br	800cb3c <__alt_data_end+0xfc00cb3c>
 800d108:	9880008c 	andi	r2,r19,2
 800d10c:	103f7826 	beq	r2,zero,800cef0 <__alt_data_end+0xfc00cef0>
 800d110:	80800017 	ldw	r2,0(r16)
 800d114:	9884b03a 	or	r2,r19,r2
 800d118:	10c4703a 	and	r2,r2,r3
 800d11c:	103fd71e 	bne	r2,zero,800d07c <__alt_data_end+0xfc00d07c>
 800d120:	003f7306 	br	800cef0 <__alt_data_end+0xfc00cef0>
 800d124:	04c00084 	movi	r19,2
 800d128:	003f9006 	br	800cf6c <__alt_data_end+0xfc00cf6c>
 800d12c:	e4bed01e 	bne	fp,r18,800cc70 <__alt_data_end+0xfc00cc70>
 800d130:	1cbfec0e 	bge	r3,r18,800d0e4 <__alt_data_end+0xfc00d0e4>
 800d134:	b809883a 	mov	r4,r23
 800d138:	917fffc4 	addi	r5,r18,-1
 800d13c:	800e9e80 	call	800e9e8 <__any_on>
 800d140:	103ecb26 	beq	r2,zero,800cc70 <__alt_data_end+0xfc00cc70>
 800d144:	d8c00017 	ldw	r3,0(sp)
 800d148:	18800117 	ldw	r2,4(r3)
 800d14c:	003fe506 	br	800d0e4 <__alt_data_end+0xfc00d0e4>
 800d150:	d9001617 	ldw	r4,88(sp)
 800d154:	203fe326 	beq	r4,zero,800d0e4 <__alt_data_end+0xfc00d0e4>
 800d158:	003ec506 	br	800cc70 <__alt_data_end+0xfc00cc70>
 800d15c:	b8800217 	ldw	r2,8(r23)
 800d160:	a080100e 	bge	r20,r2,800d1a4 <__gethex+0x7a0>
 800d164:	a009883a 	mov	r4,r20
 800d168:	20c00144 	addi	r3,r4,5
 800d16c:	18c7883a 	add	r3,r3,r3
 800d170:	21000044 	addi	r4,r4,1
 800d174:	18c7883a 	add	r3,r3,r3
 800d178:	b9000415 	stw	r4,16(r23)
 800d17c:	b8c7883a 	add	r3,r23,r3
 800d180:	00800044 	movi	r2,1
 800d184:	18800015 	stw	r2,0(r3)
 800d188:	003fca06 	br	800d0b4 <__alt_data_end+0xfc00d0b4>
 800d18c:	d8c00017 	ldw	r3,0(sp)
 800d190:	18800017 	ldw	r2,0(r3)
 800d194:	10bfffc4 	addi	r2,r2,-1
 800d198:	14801526 	beq	r2,r18,800d1f0 <__gethex+0x7ec>
 800d19c:	04400884 	movi	r17,34
 800d1a0:	003f5406 	br	800cef4 <__alt_data_end+0xfc00cef4>
 800d1a4:	b9400117 	ldw	r5,4(r23)
 800d1a8:	d9000117 	ldw	r4,4(sp)
 800d1ac:	29400044 	addi	r5,r5,1
 800d1b0:	800dae80 	call	800dae8 <_Balloc>
 800d1b4:	b9800417 	ldw	r6,16(r23)
 800d1b8:	b9400304 	addi	r5,r23,12
 800d1bc:	11000304 	addi	r4,r2,12
 800d1c0:	31800084 	addi	r6,r6,2
 800d1c4:	318d883a 	add	r6,r6,r6
 800d1c8:	318d883a 	add	r6,r6,r6
 800d1cc:	1021883a 	mov	r16,r2
 800d1d0:	800d88c0 	call	800d88c <memcpy>
 800d1d4:	d9000117 	ldw	r4,4(sp)
 800d1d8:	b80b883a 	mov	r5,r23
 800d1dc:	802f883a 	mov	r23,r16
 800d1e0:	800db900 	call	800db90 <_Bfree>
 800d1e4:	81000417 	ldw	r4,16(r16)
 800d1e8:	84000504 	addi	r16,r16,20
 800d1ec:	003fde06 	br	800d168 <__alt_data_end+0xfc00d168>
 800d1f0:	9005d17a 	srai	r2,r18,5
 800d1f4:	944007cc 	andi	r17,r18,31
 800d1f8:	00c00044 	movi	r3,1
 800d1fc:	1085883a 	add	r2,r2,r2
 800d200:	1085883a 	add	r2,r2,r2
 800d204:	8085883a 	add	r2,r16,r2
 800d208:	1c62983a 	sll	r17,r3,r17
 800d20c:	10800017 	ldw	r2,0(r2)
 800d210:	8884703a 	and	r2,r17,r2
 800d214:	1023003a 	cmpeq	r17,r2,zero
 800d218:	8c400844 	addi	r17,r17,33
 800d21c:	003f3506 	br	800cef4 <__alt_data_end+0xfc00cef4>

0800d220 <__hexnan>:
 800d220:	defff504 	addi	sp,sp,-44
 800d224:	dc000315 	stw	r16,12(sp)
 800d228:	040200b4 	movhi	r16,2050
 800d22c:	84144804 	addi	r16,r16,20768
 800d230:	80800c03 	ldbu	r2,48(r16)
 800d234:	dfc00a15 	stw	ra,40(sp)
 800d238:	dd800915 	stw	r22,36(sp)
 800d23c:	dd400815 	stw	r21,32(sp)
 800d240:	dd000715 	stw	r20,28(sp)
 800d244:	dcc00615 	stw	r19,24(sp)
 800d248:	dc800515 	stw	r18,20(sp)
 800d24c:	dc400415 	stw	r17,16(sp)
 800d250:	10006c26 	beq	r2,zero,800d404 <__hexnan+0x1e4>
 800d254:	2cc00017 	ldw	r19,0(r5)
 800d258:	981dd17a 	srai	r14,r19,5
 800d25c:	9cc007cc 	andi	r19,r19,31
 800d260:	739d883a 	add	r14,r14,r14
 800d264:	739d883a 	add	r14,r14,r14
 800d268:	339d883a 	add	r14,r6,r14
 800d26c:	98000126 	beq	r19,zero,800d274 <__hexnan+0x54>
 800d270:	73800104 	addi	r14,r14,4
 800d274:	22000017 	ldw	r8,0(r4)
 800d278:	72ffff04 	addi	r11,r14,-4
 800d27c:	703fff15 	stw	zero,-4(r14)
 800d280:	581b883a 	mov	r13,r11
 800d284:	580f883a 	mov	r7,r11
 800d288:	000b883a 	mov	r5,zero
 800d28c:	001f883a 	mov	r15,zero
 800d290:	0019883a 	mov	r12,zero
 800d294:	04800204 	movi	r18,8
 800d298:	04400804 	movi	r17,32
 800d29c:	050001c4 	movi	r20,7
 800d2a0:	42000044 	addi	r8,r8,1
 800d2a4:	40c00003 	ldbu	r3,0(r8)
 800d2a8:	18001d26 	beq	r3,zero,800d320 <__hexnan+0x100>
 800d2ac:	80c5883a 	add	r2,r16,r3
 800d2b0:	10800003 	ldbu	r2,0(r2)
 800d2b4:	12403fcc 	andi	r9,r2,255
 800d2b8:	4800301e 	bne	r9,zero,800d37c <__hexnan+0x15c>
 800d2bc:	88c04436 	bltu	r17,r3,800d3d0 <__hexnan+0x1b0>
 800d2c0:	7b3ff70e 	bge	r15,r12,800d2a0 <__alt_data_end+0xfc00d2a0>
 800d2c4:	3b40112e 	bgeu	r7,r13,800d30c <__hexnan+0xec>
 800d2c8:	a1401016 	blt	r20,r5,800d30c <__hexnan+0xec>
 800d2cc:	914bc83a 	sub	r5,r18,r5
 800d2d0:	294b883a 	add	r5,r5,r5
 800d2d4:	3a800017 	ldw	r10,0(r7)
 800d2d8:	294b883a 	add	r5,r5,r5
 800d2dc:	896dc83a 	sub	r22,r17,r5
 800d2e0:	38c00104 	addi	r3,r7,4
 800d2e4:	3805883a 	mov	r2,r7
 800d2e8:	1d400017 	ldw	r21,0(r3)
 800d2ec:	10800104 	addi	r2,r2,4
 800d2f0:	18c00104 	addi	r3,r3,4
 800d2f4:	ad92983a 	sll	r9,r21,r22
 800d2f8:	5252b03a 	or	r9,r10,r9
 800d2fc:	a954d83a 	srl	r10,r21,r5
 800d300:	127fff15 	stw	r9,-4(r2)
 800d304:	1abfff15 	stw	r10,-4(r3)
 800d308:	137ff736 	bltu	r2,r13,800d2e8 <__alt_data_end+0xfc00d2e8>
 800d30c:	31c02a36 	bltu	r6,r7,800d3b8 <__hexnan+0x198>
 800d310:	42000044 	addi	r8,r8,1
 800d314:	40c00003 	ldbu	r3,0(r8)
 800d318:	01400204 	movi	r5,8
 800d31c:	183fe31e 	bne	r3,zero,800d2ac <__alt_data_end+0xfc00d2ac>
 800d320:	3805883a 	mov	r2,r7
 800d324:	60002c26 	beq	r12,zero,800d3d8 <__hexnan+0x1b8>
 800d328:	3b40022e 	bgeu	r7,r13,800d334 <__hexnan+0x114>
 800d32c:	00c001c4 	movi	r3,7
 800d330:	19404e0e 	bge	r3,r5,800d46c <__hexnan+0x24c>
 800d334:	31c03b2e 	bgeu	r6,r7,800d424 <__hexnan+0x204>
 800d338:	3005883a 	mov	r2,r6
 800d33c:	38c00017 	ldw	r3,0(r7)
 800d340:	10800104 	addi	r2,r2,4
 800d344:	39c00104 	addi	r7,r7,4
 800d348:	10ffff15 	stw	r3,-4(r2)
 800d34c:	59fffb2e 	bgeu	r11,r7,800d33c <__alt_data_end+0xfc00d33c>
 800d350:	10000015 	stw	zero,0(r2)
 800d354:	10800104 	addi	r2,r2,4
 800d358:	58bffd2e 	bgeu	r11,r2,800d350 <__alt_data_end+0xfc00d350>
 800d35c:	70bfff17 	ldw	r2,-4(r14)
 800d360:	1000041e 	bne	r2,zero,800d374 <__hexnan+0x154>
 800d364:	32c03826 	beq	r6,r11,800d448 <__hexnan+0x228>
 800d368:	5affff04 	addi	r11,r11,-4
 800d36c:	58800017 	ldw	r2,0(r11)
 800d370:	103ffc26 	beq	r2,zero,800d364 <__alt_data_end+0xfc00d364>
 800d374:	00800144 	movi	r2,5
 800d378:	00001806 	br	800d3dc <__hexnan+0x1bc>
 800d37c:	29400044 	addi	r5,r5,1
 800d380:	63000044 	addi	r12,r12,1
 800d384:	91400616 	blt	r18,r5,800d3a0 <__hexnan+0x180>
 800d388:	38c00017 	ldw	r3,0(r7)
 800d38c:	1806913a 	slli	r3,r3,4
 800d390:	108003cc 	andi	r2,r2,15
 800d394:	1884b03a 	or	r2,r3,r2
 800d398:	38800015 	stw	r2,0(r7)
 800d39c:	003fc006 	br	800d2a0 <__alt_data_end+0xfc00d2a0>
 800d3a0:	31ffbf2e 	bgeu	r6,r7,800d2a0 <__alt_data_end+0xfc00d2a0>
 800d3a4:	383fff15 	stw	zero,-4(r7)
 800d3a8:	0007883a 	mov	r3,zero
 800d3ac:	39ffff04 	addi	r7,r7,-4
 800d3b0:	01400044 	movi	r5,1
 800d3b4:	003ff606 	br	800d390 <__alt_data_end+0xfc00d390>
 800d3b8:	3b7fff04 	addi	r13,r7,-4
 800d3bc:	383fff15 	stw	zero,-4(r7)
 800d3c0:	601f883a 	mov	r15,r12
 800d3c4:	680f883a 	mov	r7,r13
 800d3c8:	000b883a 	mov	r5,zero
 800d3cc:	003fb406 	br	800d2a0 <__alt_data_end+0xfc00d2a0>
 800d3d0:	00800a44 	movi	r2,41
 800d3d4:	18802026 	beq	r3,r2,800d458 <__hexnan+0x238>
 800d3d8:	00800104 	movi	r2,4
 800d3dc:	dfc00a17 	ldw	ra,40(sp)
 800d3e0:	dd800917 	ldw	r22,36(sp)
 800d3e4:	dd400817 	ldw	r21,32(sp)
 800d3e8:	dd000717 	ldw	r20,28(sp)
 800d3ec:	dcc00617 	ldw	r19,24(sp)
 800d3f0:	dc800517 	ldw	r18,20(sp)
 800d3f4:	dc400417 	ldw	r17,16(sp)
 800d3f8:	dc000317 	ldw	r16,12(sp)
 800d3fc:	dec00b04 	addi	sp,sp,44
 800d400:	f800283a 	ret
 800d404:	d9000015 	stw	r4,0(sp)
 800d408:	d9400115 	stw	r5,4(sp)
 800d40c:	d9800215 	stw	r6,8(sp)
 800d410:	800c9800 	call	800c980 <__hexdig_init>
 800d414:	d9800217 	ldw	r6,8(sp)
 800d418:	d9400117 	ldw	r5,4(sp)
 800d41c:	d9000017 	ldw	r4,0(sp)
 800d420:	003f8c06 	br	800d254 <__alt_data_end+0xfc00d254>
 800d424:	983fcd26 	beq	r19,zero,800d35c <__alt_data_end+0xfc00d35c>
 800d428:	00c00804 	movi	r3,32
 800d42c:	1ce7c83a 	sub	r19,r3,r19
 800d430:	00ffffc4 	movi	r3,-1
 800d434:	70bfff17 	ldw	r2,-4(r14)
 800d438:	1cc6d83a 	srl	r3,r3,r19
 800d43c:	1884703a 	and	r2,r3,r2
 800d440:	70bfff15 	stw	r2,-4(r14)
 800d444:	003fc606 	br	800d360 <__alt_data_end+0xfc00d360>
 800d448:	00800044 	movi	r2,1
 800d44c:	58800015 	stw	r2,0(r11)
 800d450:	00800144 	movi	r2,5
 800d454:	003fe106 	br	800d3dc <__alt_data_end+0xfc00d3dc>
 800d458:	42000044 	addi	r8,r8,1
 800d45c:	22000015 	stw	r8,0(r4)
 800d460:	3805883a 	mov	r2,r7
 800d464:	603fb01e 	bne	r12,zero,800d328 <__alt_data_end+0xfc00d328>
 800d468:	003fdb06 	br	800d3d8 <__alt_data_end+0xfc00d3d8>
 800d46c:	02400204 	movi	r9,8
 800d470:	4953c83a 	sub	r9,r9,r5
 800d474:	4a53883a 	add	r9,r9,r9
 800d478:	3a000017 	ldw	r8,0(r7)
 800d47c:	4a53883a 	add	r9,r9,r9
 800d480:	02800804 	movi	r10,32
 800d484:	5255c83a 	sub	r10,r10,r9
 800d488:	38c00104 	addi	r3,r7,4
 800d48c:	19400017 	ldw	r5,0(r3)
 800d490:	10800104 	addi	r2,r2,4
 800d494:	18c00104 	addi	r3,r3,4
 800d498:	2a88983a 	sll	r4,r5,r10
 800d49c:	4108b03a 	or	r4,r8,r4
 800d4a0:	2a50d83a 	srl	r8,r5,r9
 800d4a4:	113fff15 	stw	r4,-4(r2)
 800d4a8:	1a3fff15 	stw	r8,-4(r3)
 800d4ac:	137ff736 	bltu	r2,r13,800d48c <__alt_data_end+0xfc00d48c>
 800d4b0:	003fa006 	br	800d334 <__alt_data_end+0xfc00d334>

0800d4b4 <_gettimeofday_r>:
 800d4b4:	defffd04 	addi	sp,sp,-12
 800d4b8:	dc000015 	stw	r16,0(sp)
 800d4bc:	040200b4 	movhi	r16,2050
 800d4c0:	dc400115 	stw	r17,4(sp)
 800d4c4:	84143004 	addi	r16,r16,20672
 800d4c8:	2023883a 	mov	r17,r4
 800d4cc:	2809883a 	mov	r4,r5
 800d4d0:	300b883a 	mov	r5,r6
 800d4d4:	dfc00215 	stw	ra,8(sp)
 800d4d8:	80000015 	stw	zero,0(r16)
 800d4dc:	80144a00 	call	80144a0 <gettimeofday>
 800d4e0:	00ffffc4 	movi	r3,-1
 800d4e4:	10c00526 	beq	r2,r3,800d4fc <_gettimeofday_r+0x48>
 800d4e8:	dfc00217 	ldw	ra,8(sp)
 800d4ec:	dc400117 	ldw	r17,4(sp)
 800d4f0:	dc000017 	ldw	r16,0(sp)
 800d4f4:	dec00304 	addi	sp,sp,12
 800d4f8:	f800283a 	ret
 800d4fc:	80c00017 	ldw	r3,0(r16)
 800d500:	183ff926 	beq	r3,zero,800d4e8 <__alt_data_end+0xfc00d4e8>
 800d504:	88c00015 	stw	r3,0(r17)
 800d508:	003ff706 	br	800d4e8 <__alt_data_end+0xfc00d4e8>

0800d50c <_setlocale_r>:
 800d50c:	30001b26 	beq	r6,zero,800d57c <_setlocale_r+0x70>
 800d510:	014200b4 	movhi	r5,2050
 800d514:	defffe04 	addi	sp,sp,-8
 800d518:	29461b04 	addi	r5,r5,6252
 800d51c:	3009883a 	mov	r4,r6
 800d520:	dc000015 	stw	r16,0(sp)
 800d524:	dfc00115 	stw	ra,4(sp)
 800d528:	3021883a 	mov	r16,r6
 800d52c:	80049c80 	call	80049c8 <strcmp>
 800d530:	1000061e 	bne	r2,zero,800d54c <_setlocale_r+0x40>
 800d534:	008200b4 	movhi	r2,2050
 800d538:	10861a04 	addi	r2,r2,6248
 800d53c:	dfc00117 	ldw	ra,4(sp)
 800d540:	dc000017 	ldw	r16,0(sp)
 800d544:	dec00204 	addi	sp,sp,8
 800d548:	f800283a 	ret
 800d54c:	014200b4 	movhi	r5,2050
 800d550:	29461a04 	addi	r5,r5,6248
 800d554:	8009883a 	mov	r4,r16
 800d558:	80049c80 	call	80049c8 <strcmp>
 800d55c:	103ff526 	beq	r2,zero,800d534 <__alt_data_end+0xfc00d534>
 800d560:	014200b4 	movhi	r5,2050
 800d564:	2945f604 	addi	r5,r5,6104
 800d568:	8009883a 	mov	r4,r16
 800d56c:	80049c80 	call	80049c8 <strcmp>
 800d570:	103ff026 	beq	r2,zero,800d534 <__alt_data_end+0xfc00d534>
 800d574:	0005883a 	mov	r2,zero
 800d578:	003ff006 	br	800d53c <__alt_data_end+0xfc00d53c>
 800d57c:	008200b4 	movhi	r2,2050
 800d580:	10861a04 	addi	r2,r2,6248
 800d584:	f800283a 	ret

0800d588 <__locale_charset>:
 800d588:	008200b4 	movhi	r2,2050
 800d58c:	1088a704 	addi	r2,r2,8860
 800d590:	f800283a 	ret

0800d594 <__locale_mb_cur_max>:
 800d594:	008200b4 	movhi	r2,2050
 800d598:	108d4e04 	addi	r2,r2,13624
 800d59c:	10800017 	ldw	r2,0(r2)
 800d5a0:	f800283a 	ret

0800d5a4 <__locale_msgcharset>:
 800d5a4:	008200b4 	movhi	r2,2050
 800d5a8:	10889f04 	addi	r2,r2,8828
 800d5ac:	f800283a 	ret

0800d5b0 <__locale_cjk_lang>:
 800d5b0:	0005883a 	mov	r2,zero
 800d5b4:	f800283a 	ret

0800d5b8 <_localeconv_r>:
 800d5b8:	008200b4 	movhi	r2,2050
 800d5bc:	1088af04 	addi	r2,r2,8892
 800d5c0:	f800283a 	ret

0800d5c4 <setlocale>:
 800d5c4:	00c200b4 	movhi	r3,2050
 800d5c8:	18cd4d04 	addi	r3,r3,13620
 800d5cc:	2005883a 	mov	r2,r4
 800d5d0:	19000017 	ldw	r4,0(r3)
 800d5d4:	280d883a 	mov	r6,r5
 800d5d8:	100b883a 	mov	r5,r2
 800d5dc:	800d50c1 	jmpi	800d50c <_setlocale_r>

0800d5e0 <localeconv>:
 800d5e0:	008200b4 	movhi	r2,2050
 800d5e4:	1088af04 	addi	r2,r2,8892
 800d5e8:	f800283a 	ret

0800d5ec <__smakebuf_r>:
 800d5ec:	2880030b 	ldhu	r2,12(r5)
 800d5f0:	10c0008c 	andi	r3,r2,2
 800d5f4:	1800401e 	bne	r3,zero,800d6f8 <__smakebuf_r+0x10c>
 800d5f8:	deffec04 	addi	sp,sp,-80
 800d5fc:	dc000f15 	stw	r16,60(sp)
 800d600:	2821883a 	mov	r16,r5
 800d604:	2940038f 	ldh	r5,14(r5)
 800d608:	dc401015 	stw	r17,64(sp)
 800d60c:	dfc01315 	stw	ra,76(sp)
 800d610:	dcc01215 	stw	r19,72(sp)
 800d614:	dc801115 	stw	r18,68(sp)
 800d618:	2023883a 	mov	r17,r4
 800d61c:	28001b16 	blt	r5,zero,800d68c <__smakebuf_r+0xa0>
 800d620:	d80d883a 	mov	r6,sp
 800d624:	8011ae40 	call	8011ae4 <_fstat_r>
 800d628:	10001716 	blt	r2,zero,800d688 <__smakebuf_r+0x9c>
 800d62c:	d8800117 	ldw	r2,4(sp)
 800d630:	00e00014 	movui	r3,32768
 800d634:	10bc000c 	andi	r2,r2,61440
 800d638:	10c03726 	beq	r2,r3,800d718 <__smakebuf_r+0x12c>
 800d63c:	80c0030b 	ldhu	r3,12(r16)
 800d640:	18c20014 	ori	r3,r3,2048
 800d644:	80c0030d 	sth	r3,12(r16)
 800d648:	00c80004 	movi	r3,8192
 800d64c:	10c03c1e 	bne	r2,r3,800d740 <__smakebuf_r+0x154>
 800d650:	8140038f 	ldh	r5,14(r16)
 800d654:	8809883a 	mov	r4,r17
 800d658:	8011fe00 	call	8011fe0 <_isatty_r>
 800d65c:	10004e26 	beq	r2,zero,800d798 <__smakebuf_r+0x1ac>
 800d660:	8080030b 	ldhu	r2,12(r16)
 800d664:	04c00044 	movi	r19,1
 800d668:	80c010c4 	addi	r3,r16,67
 800d66c:	14c4b03a 	or	r2,r2,r19
 800d670:	8080030d 	sth	r2,12(r16)
 800d674:	80c00015 	stw	r3,0(r16)
 800d678:	80c00415 	stw	r3,16(r16)
 800d67c:	84c00515 	stw	r19,20(r16)
 800d680:	04810004 	movi	r18,1024
 800d684:	00000706 	br	800d6a4 <__smakebuf_r+0xb8>
 800d688:	8080030b 	ldhu	r2,12(r16)
 800d68c:	10c0200c 	andi	r3,r2,128
 800d690:	18001f1e 	bne	r3,zero,800d710 <__smakebuf_r+0x124>
 800d694:	04810004 	movi	r18,1024
 800d698:	10820014 	ori	r2,r2,2048
 800d69c:	8080030d 	sth	r2,12(r16)
 800d6a0:	0027883a 	mov	r19,zero
 800d6a4:	8809883a 	mov	r4,r17
 800d6a8:	900b883a 	mov	r5,r18
 800d6ac:	8003f000 	call	8003f00 <_malloc_r>
 800d6b0:	10002e26 	beq	r2,zero,800d76c <__smakebuf_r+0x180>
 800d6b4:	80c0030b 	ldhu	r3,12(r16)
 800d6b8:	01020074 	movhi	r4,2049
 800d6bc:	212fdb04 	addi	r4,r4,-16532
 800d6c0:	89000f15 	stw	r4,60(r17)
 800d6c4:	18c02014 	ori	r3,r3,128
 800d6c8:	80c0030d 	sth	r3,12(r16)
 800d6cc:	80800015 	stw	r2,0(r16)
 800d6d0:	80800415 	stw	r2,16(r16)
 800d6d4:	84800515 	stw	r18,20(r16)
 800d6d8:	98001c1e 	bne	r19,zero,800d74c <__smakebuf_r+0x160>
 800d6dc:	dfc01317 	ldw	ra,76(sp)
 800d6e0:	dcc01217 	ldw	r19,72(sp)
 800d6e4:	dc801117 	ldw	r18,68(sp)
 800d6e8:	dc401017 	ldw	r17,64(sp)
 800d6ec:	dc000f17 	ldw	r16,60(sp)
 800d6f0:	dec01404 	addi	sp,sp,80
 800d6f4:	f800283a 	ret
 800d6f8:	288010c4 	addi	r2,r5,67
 800d6fc:	28800015 	stw	r2,0(r5)
 800d700:	28800415 	stw	r2,16(r5)
 800d704:	00800044 	movi	r2,1
 800d708:	28800515 	stw	r2,20(r5)
 800d70c:	f800283a 	ret
 800d710:	04801004 	movi	r18,64
 800d714:	003fe006 	br	800d698 <__alt_data_end+0xfc00d698>
 800d718:	81000a17 	ldw	r4,40(r16)
 800d71c:	00c20074 	movhi	r3,2049
 800d720:	18fb4a04 	addi	r3,r3,-4824
 800d724:	20ffc51e 	bne	r4,r3,800d63c <__alt_data_end+0xfc00d63c>
 800d728:	80c0030b 	ldhu	r3,12(r16)
 800d72c:	01010004 	movi	r4,1024
 800d730:	81001315 	stw	r4,76(r16)
 800d734:	1906b03a 	or	r3,r3,r4
 800d738:	80c0030d 	sth	r3,12(r16)
 800d73c:	003fc206 	br	800d648 <__alt_data_end+0xfc00d648>
 800d740:	0027883a 	mov	r19,zero
 800d744:	04810004 	movi	r18,1024
 800d748:	003fd606 	br	800d6a4 <__alt_data_end+0xfc00d6a4>
 800d74c:	8140038f 	ldh	r5,14(r16)
 800d750:	8809883a 	mov	r4,r17
 800d754:	8011fe00 	call	8011fe0 <_isatty_r>
 800d758:	103fe026 	beq	r2,zero,800d6dc <__alt_data_end+0xfc00d6dc>
 800d75c:	8080030b 	ldhu	r2,12(r16)
 800d760:	10800054 	ori	r2,r2,1
 800d764:	8080030d 	sth	r2,12(r16)
 800d768:	003fdc06 	br	800d6dc <__alt_data_end+0xfc00d6dc>
 800d76c:	8080030b 	ldhu	r2,12(r16)
 800d770:	10c0800c 	andi	r3,r2,512
 800d774:	183fd91e 	bne	r3,zero,800d6dc <__alt_data_end+0xfc00d6dc>
 800d778:	10800094 	ori	r2,r2,2
 800d77c:	80c010c4 	addi	r3,r16,67
 800d780:	8080030d 	sth	r2,12(r16)
 800d784:	00800044 	movi	r2,1
 800d788:	80c00015 	stw	r3,0(r16)
 800d78c:	80c00415 	stw	r3,16(r16)
 800d790:	80800515 	stw	r2,20(r16)
 800d794:	003fd106 	br	800d6dc <__alt_data_end+0xfc00d6dc>
 800d798:	04c00044 	movi	r19,1
 800d79c:	04810004 	movi	r18,1024
 800d7a0:	003fc006 	br	800d6a4 <__alt_data_end+0xfc00d6a4>

0800d7a4 <memchr>:
 800d7a4:	208000cc 	andi	r2,r4,3
 800d7a8:	280f883a 	mov	r7,r5
 800d7ac:	10003526 	beq	r2,zero,800d884 <memchr+0xe0>
 800d7b0:	30bfffc4 	addi	r2,r6,-1
 800d7b4:	30001b26 	beq	r6,zero,800d824 <memchr+0x80>
 800d7b8:	21800003 	ldbu	r6,0(r4)
 800d7bc:	28c03fcc 	andi	r3,r5,255
 800d7c0:	30c01a26 	beq	r6,r3,800d82c <memchr+0x88>
 800d7c4:	180d883a 	mov	r6,r3
 800d7c8:	00000406 	br	800d7dc <memchr+0x38>
 800d7cc:	10001526 	beq	r2,zero,800d824 <memchr+0x80>
 800d7d0:	20c00003 	ldbu	r3,0(r4)
 800d7d4:	10bfffc4 	addi	r2,r2,-1
 800d7d8:	19801426 	beq	r3,r6,800d82c <memchr+0x88>
 800d7dc:	21000044 	addi	r4,r4,1
 800d7e0:	20c000cc 	andi	r3,r4,3
 800d7e4:	183ff91e 	bne	r3,zero,800d7cc <__alt_data_end+0xfc00d7cc>
 800d7e8:	024000c4 	movi	r9,3
 800d7ec:	48801136 	bltu	r9,r2,800d834 <memchr+0x90>
 800d7f0:	10000c26 	beq	r2,zero,800d824 <memchr+0x80>
 800d7f4:	20c00003 	ldbu	r3,0(r4)
 800d7f8:	29403fcc 	andi	r5,r5,255
 800d7fc:	19400b26 	beq	r3,r5,800d82c <memchr+0x88>
 800d800:	20c00044 	addi	r3,r4,1
 800d804:	2085883a 	add	r2,r4,r2
 800d808:	39803fcc 	andi	r6,r7,255
 800d80c:	00000306 	br	800d81c <memchr+0x78>
 800d810:	18c00044 	addi	r3,r3,1
 800d814:	197fffc3 	ldbu	r5,-1(r3)
 800d818:	29800426 	beq	r5,r6,800d82c <memchr+0x88>
 800d81c:	1809883a 	mov	r4,r3
 800d820:	18bffb1e 	bne	r3,r2,800d810 <__alt_data_end+0xfc00d810>
 800d824:	0005883a 	mov	r2,zero
 800d828:	f800283a 	ret
 800d82c:	2005883a 	mov	r2,r4
 800d830:	f800283a 	ret
 800d834:	28c03fcc 	andi	r3,r5,255
 800d838:	1810923a 	slli	r8,r3,8
 800d83c:	02ffbff4 	movhi	r11,65279
 800d840:	02a02074 	movhi	r10,32897
 800d844:	40c6b03a 	or	r3,r8,r3
 800d848:	1810943a 	slli	r8,r3,16
 800d84c:	5affbfc4 	addi	r11,r11,-257
 800d850:	52a02004 	addi	r10,r10,-32640
 800d854:	40d0b03a 	or	r8,r8,r3
 800d858:	20c00017 	ldw	r3,0(r4)
 800d85c:	40c6f03a 	xor	r3,r8,r3
 800d860:	1acd883a 	add	r6,r3,r11
 800d864:	00c6303a 	nor	r3,zero,r3
 800d868:	30c6703a 	and	r3,r6,r3
 800d86c:	1a86703a 	and	r3,r3,r10
 800d870:	183fdf1e 	bne	r3,zero,800d7f0 <__alt_data_end+0xfc00d7f0>
 800d874:	10bfff04 	addi	r2,r2,-4
 800d878:	21000104 	addi	r4,r4,4
 800d87c:	48bff636 	bltu	r9,r2,800d858 <__alt_data_end+0xfc00d858>
 800d880:	003fdb06 	br	800d7f0 <__alt_data_end+0xfc00d7f0>
 800d884:	3005883a 	mov	r2,r6
 800d888:	003fd706 	br	800d7e8 <__alt_data_end+0xfc00d7e8>

0800d88c <memcpy>:
 800d88c:	deffff04 	addi	sp,sp,-4
 800d890:	dc000015 	stw	r16,0(sp)
 800d894:	00c003c4 	movi	r3,15
 800d898:	2005883a 	mov	r2,r4
 800d89c:	1980432e 	bgeu	r3,r6,800d9ac <memcpy+0x120>
 800d8a0:	2146b03a 	or	r3,r4,r5
 800d8a4:	18c000cc 	andi	r3,r3,3
 800d8a8:	1800421e 	bne	r3,zero,800d9b4 <memcpy+0x128>
 800d8ac:	343ffc04 	addi	r16,r6,-16
 800d8b0:	8020d13a 	srli	r16,r16,4
 800d8b4:	28c00104 	addi	r3,r5,4
 800d8b8:	23400104 	addi	r13,r4,4
 800d8bc:	801e913a 	slli	r15,r16,4
 800d8c0:	2b000204 	addi	r12,r5,8
 800d8c4:	22c00204 	addi	r11,r4,8
 800d8c8:	7bc00504 	addi	r15,r15,20
 800d8cc:	2a800304 	addi	r10,r5,12
 800d8d0:	22400304 	addi	r9,r4,12
 800d8d4:	2bdf883a 	add	r15,r5,r15
 800d8d8:	2811883a 	mov	r8,r5
 800d8dc:	200f883a 	mov	r7,r4
 800d8e0:	41000017 	ldw	r4,0(r8)
 800d8e4:	39c00404 	addi	r7,r7,16
 800d8e8:	18c00404 	addi	r3,r3,16
 800d8ec:	393ffc15 	stw	r4,-16(r7)
 800d8f0:	1bbffc17 	ldw	r14,-16(r3)
 800d8f4:	6b400404 	addi	r13,r13,16
 800d8f8:	5ac00404 	addi	r11,r11,16
 800d8fc:	6bbffc15 	stw	r14,-16(r13)
 800d900:	63800017 	ldw	r14,0(r12)
 800d904:	4a400404 	addi	r9,r9,16
 800d908:	42000404 	addi	r8,r8,16
 800d90c:	5bbffc15 	stw	r14,-16(r11)
 800d910:	53800017 	ldw	r14,0(r10)
 800d914:	63000404 	addi	r12,r12,16
 800d918:	52800404 	addi	r10,r10,16
 800d91c:	4bbffc15 	stw	r14,-16(r9)
 800d920:	1bffef1e 	bne	r3,r15,800d8e0 <__alt_data_end+0xfc00d8e0>
 800d924:	81c00044 	addi	r7,r16,1
 800d928:	380e913a 	slli	r7,r7,4
 800d92c:	310003cc 	andi	r4,r6,15
 800d930:	02c000c4 	movi	r11,3
 800d934:	11c7883a 	add	r3,r2,r7
 800d938:	29cb883a 	add	r5,r5,r7
 800d93c:	59001f2e 	bgeu	r11,r4,800d9bc <memcpy+0x130>
 800d940:	1813883a 	mov	r9,r3
 800d944:	2811883a 	mov	r8,r5
 800d948:	200f883a 	mov	r7,r4
 800d94c:	42800017 	ldw	r10,0(r8)
 800d950:	4a400104 	addi	r9,r9,4
 800d954:	39ffff04 	addi	r7,r7,-4
 800d958:	4abfff15 	stw	r10,-4(r9)
 800d95c:	42000104 	addi	r8,r8,4
 800d960:	59fffa36 	bltu	r11,r7,800d94c <__alt_data_end+0xfc00d94c>
 800d964:	213fff04 	addi	r4,r4,-4
 800d968:	2008d0ba 	srli	r4,r4,2
 800d96c:	318000cc 	andi	r6,r6,3
 800d970:	21000044 	addi	r4,r4,1
 800d974:	2109883a 	add	r4,r4,r4
 800d978:	2109883a 	add	r4,r4,r4
 800d97c:	1907883a 	add	r3,r3,r4
 800d980:	290b883a 	add	r5,r5,r4
 800d984:	30000626 	beq	r6,zero,800d9a0 <memcpy+0x114>
 800d988:	198d883a 	add	r6,r3,r6
 800d98c:	29c00003 	ldbu	r7,0(r5)
 800d990:	18c00044 	addi	r3,r3,1
 800d994:	29400044 	addi	r5,r5,1
 800d998:	19ffffc5 	stb	r7,-1(r3)
 800d99c:	19bffb1e 	bne	r3,r6,800d98c <__alt_data_end+0xfc00d98c>
 800d9a0:	dc000017 	ldw	r16,0(sp)
 800d9a4:	dec00104 	addi	sp,sp,4
 800d9a8:	f800283a 	ret
 800d9ac:	2007883a 	mov	r3,r4
 800d9b0:	003ff406 	br	800d984 <__alt_data_end+0xfc00d984>
 800d9b4:	2007883a 	mov	r3,r4
 800d9b8:	003ff306 	br	800d988 <__alt_data_end+0xfc00d988>
 800d9bc:	200d883a 	mov	r6,r4
 800d9c0:	003ff006 	br	800d984 <__alt_data_end+0xfc00d984>

0800d9c4 <memset>:
 800d9c4:	20c000cc 	andi	r3,r4,3
 800d9c8:	2005883a 	mov	r2,r4
 800d9cc:	18004326 	beq	r3,zero,800dadc <memset+0x118>
 800d9d0:	31ffffc4 	addi	r7,r6,-1
 800d9d4:	30004026 	beq	r6,zero,800dad8 <memset+0x114>
 800d9d8:	2813883a 	mov	r9,r5
 800d9dc:	200d883a 	mov	r6,r4
 800d9e0:	2007883a 	mov	r3,r4
 800d9e4:	00000406 	br	800d9f8 <memset+0x34>
 800d9e8:	3a3fffc4 	addi	r8,r7,-1
 800d9ec:	31800044 	addi	r6,r6,1
 800d9f0:	38003926 	beq	r7,zero,800dad8 <memset+0x114>
 800d9f4:	400f883a 	mov	r7,r8
 800d9f8:	18c00044 	addi	r3,r3,1
 800d9fc:	32400005 	stb	r9,0(r6)
 800da00:	1a0000cc 	andi	r8,r3,3
 800da04:	403ff81e 	bne	r8,zero,800d9e8 <__alt_data_end+0xfc00d9e8>
 800da08:	010000c4 	movi	r4,3
 800da0c:	21c02d2e 	bgeu	r4,r7,800dac4 <memset+0x100>
 800da10:	29803fcc 	andi	r6,r5,255
 800da14:	3008923a 	slli	r4,r6,8
 800da18:	218cb03a 	or	r6,r4,r6
 800da1c:	3008943a 	slli	r4,r6,16
 800da20:	218cb03a 	or	r6,r4,r6
 800da24:	010003c4 	movi	r4,15
 800da28:	21c0182e 	bgeu	r4,r7,800da8c <memset+0xc8>
 800da2c:	3b3ffc04 	addi	r12,r7,-16
 800da30:	6018d13a 	srli	r12,r12,4
 800da34:	1a000104 	addi	r8,r3,4
 800da38:	1ac00204 	addi	r11,r3,8
 800da3c:	6008913a 	slli	r4,r12,4
 800da40:	1a800304 	addi	r10,r3,12
 800da44:	1813883a 	mov	r9,r3
 800da48:	21000504 	addi	r4,r4,20
 800da4c:	1909883a 	add	r4,r3,r4
 800da50:	49800015 	stw	r6,0(r9)
 800da54:	41800015 	stw	r6,0(r8)
 800da58:	59800015 	stw	r6,0(r11)
 800da5c:	51800015 	stw	r6,0(r10)
 800da60:	42000404 	addi	r8,r8,16
 800da64:	4a400404 	addi	r9,r9,16
 800da68:	5ac00404 	addi	r11,r11,16
 800da6c:	52800404 	addi	r10,r10,16
 800da70:	413ff71e 	bne	r8,r4,800da50 <__alt_data_end+0xfc00da50>
 800da74:	63000044 	addi	r12,r12,1
 800da78:	6018913a 	slli	r12,r12,4
 800da7c:	39c003cc 	andi	r7,r7,15
 800da80:	010000c4 	movi	r4,3
 800da84:	1b07883a 	add	r3,r3,r12
 800da88:	21c00e2e 	bgeu	r4,r7,800dac4 <memset+0x100>
 800da8c:	1813883a 	mov	r9,r3
 800da90:	3811883a 	mov	r8,r7
 800da94:	010000c4 	movi	r4,3
 800da98:	49800015 	stw	r6,0(r9)
 800da9c:	423fff04 	addi	r8,r8,-4
 800daa0:	4a400104 	addi	r9,r9,4
 800daa4:	223ffc36 	bltu	r4,r8,800da98 <__alt_data_end+0xfc00da98>
 800daa8:	393fff04 	addi	r4,r7,-4
 800daac:	2008d0ba 	srli	r4,r4,2
 800dab0:	39c000cc 	andi	r7,r7,3
 800dab4:	21000044 	addi	r4,r4,1
 800dab8:	2109883a 	add	r4,r4,r4
 800dabc:	2109883a 	add	r4,r4,r4
 800dac0:	1907883a 	add	r3,r3,r4
 800dac4:	38000426 	beq	r7,zero,800dad8 <memset+0x114>
 800dac8:	19cf883a 	add	r7,r3,r7
 800dacc:	19400005 	stb	r5,0(r3)
 800dad0:	18c00044 	addi	r3,r3,1
 800dad4:	19fffd1e 	bne	r3,r7,800dacc <__alt_data_end+0xfc00dacc>
 800dad8:	f800283a 	ret
 800dadc:	2007883a 	mov	r3,r4
 800dae0:	300f883a 	mov	r7,r6
 800dae4:	003fc806 	br	800da08 <__alt_data_end+0xfc00da08>

0800dae8 <_Balloc>:
 800dae8:	20801317 	ldw	r2,76(r4)
 800daec:	defffc04 	addi	sp,sp,-16
 800daf0:	dc400115 	stw	r17,4(sp)
 800daf4:	dc000015 	stw	r16,0(sp)
 800daf8:	dfc00315 	stw	ra,12(sp)
 800dafc:	dc800215 	stw	r18,8(sp)
 800db00:	2023883a 	mov	r17,r4
 800db04:	2821883a 	mov	r16,r5
 800db08:	10000f26 	beq	r2,zero,800db48 <_Balloc+0x60>
 800db0c:	8407883a 	add	r3,r16,r16
 800db10:	18c7883a 	add	r3,r3,r3
 800db14:	10c7883a 	add	r3,r2,r3
 800db18:	18800017 	ldw	r2,0(r3)
 800db1c:	10001126 	beq	r2,zero,800db64 <_Balloc+0x7c>
 800db20:	11000017 	ldw	r4,0(r2)
 800db24:	19000015 	stw	r4,0(r3)
 800db28:	10000415 	stw	zero,16(r2)
 800db2c:	10000315 	stw	zero,12(r2)
 800db30:	dfc00317 	ldw	ra,12(sp)
 800db34:	dc800217 	ldw	r18,8(sp)
 800db38:	dc400117 	ldw	r17,4(sp)
 800db3c:	dc000017 	ldw	r16,0(sp)
 800db40:	dec00404 	addi	sp,sp,16
 800db44:	f800283a 	ret
 800db48:	01400104 	movi	r5,4
 800db4c:	01800844 	movi	r6,33
 800db50:	80117300 	call	8011730 <_calloc_r>
 800db54:	88801315 	stw	r2,76(r17)
 800db58:	103fec1e 	bne	r2,zero,800db0c <__alt_data_end+0xfc00db0c>
 800db5c:	0005883a 	mov	r2,zero
 800db60:	003ff306 	br	800db30 <__alt_data_end+0xfc00db30>
 800db64:	01400044 	movi	r5,1
 800db68:	2c24983a 	sll	r18,r5,r16
 800db6c:	8809883a 	mov	r4,r17
 800db70:	91800144 	addi	r6,r18,5
 800db74:	318d883a 	add	r6,r6,r6
 800db78:	318d883a 	add	r6,r6,r6
 800db7c:	80117300 	call	8011730 <_calloc_r>
 800db80:	103ff626 	beq	r2,zero,800db5c <__alt_data_end+0xfc00db5c>
 800db84:	14000115 	stw	r16,4(r2)
 800db88:	14800215 	stw	r18,8(r2)
 800db8c:	003fe606 	br	800db28 <__alt_data_end+0xfc00db28>

0800db90 <_Bfree>:
 800db90:	28000826 	beq	r5,zero,800dbb4 <_Bfree+0x24>
 800db94:	28c00117 	ldw	r3,4(r5)
 800db98:	20801317 	ldw	r2,76(r4)
 800db9c:	18c7883a 	add	r3,r3,r3
 800dba0:	18c7883a 	add	r3,r3,r3
 800dba4:	10c5883a 	add	r2,r2,r3
 800dba8:	10c00017 	ldw	r3,0(r2)
 800dbac:	28c00015 	stw	r3,0(r5)
 800dbb0:	11400015 	stw	r5,0(r2)
 800dbb4:	f800283a 	ret

0800dbb8 <__multadd>:
 800dbb8:	defffa04 	addi	sp,sp,-24
 800dbbc:	dc000115 	stw	r16,4(sp)
 800dbc0:	2c000417 	ldw	r16,16(r5)
 800dbc4:	dc800315 	stw	r18,12(sp)
 800dbc8:	dc400215 	stw	r17,8(sp)
 800dbcc:	dfc00515 	stw	ra,20(sp)
 800dbd0:	dcc00415 	stw	r19,16(sp)
 800dbd4:	2823883a 	mov	r17,r5
 800dbd8:	2025883a 	mov	r18,r4
 800dbdc:	2a400504 	addi	r9,r5,20
 800dbe0:	0015883a 	mov	r10,zero
 800dbe4:	4a000017 	ldw	r8,0(r9)
 800dbe8:	4a400104 	addi	r9,r9,4
 800dbec:	52800044 	addi	r10,r10,1
 800dbf0:	40ffffcc 	andi	r3,r8,65535
 800dbf4:	1987383a 	mul	r3,r3,r6
 800dbf8:	4010d43a 	srli	r8,r8,16
 800dbfc:	19cf883a 	add	r7,r3,r7
 800dc00:	4191383a 	mul	r8,r8,r6
 800dc04:	3816d43a 	srli	r11,r7,16
 800dc08:	38ffffcc 	andi	r3,r7,65535
 800dc0c:	5a0f883a 	add	r7,r11,r8
 800dc10:	3810943a 	slli	r8,r7,16
 800dc14:	380ed43a 	srli	r7,r7,16
 800dc18:	40c7883a 	add	r3,r8,r3
 800dc1c:	48ffff15 	stw	r3,-4(r9)
 800dc20:	543ff016 	blt	r10,r16,800dbe4 <__alt_data_end+0xfc00dbe4>
 800dc24:	38000926 	beq	r7,zero,800dc4c <__multadd+0x94>
 800dc28:	88800217 	ldw	r2,8(r17)
 800dc2c:	80800f0e 	bge	r16,r2,800dc6c <__multadd+0xb4>
 800dc30:	80800144 	addi	r2,r16,5
 800dc34:	1085883a 	add	r2,r2,r2
 800dc38:	1085883a 	add	r2,r2,r2
 800dc3c:	8885883a 	add	r2,r17,r2
 800dc40:	11c00015 	stw	r7,0(r2)
 800dc44:	84000044 	addi	r16,r16,1
 800dc48:	8c000415 	stw	r16,16(r17)
 800dc4c:	8805883a 	mov	r2,r17
 800dc50:	dfc00517 	ldw	ra,20(sp)
 800dc54:	dcc00417 	ldw	r19,16(sp)
 800dc58:	dc800317 	ldw	r18,12(sp)
 800dc5c:	dc400217 	ldw	r17,8(sp)
 800dc60:	dc000117 	ldw	r16,4(sp)
 800dc64:	dec00604 	addi	sp,sp,24
 800dc68:	f800283a 	ret
 800dc6c:	89400117 	ldw	r5,4(r17)
 800dc70:	9009883a 	mov	r4,r18
 800dc74:	d9c00015 	stw	r7,0(sp)
 800dc78:	29400044 	addi	r5,r5,1
 800dc7c:	800dae80 	call	800dae8 <_Balloc>
 800dc80:	89800417 	ldw	r6,16(r17)
 800dc84:	89400304 	addi	r5,r17,12
 800dc88:	11000304 	addi	r4,r2,12
 800dc8c:	31800084 	addi	r6,r6,2
 800dc90:	318d883a 	add	r6,r6,r6
 800dc94:	318d883a 	add	r6,r6,r6
 800dc98:	1027883a 	mov	r19,r2
 800dc9c:	800d88c0 	call	800d88c <memcpy>
 800dca0:	89000117 	ldw	r4,4(r17)
 800dca4:	90c01317 	ldw	r3,76(r18)
 800dca8:	d9c00017 	ldw	r7,0(sp)
 800dcac:	2109883a 	add	r4,r4,r4
 800dcb0:	2109883a 	add	r4,r4,r4
 800dcb4:	1907883a 	add	r3,r3,r4
 800dcb8:	18800017 	ldw	r2,0(r3)
 800dcbc:	88800015 	stw	r2,0(r17)
 800dcc0:	1c400015 	stw	r17,0(r3)
 800dcc4:	9823883a 	mov	r17,r19
 800dcc8:	003fd906 	br	800dc30 <__alt_data_end+0xfc00dc30>

0800dccc <__s2b>:
 800dccc:	defff904 	addi	sp,sp,-28
 800dcd0:	dc400115 	stw	r17,4(sp)
 800dcd4:	dc000015 	stw	r16,0(sp)
 800dcd8:	2023883a 	mov	r17,r4
 800dcdc:	2821883a 	mov	r16,r5
 800dce0:	39000204 	addi	r4,r7,8
 800dce4:	01400244 	movi	r5,9
 800dce8:	dcc00315 	stw	r19,12(sp)
 800dcec:	dc800215 	stw	r18,8(sp)
 800dcf0:	dfc00615 	stw	ra,24(sp)
 800dcf4:	dd400515 	stw	r21,20(sp)
 800dcf8:	dd000415 	stw	r20,16(sp)
 800dcfc:	3825883a 	mov	r18,r7
 800dd00:	3027883a 	mov	r19,r6
 800dd04:	8003df40 	call	8003df4 <__divsi3>
 800dd08:	00c00044 	movi	r3,1
 800dd0c:	000b883a 	mov	r5,zero
 800dd10:	1880030e 	bge	r3,r2,800dd20 <__s2b+0x54>
 800dd14:	18c7883a 	add	r3,r3,r3
 800dd18:	29400044 	addi	r5,r5,1
 800dd1c:	18bffd16 	blt	r3,r2,800dd14 <__alt_data_end+0xfc00dd14>
 800dd20:	8809883a 	mov	r4,r17
 800dd24:	800dae80 	call	800dae8 <_Balloc>
 800dd28:	d8c00717 	ldw	r3,28(sp)
 800dd2c:	10c00515 	stw	r3,20(r2)
 800dd30:	00c00044 	movi	r3,1
 800dd34:	10c00415 	stw	r3,16(r2)
 800dd38:	00c00244 	movi	r3,9
 800dd3c:	1cc0210e 	bge	r3,r19,800ddc4 <__s2b+0xf8>
 800dd40:	80eb883a 	add	r21,r16,r3
 800dd44:	a829883a 	mov	r20,r21
 800dd48:	84e1883a 	add	r16,r16,r19
 800dd4c:	a1c00007 	ldb	r7,0(r20)
 800dd50:	8809883a 	mov	r4,r17
 800dd54:	a5000044 	addi	r20,r20,1
 800dd58:	100b883a 	mov	r5,r2
 800dd5c:	01800284 	movi	r6,10
 800dd60:	39fff404 	addi	r7,r7,-48
 800dd64:	800dbb80 	call	800dbb8 <__multadd>
 800dd68:	a43ff81e 	bne	r20,r16,800dd4c <__alt_data_end+0xfc00dd4c>
 800dd6c:	ace1883a 	add	r16,r21,r19
 800dd70:	843ffe04 	addi	r16,r16,-8
 800dd74:	9c800a0e 	bge	r19,r18,800dda0 <__s2b+0xd4>
 800dd78:	94e5c83a 	sub	r18,r18,r19
 800dd7c:	84a5883a 	add	r18,r16,r18
 800dd80:	81c00007 	ldb	r7,0(r16)
 800dd84:	8809883a 	mov	r4,r17
 800dd88:	84000044 	addi	r16,r16,1
 800dd8c:	100b883a 	mov	r5,r2
 800dd90:	01800284 	movi	r6,10
 800dd94:	39fff404 	addi	r7,r7,-48
 800dd98:	800dbb80 	call	800dbb8 <__multadd>
 800dd9c:	84bff81e 	bne	r16,r18,800dd80 <__alt_data_end+0xfc00dd80>
 800dda0:	dfc00617 	ldw	ra,24(sp)
 800dda4:	dd400517 	ldw	r21,20(sp)
 800dda8:	dd000417 	ldw	r20,16(sp)
 800ddac:	dcc00317 	ldw	r19,12(sp)
 800ddb0:	dc800217 	ldw	r18,8(sp)
 800ddb4:	dc400117 	ldw	r17,4(sp)
 800ddb8:	dc000017 	ldw	r16,0(sp)
 800ddbc:	dec00704 	addi	sp,sp,28
 800ddc0:	f800283a 	ret
 800ddc4:	84000284 	addi	r16,r16,10
 800ddc8:	1827883a 	mov	r19,r3
 800ddcc:	003fe906 	br	800dd74 <__alt_data_end+0xfc00dd74>

0800ddd0 <__hi0bits>:
 800ddd0:	20bfffec 	andhi	r2,r4,65535
 800ddd4:	1000141e 	bne	r2,zero,800de28 <__hi0bits+0x58>
 800ddd8:	2008943a 	slli	r4,r4,16
 800dddc:	00800404 	movi	r2,16
 800dde0:	20ffc02c 	andhi	r3,r4,65280
 800dde4:	1800021e 	bne	r3,zero,800ddf0 <__hi0bits+0x20>
 800dde8:	2008923a 	slli	r4,r4,8
 800ddec:	10800204 	addi	r2,r2,8
 800ddf0:	20fc002c 	andhi	r3,r4,61440
 800ddf4:	1800021e 	bne	r3,zero,800de00 <__hi0bits+0x30>
 800ddf8:	2008913a 	slli	r4,r4,4
 800ddfc:	10800104 	addi	r2,r2,4
 800de00:	20f0002c 	andhi	r3,r4,49152
 800de04:	1800031e 	bne	r3,zero,800de14 <__hi0bits+0x44>
 800de08:	2109883a 	add	r4,r4,r4
 800de0c:	10800084 	addi	r2,r2,2
 800de10:	2109883a 	add	r4,r4,r4
 800de14:	20000316 	blt	r4,zero,800de24 <__hi0bits+0x54>
 800de18:	2110002c 	andhi	r4,r4,16384
 800de1c:	2000041e 	bne	r4,zero,800de30 <__hi0bits+0x60>
 800de20:	00800804 	movi	r2,32
 800de24:	f800283a 	ret
 800de28:	0005883a 	mov	r2,zero
 800de2c:	003fec06 	br	800dde0 <__alt_data_end+0xfc00dde0>
 800de30:	10800044 	addi	r2,r2,1
 800de34:	f800283a 	ret

0800de38 <__lo0bits>:
 800de38:	20c00017 	ldw	r3,0(r4)
 800de3c:	188001cc 	andi	r2,r3,7
 800de40:	10000826 	beq	r2,zero,800de64 <__lo0bits+0x2c>
 800de44:	1880004c 	andi	r2,r3,1
 800de48:	1000211e 	bne	r2,zero,800ded0 <__lo0bits+0x98>
 800de4c:	1880008c 	andi	r2,r3,2
 800de50:	1000211e 	bne	r2,zero,800ded8 <__lo0bits+0xa0>
 800de54:	1806d0ba 	srli	r3,r3,2
 800de58:	00800084 	movi	r2,2
 800de5c:	20c00015 	stw	r3,0(r4)
 800de60:	f800283a 	ret
 800de64:	18bfffcc 	andi	r2,r3,65535
 800de68:	10001326 	beq	r2,zero,800deb8 <__lo0bits+0x80>
 800de6c:	0005883a 	mov	r2,zero
 800de70:	19403fcc 	andi	r5,r3,255
 800de74:	2800021e 	bne	r5,zero,800de80 <__lo0bits+0x48>
 800de78:	1806d23a 	srli	r3,r3,8
 800de7c:	10800204 	addi	r2,r2,8
 800de80:	194003cc 	andi	r5,r3,15
 800de84:	2800021e 	bne	r5,zero,800de90 <__lo0bits+0x58>
 800de88:	1806d13a 	srli	r3,r3,4
 800de8c:	10800104 	addi	r2,r2,4
 800de90:	194000cc 	andi	r5,r3,3
 800de94:	2800021e 	bne	r5,zero,800dea0 <__lo0bits+0x68>
 800de98:	1806d0ba 	srli	r3,r3,2
 800de9c:	10800084 	addi	r2,r2,2
 800dea0:	1940004c 	andi	r5,r3,1
 800dea4:	2800081e 	bne	r5,zero,800dec8 <__lo0bits+0x90>
 800dea8:	1806d07a 	srli	r3,r3,1
 800deac:	1800051e 	bne	r3,zero,800dec4 <__lo0bits+0x8c>
 800deb0:	00800804 	movi	r2,32
 800deb4:	f800283a 	ret
 800deb8:	1806d43a 	srli	r3,r3,16
 800debc:	00800404 	movi	r2,16
 800dec0:	003feb06 	br	800de70 <__alt_data_end+0xfc00de70>
 800dec4:	10800044 	addi	r2,r2,1
 800dec8:	20c00015 	stw	r3,0(r4)
 800decc:	f800283a 	ret
 800ded0:	0005883a 	mov	r2,zero
 800ded4:	f800283a 	ret
 800ded8:	1806d07a 	srli	r3,r3,1
 800dedc:	00800044 	movi	r2,1
 800dee0:	20c00015 	stw	r3,0(r4)
 800dee4:	f800283a 	ret

0800dee8 <__i2b>:
 800dee8:	defffd04 	addi	sp,sp,-12
 800deec:	dc000015 	stw	r16,0(sp)
 800def0:	04000044 	movi	r16,1
 800def4:	dc400115 	stw	r17,4(sp)
 800def8:	2823883a 	mov	r17,r5
 800defc:	800b883a 	mov	r5,r16
 800df00:	dfc00215 	stw	ra,8(sp)
 800df04:	800dae80 	call	800dae8 <_Balloc>
 800df08:	14400515 	stw	r17,20(r2)
 800df0c:	14000415 	stw	r16,16(r2)
 800df10:	dfc00217 	ldw	ra,8(sp)
 800df14:	dc400117 	ldw	r17,4(sp)
 800df18:	dc000017 	ldw	r16,0(sp)
 800df1c:	dec00304 	addi	sp,sp,12
 800df20:	f800283a 	ret

0800df24 <__multiply>:
 800df24:	defffa04 	addi	sp,sp,-24
 800df28:	dcc00315 	stw	r19,12(sp)
 800df2c:	dc800215 	stw	r18,8(sp)
 800df30:	2cc00417 	ldw	r19,16(r5)
 800df34:	34800417 	ldw	r18,16(r6)
 800df38:	dd000415 	stw	r20,16(sp)
 800df3c:	dc400115 	stw	r17,4(sp)
 800df40:	dfc00515 	stw	ra,20(sp)
 800df44:	dc000015 	stw	r16,0(sp)
 800df48:	2829883a 	mov	r20,r5
 800df4c:	3023883a 	mov	r17,r6
 800df50:	9c807016 	blt	r19,r18,800e114 <__multiply+0x1f0>
 800df54:	9005883a 	mov	r2,r18
 800df58:	9825883a 	mov	r18,r19
 800df5c:	1027883a 	mov	r19,r2
 800df60:	a0800217 	ldw	r2,8(r20)
 800df64:	94e1883a 	add	r16,r18,r19
 800df68:	a1400117 	ldw	r5,4(r20)
 800df6c:	1400010e 	bge	r2,r16,800df74 <__multiply+0x50>
 800df70:	29400044 	addi	r5,r5,1
 800df74:	800dae80 	call	800dae8 <_Balloc>
 800df78:	8417883a 	add	r11,r16,r16
 800df7c:	13000504 	addi	r12,r2,20
 800df80:	5ad7883a 	add	r11,r11,r11
 800df84:	62d7883a 	add	r11,r12,r11
 800df88:	6007883a 	mov	r3,r12
 800df8c:	62c0032e 	bgeu	r12,r11,800df9c <__multiply+0x78>
 800df90:	18000015 	stw	zero,0(r3)
 800df94:	18c00104 	addi	r3,r3,4
 800df98:	1afffd36 	bltu	r3,r11,800df90 <__alt_data_end+0xfc00df90>
 800df9c:	9ce7883a 	add	r19,r19,r19
 800dfa0:	94a5883a 	add	r18,r18,r18
 800dfa4:	89800504 	addi	r6,r17,20
 800dfa8:	9ce7883a 	add	r19,r19,r19
 800dfac:	a3800504 	addi	r14,r20,20
 800dfb0:	94a5883a 	add	r18,r18,r18
 800dfb4:	34db883a 	add	r13,r6,r19
 800dfb8:	7495883a 	add	r10,r14,r18
 800dfbc:	3340422e 	bgeu	r6,r13,800e0c8 <__multiply+0x1a4>
 800dfc0:	34400017 	ldw	r17,0(r6)
 800dfc4:	8cbfffcc 	andi	r18,r17,65535
 800dfc8:	90001b26 	beq	r18,zero,800e038 <__multiply+0x114>
 800dfcc:	6013883a 	mov	r9,r12
 800dfd0:	7023883a 	mov	r17,r14
 800dfd4:	0011883a 	mov	r8,zero
 800dfd8:	88c00017 	ldw	r3,0(r17)
 800dfdc:	4bc00017 	ldw	r15,0(r9)
 800dfe0:	8c400104 	addi	r17,r17,4
 800dfe4:	19ffffcc 	andi	r7,r3,65535
 800dfe8:	3c8f383a 	mul	r7,r7,r18
 800dfec:	1808d43a 	srli	r4,r3,16
 800dff0:	797fffcc 	andi	r5,r15,65535
 800dff4:	29cb883a 	add	r5,r5,r7
 800dff8:	2a0b883a 	add	r5,r5,r8
 800dffc:	2489383a 	mul	r4,r4,r18
 800e000:	7806d43a 	srli	r3,r15,16
 800e004:	2810d43a 	srli	r8,r5,16
 800e008:	297fffcc 	andi	r5,r5,65535
 800e00c:	1907883a 	add	r3,r3,r4
 800e010:	1a07883a 	add	r3,r3,r8
 800e014:	1808943a 	slli	r4,r3,16
 800e018:	480f883a 	mov	r7,r9
 800e01c:	1810d43a 	srli	r8,r3,16
 800e020:	214ab03a 	or	r5,r4,r5
 800e024:	49400015 	stw	r5,0(r9)
 800e028:	4a400104 	addi	r9,r9,4
 800e02c:	8abfea36 	bltu	r17,r10,800dfd8 <__alt_data_end+0xfc00dfd8>
 800e030:	3a000115 	stw	r8,4(r7)
 800e034:	34400017 	ldw	r17,0(r6)
 800e038:	8822d43a 	srli	r17,r17,16
 800e03c:	88001f26 	beq	r17,zero,800e0bc <__multiply+0x198>
 800e040:	60c00017 	ldw	r3,0(r12)
 800e044:	7013883a 	mov	r9,r14
 800e048:	601f883a 	mov	r15,r12
 800e04c:	1811883a 	mov	r8,r3
 800e050:	6027883a 	mov	r19,r12
 800e054:	000f883a 	mov	r7,zero
 800e058:	00000106 	br	800e060 <__multiply+0x13c>
 800e05c:	9027883a 	mov	r19,r18
 800e060:	4940000b 	ldhu	r5,0(r9)
 800e064:	4010d43a 	srli	r8,r8,16
 800e068:	193fffcc 	andi	r4,r3,65535
 800e06c:	2c4b383a 	mul	r5,r5,r17
 800e070:	7bc00104 	addi	r15,r15,4
 800e074:	4a400104 	addi	r9,r9,4
 800e078:	2a0b883a 	add	r5,r5,r8
 800e07c:	29cb883a 	add	r5,r5,r7
 800e080:	2806943a 	slli	r3,r5,16
 800e084:	9c800104 	addi	r18,r19,4
 800e088:	280ad43a 	srli	r5,r5,16
 800e08c:	1908b03a 	or	r4,r3,r4
 800e090:	793fff15 	stw	r4,-4(r15)
 800e094:	48ffff17 	ldw	r3,-4(r9)
 800e098:	92000017 	ldw	r8,0(r18)
 800e09c:	1806d43a 	srli	r3,r3,16
 800e0a0:	413fffcc 	andi	r4,r8,65535
 800e0a4:	1c47383a 	mul	r3,r3,r17
 800e0a8:	1907883a 	add	r3,r3,r4
 800e0ac:	1947883a 	add	r3,r3,r5
 800e0b0:	180ed43a 	srli	r7,r3,16
 800e0b4:	4abfe936 	bltu	r9,r10,800e05c <__alt_data_end+0xfc00e05c>
 800e0b8:	98c00115 	stw	r3,4(r19)
 800e0bc:	31800104 	addi	r6,r6,4
 800e0c0:	63000104 	addi	r12,r12,4
 800e0c4:	337fbe36 	bltu	r6,r13,800dfc0 <__alt_data_end+0xfc00dfc0>
 800e0c8:	0400090e 	bge	zero,r16,800e0f0 <__multiply+0x1cc>
 800e0cc:	58ffff17 	ldw	r3,-4(r11)
 800e0d0:	5affff04 	addi	r11,r11,-4
 800e0d4:	18000326 	beq	r3,zero,800e0e4 <__multiply+0x1c0>
 800e0d8:	00000506 	br	800e0f0 <__multiply+0x1cc>
 800e0dc:	58c00017 	ldw	r3,0(r11)
 800e0e0:	1800031e 	bne	r3,zero,800e0f0 <__multiply+0x1cc>
 800e0e4:	843fffc4 	addi	r16,r16,-1
 800e0e8:	5affff04 	addi	r11,r11,-4
 800e0ec:	803ffb1e 	bne	r16,zero,800e0dc <__alt_data_end+0xfc00e0dc>
 800e0f0:	14000415 	stw	r16,16(r2)
 800e0f4:	dfc00517 	ldw	ra,20(sp)
 800e0f8:	dd000417 	ldw	r20,16(sp)
 800e0fc:	dcc00317 	ldw	r19,12(sp)
 800e100:	dc800217 	ldw	r18,8(sp)
 800e104:	dc400117 	ldw	r17,4(sp)
 800e108:	dc000017 	ldw	r16,0(sp)
 800e10c:	dec00604 	addi	sp,sp,24
 800e110:	f800283a 	ret
 800e114:	3029883a 	mov	r20,r6
 800e118:	2823883a 	mov	r17,r5
 800e11c:	003f9006 	br	800df60 <__alt_data_end+0xfc00df60>

0800e120 <__pow5mult>:
 800e120:	defffa04 	addi	sp,sp,-24
 800e124:	dcc00315 	stw	r19,12(sp)
 800e128:	dc800215 	stw	r18,8(sp)
 800e12c:	dc000015 	stw	r16,0(sp)
 800e130:	dfc00515 	stw	ra,20(sp)
 800e134:	dd000415 	stw	r20,16(sp)
 800e138:	dc400115 	stw	r17,4(sp)
 800e13c:	308000cc 	andi	r2,r6,3
 800e140:	3021883a 	mov	r16,r6
 800e144:	2027883a 	mov	r19,r4
 800e148:	2825883a 	mov	r18,r5
 800e14c:	10002e1e 	bne	r2,zero,800e208 <__pow5mult+0xe8>
 800e150:	8021d0ba 	srai	r16,r16,2
 800e154:	80001a26 	beq	r16,zero,800e1c0 <__pow5mult+0xa0>
 800e158:	9c401217 	ldw	r17,72(r19)
 800e15c:	8800061e 	bne	r17,zero,800e178 <__pow5mult+0x58>
 800e160:	00003406 	br	800e234 <__pow5mult+0x114>
 800e164:	8021d07a 	srai	r16,r16,1
 800e168:	80001526 	beq	r16,zero,800e1c0 <__pow5mult+0xa0>
 800e16c:	88800017 	ldw	r2,0(r17)
 800e170:	10001c26 	beq	r2,zero,800e1e4 <__pow5mult+0xc4>
 800e174:	1023883a 	mov	r17,r2
 800e178:	80c0004c 	andi	r3,r16,1
 800e17c:	183ff926 	beq	r3,zero,800e164 <__alt_data_end+0xfc00e164>
 800e180:	900b883a 	mov	r5,r18
 800e184:	880d883a 	mov	r6,r17
 800e188:	9809883a 	mov	r4,r19
 800e18c:	800df240 	call	800df24 <__multiply>
 800e190:	90001b26 	beq	r18,zero,800e200 <__pow5mult+0xe0>
 800e194:	91c00117 	ldw	r7,4(r18)
 800e198:	98c01317 	ldw	r3,76(r19)
 800e19c:	8021d07a 	srai	r16,r16,1
 800e1a0:	39cf883a 	add	r7,r7,r7
 800e1a4:	39cf883a 	add	r7,r7,r7
 800e1a8:	19c7883a 	add	r3,r3,r7
 800e1ac:	19000017 	ldw	r4,0(r3)
 800e1b0:	91000015 	stw	r4,0(r18)
 800e1b4:	1c800015 	stw	r18,0(r3)
 800e1b8:	1025883a 	mov	r18,r2
 800e1bc:	803feb1e 	bne	r16,zero,800e16c <__alt_data_end+0xfc00e16c>
 800e1c0:	9005883a 	mov	r2,r18
 800e1c4:	dfc00517 	ldw	ra,20(sp)
 800e1c8:	dd000417 	ldw	r20,16(sp)
 800e1cc:	dcc00317 	ldw	r19,12(sp)
 800e1d0:	dc800217 	ldw	r18,8(sp)
 800e1d4:	dc400117 	ldw	r17,4(sp)
 800e1d8:	dc000017 	ldw	r16,0(sp)
 800e1dc:	dec00604 	addi	sp,sp,24
 800e1e0:	f800283a 	ret
 800e1e4:	9809883a 	mov	r4,r19
 800e1e8:	880b883a 	mov	r5,r17
 800e1ec:	880d883a 	mov	r6,r17
 800e1f0:	800df240 	call	800df24 <__multiply>
 800e1f4:	88800015 	stw	r2,0(r17)
 800e1f8:	10000015 	stw	zero,0(r2)
 800e1fc:	003fdd06 	br	800e174 <__alt_data_end+0xfc00e174>
 800e200:	1025883a 	mov	r18,r2
 800e204:	003fd706 	br	800e164 <__alt_data_end+0xfc00e164>
 800e208:	10bfffc4 	addi	r2,r2,-1
 800e20c:	1085883a 	add	r2,r2,r2
 800e210:	00c200b4 	movhi	r3,2050
 800e214:	18c61e04 	addi	r3,r3,6264
 800e218:	1085883a 	add	r2,r2,r2
 800e21c:	1885883a 	add	r2,r3,r2
 800e220:	11800017 	ldw	r6,0(r2)
 800e224:	000f883a 	mov	r7,zero
 800e228:	800dbb80 	call	800dbb8 <__multadd>
 800e22c:	1025883a 	mov	r18,r2
 800e230:	003fc706 	br	800e150 <__alt_data_end+0xfc00e150>
 800e234:	05000044 	movi	r20,1
 800e238:	9809883a 	mov	r4,r19
 800e23c:	a00b883a 	mov	r5,r20
 800e240:	800dae80 	call	800dae8 <_Balloc>
 800e244:	1023883a 	mov	r17,r2
 800e248:	00809c44 	movi	r2,625
 800e24c:	88800515 	stw	r2,20(r17)
 800e250:	8d000415 	stw	r20,16(r17)
 800e254:	9c401215 	stw	r17,72(r19)
 800e258:	88000015 	stw	zero,0(r17)
 800e25c:	003fc606 	br	800e178 <__alt_data_end+0xfc00e178>

0800e260 <__lshift>:
 800e260:	defff904 	addi	sp,sp,-28
 800e264:	dd000415 	stw	r20,16(sp)
 800e268:	dcc00315 	stw	r19,12(sp)
 800e26c:	3029d17a 	srai	r20,r6,5
 800e270:	2cc00417 	ldw	r19,16(r5)
 800e274:	28800217 	ldw	r2,8(r5)
 800e278:	dd400515 	stw	r21,20(sp)
 800e27c:	a4e7883a 	add	r19,r20,r19
 800e280:	dc800215 	stw	r18,8(sp)
 800e284:	dc400115 	stw	r17,4(sp)
 800e288:	dc000015 	stw	r16,0(sp)
 800e28c:	dfc00615 	stw	ra,24(sp)
 800e290:	9c000044 	addi	r16,r19,1
 800e294:	2823883a 	mov	r17,r5
 800e298:	302b883a 	mov	r21,r6
 800e29c:	2025883a 	mov	r18,r4
 800e2a0:	29400117 	ldw	r5,4(r5)
 800e2a4:	1400030e 	bge	r2,r16,800e2b4 <__lshift+0x54>
 800e2a8:	1085883a 	add	r2,r2,r2
 800e2ac:	29400044 	addi	r5,r5,1
 800e2b0:	143ffd16 	blt	r2,r16,800e2a8 <__alt_data_end+0xfc00e2a8>
 800e2b4:	9009883a 	mov	r4,r18
 800e2b8:	800dae80 	call	800dae8 <_Balloc>
 800e2bc:	11c00504 	addi	r7,r2,20
 800e2c0:	0500090e 	bge	zero,r20,800e2e8 <__lshift+0x88>
 800e2c4:	3811883a 	mov	r8,r7
 800e2c8:	0007883a 	mov	r3,zero
 800e2cc:	40000015 	stw	zero,0(r8)
 800e2d0:	18c00044 	addi	r3,r3,1
 800e2d4:	42000104 	addi	r8,r8,4
 800e2d8:	1d3ffc1e 	bne	r3,r20,800e2cc <__alt_data_end+0xfc00e2cc>
 800e2dc:	18c7883a 	add	r3,r3,r3
 800e2e0:	18c7883a 	add	r3,r3,r3
 800e2e4:	38cf883a 	add	r7,r7,r3
 800e2e8:	89000417 	ldw	r4,16(r17)
 800e2ec:	88c00504 	addi	r3,r17,20
 800e2f0:	a98007cc 	andi	r6,r21,31
 800e2f4:	2109883a 	add	r4,r4,r4
 800e2f8:	2109883a 	add	r4,r4,r4
 800e2fc:	1909883a 	add	r4,r3,r4
 800e300:	30002326 	beq	r6,zero,800e390 <__lshift+0x130>
 800e304:	01400804 	movi	r5,32
 800e308:	298bc83a 	sub	r5,r5,r6
 800e30c:	0013883a 	mov	r9,zero
 800e310:	1a000017 	ldw	r8,0(r3)
 800e314:	3815883a 	mov	r10,r7
 800e318:	39c00104 	addi	r7,r7,4
 800e31c:	4190983a 	sll	r8,r8,r6
 800e320:	18c00104 	addi	r3,r3,4
 800e324:	4a10b03a 	or	r8,r9,r8
 800e328:	3a3fff15 	stw	r8,-4(r7)
 800e32c:	1a3fff17 	ldw	r8,-4(r3)
 800e330:	4152d83a 	srl	r9,r8,r5
 800e334:	193ff636 	bltu	r3,r4,800e310 <__alt_data_end+0xfc00e310>
 800e338:	52400115 	stw	r9,4(r10)
 800e33c:	48000126 	beq	r9,zero,800e344 <__lshift+0xe4>
 800e340:	9c000084 	addi	r16,r19,2
 800e344:	89000117 	ldw	r4,4(r17)
 800e348:	90c01317 	ldw	r3,76(r18)
 800e34c:	843fffc4 	addi	r16,r16,-1
 800e350:	2109883a 	add	r4,r4,r4
 800e354:	2109883a 	add	r4,r4,r4
 800e358:	1907883a 	add	r3,r3,r4
 800e35c:	19000017 	ldw	r4,0(r3)
 800e360:	14000415 	stw	r16,16(r2)
 800e364:	89000015 	stw	r4,0(r17)
 800e368:	1c400015 	stw	r17,0(r3)
 800e36c:	dfc00617 	ldw	ra,24(sp)
 800e370:	dd400517 	ldw	r21,20(sp)
 800e374:	dd000417 	ldw	r20,16(sp)
 800e378:	dcc00317 	ldw	r19,12(sp)
 800e37c:	dc800217 	ldw	r18,8(sp)
 800e380:	dc400117 	ldw	r17,4(sp)
 800e384:	dc000017 	ldw	r16,0(sp)
 800e388:	dec00704 	addi	sp,sp,28
 800e38c:	f800283a 	ret
 800e390:	19400017 	ldw	r5,0(r3)
 800e394:	39c00104 	addi	r7,r7,4
 800e398:	18c00104 	addi	r3,r3,4
 800e39c:	397fff15 	stw	r5,-4(r7)
 800e3a0:	193ffb36 	bltu	r3,r4,800e390 <__alt_data_end+0xfc00e390>
 800e3a4:	003fe706 	br	800e344 <__alt_data_end+0xfc00e344>

0800e3a8 <__mcmp>:
 800e3a8:	20800417 	ldw	r2,16(r4)
 800e3ac:	28c00417 	ldw	r3,16(r5)
 800e3b0:	10c5c83a 	sub	r2,r2,r3
 800e3b4:	1000111e 	bne	r2,zero,800e3fc <__mcmp+0x54>
 800e3b8:	18c7883a 	add	r3,r3,r3
 800e3bc:	18c7883a 	add	r3,r3,r3
 800e3c0:	21000504 	addi	r4,r4,20
 800e3c4:	29400504 	addi	r5,r5,20
 800e3c8:	20c5883a 	add	r2,r4,r3
 800e3cc:	28cb883a 	add	r5,r5,r3
 800e3d0:	00000106 	br	800e3d8 <__mcmp+0x30>
 800e3d4:	20800a2e 	bgeu	r4,r2,800e400 <__mcmp+0x58>
 800e3d8:	10bfff04 	addi	r2,r2,-4
 800e3dc:	297fff04 	addi	r5,r5,-4
 800e3e0:	11800017 	ldw	r6,0(r2)
 800e3e4:	28c00017 	ldw	r3,0(r5)
 800e3e8:	30fffa26 	beq	r6,r3,800e3d4 <__alt_data_end+0xfc00e3d4>
 800e3ec:	30c00236 	bltu	r6,r3,800e3f8 <__mcmp+0x50>
 800e3f0:	00800044 	movi	r2,1
 800e3f4:	f800283a 	ret
 800e3f8:	00bfffc4 	movi	r2,-1
 800e3fc:	f800283a 	ret
 800e400:	0005883a 	mov	r2,zero
 800e404:	f800283a 	ret

0800e408 <__mdiff>:
 800e408:	defffb04 	addi	sp,sp,-20
 800e40c:	dc000015 	stw	r16,0(sp)
 800e410:	2821883a 	mov	r16,r5
 800e414:	dcc00315 	stw	r19,12(sp)
 800e418:	300b883a 	mov	r5,r6
 800e41c:	2027883a 	mov	r19,r4
 800e420:	8009883a 	mov	r4,r16
 800e424:	dc800215 	stw	r18,8(sp)
 800e428:	dfc00415 	stw	ra,16(sp)
 800e42c:	dc400115 	stw	r17,4(sp)
 800e430:	3025883a 	mov	r18,r6
 800e434:	800e3a80 	call	800e3a8 <__mcmp>
 800e438:	10005226 	beq	r2,zero,800e584 <__mdiff+0x17c>
 800e43c:	10004c16 	blt	r2,zero,800e570 <__mdiff+0x168>
 800e440:	0023883a 	mov	r17,zero
 800e444:	81400117 	ldw	r5,4(r16)
 800e448:	9809883a 	mov	r4,r19
 800e44c:	800dae80 	call	800dae8 <_Balloc>
 800e450:	83400417 	ldw	r13,16(r16)
 800e454:	93800417 	ldw	r14,16(r18)
 800e458:	81000504 	addi	r4,r16,20
 800e45c:	6b59883a 	add	r12,r13,r13
 800e460:	739d883a 	add	r14,r14,r14
 800e464:	6319883a 	add	r12,r12,r12
 800e468:	91800504 	addi	r6,r18,20
 800e46c:	739d883a 	add	r14,r14,r14
 800e470:	14400315 	stw	r17,12(r2)
 800e474:	2319883a 	add	r12,r4,r12
 800e478:	339d883a 	add	r14,r6,r14
 800e47c:	12400504 	addi	r9,r2,20
 800e480:	0007883a 	mov	r3,zero
 800e484:	22000017 	ldw	r8,0(r4)
 800e488:	32800017 	ldw	r10,0(r6)
 800e48c:	4ac00104 	addi	r11,r9,4
 800e490:	41ffffcc 	andi	r7,r8,65535
 800e494:	38c7883a 	add	r3,r7,r3
 800e498:	51ffffcc 	andi	r7,r10,65535
 800e49c:	19cfc83a 	sub	r7,r3,r7
 800e4a0:	4010d43a 	srli	r8,r8,16
 800e4a4:	5014d43a 	srli	r10,r10,16
 800e4a8:	3807d43a 	srai	r3,r7,16
 800e4ac:	39ffffcc 	andi	r7,r7,65535
 800e4b0:	4291c83a 	sub	r8,r8,r10
 800e4b4:	40c7883a 	add	r3,r8,r3
 800e4b8:	1810943a 	slli	r8,r3,16
 800e4bc:	31800104 	addi	r6,r6,4
 800e4c0:	21000104 	addi	r4,r4,4
 800e4c4:	41ceb03a 	or	r7,r8,r7
 800e4c8:	49c00015 	stw	r7,0(r9)
 800e4cc:	1807d43a 	srai	r3,r3,16
 800e4d0:	580b883a 	mov	r5,r11
 800e4d4:	5813883a 	mov	r9,r11
 800e4d8:	33bfea36 	bltu	r6,r14,800e484 <__alt_data_end+0xfc00e484>
 800e4dc:	2011883a 	mov	r8,r4
 800e4e0:	2300152e 	bgeu	r4,r12,800e538 <__mdiff+0x130>
 800e4e4:	21400017 	ldw	r5,0(r4)
 800e4e8:	4a400104 	addi	r9,r9,4
 800e4ec:	21000104 	addi	r4,r4,4
 800e4f0:	29ffffcc 	andi	r7,r5,65535
 800e4f4:	38c7883a 	add	r3,r7,r3
 800e4f8:	280ad43a 	srli	r5,r5,16
 800e4fc:	180dd43a 	srai	r6,r3,16
 800e500:	19ffffcc 	andi	r7,r3,65535
 800e504:	3147883a 	add	r3,r6,r5
 800e508:	180a943a 	slli	r5,r3,16
 800e50c:	1807d43a 	srai	r3,r3,16
 800e510:	29ceb03a 	or	r7,r5,r7
 800e514:	49ffff15 	stw	r7,-4(r9)
 800e518:	233ff236 	bltu	r4,r12,800e4e4 <__alt_data_end+0xfc00e4e4>
 800e51c:	0206303a 	nor	r3,zero,r8
 800e520:	1b07883a 	add	r3,r3,r12
 800e524:	1806d0ba 	srli	r3,r3,2
 800e528:	18c00044 	addi	r3,r3,1
 800e52c:	18c7883a 	add	r3,r3,r3
 800e530:	18c7883a 	add	r3,r3,r3
 800e534:	58cb883a 	add	r5,r11,r3
 800e538:	28ffff04 	addi	r3,r5,-4
 800e53c:	3800041e 	bne	r7,zero,800e550 <__mdiff+0x148>
 800e540:	18ffff04 	addi	r3,r3,-4
 800e544:	19000017 	ldw	r4,0(r3)
 800e548:	6b7fffc4 	addi	r13,r13,-1
 800e54c:	203ffc26 	beq	r4,zero,800e540 <__alt_data_end+0xfc00e540>
 800e550:	13400415 	stw	r13,16(r2)
 800e554:	dfc00417 	ldw	ra,16(sp)
 800e558:	dcc00317 	ldw	r19,12(sp)
 800e55c:	dc800217 	ldw	r18,8(sp)
 800e560:	dc400117 	ldw	r17,4(sp)
 800e564:	dc000017 	ldw	r16,0(sp)
 800e568:	dec00504 	addi	sp,sp,20
 800e56c:	f800283a 	ret
 800e570:	8005883a 	mov	r2,r16
 800e574:	04400044 	movi	r17,1
 800e578:	9021883a 	mov	r16,r18
 800e57c:	1025883a 	mov	r18,r2
 800e580:	003fb006 	br	800e444 <__alt_data_end+0xfc00e444>
 800e584:	9809883a 	mov	r4,r19
 800e588:	000b883a 	mov	r5,zero
 800e58c:	800dae80 	call	800dae8 <_Balloc>
 800e590:	00c00044 	movi	r3,1
 800e594:	10c00415 	stw	r3,16(r2)
 800e598:	10000515 	stw	zero,20(r2)
 800e59c:	003fed06 	br	800e554 <__alt_data_end+0xfc00e554>

0800e5a0 <__ulp>:
 800e5a0:	295ffc2c 	andhi	r5,r5,32752
 800e5a4:	00bf3034 	movhi	r2,64704
 800e5a8:	2887883a 	add	r3,r5,r2
 800e5ac:	00c0020e 	bge	zero,r3,800e5b8 <__ulp+0x18>
 800e5b0:	0005883a 	mov	r2,zero
 800e5b4:	f800283a 	ret
 800e5b8:	00c7c83a 	sub	r3,zero,r3
 800e5bc:	180bd53a 	srai	r5,r3,20
 800e5c0:	008004c4 	movi	r2,19
 800e5c4:	11400a0e 	bge	r2,r5,800e5f0 <__ulp+0x50>
 800e5c8:	00800c84 	movi	r2,50
 800e5cc:	0007883a 	mov	r3,zero
 800e5d0:	11400516 	blt	r2,r5,800e5e8 <__ulp+0x48>
 800e5d4:	00800cc4 	movi	r2,51
 800e5d8:	114bc83a 	sub	r5,r2,r5
 800e5dc:	00800044 	movi	r2,1
 800e5e0:	1144983a 	sll	r2,r2,r5
 800e5e4:	f800283a 	ret
 800e5e8:	00800044 	movi	r2,1
 800e5ec:	f800283a 	ret
 800e5f0:	00800234 	movhi	r2,8
 800e5f4:	1147d83a 	sra	r3,r2,r5
 800e5f8:	0005883a 	mov	r2,zero
 800e5fc:	f800283a 	ret

0800e600 <__b2d>:
 800e600:	defffa04 	addi	sp,sp,-24
 800e604:	dc000015 	stw	r16,0(sp)
 800e608:	24000417 	ldw	r16,16(r4)
 800e60c:	dc400115 	stw	r17,4(sp)
 800e610:	24400504 	addi	r17,r4,20
 800e614:	8421883a 	add	r16,r16,r16
 800e618:	8421883a 	add	r16,r16,r16
 800e61c:	8c21883a 	add	r16,r17,r16
 800e620:	dc800215 	stw	r18,8(sp)
 800e624:	84bfff17 	ldw	r18,-4(r16)
 800e628:	dd000415 	stw	r20,16(sp)
 800e62c:	dcc00315 	stw	r19,12(sp)
 800e630:	9009883a 	mov	r4,r18
 800e634:	2829883a 	mov	r20,r5
 800e638:	dfc00515 	stw	ra,20(sp)
 800e63c:	800ddd00 	call	800ddd0 <__hi0bits>
 800e640:	00c00804 	movi	r3,32
 800e644:	1887c83a 	sub	r3,r3,r2
 800e648:	a0c00015 	stw	r3,0(r20)
 800e64c:	00c00284 	movi	r3,10
 800e650:	84ffff04 	addi	r19,r16,-4
 800e654:	18801216 	blt	r3,r2,800e6a0 <__b2d+0xa0>
 800e658:	014002c4 	movi	r5,11
 800e65c:	2889c83a 	sub	r4,r5,r2
 800e660:	9106d83a 	srl	r3,r18,r4
 800e664:	18cffc34 	orhi	r3,r3,16368
 800e668:	8cc0282e 	bgeu	r17,r19,800e70c <__b2d+0x10c>
 800e66c:	817ffe17 	ldw	r5,-8(r16)
 800e670:	290ad83a 	srl	r5,r5,r4
 800e674:	10800544 	addi	r2,r2,21
 800e678:	9084983a 	sll	r2,r18,r2
 800e67c:	2884b03a 	or	r2,r5,r2
 800e680:	dfc00517 	ldw	ra,20(sp)
 800e684:	dd000417 	ldw	r20,16(sp)
 800e688:	dcc00317 	ldw	r19,12(sp)
 800e68c:	dc800217 	ldw	r18,8(sp)
 800e690:	dc400117 	ldw	r17,4(sp)
 800e694:	dc000017 	ldw	r16,0(sp)
 800e698:	dec00604 	addi	sp,sp,24
 800e69c:	f800283a 	ret
 800e6a0:	113ffd44 	addi	r4,r2,-11
 800e6a4:	8cc00f2e 	bgeu	r17,r19,800e6e4 <__b2d+0xe4>
 800e6a8:	81bffe04 	addi	r6,r16,-8
 800e6ac:	817ffe17 	ldw	r5,-8(r16)
 800e6b0:	20001326 	beq	r4,zero,800e700 <__b2d+0x100>
 800e6b4:	00c00ac4 	movi	r3,43
 800e6b8:	1885c83a 	sub	r2,r3,r2
 800e6bc:	2886d83a 	srl	r3,r5,r2
 800e6c0:	9124983a 	sll	r18,r18,r4
 800e6c4:	90e4b03a 	or	r18,r18,r3
 800e6c8:	90cffc34 	orhi	r3,r18,16368
 800e6cc:	8980112e 	bgeu	r17,r6,800e714 <__b2d+0x114>
 800e6d0:	81bffd17 	ldw	r6,-12(r16)
 800e6d4:	308cd83a 	srl	r6,r6,r2
 800e6d8:	2904983a 	sll	r2,r5,r4
 800e6dc:	1184b03a 	or	r2,r2,r6
 800e6e0:	003fe706 	br	800e680 <__alt_data_end+0xfc00e680>
 800e6e4:	20000526 	beq	r4,zero,800e6fc <__b2d+0xfc>
 800e6e8:	9124983a 	sll	r18,r18,r4
 800e6ec:	000d883a 	mov	r6,zero
 800e6f0:	000b883a 	mov	r5,zero
 800e6f4:	90cffc34 	orhi	r3,r18,16368
 800e6f8:	003ff706 	br	800e6d8 <__alt_data_end+0xfc00e6d8>
 800e6fc:	000b883a 	mov	r5,zero
 800e700:	90cffc34 	orhi	r3,r18,16368
 800e704:	2805883a 	mov	r2,r5
 800e708:	003fdd06 	br	800e680 <__alt_data_end+0xfc00e680>
 800e70c:	000b883a 	mov	r5,zero
 800e710:	003fd806 	br	800e674 <__alt_data_end+0xfc00e674>
 800e714:	000d883a 	mov	r6,zero
 800e718:	003fef06 	br	800e6d8 <__alt_data_end+0xfc00e6d8>

0800e71c <__d2b>:
 800e71c:	defff704 	addi	sp,sp,-36
 800e720:	dc000215 	stw	r16,8(sp)
 800e724:	3021883a 	mov	r16,r6
 800e728:	dc400315 	stw	r17,12(sp)
 800e72c:	8022907a 	slli	r17,r16,1
 800e730:	dd400715 	stw	r21,28(sp)
 800e734:	282b883a 	mov	r21,r5
 800e738:	01400044 	movi	r5,1
 800e73c:	dd000615 	stw	r20,24(sp)
 800e740:	dcc00515 	stw	r19,20(sp)
 800e744:	dc800415 	stw	r18,16(sp)
 800e748:	dfc00815 	stw	ra,32(sp)
 800e74c:	3829883a 	mov	r20,r7
 800e750:	dc800917 	ldw	r18,36(sp)
 800e754:	8822d57a 	srli	r17,r17,21
 800e758:	800dae80 	call	800dae8 <_Balloc>
 800e75c:	1027883a 	mov	r19,r2
 800e760:	00800434 	movhi	r2,16
 800e764:	10bfffc4 	addi	r2,r2,-1
 800e768:	808c703a 	and	r6,r16,r2
 800e76c:	88000126 	beq	r17,zero,800e774 <__d2b+0x58>
 800e770:	31800434 	orhi	r6,r6,16
 800e774:	d9800015 	stw	r6,0(sp)
 800e778:	a8001f26 	beq	r21,zero,800e7f8 <__d2b+0xdc>
 800e77c:	d9000104 	addi	r4,sp,4
 800e780:	dd400115 	stw	r21,4(sp)
 800e784:	800de380 	call	800de38 <__lo0bits>
 800e788:	d8c00017 	ldw	r3,0(sp)
 800e78c:	1000291e 	bne	r2,zero,800e834 <__d2b+0x118>
 800e790:	d9000117 	ldw	r4,4(sp)
 800e794:	99000515 	stw	r4,20(r19)
 800e798:	1820c03a 	cmpne	r16,r3,zero
 800e79c:	84000044 	addi	r16,r16,1
 800e7a0:	98c00615 	stw	r3,24(r19)
 800e7a4:	9c000415 	stw	r16,16(r19)
 800e7a8:	88001b1e 	bne	r17,zero,800e818 <__d2b+0xfc>
 800e7ac:	800690ba 	slli	r3,r16,2
 800e7b0:	10bef384 	addi	r2,r2,-1074
 800e7b4:	a0800015 	stw	r2,0(r20)
 800e7b8:	98c5883a 	add	r2,r19,r3
 800e7bc:	11000417 	ldw	r4,16(r2)
 800e7c0:	8020917a 	slli	r16,r16,5
 800e7c4:	800ddd00 	call	800ddd0 <__hi0bits>
 800e7c8:	8085c83a 	sub	r2,r16,r2
 800e7cc:	90800015 	stw	r2,0(r18)
 800e7d0:	9805883a 	mov	r2,r19
 800e7d4:	dfc00817 	ldw	ra,32(sp)
 800e7d8:	dd400717 	ldw	r21,28(sp)
 800e7dc:	dd000617 	ldw	r20,24(sp)
 800e7e0:	dcc00517 	ldw	r19,20(sp)
 800e7e4:	dc800417 	ldw	r18,16(sp)
 800e7e8:	dc400317 	ldw	r17,12(sp)
 800e7ec:	dc000217 	ldw	r16,8(sp)
 800e7f0:	dec00904 	addi	sp,sp,36
 800e7f4:	f800283a 	ret
 800e7f8:	d809883a 	mov	r4,sp
 800e7fc:	800de380 	call	800de38 <__lo0bits>
 800e800:	d8c00017 	ldw	r3,0(sp)
 800e804:	04000044 	movi	r16,1
 800e808:	9c000415 	stw	r16,16(r19)
 800e80c:	98c00515 	stw	r3,20(r19)
 800e810:	10800804 	addi	r2,r2,32
 800e814:	883fe526 	beq	r17,zero,800e7ac <__alt_data_end+0xfc00e7ac>
 800e818:	8c7ef344 	addi	r17,r17,-1075
 800e81c:	88a3883a 	add	r17,r17,r2
 800e820:	00c00d44 	movi	r3,53
 800e824:	a4400015 	stw	r17,0(r20)
 800e828:	1885c83a 	sub	r2,r3,r2
 800e82c:	90800015 	stw	r2,0(r18)
 800e830:	003fe706 	br	800e7d0 <__alt_data_end+0xfc00e7d0>
 800e834:	01000804 	movi	r4,32
 800e838:	2089c83a 	sub	r4,r4,r2
 800e83c:	1908983a 	sll	r4,r3,r4
 800e840:	d9400117 	ldw	r5,4(sp)
 800e844:	1886d83a 	srl	r3,r3,r2
 800e848:	2148b03a 	or	r4,r4,r5
 800e84c:	99000515 	stw	r4,20(r19)
 800e850:	d8c00015 	stw	r3,0(sp)
 800e854:	003fd006 	br	800e798 <__alt_data_end+0xfc00e798>

0800e858 <__ratio>:
 800e858:	defff904 	addi	sp,sp,-28
 800e85c:	dc400315 	stw	r17,12(sp)
 800e860:	2823883a 	mov	r17,r5
 800e864:	d9400104 	addi	r5,sp,4
 800e868:	dfc00615 	stw	ra,24(sp)
 800e86c:	dcc00515 	stw	r19,20(sp)
 800e870:	dc800415 	stw	r18,16(sp)
 800e874:	2027883a 	mov	r19,r4
 800e878:	dc000215 	stw	r16,8(sp)
 800e87c:	800e6000 	call	800e600 <__b2d>
 800e880:	8809883a 	mov	r4,r17
 800e884:	d80b883a 	mov	r5,sp
 800e888:	1025883a 	mov	r18,r2
 800e88c:	1821883a 	mov	r16,r3
 800e890:	800e6000 	call	800e600 <__b2d>
 800e894:	8a400417 	ldw	r9,16(r17)
 800e898:	9a000417 	ldw	r8,16(r19)
 800e89c:	100d883a 	mov	r6,r2
 800e8a0:	d8800017 	ldw	r2,0(sp)
 800e8a4:	4251c83a 	sub	r8,r8,r9
 800e8a8:	4012917a 	slli	r9,r8,5
 800e8ac:	da000117 	ldw	r8,4(sp)
 800e8b0:	4091c83a 	sub	r8,r8,r2
 800e8b4:	4251883a 	add	r8,r8,r9
 800e8b8:	02000d0e 	bge	zero,r8,800e8f0 <__ratio+0x98>
 800e8bc:	4010953a 	slli	r8,r8,20
 800e8c0:	4421883a 	add	r16,r8,r16
 800e8c4:	9009883a 	mov	r4,r18
 800e8c8:	800b883a 	mov	r5,r16
 800e8cc:	180f883a 	mov	r7,r3
 800e8d0:	80029500 	call	8002950 <__divdf3>
 800e8d4:	dfc00617 	ldw	ra,24(sp)
 800e8d8:	dcc00517 	ldw	r19,20(sp)
 800e8dc:	dc800417 	ldw	r18,16(sp)
 800e8e0:	dc400317 	ldw	r17,12(sp)
 800e8e4:	dc000217 	ldw	r16,8(sp)
 800e8e8:	dec00704 	addi	sp,sp,28
 800e8ec:	f800283a 	ret
 800e8f0:	4010953a 	slli	r8,r8,20
 800e8f4:	1a07c83a 	sub	r3,r3,r8
 800e8f8:	003ff206 	br	800e8c4 <__alt_data_end+0xfc00e8c4>

0800e8fc <_mprec_log10>:
 800e8fc:	defffe04 	addi	sp,sp,-8
 800e900:	dc000015 	stw	r16,0(sp)
 800e904:	dfc00115 	stw	ra,4(sp)
 800e908:	008005c4 	movi	r2,23
 800e90c:	2021883a 	mov	r16,r4
 800e910:	11000d0e 	bge	r2,r4,800e948 <_mprec_log10+0x4c>
 800e914:	0005883a 	mov	r2,zero
 800e918:	00cffc34 	movhi	r3,16368
 800e91c:	843fffc4 	addi	r16,r16,-1
 800e920:	1009883a 	mov	r4,r2
 800e924:	180b883a 	mov	r5,r3
 800e928:	000d883a 	mov	r6,zero
 800e92c:	01d00934 	movhi	r7,16420
 800e930:	80138f40 	call	80138f4 <__muldf3>
 800e934:	803ff91e 	bne	r16,zero,800e91c <__alt_data_end+0xfc00e91c>
 800e938:	dfc00117 	ldw	ra,4(sp)
 800e93c:	dc000017 	ldw	r16,0(sp)
 800e940:	dec00204 	addi	sp,sp,8
 800e944:	f800283a 	ret
 800e948:	202090fa 	slli	r16,r4,3
 800e94c:	008200b4 	movhi	r2,2050
 800e950:	10863504 	addi	r2,r2,6356
 800e954:	1421883a 	add	r16,r2,r16
 800e958:	80800017 	ldw	r2,0(r16)
 800e95c:	80c00117 	ldw	r3,4(r16)
 800e960:	dfc00117 	ldw	ra,4(sp)
 800e964:	dc000017 	ldw	r16,0(sp)
 800e968:	dec00204 	addi	sp,sp,8
 800e96c:	f800283a 	ret

0800e970 <__copybits>:
 800e970:	297fffc4 	addi	r5,r5,-1
 800e974:	280fd17a 	srai	r7,r5,5
 800e978:	30c00417 	ldw	r3,16(r6)
 800e97c:	30800504 	addi	r2,r6,20
 800e980:	39c00044 	addi	r7,r7,1
 800e984:	18c7883a 	add	r3,r3,r3
 800e988:	39cf883a 	add	r7,r7,r7
 800e98c:	18c7883a 	add	r3,r3,r3
 800e990:	39cf883a 	add	r7,r7,r7
 800e994:	10c7883a 	add	r3,r2,r3
 800e998:	21cf883a 	add	r7,r4,r7
 800e99c:	10c00d2e 	bgeu	r2,r3,800e9d4 <__copybits+0x64>
 800e9a0:	200b883a 	mov	r5,r4
 800e9a4:	12000017 	ldw	r8,0(r2)
 800e9a8:	29400104 	addi	r5,r5,4
 800e9ac:	10800104 	addi	r2,r2,4
 800e9b0:	2a3fff15 	stw	r8,-4(r5)
 800e9b4:	10fffb36 	bltu	r2,r3,800e9a4 <__alt_data_end+0xfc00e9a4>
 800e9b8:	1985c83a 	sub	r2,r3,r6
 800e9bc:	10bffac4 	addi	r2,r2,-21
 800e9c0:	1004d0ba 	srli	r2,r2,2
 800e9c4:	10800044 	addi	r2,r2,1
 800e9c8:	1085883a 	add	r2,r2,r2
 800e9cc:	1085883a 	add	r2,r2,r2
 800e9d0:	2089883a 	add	r4,r4,r2
 800e9d4:	21c0032e 	bgeu	r4,r7,800e9e4 <__copybits+0x74>
 800e9d8:	20000015 	stw	zero,0(r4)
 800e9dc:	21000104 	addi	r4,r4,4
 800e9e0:	21fffd36 	bltu	r4,r7,800e9d8 <__alt_data_end+0xfc00e9d8>
 800e9e4:	f800283a 	ret

0800e9e8 <__any_on>:
 800e9e8:	20c00417 	ldw	r3,16(r4)
 800e9ec:	2805d17a 	srai	r2,r5,5
 800e9f0:	21000504 	addi	r4,r4,20
 800e9f4:	18800d0e 	bge	r3,r2,800ea2c <__any_on+0x44>
 800e9f8:	18c7883a 	add	r3,r3,r3
 800e9fc:	18c7883a 	add	r3,r3,r3
 800ea00:	20c7883a 	add	r3,r4,r3
 800ea04:	20c0192e 	bgeu	r4,r3,800ea6c <__any_on+0x84>
 800ea08:	18bfff17 	ldw	r2,-4(r3)
 800ea0c:	18ffff04 	addi	r3,r3,-4
 800ea10:	1000041e 	bne	r2,zero,800ea24 <__any_on+0x3c>
 800ea14:	20c0142e 	bgeu	r4,r3,800ea68 <__any_on+0x80>
 800ea18:	18ffff04 	addi	r3,r3,-4
 800ea1c:	19400017 	ldw	r5,0(r3)
 800ea20:	283ffc26 	beq	r5,zero,800ea14 <__alt_data_end+0xfc00ea14>
 800ea24:	00800044 	movi	r2,1
 800ea28:	f800283a 	ret
 800ea2c:	10c00a0e 	bge	r2,r3,800ea58 <__any_on+0x70>
 800ea30:	1085883a 	add	r2,r2,r2
 800ea34:	1085883a 	add	r2,r2,r2
 800ea38:	294007cc 	andi	r5,r5,31
 800ea3c:	2087883a 	add	r3,r4,r2
 800ea40:	283ff026 	beq	r5,zero,800ea04 <__alt_data_end+0xfc00ea04>
 800ea44:	19800017 	ldw	r6,0(r3)
 800ea48:	3144d83a 	srl	r2,r6,r5
 800ea4c:	114a983a 	sll	r5,r2,r5
 800ea50:	29bff41e 	bne	r5,r6,800ea24 <__alt_data_end+0xfc00ea24>
 800ea54:	003feb06 	br	800ea04 <__alt_data_end+0xfc00ea04>
 800ea58:	1085883a 	add	r2,r2,r2
 800ea5c:	1085883a 	add	r2,r2,r2
 800ea60:	2087883a 	add	r3,r4,r2
 800ea64:	003fe706 	br	800ea04 <__alt_data_end+0xfc00ea04>
 800ea68:	f800283a 	ret
 800ea6c:	0005883a 	mov	r2,zero
 800ea70:	f800283a 	ret

0800ea74 <_putc_r>:
 800ea74:	defffc04 	addi	sp,sp,-16
 800ea78:	dc000215 	stw	r16,8(sp)
 800ea7c:	dfc00315 	stw	ra,12(sp)
 800ea80:	2021883a 	mov	r16,r4
 800ea84:	20000226 	beq	r4,zero,800ea90 <_putc_r+0x1c>
 800ea88:	20800e17 	ldw	r2,56(r4)
 800ea8c:	10001b26 	beq	r2,zero,800eafc <_putc_r+0x88>
 800ea90:	30800217 	ldw	r2,8(r6)
 800ea94:	10bfffc4 	addi	r2,r2,-1
 800ea98:	30800215 	stw	r2,8(r6)
 800ea9c:	10000a16 	blt	r2,zero,800eac8 <_putc_r+0x54>
 800eaa0:	30800017 	ldw	r2,0(r6)
 800eaa4:	11400005 	stb	r5,0(r2)
 800eaa8:	30800017 	ldw	r2,0(r6)
 800eaac:	10c00044 	addi	r3,r2,1
 800eab0:	30c00015 	stw	r3,0(r6)
 800eab4:	10800003 	ldbu	r2,0(r2)
 800eab8:	dfc00317 	ldw	ra,12(sp)
 800eabc:	dc000217 	ldw	r16,8(sp)
 800eac0:	dec00404 	addi	sp,sp,16
 800eac4:	f800283a 	ret
 800eac8:	30c00617 	ldw	r3,24(r6)
 800eacc:	10c00616 	blt	r2,r3,800eae8 <_putc_r+0x74>
 800ead0:	30800017 	ldw	r2,0(r6)
 800ead4:	00c00284 	movi	r3,10
 800ead8:	11400005 	stb	r5,0(r2)
 800eadc:	30800017 	ldw	r2,0(r6)
 800eae0:	11400003 	ldbu	r5,0(r2)
 800eae4:	28fff11e 	bne	r5,r3,800eaac <__alt_data_end+0xfc00eaac>
 800eae8:	8009883a 	mov	r4,r16
 800eaec:	dfc00317 	ldw	ra,12(sp)
 800eaf0:	dc000217 	ldw	r16,8(sp)
 800eaf4:	dec00404 	addi	sp,sp,16
 800eaf8:	80115101 	jmpi	8011510 <__swbuf_r>
 800eafc:	d9400015 	stw	r5,0(sp)
 800eb00:	d9800115 	stw	r6,4(sp)
 800eb04:	800c2ac0 	call	800c2ac <__sinit>
 800eb08:	d9800117 	ldw	r6,4(sp)
 800eb0c:	d9400017 	ldw	r5,0(sp)
 800eb10:	003fdf06 	br	800ea90 <__alt_data_end+0xfc00ea90>

0800eb14 <putc>:
 800eb14:	defffc04 	addi	sp,sp,-16
 800eb18:	dc400115 	stw	r17,4(sp)
 800eb1c:	044200b4 	movhi	r17,2050
 800eb20:	8c4d4d04 	addi	r17,r17,13620
 800eb24:	dc800215 	stw	r18,8(sp)
 800eb28:	2025883a 	mov	r18,r4
 800eb2c:	89000017 	ldw	r4,0(r17)
 800eb30:	dc000015 	stw	r16,0(sp)
 800eb34:	dfc00315 	stw	ra,12(sp)
 800eb38:	2821883a 	mov	r16,r5
 800eb3c:	20000226 	beq	r4,zero,800eb48 <putc+0x34>
 800eb40:	20c00e17 	ldw	r3,56(r4)
 800eb44:	18001a26 	beq	r3,zero,800ebb0 <putc+0x9c>
 800eb48:	80800217 	ldw	r2,8(r16)
 800eb4c:	10bfffc4 	addi	r2,r2,-1
 800eb50:	80800215 	stw	r2,8(r16)
 800eb54:	10000c16 	blt	r2,zero,800eb88 <putc+0x74>
 800eb58:	80800017 	ldw	r2,0(r16)
 800eb5c:	14800005 	stb	r18,0(r2)
 800eb60:	80800017 	ldw	r2,0(r16)
 800eb64:	10c00044 	addi	r3,r2,1
 800eb68:	80c00015 	stw	r3,0(r16)
 800eb6c:	10800003 	ldbu	r2,0(r2)
 800eb70:	dfc00317 	ldw	ra,12(sp)
 800eb74:	dc800217 	ldw	r18,8(sp)
 800eb78:	dc400117 	ldw	r17,4(sp)
 800eb7c:	dc000017 	ldw	r16,0(sp)
 800eb80:	dec00404 	addi	sp,sp,16
 800eb84:	f800283a 	ret
 800eb88:	80c00617 	ldw	r3,24(r16)
 800eb8c:	10c00a16 	blt	r2,r3,800ebb8 <putc+0xa4>
 800eb90:	80800017 	ldw	r2,0(r16)
 800eb94:	00c00284 	movi	r3,10
 800eb98:	14800005 	stb	r18,0(r2)
 800eb9c:	80800017 	ldw	r2,0(r16)
 800eba0:	11400003 	ldbu	r5,0(r2)
 800eba4:	28ffef1e 	bne	r5,r3,800eb64 <__alt_data_end+0xfc00eb64>
 800eba8:	89000017 	ldw	r4,0(r17)
 800ebac:	00000406 	br	800ebc0 <putc+0xac>
 800ebb0:	800c2ac0 	call	800c2ac <__sinit>
 800ebb4:	003fe406 	br	800eb48 <__alt_data_end+0xfc00eb48>
 800ebb8:	89000017 	ldw	r4,0(r17)
 800ebbc:	900b883a 	mov	r5,r18
 800ebc0:	800d883a 	mov	r6,r16
 800ebc4:	dfc00317 	ldw	ra,12(sp)
 800ebc8:	dc800217 	ldw	r18,8(sp)
 800ebcc:	dc400117 	ldw	r17,4(sp)
 800ebd0:	dc000017 	ldw	r16,0(sp)
 800ebd4:	dec00404 	addi	sp,sp,16
 800ebd8:	80115101 	jmpi	8011510 <__swbuf_r>

0800ebdc <__fpclassifyd>:
 800ebdc:	00a00034 	movhi	r2,32768
 800ebe0:	10bfffc4 	addi	r2,r2,-1
 800ebe4:	2884703a 	and	r2,r5,r2
 800ebe8:	10000726 	beq	r2,zero,800ec08 <__fpclassifyd+0x2c>
 800ebec:	00fffc34 	movhi	r3,65520
 800ebf0:	019ff834 	movhi	r6,32736
 800ebf4:	28c7883a 	add	r3,r5,r3
 800ebf8:	31bfffc4 	addi	r6,r6,-1
 800ebfc:	30c00536 	bltu	r6,r3,800ec14 <__fpclassifyd+0x38>
 800ec00:	00800104 	movi	r2,4
 800ec04:	f800283a 	ret
 800ec08:	2000021e 	bne	r4,zero,800ec14 <__fpclassifyd+0x38>
 800ec0c:	00800084 	movi	r2,2
 800ec10:	f800283a 	ret
 800ec14:	00dffc34 	movhi	r3,32752
 800ec18:	019ff834 	movhi	r6,32736
 800ec1c:	28cb883a 	add	r5,r5,r3
 800ec20:	31bfffc4 	addi	r6,r6,-1
 800ec24:	317ff62e 	bgeu	r6,r5,800ec00 <__alt_data_end+0xfc00ec00>
 800ec28:	01400434 	movhi	r5,16
 800ec2c:	297fffc4 	addi	r5,r5,-1
 800ec30:	28800236 	bltu	r5,r2,800ec3c <__fpclassifyd+0x60>
 800ec34:	008000c4 	movi	r2,3
 800ec38:	f800283a 	ret
 800ec3c:	10c00226 	beq	r2,r3,800ec48 <__fpclassifyd+0x6c>
 800ec40:	0005883a 	mov	r2,zero
 800ec44:	f800283a 	ret
 800ec48:	2005003a 	cmpeq	r2,r4,zero
 800ec4c:	f800283a 	ret

0800ec50 <__sread>:
 800ec50:	defffe04 	addi	sp,sp,-8
 800ec54:	dc000015 	stw	r16,0(sp)
 800ec58:	2821883a 	mov	r16,r5
 800ec5c:	2940038f 	ldh	r5,14(r5)
 800ec60:	dfc00115 	stw	ra,4(sp)
 800ec64:	80121ec0 	call	80121ec <_read_r>
 800ec68:	10000716 	blt	r2,zero,800ec88 <__sread+0x38>
 800ec6c:	80c01417 	ldw	r3,80(r16)
 800ec70:	1887883a 	add	r3,r3,r2
 800ec74:	80c01415 	stw	r3,80(r16)
 800ec78:	dfc00117 	ldw	ra,4(sp)
 800ec7c:	dc000017 	ldw	r16,0(sp)
 800ec80:	dec00204 	addi	sp,sp,8
 800ec84:	f800283a 	ret
 800ec88:	80c0030b 	ldhu	r3,12(r16)
 800ec8c:	18fbffcc 	andi	r3,r3,61439
 800ec90:	80c0030d 	sth	r3,12(r16)
 800ec94:	dfc00117 	ldw	ra,4(sp)
 800ec98:	dc000017 	ldw	r16,0(sp)
 800ec9c:	dec00204 	addi	sp,sp,8
 800eca0:	f800283a 	ret

0800eca4 <__seofread>:
 800eca4:	0005883a 	mov	r2,zero
 800eca8:	f800283a 	ret

0800ecac <__swrite>:
 800ecac:	2880030b 	ldhu	r2,12(r5)
 800ecb0:	defffb04 	addi	sp,sp,-20
 800ecb4:	dcc00315 	stw	r19,12(sp)
 800ecb8:	dc800215 	stw	r18,8(sp)
 800ecbc:	dc400115 	stw	r17,4(sp)
 800ecc0:	dc000015 	stw	r16,0(sp)
 800ecc4:	dfc00415 	stw	ra,16(sp)
 800ecc8:	10c0400c 	andi	r3,r2,256
 800eccc:	2821883a 	mov	r16,r5
 800ecd0:	2027883a 	mov	r19,r4
 800ecd4:	3025883a 	mov	r18,r6
 800ecd8:	3823883a 	mov	r17,r7
 800ecdc:	18000526 	beq	r3,zero,800ecf4 <__swrite+0x48>
 800ece0:	2940038f 	ldh	r5,14(r5)
 800ece4:	000d883a 	mov	r6,zero
 800ece8:	01c00084 	movi	r7,2
 800ecec:	80120340 	call	8012034 <_lseek_r>
 800ecf0:	8080030b 	ldhu	r2,12(r16)
 800ecf4:	8140038f 	ldh	r5,14(r16)
 800ecf8:	10bbffcc 	andi	r2,r2,61439
 800ecfc:	9809883a 	mov	r4,r19
 800ed00:	900d883a 	mov	r6,r18
 800ed04:	880f883a 	mov	r7,r17
 800ed08:	8080030d 	sth	r2,12(r16)
 800ed0c:	dfc00417 	ldw	ra,16(sp)
 800ed10:	dcc00317 	ldw	r19,12(sp)
 800ed14:	dc800217 	ldw	r18,8(sp)
 800ed18:	dc400117 	ldw	r17,4(sp)
 800ed1c:	dc000017 	ldw	r16,0(sp)
 800ed20:	dec00504 	addi	sp,sp,20
 800ed24:	80116801 	jmpi	8011680 <_write_r>

0800ed28 <__sseek>:
 800ed28:	defffe04 	addi	sp,sp,-8
 800ed2c:	dc000015 	stw	r16,0(sp)
 800ed30:	2821883a 	mov	r16,r5
 800ed34:	2940038f 	ldh	r5,14(r5)
 800ed38:	dfc00115 	stw	ra,4(sp)
 800ed3c:	80120340 	call	8012034 <_lseek_r>
 800ed40:	00ffffc4 	movi	r3,-1
 800ed44:	10c00826 	beq	r2,r3,800ed68 <__sseek+0x40>
 800ed48:	80c0030b 	ldhu	r3,12(r16)
 800ed4c:	80801415 	stw	r2,80(r16)
 800ed50:	18c40014 	ori	r3,r3,4096
 800ed54:	80c0030d 	sth	r3,12(r16)
 800ed58:	dfc00117 	ldw	ra,4(sp)
 800ed5c:	dc000017 	ldw	r16,0(sp)
 800ed60:	dec00204 	addi	sp,sp,8
 800ed64:	f800283a 	ret
 800ed68:	80c0030b 	ldhu	r3,12(r16)
 800ed6c:	18fbffcc 	andi	r3,r3,61439
 800ed70:	80c0030d 	sth	r3,12(r16)
 800ed74:	dfc00117 	ldw	ra,4(sp)
 800ed78:	dc000017 	ldw	r16,0(sp)
 800ed7c:	dec00204 	addi	sp,sp,8
 800ed80:	f800283a 	ret

0800ed84 <__sclose>:
 800ed84:	2940038f 	ldh	r5,14(r5)
 800ed88:	80116dc1 	jmpi	80116dc <_close_r>

0800ed8c <strncmp>:
 800ed8c:	30002126 	beq	r6,zero,800ee14 <strncmp+0x88>
 800ed90:	2144b03a 	or	r2,r4,r5
 800ed94:	108000cc 	andi	r2,r2,3
 800ed98:	1000241e 	bne	r2,zero,800ee2c <strncmp+0xa0>
 800ed9c:	024000c4 	movi	r9,3
 800eda0:	4980222e 	bgeu	r9,r6,800ee2c <strncmp+0xa0>
 800eda4:	20800017 	ldw	r2,0(r4)
 800eda8:	28c00017 	ldw	r3,0(r5)
 800edac:	10c01f1e 	bne	r2,r3,800ee2c <strncmp+0xa0>
 800edb0:	31bfff04 	addi	r6,r6,-4
 800edb4:	30001726 	beq	r6,zero,800ee14 <strncmp+0x88>
 800edb8:	02ffbff4 	movhi	r11,65279
 800edbc:	5affbfc4 	addi	r11,r11,-257
 800edc0:	0086303a 	nor	r3,zero,r2
 800edc4:	02a02074 	movhi	r10,32897
 800edc8:	12c5883a 	add	r2,r2,r11
 800edcc:	52a02004 	addi	r10,r10,-32640
 800edd0:	10c4703a 	and	r2,r2,r3
 800edd4:	1284703a 	and	r2,r2,r10
 800edd8:	10000226 	beq	r2,zero,800ede4 <strncmp+0x58>
 800eddc:	00000d06 	br	800ee14 <strncmp+0x88>
 800ede0:	10000c1e 	bne	r2,zero,800ee14 <strncmp+0x88>
 800ede4:	21000104 	addi	r4,r4,4
 800ede8:	29400104 	addi	r5,r5,4
 800edec:	49800f2e 	bgeu	r9,r6,800ee2c <strncmp+0xa0>
 800edf0:	20c00017 	ldw	r3,0(r4)
 800edf4:	29c00017 	ldw	r7,0(r5)
 800edf8:	1ad1883a 	add	r8,r3,r11
 800edfc:	00c4303a 	nor	r2,zero,r3
 800ee00:	4084703a 	and	r2,r8,r2
 800ee04:	1284703a 	and	r2,r2,r10
 800ee08:	19c0081e 	bne	r3,r7,800ee2c <strncmp+0xa0>
 800ee0c:	31bfff04 	addi	r6,r6,-4
 800ee10:	303ff31e 	bne	r6,zero,800ede0 <__alt_data_end+0xfc00ede0>
 800ee14:	0005883a 	mov	r2,zero
 800ee18:	f800283a 	ret
 800ee1c:	303ffd26 	beq	r6,zero,800ee14 <__alt_data_end+0xfc00ee14>
 800ee20:	103ffc26 	beq	r2,zero,800ee14 <__alt_data_end+0xfc00ee14>
 800ee24:	21000044 	addi	r4,r4,1
 800ee28:	29400044 	addi	r5,r5,1
 800ee2c:	20800007 	ldb	r2,0(r4)
 800ee30:	28c00007 	ldb	r3,0(r5)
 800ee34:	31bfffc4 	addi	r6,r6,-1
 800ee38:	10fff826 	beq	r2,r3,800ee1c <__alt_data_end+0xfc00ee1c>
 800ee3c:	20800003 	ldbu	r2,0(r4)
 800ee40:	28c00003 	ldbu	r3,0(r5)
 800ee44:	10c5c83a 	sub	r2,r2,r3
 800ee48:	f800283a 	ret

0800ee4c <__ssprint_r>:
 800ee4c:	30800217 	ldw	r2,8(r6)
 800ee50:	defff604 	addi	sp,sp,-40
 800ee54:	ddc00715 	stw	r23,28(sp)
 800ee58:	dcc00315 	stw	r19,12(sp)
 800ee5c:	dfc00915 	stw	ra,36(sp)
 800ee60:	df000815 	stw	fp,32(sp)
 800ee64:	dd800615 	stw	r22,24(sp)
 800ee68:	dd400515 	stw	r21,20(sp)
 800ee6c:	dd000415 	stw	r20,16(sp)
 800ee70:	dc800215 	stw	r18,8(sp)
 800ee74:	dc400115 	stw	r17,4(sp)
 800ee78:	dc000015 	stw	r16,0(sp)
 800ee7c:	3027883a 	mov	r19,r6
 800ee80:	35c00017 	ldw	r23,0(r6)
 800ee84:	10005526 	beq	r2,zero,800efdc <__ssprint_r+0x190>
 800ee88:	2029883a 	mov	r20,r4
 800ee8c:	29000017 	ldw	r4,0(r5)
 800ee90:	2821883a 	mov	r16,r5
 800ee94:	0039883a 	mov	fp,zero
 800ee98:	0023883a 	mov	r17,zero
 800ee9c:	88003926 	beq	r17,zero,800ef84 <__ssprint_r+0x138>
 800eea0:	84800217 	ldw	r18,8(r16)
 800eea4:	902d883a 	mov	r22,r18
 800eea8:	8c803a36 	bltu	r17,r18,800ef94 <__ssprint_r+0x148>
 800eeac:	80c0030b 	ldhu	r3,12(r16)
 800eeb0:	1881200c 	andi	r2,r3,1152
 800eeb4:	10002626 	beq	r2,zero,800ef50 <__ssprint_r+0x104>
 800eeb8:	80800517 	ldw	r2,20(r16)
 800eebc:	81400417 	ldw	r5,16(r16)
 800eec0:	89c00044 	addi	r7,r17,1
 800eec4:	108d883a 	add	r6,r2,r2
 800eec8:	3085883a 	add	r2,r6,r2
 800eecc:	100cd7fa 	srli	r6,r2,31
 800eed0:	216dc83a 	sub	r22,r4,r5
 800eed4:	3d89883a 	add	r4,r7,r22
 800eed8:	3085883a 	add	r2,r6,r2
 800eedc:	1025d07a 	srai	r18,r2,1
 800eee0:	900d883a 	mov	r6,r18
 800eee4:	9100022e 	bgeu	r18,r4,800eef0 <__ssprint_r+0xa4>
 800eee8:	2025883a 	mov	r18,r4
 800eeec:	200d883a 	mov	r6,r4
 800eef0:	18c1000c 	andi	r3,r3,1024
 800eef4:	a009883a 	mov	r4,r20
 800eef8:	18002926 	beq	r3,zero,800efa0 <__ssprint_r+0x154>
 800eefc:	300b883a 	mov	r5,r6
 800ef00:	8003f000 	call	8003f00 <_malloc_r>
 800ef04:	102b883a 	mov	r21,r2
 800ef08:	10002b26 	beq	r2,zero,800efb8 <__ssprint_r+0x16c>
 800ef0c:	81400417 	ldw	r5,16(r16)
 800ef10:	1009883a 	mov	r4,r2
 800ef14:	b00d883a 	mov	r6,r22
 800ef18:	800d88c0 	call	800d88c <memcpy>
 800ef1c:	8080030b 	ldhu	r2,12(r16)
 800ef20:	00fedfc4 	movi	r3,-1153
 800ef24:	10c4703a 	and	r2,r2,r3
 800ef28:	10802014 	ori	r2,r2,128
 800ef2c:	8080030d 	sth	r2,12(r16)
 800ef30:	ad89883a 	add	r4,r21,r22
 800ef34:	95adc83a 	sub	r22,r18,r22
 800ef38:	84800515 	stw	r18,20(r16)
 800ef3c:	85800215 	stw	r22,8(r16)
 800ef40:	85400415 	stw	r21,16(r16)
 800ef44:	81000015 	stw	r4,0(r16)
 800ef48:	8825883a 	mov	r18,r17
 800ef4c:	882d883a 	mov	r22,r17
 800ef50:	e00b883a 	mov	r5,fp
 800ef54:	b00d883a 	mov	r6,r22
 800ef58:	80120900 	call	8012090 <memmove>
 800ef5c:	80c00217 	ldw	r3,8(r16)
 800ef60:	81000017 	ldw	r4,0(r16)
 800ef64:	98800217 	ldw	r2,8(r19)
 800ef68:	1ca5c83a 	sub	r18,r3,r18
 800ef6c:	2589883a 	add	r4,r4,r22
 800ef70:	84800215 	stw	r18,8(r16)
 800ef74:	81000015 	stw	r4,0(r16)
 800ef78:	1463c83a 	sub	r17,r2,r17
 800ef7c:	9c400215 	stw	r17,8(r19)
 800ef80:	88001626 	beq	r17,zero,800efdc <__ssprint_r+0x190>
 800ef84:	bf000017 	ldw	fp,0(r23)
 800ef88:	bc400117 	ldw	r17,4(r23)
 800ef8c:	bdc00204 	addi	r23,r23,8
 800ef90:	003fc206 	br	800ee9c <__alt_data_end+0xfc00ee9c>
 800ef94:	8825883a 	mov	r18,r17
 800ef98:	882d883a 	mov	r22,r17
 800ef9c:	003fec06 	br	800ef50 <__alt_data_end+0xfc00ef50>
 800efa0:	80122480 	call	8012248 <_realloc_r>
 800efa4:	102b883a 	mov	r21,r2
 800efa8:	103fe11e 	bne	r2,zero,800ef30 <__alt_data_end+0xfc00ef30>
 800efac:	81400417 	ldw	r5,16(r16)
 800efb0:	a009883a 	mov	r4,r20
 800efb4:	800c4200 	call	800c420 <_free_r>
 800efb8:	80c0030b 	ldhu	r3,12(r16)
 800efbc:	00800304 	movi	r2,12
 800efc0:	a0800015 	stw	r2,0(r20)
 800efc4:	18c01014 	ori	r3,r3,64
 800efc8:	80c0030d 	sth	r3,12(r16)
 800efcc:	00bfffc4 	movi	r2,-1
 800efd0:	98000215 	stw	zero,8(r19)
 800efd4:	98000115 	stw	zero,4(r19)
 800efd8:	00000206 	br	800efe4 <__ssprint_r+0x198>
 800efdc:	98000115 	stw	zero,4(r19)
 800efe0:	0005883a 	mov	r2,zero
 800efe4:	dfc00917 	ldw	ra,36(sp)
 800efe8:	df000817 	ldw	fp,32(sp)
 800efec:	ddc00717 	ldw	r23,28(sp)
 800eff0:	dd800617 	ldw	r22,24(sp)
 800eff4:	dd400517 	ldw	r21,20(sp)
 800eff8:	dd000417 	ldw	r20,16(sp)
 800effc:	dcc00317 	ldw	r19,12(sp)
 800f000:	dc800217 	ldw	r18,8(sp)
 800f004:	dc400117 	ldw	r17,4(sp)
 800f008:	dc000017 	ldw	r16,0(sp)
 800f00c:	dec00a04 	addi	sp,sp,40
 800f010:	f800283a 	ret

0800f014 <___svfiprintf_internal_r>:
 800f014:	2880030b 	ldhu	r2,12(r5)
 800f018:	deffc904 	addi	sp,sp,-220
 800f01c:	dd403215 	stw	r21,200(sp)
 800f020:	dfc03615 	stw	ra,216(sp)
 800f024:	df003515 	stw	fp,212(sp)
 800f028:	ddc03415 	stw	r23,208(sp)
 800f02c:	dd803315 	stw	r22,204(sp)
 800f030:	dd003115 	stw	r20,196(sp)
 800f034:	dcc03015 	stw	r19,192(sp)
 800f038:	dc802f15 	stw	r18,188(sp)
 800f03c:	dc402e15 	stw	r17,184(sp)
 800f040:	dc002d15 	stw	r16,180(sp)
 800f044:	d9402715 	stw	r5,156(sp)
 800f048:	d9002915 	stw	r4,164(sp)
 800f04c:	1080200c 	andi	r2,r2,128
 800f050:	d9c02315 	stw	r7,140(sp)
 800f054:	302b883a 	mov	r21,r6
 800f058:	10000226 	beq	r2,zero,800f064 <___svfiprintf_internal_r+0x50>
 800f05c:	28800417 	ldw	r2,16(r5)
 800f060:	1003ce26 	beq	r2,zero,800ff9c <___svfiprintf_internal_r+0xf88>
 800f064:	dac01a04 	addi	r11,sp,104
 800f068:	da8019c4 	addi	r10,sp,103
 800f06c:	dc802917 	ldw	r18,164(sp)
 800f070:	dd002717 	ldw	r20,156(sp)
 800f074:	04c200b4 	movhi	r19,2050
 800f078:	dac01e15 	stw	r11,120(sp)
 800f07c:	5a97c83a 	sub	r11,r11,r10
 800f080:	9cc66704 	addi	r19,r19,6556
 800f084:	da801f15 	stw	r10,124(sp)
 800f088:	dec01a15 	stw	sp,104(sp)
 800f08c:	d8001c15 	stw	zero,112(sp)
 800f090:	d8001b15 	stw	zero,108(sp)
 800f094:	d8002a15 	stw	zero,168(sp)
 800f098:	d8002415 	stw	zero,144(sp)
 800f09c:	d811883a 	mov	r8,sp
 800f0a0:	dac02b15 	stw	r11,172(sp)
 800f0a4:	a8800007 	ldb	r2,0(r21)
 800f0a8:	10026826 	beq	r2,zero,800fa4c <___svfiprintf_internal_r+0xa38>
 800f0ac:	01000944 	movi	r4,37
 800f0b0:	11026626 	beq	r2,r4,800fa4c <___svfiprintf_internal_r+0xa38>
 800f0b4:	a805883a 	mov	r2,r21
 800f0b8:	00000106 	br	800f0c0 <___svfiprintf_internal_r+0xac>
 800f0bc:	19000326 	beq	r3,r4,800f0cc <___svfiprintf_internal_r+0xb8>
 800f0c0:	10800044 	addi	r2,r2,1
 800f0c4:	10c00007 	ldb	r3,0(r2)
 800f0c8:	183ffc1e 	bne	r3,zero,800f0bc <__alt_data_end+0xfc00f0bc>
 800f0cc:	1561c83a 	sub	r16,r2,r21
 800f0d0:	102d883a 	mov	r22,r2
 800f0d4:	80000e26 	beq	r16,zero,800f110 <___svfiprintf_internal_r+0xfc>
 800f0d8:	d8c01c17 	ldw	r3,112(sp)
 800f0dc:	d8801b17 	ldw	r2,108(sp)
 800f0e0:	45400015 	stw	r21,0(r8)
 800f0e4:	1c07883a 	add	r3,r3,r16
 800f0e8:	10800044 	addi	r2,r2,1
 800f0ec:	d8c01c15 	stw	r3,112(sp)
 800f0f0:	44000115 	stw	r16,4(r8)
 800f0f4:	d8801b15 	stw	r2,108(sp)
 800f0f8:	00c001c4 	movi	r3,7
 800f0fc:	1882d616 	blt	r3,r2,800fc58 <___svfiprintf_internal_r+0xc44>
 800f100:	42000204 	addi	r8,r8,8
 800f104:	da802417 	ldw	r10,144(sp)
 800f108:	5415883a 	add	r10,r10,r16
 800f10c:	da802415 	stw	r10,144(sp)
 800f110:	b0800007 	ldb	r2,0(r22)
 800f114:	10027326 	beq	r2,zero,800fae4 <___svfiprintf_internal_r+0xad0>
 800f118:	b1000047 	ldb	r4,1(r22)
 800f11c:	b5400044 	addi	r21,r22,1
 800f120:	d8001d85 	stb	zero,118(sp)
 800f124:	000d883a 	mov	r6,zero
 800f128:	043fffc4 	movi	r16,-1
 800f12c:	d8002115 	stw	zero,132(sp)
 800f130:	0023883a 	mov	r17,zero
 800f134:	00c01604 	movi	r3,88
 800f138:	01400244 	movi	r5,9
 800f13c:	02400a84 	movi	r9,42
 800f140:	01c01b04 	movi	r7,108
 800f144:	ad400044 	addi	r21,r21,1
 800f148:	20bff804 	addi	r2,r4,-32
 800f14c:	18819536 	bltu	r3,r2,800f7a4 <___svfiprintf_internal_r+0x790>
 800f150:	100490ba 	slli	r2,r2,2
 800f154:	02c20074 	movhi	r11,2049
 800f158:	5afc5a04 	addi	r11,r11,-3736
 800f15c:	12c5883a 	add	r2,r2,r11
 800f160:	10800017 	ldw	r2,0(r2)
 800f164:	1000683a 	jmp	r2
 800f168:	0800f6a4 	muli	zero,at,986
 800f16c:	0800f7a4 	muli	zero,at,990
 800f170:	0800f7a4 	muli	zero,at,990
 800f174:	0800f698 	cmpnei	zero,at,986
 800f178:	0800f7a4 	muli	zero,at,990
 800f17c:	0800f7a4 	muli	zero,at,990
 800f180:	0800f7a4 	muli	zero,at,990
 800f184:	0800f7a4 	muli	zero,at,990
 800f188:	0800f7a4 	muli	zero,at,990
 800f18c:	0800f7a4 	muli	zero,at,990
 800f190:	0800f3c8 	cmpgei	zero,at,975
 800f194:	0800f7d8 	cmpnei	zero,at,991
 800f198:	0800f7a4 	muli	zero,at,990
 800f19c:	0800f3f0 	cmpltui	zero,at,975
 800f1a0:	0800f7e4 	muli	zero,at,991
 800f1a4:	0800f7a4 	muli	zero,at,990
 800f1a8:	0800f7cc 	andi	zero,at,991
 800f1ac:	0800f76c 	andhi	zero,at,989
 800f1b0:	0800f76c 	andhi	zero,at,989
 800f1b4:	0800f76c 	andhi	zero,at,989
 800f1b8:	0800f76c 	andhi	zero,at,989
 800f1bc:	0800f76c 	andhi	zero,at,989
 800f1c0:	0800f76c 	andhi	zero,at,989
 800f1c4:	0800f76c 	andhi	zero,at,989
 800f1c8:	0800f76c 	andhi	zero,at,989
 800f1cc:	0800f76c 	andhi	zero,at,989
 800f1d0:	0800f7a4 	muli	zero,at,990
 800f1d4:	0800f7a4 	muli	zero,at,990
 800f1d8:	0800f7a4 	muli	zero,at,990
 800f1dc:	0800f7a4 	muli	zero,at,990
 800f1e0:	0800f7a4 	muli	zero,at,990
 800f1e4:	0800f7a4 	muli	zero,at,990
 800f1e8:	0800f7a4 	muli	zero,at,990
 800f1ec:	0800f7a4 	muli	zero,at,990
 800f1f0:	0800f7a4 	muli	zero,at,990
 800f1f4:	0800f7a4 	muli	zero,at,990
 800f1f8:	0800f704 	addi	zero,at,988
 800f1fc:	0800f7a4 	muli	zero,at,990
 800f200:	0800f7a4 	muli	zero,at,990
 800f204:	0800f7a4 	muli	zero,at,990
 800f208:	0800f7a4 	muli	zero,at,990
 800f20c:	0800f7a4 	muli	zero,at,990
 800f210:	0800f7a4 	muli	zero,at,990
 800f214:	0800f7a4 	muli	zero,at,990
 800f218:	0800f7a4 	muli	zero,at,990
 800f21c:	0800f7a4 	muli	zero,at,990
 800f220:	0800f7a4 	muli	zero,at,990
 800f224:	0800f398 	cmpnei	zero,at,974
 800f228:	0800f7a4 	muli	zero,at,990
 800f22c:	0800f7a4 	muli	zero,at,990
 800f230:	0800f7a4 	muli	zero,at,990
 800f234:	0800f7a4 	muli	zero,at,990
 800f238:	0800f7a4 	muli	zero,at,990
 800f23c:	0800f2cc 	andi	zero,at,971
 800f240:	0800f7a4 	muli	zero,at,990
 800f244:	0800f7a4 	muli	zero,at,990
 800f248:	0800f5f8 	rdprs	zero,at,983
 800f24c:	0800f7a4 	muli	zero,at,990
 800f250:	0800f7a4 	muli	zero,at,990
 800f254:	0800f7a4 	muli	zero,at,990
 800f258:	0800f7a4 	muli	zero,at,990
 800f25c:	0800f7a4 	muli	zero,at,990
 800f260:	0800f7a4 	muli	zero,at,990
 800f264:	0800f7a4 	muli	zero,at,990
 800f268:	0800f7a4 	muli	zero,at,990
 800f26c:	0800f7a4 	muli	zero,at,990
 800f270:	0800f7a4 	muli	zero,at,990
 800f274:	0800f4e4 	muli	zero,at,979
 800f278:	0800f4a4 	muli	zero,at,978
 800f27c:	0800f7a4 	muli	zero,at,990
 800f280:	0800f7a4 	muli	zero,at,990
 800f284:	0800f7a4 	muli	zero,at,990
 800f288:	0800f654 	ori	zero,at,985
 800f28c:	0800f4a4 	muli	zero,at,978
 800f290:	0800f7a4 	muli	zero,at,990
 800f294:	0800f7a4 	muli	zero,at,990
 800f298:	0800f640 	call	800f64 <__alt_mem_sdram-0x77ff09c>
 800f29c:	0800f7a4 	muli	zero,at,990
 800f2a0:	0800f660 	cmpeqi	zero,at,985
 800f2a4:	0800f39c 	xori	zero,at,974
 800f2a8:	0800f464 	muli	zero,at,977
 800f2ac:	0800f458 	cmpnei	zero,at,977
 800f2b0:	0800f7a4 	muli	zero,at,990
 800f2b4:	0800f3fc 	xorhi	zero,at,975
 800f2b8:	0800f7a4 	muli	zero,at,990
 800f2bc:	0800f2d0 	cmplti	zero,at,971
 800f2c0:	0800f7a4 	muli	zero,at,990
 800f2c4:	0800f7a4 	muli	zero,at,990
 800f2c8:	0800f6c0 	call	800f6c <__alt_mem_sdram-0x77ff094>
 800f2cc:	8c400414 	ori	r17,r17,16
 800f2d0:	88c0080c 	andi	r3,r17,32
 800f2d4:	d8802317 	ldw	r2,140(sp)
 800f2d8:	18029626 	beq	r3,zero,800fd34 <___svfiprintf_internal_r+0xd20>
 800f2dc:	dac02317 	ldw	r11,140(sp)
 800f2e0:	12400017 	ldw	r9,0(r2)
 800f2e4:	12800117 	ldw	r10,4(r2)
 800f2e8:	5ac00204 	addi	r11,r11,8
 800f2ec:	dac02315 	stw	r11,140(sp)
 800f2f0:	00800044 	movi	r2,1
 800f2f4:	4a86b03a 	or	r3,r9,r10
 800f2f8:	d8001d85 	stb	zero,118(sp)
 800f2fc:	8039883a 	mov	fp,r16
 800f300:	0017883a 	mov	r11,zero
 800f304:	80000216 	blt	r16,zero,800f310 <___svfiprintf_internal_r+0x2fc>
 800f308:	013fdfc4 	movi	r4,-129
 800f30c:	8922703a 	and	r17,r17,r4
 800f310:	1801d01e 	bne	r3,zero,800fa54 <___svfiprintf_internal_r+0xa40>
 800f314:	80024426 	beq	r16,zero,800fc28 <___svfiprintf_internal_r+0xc14>
 800f318:	10803fcc 	andi	r2,r2,255
 800f31c:	00c00044 	movi	r3,1
 800f320:	10c2b326 	beq	r2,r3,800fdf0 <___svfiprintf_internal_r+0xddc>
 800f324:	00c00084 	movi	r3,2
 800f328:	10c25b26 	beq	r2,r3,800fc98 <___svfiprintf_internal_r+0xc84>
 800f32c:	d8c01a04 	addi	r3,sp,104
 800f330:	4808d0fa 	srli	r4,r9,3
 800f334:	500a977a 	slli	r5,r10,29
 800f338:	5014d0fa 	srli	r10,r10,3
 800f33c:	4a4001cc 	andi	r9,r9,7
 800f340:	48800c04 	addi	r2,r9,48
 800f344:	18ffffc4 	addi	r3,r3,-1
 800f348:	2912b03a 	or	r9,r5,r4
 800f34c:	18800005 	stb	r2,0(r3)
 800f350:	4a88b03a 	or	r4,r9,r10
 800f354:	203ff61e 	bne	r4,zero,800f330 <__alt_data_end+0xfc00f330>
 800f358:	8900004c 	andi	r4,r17,1
 800f35c:	d8c02615 	stw	r3,152(sp)
 800f360:	2002951e 	bne	r4,zero,800fdb8 <___svfiprintf_internal_r+0xda4>
 800f364:	da801e17 	ldw	r10,120(sp)
 800f368:	50f9c83a 	sub	fp,r10,r3
 800f36c:	df002015 	stw	fp,128(sp)
 800f370:	e400010e 	bge	fp,r16,800f378 <___svfiprintf_internal_r+0x364>
 800f374:	dc002015 	stw	r16,128(sp)
 800f378:	5ac03fcc 	andi	r11,r11,255
 800f37c:	5ac0201c 	xori	r11,r11,128
 800f380:	5affe004 	addi	r11,r11,-128
 800f384:	58006326 	beq	r11,zero,800f514 <___svfiprintf_internal_r+0x500>
 800f388:	d8c02017 	ldw	r3,128(sp)
 800f38c:	18c00044 	addi	r3,r3,1
 800f390:	d8c02015 	stw	r3,128(sp)
 800f394:	00005f06 	br	800f514 <___svfiprintf_internal_r+0x500>
 800f398:	8c400414 	ori	r17,r17,16
 800f39c:	88c0080c 	andi	r3,r17,32
 800f3a0:	d8802317 	ldw	r2,140(sp)
 800f3a4:	18027826 	beq	r3,zero,800fd88 <___svfiprintf_internal_r+0xd74>
 800f3a8:	dac02317 	ldw	r11,140(sp)
 800f3ac:	12400017 	ldw	r9,0(r2)
 800f3b0:	12800117 	ldw	r10,4(r2)
 800f3b4:	5ac00204 	addi	r11,r11,8
 800f3b8:	dac02315 	stw	r11,140(sp)
 800f3bc:	0005883a 	mov	r2,zero
 800f3c0:	4a86b03a 	or	r3,r9,r10
 800f3c4:	003fcc06 	br	800f2f8 <__alt_data_end+0xfc00f2f8>
 800f3c8:	da802317 	ldw	r10,140(sp)
 800f3cc:	dac02317 	ldw	r11,140(sp)
 800f3d0:	52800017 	ldw	r10,0(r10)
 800f3d4:	58800104 	addi	r2,r11,4
 800f3d8:	da802115 	stw	r10,132(sp)
 800f3dc:	50028a0e 	bge	r10,zero,800fe08 <___svfiprintf_internal_r+0xdf4>
 800f3e0:	da802117 	ldw	r10,132(sp)
 800f3e4:	d8802315 	stw	r2,140(sp)
 800f3e8:	0295c83a 	sub	r10,zero,r10
 800f3ec:	da802115 	stw	r10,132(sp)
 800f3f0:	8c400114 	ori	r17,r17,4
 800f3f4:	a9000007 	ldb	r4,0(r21)
 800f3f8:	003f5206 	br	800f144 <__alt_data_end+0xfc00f144>
 800f3fc:	da802317 	ldw	r10,140(sp)
 800f400:	dac02317 	ldw	r11,140(sp)
 800f404:	d8001d85 	stb	zero,118(sp)
 800f408:	52800017 	ldw	r10,0(r10)
 800f40c:	5dc00104 	addi	r23,r11,4
 800f410:	da802615 	stw	r10,152(sp)
 800f414:	5002eb26 	beq	r10,zero,800ffc4 <___svfiprintf_internal_r+0xfb0>
 800f418:	d9002617 	ldw	r4,152(sp)
 800f41c:	8002d716 	blt	r16,zero,800ff7c <___svfiprintf_internal_r+0xf68>
 800f420:	000b883a 	mov	r5,zero
 800f424:	800d883a 	mov	r6,r16
 800f428:	da002c15 	stw	r8,176(sp)
 800f42c:	800d7a40 	call	800d7a4 <memchr>
 800f430:	da002c17 	ldw	r8,176(sp)
 800f434:	1002fb26 	beq	r2,zero,8010024 <___svfiprintf_internal_r+0x1010>
 800f438:	d8c02617 	ldw	r3,152(sp)
 800f43c:	10f9c83a 	sub	fp,r2,r3
 800f440:	8700010e 	bge	r16,fp,800f448 <___svfiprintf_internal_r+0x434>
 800f444:	8039883a 	mov	fp,r16
 800f448:	dac01d83 	ldbu	r11,118(sp)
 800f44c:	ddc02315 	stw	r23,140(sp)
 800f450:	0021883a 	mov	r16,zero
 800f454:	003fc506 	br	800f36c <__alt_data_end+0xfc00f36c>
 800f458:	8c400814 	ori	r17,r17,32
 800f45c:	a9000007 	ldb	r4,0(r21)
 800f460:	003f3806 	br	800f144 <__alt_data_end+0xfc00f144>
 800f464:	dac02317 	ldw	r11,140(sp)
 800f468:	00800c04 	movi	r2,48
 800f46c:	d8801d05 	stb	r2,116(sp)
 800f470:	5a400017 	ldw	r9,0(r11)
 800f474:	00801e04 	movi	r2,120
 800f478:	d8801d45 	stb	r2,117(sp)
 800f47c:	008200b4 	movhi	r2,2050
 800f480:	1085f704 	addi	r2,r2,6108
 800f484:	5ac00104 	addi	r11,r11,4
 800f488:	d8802a15 	stw	r2,168(sp)
 800f48c:	0015883a 	mov	r10,zero
 800f490:	8c400094 	ori	r17,r17,2
 800f494:	dac02315 	stw	r11,140(sp)
 800f498:	00800084 	movi	r2,2
 800f49c:	4807883a 	mov	r3,r9
 800f4a0:	003f9506 	br	800f2f8 <__alt_data_end+0xfc00f2f8>
 800f4a4:	d9801d85 	stb	r6,118(sp)
 800f4a8:	8880080c 	andi	r2,r17,32
 800f4ac:	d8c02317 	ldw	r3,140(sp)
 800f4b0:	10009926 	beq	r2,zero,800f718 <___svfiprintf_internal_r+0x704>
 800f4b4:	dac02317 	ldw	r11,140(sp)
 800f4b8:	18800117 	ldw	r2,4(r3)
 800f4bc:	1a400017 	ldw	r9,0(r3)
 800f4c0:	5ac00204 	addi	r11,r11,8
 800f4c4:	dac02315 	stw	r11,140(sp)
 800f4c8:	1015883a 	mov	r10,r2
 800f4cc:	10009d16 	blt	r2,zero,800f744 <___svfiprintf_internal_r+0x730>
 800f4d0:	dac01d83 	ldbu	r11,118(sp)
 800f4d4:	8039883a 	mov	fp,r16
 800f4d8:	00800044 	movi	r2,1
 800f4dc:	4a86b03a 	or	r3,r9,r10
 800f4e0:	003f8806 	br	800f304 <__alt_data_end+0xfc00f304>
 800f4e4:	dac02317 	ldw	r11,140(sp)
 800f4e8:	00c00044 	movi	r3,1
 800f4ec:	da801004 	addi	r10,sp,64
 800f4f0:	58800017 	ldw	r2,0(r11)
 800f4f4:	5ac00104 	addi	r11,r11,4
 800f4f8:	d8c02015 	stw	r3,128(sp)
 800f4fc:	d8001d85 	stb	zero,118(sp)
 800f500:	d8801005 	stb	r2,64(sp)
 800f504:	dac02315 	stw	r11,140(sp)
 800f508:	1839883a 	mov	fp,r3
 800f50c:	da802615 	stw	r10,152(sp)
 800f510:	0021883a 	mov	r16,zero
 800f514:	8a80008c 	andi	r10,r17,2
 800f518:	da802215 	stw	r10,136(sp)
 800f51c:	50000326 	beq	r10,zero,800f52c <___svfiprintf_internal_r+0x518>
 800f520:	dac02017 	ldw	r11,128(sp)
 800f524:	5ac00084 	addi	r11,r11,2
 800f528:	dac02015 	stw	r11,128(sp)
 800f52c:	88c0210c 	andi	r3,r17,132
 800f530:	d8c02515 	stw	r3,148(sp)
 800f534:	1800bb1e 	bne	r3,zero,800f824 <___svfiprintf_internal_r+0x810>
 800f538:	da802117 	ldw	r10,132(sp)
 800f53c:	dac02017 	ldw	r11,128(sp)
 800f540:	52edc83a 	sub	r22,r10,r11
 800f544:	0580b70e 	bge	zero,r22,800f824 <___svfiprintf_internal_r+0x810>
 800f548:	02400404 	movi	r9,16
 800f54c:	d8c01c17 	ldw	r3,112(sp)
 800f550:	d8801b17 	ldw	r2,108(sp)
 800f554:	4d82a70e 	bge	r9,r22,800fff4 <___svfiprintf_internal_r+0xfe0>
 800f558:	014200b4 	movhi	r5,2050
 800f55c:	29466b04 	addi	r5,r5,6572
 800f560:	d9402815 	stw	r5,160(sp)
 800f564:	05c001c4 	movi	r23,7
 800f568:	00000306 	br	800f578 <___svfiprintf_internal_r+0x564>
 800f56c:	b5bffc04 	addi	r22,r22,-16
 800f570:	42000204 	addi	r8,r8,8
 800f574:	4d80150e 	bge	r9,r22,800f5cc <___svfiprintf_internal_r+0x5b8>
 800f578:	028200b4 	movhi	r10,2050
 800f57c:	18c00404 	addi	r3,r3,16
 800f580:	10800044 	addi	r2,r2,1
 800f584:	52866b04 	addi	r10,r10,6572
 800f588:	42800015 	stw	r10,0(r8)
 800f58c:	42400115 	stw	r9,4(r8)
 800f590:	d8c01c15 	stw	r3,112(sp)
 800f594:	d8801b15 	stw	r2,108(sp)
 800f598:	b8bff40e 	bge	r23,r2,800f56c <__alt_data_end+0xfc00f56c>
 800f59c:	9009883a 	mov	r4,r18
 800f5a0:	a00b883a 	mov	r5,r20
 800f5a4:	d9801a04 	addi	r6,sp,104
 800f5a8:	da402c15 	stw	r9,176(sp)
 800f5ac:	800ee4c0 	call	800ee4c <__ssprint_r>
 800f5b0:	da402c17 	ldw	r9,176(sp)
 800f5b4:	1001511e 	bne	r2,zero,800fafc <___svfiprintf_internal_r+0xae8>
 800f5b8:	b5bffc04 	addi	r22,r22,-16
 800f5bc:	d8c01c17 	ldw	r3,112(sp)
 800f5c0:	d8801b17 	ldw	r2,108(sp)
 800f5c4:	d811883a 	mov	r8,sp
 800f5c8:	4dbfeb16 	blt	r9,r22,800f578 <__alt_data_end+0xfc00f578>
 800f5cc:	dac02817 	ldw	r11,160(sp)
 800f5d0:	b0c7883a 	add	r3,r22,r3
 800f5d4:	10800044 	addi	r2,r2,1
 800f5d8:	42c00015 	stw	r11,0(r8)
 800f5dc:	45800115 	stw	r22,4(r8)
 800f5e0:	d8c01c15 	stw	r3,112(sp)
 800f5e4:	d8801b15 	stw	r2,108(sp)
 800f5e8:	010001c4 	movi	r4,7
 800f5ec:	2081dd16 	blt	r4,r2,800fd64 <___svfiprintf_internal_r+0xd50>
 800f5f0:	42000204 	addi	r8,r8,8
 800f5f4:	00008d06 	br	800f82c <___svfiprintf_internal_r+0x818>
 800f5f8:	00c200b4 	movhi	r3,2050
 800f5fc:	18c5f204 	addi	r3,r3,6088
 800f600:	d8c02a15 	stw	r3,168(sp)
 800f604:	d9801d85 	stb	r6,118(sp)
 800f608:	88c0080c 	andi	r3,r17,32
 800f60c:	d8802317 	ldw	r2,140(sp)
 800f610:	18003226 	beq	r3,zero,800f6dc <___svfiprintf_internal_r+0x6c8>
 800f614:	da802317 	ldw	r10,140(sp)
 800f618:	12400017 	ldw	r9,0(r2)
 800f61c:	52800204 	addi	r10,r10,8
 800f620:	da802315 	stw	r10,140(sp)
 800f624:	12800117 	ldw	r10,4(r2)
 800f628:	8880004c 	andi	r2,r17,1
 800f62c:	1001be26 	beq	r2,zero,800fd28 <___svfiprintf_internal_r+0xd14>
 800f630:	4a86b03a 	or	r3,r9,r10
 800f634:	1802291e 	bne	r3,zero,800fedc <___svfiprintf_internal_r+0xec8>
 800f638:	00800084 	movi	r2,2
 800f63c:	003f2e06 	br	800f2f8 <__alt_data_end+0xfc00f2f8>
 800f640:	a9000007 	ldb	r4,0(r21)
 800f644:	a805883a 	mov	r2,r21
 800f648:	21c22a26 	beq	r4,r7,800fef4 <___svfiprintf_internal_r+0xee0>
 800f64c:	8c400414 	ori	r17,r17,16
 800f650:	003ebc06 	br	800f144 <__alt_data_end+0xfc00f144>
 800f654:	8c401014 	ori	r17,r17,64
 800f658:	a9000007 	ldb	r4,0(r21)
 800f65c:	003eb906 	br	800f144 <__alt_data_end+0xfc00f144>
 800f660:	d9801d85 	stb	r6,118(sp)
 800f664:	8880080c 	andi	r2,r17,32
 800f668:	1002131e 	bne	r2,zero,800feb8 <___svfiprintf_internal_r+0xea4>
 800f66c:	8880040c 	andi	r2,r17,16
 800f670:	1002241e 	bne	r2,zero,800ff04 <___svfiprintf_internal_r+0xef0>
 800f674:	8c40100c 	andi	r17,r17,64
 800f678:	88022226 	beq	r17,zero,800ff04 <___svfiprintf_internal_r+0xef0>
 800f67c:	dac02317 	ldw	r11,140(sp)
 800f680:	da802417 	ldw	r10,144(sp)
 800f684:	58800017 	ldw	r2,0(r11)
 800f688:	5ac00104 	addi	r11,r11,4
 800f68c:	dac02315 	stw	r11,140(sp)
 800f690:	1280000d 	sth	r10,0(r2)
 800f694:	003e8306 	br	800f0a4 <__alt_data_end+0xfc00f0a4>
 800f698:	8c400054 	ori	r17,r17,1
 800f69c:	a9000007 	ldb	r4,0(r21)
 800f6a0:	003ea806 	br	800f144 <__alt_data_end+0xfc00f144>
 800f6a4:	30803fcc 	andi	r2,r6,255
 800f6a8:	1080201c 	xori	r2,r2,128
 800f6ac:	10bfe004 	addi	r2,r2,-128
 800f6b0:	1001ff1e 	bne	r2,zero,800feb0 <___svfiprintf_internal_r+0xe9c>
 800f6b4:	01800804 	movi	r6,32
 800f6b8:	a9000007 	ldb	r4,0(r21)
 800f6bc:	003ea106 	br	800f144 <__alt_data_end+0xfc00f144>
 800f6c0:	02c200b4 	movhi	r11,2050
 800f6c4:	5ac5f704 	addi	r11,r11,6108
 800f6c8:	dac02a15 	stw	r11,168(sp)
 800f6cc:	d9801d85 	stb	r6,118(sp)
 800f6d0:	88c0080c 	andi	r3,r17,32
 800f6d4:	d8802317 	ldw	r2,140(sp)
 800f6d8:	183fce1e 	bne	r3,zero,800f614 <__alt_data_end+0xfc00f614>
 800f6dc:	88c0040c 	andi	r3,r17,16
 800f6e0:	1801ed1e 	bne	r3,zero,800fe98 <___svfiprintf_internal_r+0xe84>
 800f6e4:	88c0100c 	andi	r3,r17,64
 800f6e8:	18021a26 	beq	r3,zero,800ff54 <___svfiprintf_internal_r+0xf40>
 800f6ec:	da802317 	ldw	r10,140(sp)
 800f6f0:	1240000b 	ldhu	r9,0(r2)
 800f6f4:	52800104 	addi	r10,r10,4
 800f6f8:	da802315 	stw	r10,140(sp)
 800f6fc:	0015883a 	mov	r10,zero
 800f700:	003fc906 	br	800f628 <__alt_data_end+0xfc00f628>
 800f704:	8c400414 	ori	r17,r17,16
 800f708:	d9801d85 	stb	r6,118(sp)
 800f70c:	8880080c 	andi	r2,r17,32
 800f710:	d8c02317 	ldw	r3,140(sp)
 800f714:	103f671e 	bne	r2,zero,800f4b4 <__alt_data_end+0xfc00f4b4>
 800f718:	8880040c 	andi	r2,r17,16
 800f71c:	1001c71e 	bne	r2,zero,800fe3c <___svfiprintf_internal_r+0xe28>
 800f720:	8880100c 	andi	r2,r17,64
 800f724:	1001c526 	beq	r2,zero,800fe3c <___svfiprintf_internal_r+0xe28>
 800f728:	1a40000f 	ldh	r9,0(r3)
 800f72c:	dac02317 	ldw	r11,140(sp)
 800f730:	4815d7fa 	srai	r10,r9,31
 800f734:	5ac00104 	addi	r11,r11,4
 800f738:	dac02315 	stw	r11,140(sp)
 800f73c:	5005883a 	mov	r2,r10
 800f740:	103f630e 	bge	r2,zero,800f4d0 <__alt_data_end+0xfc00f4d0>
 800f744:	0253c83a 	sub	r9,zero,r9
 800f748:	4804c03a 	cmpne	r2,r9,zero
 800f74c:	0295c83a 	sub	r10,zero,r10
 800f750:	5095c83a 	sub	r10,r10,r2
 800f754:	02c00b44 	movi	r11,45
 800f758:	dac01d85 	stb	r11,118(sp)
 800f75c:	8039883a 	mov	fp,r16
 800f760:	00800044 	movi	r2,1
 800f764:	4a86b03a 	or	r3,r9,r10
 800f768:	003ee606 	br	800f304 <__alt_data_end+0xfc00f304>
 800f76c:	a815883a 	mov	r10,r21
 800f770:	d8002115 	stw	zero,132(sp)
 800f774:	20bff404 	addi	r2,r4,-48
 800f778:	51000007 	ldb	r4,0(r10)
 800f77c:	da802117 	ldw	r10,132(sp)
 800f780:	ad400044 	addi	r21,r21,1
 800f784:	52c002a4 	muli	r11,r10,10
 800f788:	a815883a 	mov	r10,r21
 800f78c:	5885883a 	add	r2,r11,r2
 800f790:	d8802115 	stw	r2,132(sp)
 800f794:	20bff404 	addi	r2,r4,-48
 800f798:	28bff72e 	bgeu	r5,r2,800f778 <__alt_data_end+0xfc00f778>
 800f79c:	20bff804 	addi	r2,r4,-32
 800f7a0:	18be6b2e 	bgeu	r3,r2,800f150 <__alt_data_end+0xfc00f150>
 800f7a4:	d9801d85 	stb	r6,118(sp)
 800f7a8:	2000ce26 	beq	r4,zero,800fae4 <___svfiprintf_internal_r+0xad0>
 800f7ac:	02800044 	movi	r10,1
 800f7b0:	dac01004 	addi	r11,sp,64
 800f7b4:	da802015 	stw	r10,128(sp)
 800f7b8:	d9001005 	stb	r4,64(sp)
 800f7bc:	d8001d85 	stb	zero,118(sp)
 800f7c0:	5039883a 	mov	fp,r10
 800f7c4:	dac02615 	stw	r11,152(sp)
 800f7c8:	003f5106 	br	800f510 <__alt_data_end+0xfc00f510>
 800f7cc:	8c402014 	ori	r17,r17,128
 800f7d0:	a9000007 	ldb	r4,0(r21)
 800f7d4:	003e5b06 	br	800f144 <__alt_data_end+0xfc00f144>
 800f7d8:	01800ac4 	movi	r6,43
 800f7dc:	a9000007 	ldb	r4,0(r21)
 800f7e0:	003e5806 	br	800f144 <__alt_data_end+0xfc00f144>
 800f7e4:	a9000007 	ldb	r4,0(r21)
 800f7e8:	aa800044 	addi	r10,r21,1
 800f7ec:	22421426 	beq	r4,r9,8010040 <___svfiprintf_internal_r+0x102c>
 800f7f0:	20bff404 	addi	r2,r4,-48
 800f7f4:	502b883a 	mov	r21,r10
 800f7f8:	0021883a 	mov	r16,zero
 800f7fc:	28be5236 	bltu	r5,r2,800f148 <__alt_data_end+0xfc00f148>
 800f800:	a9000007 	ldb	r4,0(r21)
 800f804:	840002a4 	muli	r16,r16,10
 800f808:	ad400044 	addi	r21,r21,1
 800f80c:	1421883a 	add	r16,r2,r16
 800f810:	20bff404 	addi	r2,r4,-48
 800f814:	28bffa2e 	bgeu	r5,r2,800f800 <__alt_data_end+0xfc00f800>
 800f818:	803e4b0e 	bge	r16,zero,800f148 <__alt_data_end+0xfc00f148>
 800f81c:	043fffc4 	movi	r16,-1
 800f820:	003e4906 	br	800f148 <__alt_data_end+0xfc00f148>
 800f824:	d8c01c17 	ldw	r3,112(sp)
 800f828:	d8801b17 	ldw	r2,108(sp)
 800f82c:	d9001d87 	ldb	r4,118(sp)
 800f830:	20000b26 	beq	r4,zero,800f860 <___svfiprintf_internal_r+0x84c>
 800f834:	d9001d84 	addi	r4,sp,118
 800f838:	18c00044 	addi	r3,r3,1
 800f83c:	10800044 	addi	r2,r2,1
 800f840:	41000015 	stw	r4,0(r8)
 800f844:	01000044 	movi	r4,1
 800f848:	41000115 	stw	r4,4(r8)
 800f84c:	d8c01c15 	stw	r3,112(sp)
 800f850:	d8801b15 	stw	r2,108(sp)
 800f854:	010001c4 	movi	r4,7
 800f858:	20811e16 	blt	r4,r2,800fcd4 <___svfiprintf_internal_r+0xcc0>
 800f85c:	42000204 	addi	r8,r8,8
 800f860:	da802217 	ldw	r10,136(sp)
 800f864:	50000b26 	beq	r10,zero,800f894 <___svfiprintf_internal_r+0x880>
 800f868:	d9001d04 	addi	r4,sp,116
 800f86c:	18c00084 	addi	r3,r3,2
 800f870:	10800044 	addi	r2,r2,1
 800f874:	41000015 	stw	r4,0(r8)
 800f878:	01000084 	movi	r4,2
 800f87c:	41000115 	stw	r4,4(r8)
 800f880:	d8c01c15 	stw	r3,112(sp)
 800f884:	d8801b15 	stw	r2,108(sp)
 800f888:	010001c4 	movi	r4,7
 800f88c:	20811a16 	blt	r4,r2,800fcf8 <___svfiprintf_internal_r+0xce4>
 800f890:	42000204 	addi	r8,r8,8
 800f894:	dac02517 	ldw	r11,148(sp)
 800f898:	01002004 	movi	r4,128
 800f89c:	5900a826 	beq	r11,r4,800fb40 <___svfiprintf_internal_r+0xb2c>
 800f8a0:	8721c83a 	sub	r16,r16,fp
 800f8a4:	0400260e 	bge	zero,r16,800f940 <___svfiprintf_internal_r+0x92c>
 800f8a8:	01c00404 	movi	r7,16
 800f8ac:	3c01a50e 	bge	r7,r16,800ff44 <___svfiprintf_internal_r+0xf30>
 800f8b0:	010200b4 	movhi	r4,2050
 800f8b4:	21066704 	addi	r4,r4,6556
 800f8b8:	d9002215 	stw	r4,136(sp)
 800f8bc:	382f883a 	mov	r23,r7
 800f8c0:	058001c4 	movi	r22,7
 800f8c4:	00000306 	br	800f8d4 <___svfiprintf_internal_r+0x8c0>
 800f8c8:	843ffc04 	addi	r16,r16,-16
 800f8cc:	42000204 	addi	r8,r8,8
 800f8d0:	bc00110e 	bge	r23,r16,800f918 <___svfiprintf_internal_r+0x904>
 800f8d4:	18c00404 	addi	r3,r3,16
 800f8d8:	10800044 	addi	r2,r2,1
 800f8dc:	44c00015 	stw	r19,0(r8)
 800f8e0:	45c00115 	stw	r23,4(r8)
 800f8e4:	d8c01c15 	stw	r3,112(sp)
 800f8e8:	d8801b15 	stw	r2,108(sp)
 800f8ec:	b0bff60e 	bge	r22,r2,800f8c8 <__alt_data_end+0xfc00f8c8>
 800f8f0:	9009883a 	mov	r4,r18
 800f8f4:	a00b883a 	mov	r5,r20
 800f8f8:	d9801a04 	addi	r6,sp,104
 800f8fc:	800ee4c0 	call	800ee4c <__ssprint_r>
 800f900:	10007e1e 	bne	r2,zero,800fafc <___svfiprintf_internal_r+0xae8>
 800f904:	843ffc04 	addi	r16,r16,-16
 800f908:	d8c01c17 	ldw	r3,112(sp)
 800f90c:	d8801b17 	ldw	r2,108(sp)
 800f910:	d811883a 	mov	r8,sp
 800f914:	bc3fef16 	blt	r23,r16,800f8d4 <__alt_data_end+0xfc00f8d4>
 800f918:	da802217 	ldw	r10,136(sp)
 800f91c:	1c07883a 	add	r3,r3,r16
 800f920:	10800044 	addi	r2,r2,1
 800f924:	42800015 	stw	r10,0(r8)
 800f928:	44000115 	stw	r16,4(r8)
 800f92c:	d8c01c15 	stw	r3,112(sp)
 800f930:	d8801b15 	stw	r2,108(sp)
 800f934:	010001c4 	movi	r4,7
 800f938:	2080ce16 	blt	r4,r2,800fc74 <___svfiprintf_internal_r+0xc60>
 800f93c:	42000204 	addi	r8,r8,8
 800f940:	dac02617 	ldw	r11,152(sp)
 800f944:	e0c7883a 	add	r3,fp,r3
 800f948:	10800044 	addi	r2,r2,1
 800f94c:	42c00015 	stw	r11,0(r8)
 800f950:	47000115 	stw	fp,4(r8)
 800f954:	d8c01c15 	stw	r3,112(sp)
 800f958:	d8801b15 	stw	r2,108(sp)
 800f95c:	010001c4 	movi	r4,7
 800f960:	2080a316 	blt	r4,r2,800fbf0 <___svfiprintf_internal_r+0xbdc>
 800f964:	42000204 	addi	r8,r8,8
 800f968:	8c40010c 	andi	r17,r17,4
 800f96c:	88002b26 	beq	r17,zero,800fa1c <___svfiprintf_internal_r+0xa08>
 800f970:	da802117 	ldw	r10,132(sp)
 800f974:	dac02017 	ldw	r11,128(sp)
 800f978:	52e1c83a 	sub	r16,r10,r11
 800f97c:	0400270e 	bge	zero,r16,800fa1c <___svfiprintf_internal_r+0xa08>
 800f980:	04400404 	movi	r17,16
 800f984:	d8801b17 	ldw	r2,108(sp)
 800f988:	8c019e0e 	bge	r17,r16,8010004 <___svfiprintf_internal_r+0xff0>
 800f98c:	014200b4 	movhi	r5,2050
 800f990:	29466b04 	addi	r5,r5,6572
 800f994:	d9402815 	stw	r5,160(sp)
 800f998:	070001c4 	movi	fp,7
 800f99c:	00000306 	br	800f9ac <___svfiprintf_internal_r+0x998>
 800f9a0:	843ffc04 	addi	r16,r16,-16
 800f9a4:	42000204 	addi	r8,r8,8
 800f9a8:	8c00130e 	bge	r17,r16,800f9f8 <___svfiprintf_internal_r+0x9e4>
 800f9ac:	028200b4 	movhi	r10,2050
 800f9b0:	18c00404 	addi	r3,r3,16
 800f9b4:	10800044 	addi	r2,r2,1
 800f9b8:	52866b04 	addi	r10,r10,6572
 800f9bc:	42800015 	stw	r10,0(r8)
 800f9c0:	44400115 	stw	r17,4(r8)
 800f9c4:	d8c01c15 	stw	r3,112(sp)
 800f9c8:	d8801b15 	stw	r2,108(sp)
 800f9cc:	e0bff40e 	bge	fp,r2,800f9a0 <__alt_data_end+0xfc00f9a0>
 800f9d0:	9009883a 	mov	r4,r18
 800f9d4:	a00b883a 	mov	r5,r20
 800f9d8:	d9801a04 	addi	r6,sp,104
 800f9dc:	800ee4c0 	call	800ee4c <__ssprint_r>
 800f9e0:	1000461e 	bne	r2,zero,800fafc <___svfiprintf_internal_r+0xae8>
 800f9e4:	843ffc04 	addi	r16,r16,-16
 800f9e8:	d8c01c17 	ldw	r3,112(sp)
 800f9ec:	d8801b17 	ldw	r2,108(sp)
 800f9f0:	d811883a 	mov	r8,sp
 800f9f4:	8c3fed16 	blt	r17,r16,800f9ac <__alt_data_end+0xfc00f9ac>
 800f9f8:	dac02817 	ldw	r11,160(sp)
 800f9fc:	1c07883a 	add	r3,r3,r16
 800fa00:	10800044 	addi	r2,r2,1
 800fa04:	42c00015 	stw	r11,0(r8)
 800fa08:	44000115 	stw	r16,4(r8)
 800fa0c:	d8c01c15 	stw	r3,112(sp)
 800fa10:	d8801b15 	stw	r2,108(sp)
 800fa14:	010001c4 	movi	r4,7
 800fa18:	2080fe16 	blt	r4,r2,800fe14 <___svfiprintf_internal_r+0xe00>
 800fa1c:	dd802017 	ldw	r22,128(sp)
 800fa20:	da802117 	ldw	r10,132(sp)
 800fa24:	b280010e 	bge	r22,r10,800fa2c <___svfiprintf_internal_r+0xa18>
 800fa28:	502d883a 	mov	r22,r10
 800fa2c:	dac02417 	ldw	r11,144(sp)
 800fa30:	5d97883a 	add	r11,r11,r22
 800fa34:	dac02415 	stw	r11,144(sp)
 800fa38:	1800751e 	bne	r3,zero,800fc10 <___svfiprintf_internal_r+0xbfc>
 800fa3c:	a8800007 	ldb	r2,0(r21)
 800fa40:	d8001b15 	stw	zero,108(sp)
 800fa44:	d811883a 	mov	r8,sp
 800fa48:	103d981e 	bne	r2,zero,800f0ac <__alt_data_end+0xfc00f0ac>
 800fa4c:	a82d883a 	mov	r22,r21
 800fa50:	003daf06 	br	800f110 <__alt_data_end+0xfc00f110>
 800fa54:	10803fcc 	andi	r2,r2,255
 800fa58:	00c00044 	movi	r3,1
 800fa5c:	10fe311e 	bne	r2,r3,800f324 <__alt_data_end+0xfc00f324>
 800fa60:	5000e126 	beq	r10,zero,800fde8 <___svfiprintf_internal_r+0xdd4>
 800fa64:	dc402015 	stw	r17,128(sp)
 800fa68:	dc002215 	stw	r16,136(sp)
 800fa6c:	dd801a04 	addi	r22,sp,104
 800fa70:	402f883a 	mov	r23,r8
 800fa74:	5839883a 	mov	fp,r11
 800fa78:	4821883a 	mov	r16,r9
 800fa7c:	5023883a 	mov	r17,r10
 800fa80:	8009883a 	mov	r4,r16
 800fa84:	880b883a 	mov	r5,r17
 800fa88:	01800284 	movi	r6,10
 800fa8c:	000f883a 	mov	r7,zero
 800fa90:	801301c0 	call	801301c <__umoddi3>
 800fa94:	10800c04 	addi	r2,r2,48
 800fa98:	b5bfffc4 	addi	r22,r22,-1
 800fa9c:	8009883a 	mov	r4,r16
 800faa0:	880b883a 	mov	r5,r17
 800faa4:	01800284 	movi	r6,10
 800faa8:	000f883a 	mov	r7,zero
 800faac:	b0800005 	stb	r2,0(r22)
 800fab0:	8012a5c0 	call	8012a5c <__udivdi3>
 800fab4:	1021883a 	mov	r16,r2
 800fab8:	10c4b03a 	or	r2,r2,r3
 800fabc:	1823883a 	mov	r17,r3
 800fac0:	103fef1e 	bne	r2,zero,800fa80 <__alt_data_end+0xfc00fa80>
 800fac4:	da801e17 	ldw	r10,120(sp)
 800fac8:	e017883a 	mov	r11,fp
 800facc:	b811883a 	mov	r8,r23
 800fad0:	dc402017 	ldw	r17,128(sp)
 800fad4:	dc002217 	ldw	r16,136(sp)
 800fad8:	dd802615 	stw	r22,152(sp)
 800fadc:	55b9c83a 	sub	fp,r10,r22
 800fae0:	003e2206 	br	800f36c <__alt_data_end+0xfc00f36c>
 800fae4:	d8801c17 	ldw	r2,112(sp)
 800fae8:	10000426 	beq	r2,zero,800fafc <___svfiprintf_internal_r+0xae8>
 800faec:	d9002917 	ldw	r4,164(sp)
 800faf0:	d9402717 	ldw	r5,156(sp)
 800faf4:	d9801a04 	addi	r6,sp,104
 800faf8:	800ee4c0 	call	800ee4c <__ssprint_r>
 800fafc:	da802717 	ldw	r10,156(sp)
 800fb00:	5080030b 	ldhu	r2,12(r10)
 800fb04:	1080100c 	andi	r2,r2,64
 800fb08:	1000511e 	bne	r2,zero,800fc50 <___svfiprintf_internal_r+0xc3c>
 800fb0c:	d8802417 	ldw	r2,144(sp)
 800fb10:	dfc03617 	ldw	ra,216(sp)
 800fb14:	df003517 	ldw	fp,212(sp)
 800fb18:	ddc03417 	ldw	r23,208(sp)
 800fb1c:	dd803317 	ldw	r22,204(sp)
 800fb20:	dd403217 	ldw	r21,200(sp)
 800fb24:	dd003117 	ldw	r20,196(sp)
 800fb28:	dcc03017 	ldw	r19,192(sp)
 800fb2c:	dc802f17 	ldw	r18,188(sp)
 800fb30:	dc402e17 	ldw	r17,184(sp)
 800fb34:	dc002d17 	ldw	r16,180(sp)
 800fb38:	dec03704 	addi	sp,sp,220
 800fb3c:	f800283a 	ret
 800fb40:	da802117 	ldw	r10,132(sp)
 800fb44:	dac02017 	ldw	r11,128(sp)
 800fb48:	52edc83a 	sub	r22,r10,r11
 800fb4c:	05bf540e 	bge	zero,r22,800f8a0 <__alt_data_end+0xfc00f8a0>
 800fb50:	02400404 	movi	r9,16
 800fb54:	4d812f0e 	bge	r9,r22,8010014 <___svfiprintf_internal_r+0x1000>
 800fb58:	014200b4 	movhi	r5,2050
 800fb5c:	29466704 	addi	r5,r5,6556
 800fb60:	d9402215 	stw	r5,136(sp)
 800fb64:	05c001c4 	movi	r23,7
 800fb68:	00000306 	br	800fb78 <___svfiprintf_internal_r+0xb64>
 800fb6c:	b5bffc04 	addi	r22,r22,-16
 800fb70:	42000204 	addi	r8,r8,8
 800fb74:	4d80130e 	bge	r9,r22,800fbc4 <___svfiprintf_internal_r+0xbb0>
 800fb78:	18c00404 	addi	r3,r3,16
 800fb7c:	10800044 	addi	r2,r2,1
 800fb80:	44c00015 	stw	r19,0(r8)
 800fb84:	42400115 	stw	r9,4(r8)
 800fb88:	d8c01c15 	stw	r3,112(sp)
 800fb8c:	d8801b15 	stw	r2,108(sp)
 800fb90:	b8bff60e 	bge	r23,r2,800fb6c <__alt_data_end+0xfc00fb6c>
 800fb94:	9009883a 	mov	r4,r18
 800fb98:	a00b883a 	mov	r5,r20
 800fb9c:	d9801a04 	addi	r6,sp,104
 800fba0:	da402c15 	stw	r9,176(sp)
 800fba4:	800ee4c0 	call	800ee4c <__ssprint_r>
 800fba8:	da402c17 	ldw	r9,176(sp)
 800fbac:	103fd31e 	bne	r2,zero,800fafc <__alt_data_end+0xfc00fafc>
 800fbb0:	b5bffc04 	addi	r22,r22,-16
 800fbb4:	d8c01c17 	ldw	r3,112(sp)
 800fbb8:	d8801b17 	ldw	r2,108(sp)
 800fbbc:	d811883a 	mov	r8,sp
 800fbc0:	4dbfed16 	blt	r9,r22,800fb78 <__alt_data_end+0xfc00fb78>
 800fbc4:	da802217 	ldw	r10,136(sp)
 800fbc8:	1d87883a 	add	r3,r3,r22
 800fbcc:	10800044 	addi	r2,r2,1
 800fbd0:	42800015 	stw	r10,0(r8)
 800fbd4:	45800115 	stw	r22,4(r8)
 800fbd8:	d8c01c15 	stw	r3,112(sp)
 800fbdc:	d8801b15 	stw	r2,108(sp)
 800fbe0:	010001c4 	movi	r4,7
 800fbe4:	2080ce16 	blt	r4,r2,800ff20 <___svfiprintf_internal_r+0xf0c>
 800fbe8:	42000204 	addi	r8,r8,8
 800fbec:	003f2c06 	br	800f8a0 <__alt_data_end+0xfc00f8a0>
 800fbf0:	9009883a 	mov	r4,r18
 800fbf4:	a00b883a 	mov	r5,r20
 800fbf8:	d9801a04 	addi	r6,sp,104
 800fbfc:	800ee4c0 	call	800ee4c <__ssprint_r>
 800fc00:	103fbe1e 	bne	r2,zero,800fafc <__alt_data_end+0xfc00fafc>
 800fc04:	d8c01c17 	ldw	r3,112(sp)
 800fc08:	d811883a 	mov	r8,sp
 800fc0c:	003f5606 	br	800f968 <__alt_data_end+0xfc00f968>
 800fc10:	9009883a 	mov	r4,r18
 800fc14:	a00b883a 	mov	r5,r20
 800fc18:	d9801a04 	addi	r6,sp,104
 800fc1c:	800ee4c0 	call	800ee4c <__ssprint_r>
 800fc20:	103f8626 	beq	r2,zero,800fa3c <__alt_data_end+0xfc00fa3c>
 800fc24:	003fb506 	br	800fafc <__alt_data_end+0xfc00fafc>
 800fc28:	10803fcc 	andi	r2,r2,255
 800fc2c:	10003b1e 	bne	r2,zero,800fd1c <___svfiprintf_internal_r+0xd08>
 800fc30:	8880004c 	andi	r2,r17,1
 800fc34:	10007e26 	beq	r2,zero,800fe30 <___svfiprintf_internal_r+0xe1c>
 800fc38:	00800c04 	movi	r2,48
 800fc3c:	d8c019c4 	addi	r3,sp,103
 800fc40:	d88019c5 	stb	r2,103(sp)
 800fc44:	df002b17 	ldw	fp,172(sp)
 800fc48:	d8c02615 	stw	r3,152(sp)
 800fc4c:	003dc706 	br	800f36c <__alt_data_end+0xfc00f36c>
 800fc50:	00bfffc4 	movi	r2,-1
 800fc54:	003fae06 	br	800fb10 <__alt_data_end+0xfc00fb10>
 800fc58:	9009883a 	mov	r4,r18
 800fc5c:	a00b883a 	mov	r5,r20
 800fc60:	d9801a04 	addi	r6,sp,104
 800fc64:	800ee4c0 	call	800ee4c <__ssprint_r>
 800fc68:	103fa41e 	bne	r2,zero,800fafc <__alt_data_end+0xfc00fafc>
 800fc6c:	d811883a 	mov	r8,sp
 800fc70:	003d2406 	br	800f104 <__alt_data_end+0xfc00f104>
 800fc74:	9009883a 	mov	r4,r18
 800fc78:	a00b883a 	mov	r5,r20
 800fc7c:	d9801a04 	addi	r6,sp,104
 800fc80:	800ee4c0 	call	800ee4c <__ssprint_r>
 800fc84:	103f9d1e 	bne	r2,zero,800fafc <__alt_data_end+0xfc00fafc>
 800fc88:	d8c01c17 	ldw	r3,112(sp)
 800fc8c:	d8801b17 	ldw	r2,108(sp)
 800fc90:	d811883a 	mov	r8,sp
 800fc94:	003f2a06 	br	800f940 <__alt_data_end+0xfc00f940>
 800fc98:	d9402a17 	ldw	r5,168(sp)
 800fc9c:	d8c01a04 	addi	r3,sp,104
 800fca0:	488003cc 	andi	r2,r9,15
 800fca4:	5008973a 	slli	r4,r10,28
 800fca8:	2885883a 	add	r2,r5,r2
 800fcac:	4812d13a 	srli	r9,r9,4
 800fcb0:	10800003 	ldbu	r2,0(r2)
 800fcb4:	5014d13a 	srli	r10,r10,4
 800fcb8:	18ffffc4 	addi	r3,r3,-1
 800fcbc:	2252b03a 	or	r9,r4,r9
 800fcc0:	18800005 	stb	r2,0(r3)
 800fcc4:	4a84b03a 	or	r2,r9,r10
 800fcc8:	103ff51e 	bne	r2,zero,800fca0 <__alt_data_end+0xfc00fca0>
 800fccc:	d8c02615 	stw	r3,152(sp)
 800fcd0:	003da406 	br	800f364 <__alt_data_end+0xfc00f364>
 800fcd4:	9009883a 	mov	r4,r18
 800fcd8:	a00b883a 	mov	r5,r20
 800fcdc:	d9801a04 	addi	r6,sp,104
 800fce0:	800ee4c0 	call	800ee4c <__ssprint_r>
 800fce4:	103f851e 	bne	r2,zero,800fafc <__alt_data_end+0xfc00fafc>
 800fce8:	d8c01c17 	ldw	r3,112(sp)
 800fcec:	d8801b17 	ldw	r2,108(sp)
 800fcf0:	d811883a 	mov	r8,sp
 800fcf4:	003eda06 	br	800f860 <__alt_data_end+0xfc00f860>
 800fcf8:	9009883a 	mov	r4,r18
 800fcfc:	a00b883a 	mov	r5,r20
 800fd00:	d9801a04 	addi	r6,sp,104
 800fd04:	800ee4c0 	call	800ee4c <__ssprint_r>
 800fd08:	103f7c1e 	bne	r2,zero,800fafc <__alt_data_end+0xfc00fafc>
 800fd0c:	d8c01c17 	ldw	r3,112(sp)
 800fd10:	d8801b17 	ldw	r2,108(sp)
 800fd14:	d811883a 	mov	r8,sp
 800fd18:	003ede06 	br	800f894 <__alt_data_end+0xfc00f894>
 800fd1c:	da801a04 	addi	r10,sp,104
 800fd20:	da802615 	stw	r10,152(sp)
 800fd24:	003d9106 	br	800f36c <__alt_data_end+0xfc00f36c>
 800fd28:	00800084 	movi	r2,2
 800fd2c:	4a86b03a 	or	r3,r9,r10
 800fd30:	003d7106 	br	800f2f8 <__alt_data_end+0xfc00f2f8>
 800fd34:	88c0040c 	andi	r3,r17,16
 800fd38:	18004f1e 	bne	r3,zero,800fe78 <___svfiprintf_internal_r+0xe64>
 800fd3c:	88c0100c 	andi	r3,r17,64
 800fd40:	18004d26 	beq	r3,zero,800fe78 <___svfiprintf_internal_r+0xe64>
 800fd44:	dac02317 	ldw	r11,140(sp)
 800fd48:	1240000b 	ldhu	r9,0(r2)
 800fd4c:	0015883a 	mov	r10,zero
 800fd50:	5ac00104 	addi	r11,r11,4
 800fd54:	dac02315 	stw	r11,140(sp)
 800fd58:	00800044 	movi	r2,1
 800fd5c:	4807883a 	mov	r3,r9
 800fd60:	003d6506 	br	800f2f8 <__alt_data_end+0xfc00f2f8>
 800fd64:	9009883a 	mov	r4,r18
 800fd68:	a00b883a 	mov	r5,r20
 800fd6c:	d9801a04 	addi	r6,sp,104
 800fd70:	800ee4c0 	call	800ee4c <__ssprint_r>
 800fd74:	103f611e 	bne	r2,zero,800fafc <__alt_data_end+0xfc00fafc>
 800fd78:	d8c01c17 	ldw	r3,112(sp)
 800fd7c:	d8801b17 	ldw	r2,108(sp)
 800fd80:	d811883a 	mov	r8,sp
 800fd84:	003ea906 	br	800f82c <__alt_data_end+0xfc00f82c>
 800fd88:	88c0040c 	andi	r3,r17,16
 800fd8c:	1800321e 	bne	r3,zero,800fe58 <___svfiprintf_internal_r+0xe44>
 800fd90:	88c0100c 	andi	r3,r17,64
 800fd94:	18003026 	beq	r3,zero,800fe58 <___svfiprintf_internal_r+0xe44>
 800fd98:	dac02317 	ldw	r11,140(sp)
 800fd9c:	1240000b 	ldhu	r9,0(r2)
 800fda0:	0015883a 	mov	r10,zero
 800fda4:	5ac00104 	addi	r11,r11,4
 800fda8:	dac02315 	stw	r11,140(sp)
 800fdac:	0005883a 	mov	r2,zero
 800fdb0:	4807883a 	mov	r3,r9
 800fdb4:	003d5006 	br	800f2f8 <__alt_data_end+0xfc00f2f8>
 800fdb8:	10803fcc 	andi	r2,r2,255
 800fdbc:	1080201c 	xori	r2,r2,128
 800fdc0:	10bfe004 	addi	r2,r2,-128
 800fdc4:	01000c04 	movi	r4,48
 800fdc8:	11006826 	beq	r2,r4,800ff6c <___svfiprintf_internal_r+0xf58>
 800fdcc:	da802617 	ldw	r10,152(sp)
 800fdd0:	d8801e17 	ldw	r2,120(sp)
 800fdd4:	193fffc5 	stb	r4,-1(r3)
 800fdd8:	52bfffc4 	addi	r10,r10,-1
 800fddc:	da802615 	stw	r10,152(sp)
 800fde0:	12b9c83a 	sub	fp,r2,r10
 800fde4:	003d6106 	br	800f36c <__alt_data_end+0xfc00f36c>
 800fde8:	00800244 	movi	r2,9
 800fdec:	127f1d36 	bltu	r2,r9,800fa64 <__alt_data_end+0xfc00fa64>
 800fdf0:	4a400c04 	addi	r9,r9,48
 800fdf4:	d8c019c4 	addi	r3,sp,103
 800fdf8:	da4019c5 	stb	r9,103(sp)
 800fdfc:	df002b17 	ldw	fp,172(sp)
 800fe00:	d8c02615 	stw	r3,152(sp)
 800fe04:	003d5906 	br	800f36c <__alt_data_end+0xfc00f36c>
 800fe08:	d8802315 	stw	r2,140(sp)
 800fe0c:	a9000007 	ldb	r4,0(r21)
 800fe10:	003ccc06 	br	800f144 <__alt_data_end+0xfc00f144>
 800fe14:	9009883a 	mov	r4,r18
 800fe18:	a00b883a 	mov	r5,r20
 800fe1c:	d9801a04 	addi	r6,sp,104
 800fe20:	800ee4c0 	call	800ee4c <__ssprint_r>
 800fe24:	103f351e 	bne	r2,zero,800fafc <__alt_data_end+0xfc00fafc>
 800fe28:	d8c01c17 	ldw	r3,112(sp)
 800fe2c:	003efb06 	br	800fa1c <__alt_data_end+0xfc00fa1c>
 800fe30:	d8c01a04 	addi	r3,sp,104
 800fe34:	d8c02615 	stw	r3,152(sp)
 800fe38:	003d4c06 	br	800f36c <__alt_data_end+0xfc00f36c>
 800fe3c:	da802317 	ldw	r10,140(sp)
 800fe40:	1a400017 	ldw	r9,0(r3)
 800fe44:	52800104 	addi	r10,r10,4
 800fe48:	da802315 	stw	r10,140(sp)
 800fe4c:	4815d7fa 	srai	r10,r9,31
 800fe50:	5005883a 	mov	r2,r10
 800fe54:	003d9d06 	br	800f4cc <__alt_data_end+0xfc00f4cc>
 800fe58:	da802317 	ldw	r10,140(sp)
 800fe5c:	12400017 	ldw	r9,0(r2)
 800fe60:	0005883a 	mov	r2,zero
 800fe64:	52800104 	addi	r10,r10,4
 800fe68:	da802315 	stw	r10,140(sp)
 800fe6c:	4807883a 	mov	r3,r9
 800fe70:	0015883a 	mov	r10,zero
 800fe74:	003d2006 	br	800f2f8 <__alt_data_end+0xfc00f2f8>
 800fe78:	da802317 	ldw	r10,140(sp)
 800fe7c:	12400017 	ldw	r9,0(r2)
 800fe80:	00800044 	movi	r2,1
 800fe84:	52800104 	addi	r10,r10,4
 800fe88:	da802315 	stw	r10,140(sp)
 800fe8c:	4807883a 	mov	r3,r9
 800fe90:	0015883a 	mov	r10,zero
 800fe94:	003d1806 	br	800f2f8 <__alt_data_end+0xfc00f2f8>
 800fe98:	dac02317 	ldw	r11,140(sp)
 800fe9c:	12400017 	ldw	r9,0(r2)
 800fea0:	0015883a 	mov	r10,zero
 800fea4:	5ac00104 	addi	r11,r11,4
 800fea8:	dac02315 	stw	r11,140(sp)
 800feac:	003dde06 	br	800f628 <__alt_data_end+0xfc00f628>
 800feb0:	a9000007 	ldb	r4,0(r21)
 800feb4:	003ca306 	br	800f144 <__alt_data_end+0xfc00f144>
 800feb8:	dac02317 	ldw	r11,140(sp)
 800febc:	da802417 	ldw	r10,144(sp)
 800fec0:	58800017 	ldw	r2,0(r11)
 800fec4:	5007d7fa 	srai	r3,r10,31
 800fec8:	5ac00104 	addi	r11,r11,4
 800fecc:	dac02315 	stw	r11,140(sp)
 800fed0:	12800015 	stw	r10,0(r2)
 800fed4:	10c00115 	stw	r3,4(r2)
 800fed8:	003c7206 	br	800f0a4 <__alt_data_end+0xfc00f0a4>
 800fedc:	00800c04 	movi	r2,48
 800fee0:	d8801d05 	stb	r2,116(sp)
 800fee4:	d9001d45 	stb	r4,117(sp)
 800fee8:	8c400094 	ori	r17,r17,2
 800feec:	00800084 	movi	r2,2
 800fef0:	003d0106 	br	800f2f8 <__alt_data_end+0xfc00f2f8>
 800fef4:	ad400044 	addi	r21,r21,1
 800fef8:	8c400814 	ori	r17,r17,32
 800fefc:	11000047 	ldb	r4,1(r2)
 800ff00:	003c9006 	br	800f144 <__alt_data_end+0xfc00f144>
 800ff04:	dac02317 	ldw	r11,140(sp)
 800ff08:	da802417 	ldw	r10,144(sp)
 800ff0c:	58800017 	ldw	r2,0(r11)
 800ff10:	5ac00104 	addi	r11,r11,4
 800ff14:	dac02315 	stw	r11,140(sp)
 800ff18:	12800015 	stw	r10,0(r2)
 800ff1c:	003c6106 	br	800f0a4 <__alt_data_end+0xfc00f0a4>
 800ff20:	9009883a 	mov	r4,r18
 800ff24:	a00b883a 	mov	r5,r20
 800ff28:	d9801a04 	addi	r6,sp,104
 800ff2c:	800ee4c0 	call	800ee4c <__ssprint_r>
 800ff30:	103ef21e 	bne	r2,zero,800fafc <__alt_data_end+0xfc00fafc>
 800ff34:	d8c01c17 	ldw	r3,112(sp)
 800ff38:	d8801b17 	ldw	r2,108(sp)
 800ff3c:	d811883a 	mov	r8,sp
 800ff40:	003e5706 	br	800f8a0 <__alt_data_end+0xfc00f8a0>
 800ff44:	02c200b4 	movhi	r11,2050
 800ff48:	5ac66704 	addi	r11,r11,6556
 800ff4c:	dac02215 	stw	r11,136(sp)
 800ff50:	003e7106 	br	800f918 <__alt_data_end+0xfc00f918>
 800ff54:	dac02317 	ldw	r11,140(sp)
 800ff58:	12400017 	ldw	r9,0(r2)
 800ff5c:	0015883a 	mov	r10,zero
 800ff60:	5ac00104 	addi	r11,r11,4
 800ff64:	dac02315 	stw	r11,140(sp)
 800ff68:	003daf06 	br	800f628 <__alt_data_end+0xfc00f628>
 800ff6c:	da801e17 	ldw	r10,120(sp)
 800ff70:	d8c02617 	ldw	r3,152(sp)
 800ff74:	50f9c83a 	sub	fp,r10,r3
 800ff78:	003cfc06 	br	800f36c <__alt_data_end+0xfc00f36c>
 800ff7c:	da002c15 	stw	r8,176(sp)
 800ff80:	8004afc0 	call	8004afc <strlen>
 800ff84:	1039883a 	mov	fp,r2
 800ff88:	dac01d83 	ldbu	r11,118(sp)
 800ff8c:	ddc02315 	stw	r23,140(sp)
 800ff90:	0021883a 	mov	r16,zero
 800ff94:	da002c17 	ldw	r8,176(sp)
 800ff98:	003cf406 	br	800f36c <__alt_data_end+0xfc00f36c>
 800ff9c:	04001004 	movi	r16,64
 800ffa0:	800b883a 	mov	r5,r16
 800ffa4:	8003f000 	call	8003f00 <_malloc_r>
 800ffa8:	da802717 	ldw	r10,156(sp)
 800ffac:	50800015 	stw	r2,0(r10)
 800ffb0:	50800415 	stw	r2,16(r10)
 800ffb4:	10002c26 	beq	r2,zero,8010068 <___svfiprintf_internal_r+0x1054>
 800ffb8:	da802717 	ldw	r10,156(sp)
 800ffbc:	54000515 	stw	r16,20(r10)
 800ffc0:	003c2806 	br	800f064 <__alt_data_end+0xfc00f064>
 800ffc4:	00800184 	movi	r2,6
 800ffc8:	1400012e 	bgeu	r2,r16,800ffd0 <___svfiprintf_internal_r+0xfbc>
 800ffcc:	1021883a 	mov	r16,r2
 800ffd0:	8039883a 	mov	fp,r16
 800ffd4:	802d883a 	mov	r22,r16
 800ffd8:	80001716 	blt	r16,zero,8010038 <___svfiprintf_internal_r+0x1024>
 800ffdc:	008200b4 	movhi	r2,2050
 800ffe0:	1085fc04 	addi	r2,r2,6128
 800ffe4:	dd802015 	stw	r22,128(sp)
 800ffe8:	ddc02315 	stw	r23,140(sp)
 800ffec:	d8802615 	stw	r2,152(sp)
 800fff0:	003d4706 	br	800f510 <__alt_data_end+0xfc00f510>
 800fff4:	010200b4 	movhi	r4,2050
 800fff8:	21066b04 	addi	r4,r4,6572
 800fffc:	d9002815 	stw	r4,160(sp)
 8010000:	003d7206 	br	800f5cc <__alt_data_end+0xfc00f5cc>
 8010004:	010200b4 	movhi	r4,2050
 8010008:	21066b04 	addi	r4,r4,6572
 801000c:	d9002815 	stw	r4,160(sp)
 8010010:	003e7906 	br	800f9f8 <__alt_data_end+0xfc00f9f8>
 8010014:	010200b4 	movhi	r4,2050
 8010018:	21066704 	addi	r4,r4,6556
 801001c:	d9002215 	stw	r4,136(sp)
 8010020:	003ee806 	br	800fbc4 <__alt_data_end+0xfc00fbc4>
 8010024:	8039883a 	mov	fp,r16
 8010028:	dac01d83 	ldbu	r11,118(sp)
 801002c:	ddc02315 	stw	r23,140(sp)
 8010030:	0021883a 	mov	r16,zero
 8010034:	003ccd06 	br	800f36c <__alt_data_end+0xfc00f36c>
 8010038:	002d883a 	mov	r22,zero
 801003c:	003fe706 	br	800ffdc <__alt_data_end+0xfc00ffdc>
 8010040:	dac02317 	ldw	r11,140(sp)
 8010044:	a805883a 	mov	r2,r21
 8010048:	502b883a 	mov	r21,r10
 801004c:	5c000017 	ldw	r16,0(r11)
 8010050:	59000104 	addi	r4,r11,4
 8010054:	d9002315 	stw	r4,140(sp)
 8010058:	803fa80e 	bge	r16,zero,800fefc <__alt_data_end+0xfc00fefc>
 801005c:	043fffc4 	movi	r16,-1
 8010060:	11000047 	ldb	r4,1(r2)
 8010064:	003c3706 	br	800f144 <__alt_data_end+0xfc00f144>
 8010068:	dac02917 	ldw	r11,164(sp)
 801006c:	00800304 	movi	r2,12
 8010070:	58800015 	stw	r2,0(r11)
 8010074:	00bfffc4 	movi	r2,-1
 8010078:	003ea506 	br	800fb10 <__alt_data_end+0xfc00fb10>

0801007c <__sprint_r.part.0>:
 801007c:	28801917 	ldw	r2,100(r5)
 8010080:	defff604 	addi	sp,sp,-40
 8010084:	dd400515 	stw	r21,20(sp)
 8010088:	dcc00315 	stw	r19,12(sp)
 801008c:	dfc00915 	stw	ra,36(sp)
 8010090:	df000815 	stw	fp,32(sp)
 8010094:	ddc00715 	stw	r23,28(sp)
 8010098:	dd800615 	stw	r22,24(sp)
 801009c:	dd000415 	stw	r20,16(sp)
 80100a0:	dc800215 	stw	r18,8(sp)
 80100a4:	dc400115 	stw	r17,4(sp)
 80100a8:	dc000015 	stw	r16,0(sp)
 80100ac:	1088000c 	andi	r2,r2,8192
 80100b0:	2827883a 	mov	r19,r5
 80100b4:	302b883a 	mov	r21,r6
 80100b8:	10002d26 	beq	r2,zero,8010170 <__sprint_r.part.0+0xf4>
 80100bc:	30800217 	ldw	r2,8(r6)
 80100c0:	35800017 	ldw	r22,0(r6)
 80100c4:	10002826 	beq	r2,zero,8010168 <__sprint_r.part.0+0xec>
 80100c8:	2029883a 	mov	r20,r4
 80100cc:	b5c00104 	addi	r23,r22,4
 80100d0:	04bfffc4 	movi	r18,-1
 80100d4:	bc400017 	ldw	r17,0(r23)
 80100d8:	b4000017 	ldw	r16,0(r22)
 80100dc:	0039883a 	mov	fp,zero
 80100e0:	8822d0ba 	srli	r17,r17,2
 80100e4:	04400316 	blt	zero,r17,80100f4 <__sprint_r.part.0+0x78>
 80100e8:	00001706 	br	8010148 <__sprint_r.part.0+0xcc>
 80100ec:	84000104 	addi	r16,r16,4
 80100f0:	8f001526 	beq	r17,fp,8010148 <__sprint_r.part.0+0xcc>
 80100f4:	81400017 	ldw	r5,0(r16)
 80100f8:	a009883a 	mov	r4,r20
 80100fc:	980d883a 	mov	r6,r19
 8010100:	80119080 	call	8011908 <_fputwc_r>
 8010104:	e7000044 	addi	fp,fp,1
 8010108:	14bff81e 	bne	r2,r18,80100ec <__alt_data_end+0xfc0100ec>
 801010c:	9005883a 	mov	r2,r18
 8010110:	a8000215 	stw	zero,8(r21)
 8010114:	a8000115 	stw	zero,4(r21)
 8010118:	dfc00917 	ldw	ra,36(sp)
 801011c:	df000817 	ldw	fp,32(sp)
 8010120:	ddc00717 	ldw	r23,28(sp)
 8010124:	dd800617 	ldw	r22,24(sp)
 8010128:	dd400517 	ldw	r21,20(sp)
 801012c:	dd000417 	ldw	r20,16(sp)
 8010130:	dcc00317 	ldw	r19,12(sp)
 8010134:	dc800217 	ldw	r18,8(sp)
 8010138:	dc400117 	ldw	r17,4(sp)
 801013c:	dc000017 	ldw	r16,0(sp)
 8010140:	dec00a04 	addi	sp,sp,40
 8010144:	f800283a 	ret
 8010148:	a8c00217 	ldw	r3,8(r21)
 801014c:	8c63883a 	add	r17,r17,r17
 8010150:	8c63883a 	add	r17,r17,r17
 8010154:	1c45c83a 	sub	r2,r3,r17
 8010158:	a8800215 	stw	r2,8(r21)
 801015c:	b5800204 	addi	r22,r22,8
 8010160:	bdc00204 	addi	r23,r23,8
 8010164:	103fdb1e 	bne	r2,zero,80100d4 <__alt_data_end+0xfc0100d4>
 8010168:	0005883a 	mov	r2,zero
 801016c:	003fe806 	br	8010110 <__alt_data_end+0xfc010110>
 8010170:	8011b3c0 	call	8011b3c <__sfvwrite_r>
 8010174:	003fe606 	br	8010110 <__alt_data_end+0xfc010110>

08010178 <__sprint_r>:
 8010178:	30c00217 	ldw	r3,8(r6)
 801017c:	18000126 	beq	r3,zero,8010184 <__sprint_r+0xc>
 8010180:	801007c1 	jmpi	801007c <__sprint_r.part.0>
 8010184:	30000115 	stw	zero,4(r6)
 8010188:	0005883a 	mov	r2,zero
 801018c:	f800283a 	ret

08010190 <___vfiprintf_internal_r>:
 8010190:	defeca04 	addi	sp,sp,-1240
 8010194:	dd813215 	stw	r22,1224(sp)
 8010198:	dd013015 	stw	r20,1216(sp)
 801019c:	dfc13515 	stw	ra,1236(sp)
 80101a0:	df013415 	stw	fp,1232(sp)
 80101a4:	ddc13315 	stw	r23,1228(sp)
 80101a8:	dd413115 	stw	r21,1220(sp)
 80101ac:	dcc12f15 	stw	r19,1212(sp)
 80101b0:	dc812e15 	stw	r18,1208(sp)
 80101b4:	dc412d15 	stw	r17,1204(sp)
 80101b8:	dc012c15 	stw	r16,1200(sp)
 80101bc:	d9012015 	stw	r4,1152(sp)
 80101c0:	d9c12115 	stw	r7,1156(sp)
 80101c4:	2829883a 	mov	r20,r5
 80101c8:	302d883a 	mov	r22,r6
 80101cc:	20000226 	beq	r4,zero,80101d8 <___vfiprintf_internal_r+0x48>
 80101d0:	20800e17 	ldw	r2,56(r4)
 80101d4:	1001d326 	beq	r2,zero,8010924 <___vfiprintf_internal_r+0x794>
 80101d8:	a0c0030b 	ldhu	r3,12(r20)
 80101dc:	1908000c 	andi	r4,r3,8192
 80101e0:	1805883a 	mov	r2,r3
 80101e4:	2000071e 	bne	r4,zero,8010204 <___vfiprintf_internal_r+0x74>
 80101e8:	a1001917 	ldw	r4,100(r20)
 80101ec:	18880014 	ori	r2,r3,8192
 80101f0:	00f7ffc4 	movi	r3,-8193
 80101f4:	20c8703a 	and	r4,r4,r3
 80101f8:	a080030d 	sth	r2,12(r20)
 80101fc:	1007883a 	mov	r3,r2
 8010200:	a1001915 	stw	r4,100(r20)
 8010204:	1100020c 	andi	r4,r2,8
 8010208:	20018926 	beq	r4,zero,8010830 <___vfiprintf_internal_r+0x6a0>
 801020c:	a1000417 	ldw	r4,16(r20)
 8010210:	20018726 	beq	r4,zero,8010830 <___vfiprintf_internal_r+0x6a0>
 8010214:	1080068c 	andi	r2,r2,26
 8010218:	01000284 	movi	r4,10
 801021c:	11018d26 	beq	r2,r4,8010854 <___vfiprintf_internal_r+0x6c4>
 8010220:	da810a04 	addi	r10,sp,1064
 8010224:	dac109c4 	addi	r11,sp,1063
 8010228:	070200b4 	movhi	fp,2050
 801022c:	05c200b4 	movhi	r23,2050
 8010230:	da811e15 	stw	r10,1144(sp)
 8010234:	52d5c83a 	sub	r10,r10,r11
 8010238:	e7067304 	addi	fp,fp,6604
 801023c:	bdc66f04 	addi	r23,r23,6588
 8010240:	dac11f15 	stw	r11,1148(sp)
 8010244:	dec11a15 	stw	sp,1128(sp)
 8010248:	d8011c15 	stw	zero,1136(sp)
 801024c:	d8011b15 	stw	zero,1132(sp)
 8010250:	d8012615 	stw	zero,1176(sp)
 8010254:	d8012215 	stw	zero,1160(sp)
 8010258:	da812715 	stw	r10,1180(sp)
 801025c:	d811883a 	mov	r8,sp
 8010260:	b021883a 	mov	r16,r22
 8010264:	80800007 	ldb	r2,0(r16)
 8010268:	10039c26 	beq	r2,zero,80110dc <___vfiprintf_internal_r+0xf4c>
 801026c:	01000944 	movi	r4,37
 8010270:	11039a26 	beq	r2,r4,80110dc <___vfiprintf_internal_r+0xf4c>
 8010274:	8005883a 	mov	r2,r16
 8010278:	00000106 	br	8010280 <___vfiprintf_internal_r+0xf0>
 801027c:	19000326 	beq	r3,r4,801028c <___vfiprintf_internal_r+0xfc>
 8010280:	10800044 	addi	r2,r2,1
 8010284:	10c00007 	ldb	r3,0(r2)
 8010288:	183ffc1e 	bne	r3,zero,801027c <__alt_data_end+0xfc01027c>
 801028c:	1425c83a 	sub	r18,r2,r16
 8010290:	1023883a 	mov	r17,r2
 8010294:	90001026 	beq	r18,zero,80102d8 <___vfiprintf_internal_r+0x148>
 8010298:	d8c11c17 	ldw	r3,1136(sp)
 801029c:	d8811b17 	ldw	r2,1132(sp)
 80102a0:	44000015 	stw	r16,0(r8)
 80102a4:	90c7883a 	add	r3,r18,r3
 80102a8:	10800044 	addi	r2,r2,1
 80102ac:	44800115 	stw	r18,4(r8)
 80102b0:	d8c11c15 	stw	r3,1136(sp)
 80102b4:	d8811b15 	stw	r2,1132(sp)
 80102b8:	010001c4 	movi	r4,7
 80102bc:	2080750e 	bge	r4,r2,8010494 <___vfiprintf_internal_r+0x304>
 80102c0:	18039d1e 	bne	r3,zero,8011138 <___vfiprintf_internal_r+0xfa8>
 80102c4:	dac12217 	ldw	r11,1160(sp)
 80102c8:	d8011b15 	stw	zero,1132(sp)
 80102cc:	d811883a 	mov	r8,sp
 80102d0:	5c97883a 	add	r11,r11,r18
 80102d4:	dac12215 	stw	r11,1160(sp)
 80102d8:	88800007 	ldb	r2,0(r17)
 80102dc:	1002e026 	beq	r2,zero,8010e60 <___vfiprintf_internal_r+0xcd0>
 80102e0:	88c00047 	ldb	r3,1(r17)
 80102e4:	8c000044 	addi	r16,r17,1
 80102e8:	d8011d85 	stb	zero,1142(sp)
 80102ec:	000d883a 	mov	r6,zero
 80102f0:	027fffc4 	movi	r9,-1
 80102f4:	0027883a 	mov	r19,zero
 80102f8:	002b883a 	mov	r21,zero
 80102fc:	01001604 	movi	r4,88
 8010300:	01400244 	movi	r5,9
 8010304:	03000a84 	movi	r12,42
 8010308:	01c01b04 	movi	r7,108
 801030c:	84000044 	addi	r16,r16,1
 8010310:	18bff804 	addi	r2,r3,-32
 8010314:	20825f36 	bltu	r4,r2,8010c94 <___vfiprintf_internal_r+0xb04>
 8010318:	100490ba 	slli	r2,r2,2
 801031c:	02820074 	movhi	r10,2049
 8010320:	5280cc04 	addi	r10,r10,816
 8010324:	1285883a 	add	r2,r2,r10
 8010328:	10800017 	ldw	r2,0(r2)
 801032c:	1000683a 	jmp	r2
 8010330:	08010b04 	addi	zero,at,1068
 8010334:	08010c94 	ori	zero,at,1074
 8010338:	08010c94 	ori	zero,at,1074
 801033c:	08010c88 	cmpgei	zero,at,1074
 8010340:	08010c94 	ori	zero,at,1074
 8010344:	08010c94 	ori	zero,at,1074
 8010348:	08010c94 	ori	zero,at,1074
 801034c:	08010c94 	ori	zero,at,1074
 8010350:	08010c94 	ori	zero,at,1074
 8010354:	08010c94 	ori	zero,at,1074
 8010358:	08010c60 	cmpeqi	zero,at,1073
 801035c:	08010c7c 	xorhi	zero,at,1073
 8010360:	08010c94 	ori	zero,at,1074
 8010364:	08010934 	orhi	zero,at,1060
 8010368:	08010a94 	ori	zero,at,1066
 801036c:	08010c94 	ori	zero,at,1074
 8010370:	08010a18 	cmpnei	zero,at,1064
 8010374:	08010a24 	muli	zero,at,1064
 8010378:	08010a24 	muli	zero,at,1064
 801037c:	08010a24 	muli	zero,at,1064
 8010380:	08010a24 	muli	zero,at,1064
 8010384:	08010a24 	muli	zero,at,1064
 8010388:	08010a24 	muli	zero,at,1064
 801038c:	08010a24 	muli	zero,at,1064
 8010390:	08010a24 	muli	zero,at,1064
 8010394:	08010a24 	muli	zero,at,1064
 8010398:	08010c94 	ori	zero,at,1074
 801039c:	08010c94 	ori	zero,at,1074
 80103a0:	08010c94 	ori	zero,at,1074
 80103a4:	08010c94 	ori	zero,at,1074
 80103a8:	08010c94 	ori	zero,at,1074
 80103ac:	08010c94 	ori	zero,at,1074
 80103b0:	08010c94 	ori	zero,at,1074
 80103b4:	08010c94 	ori	zero,at,1074
 80103b8:	08010c94 	ori	zero,at,1074
 80103bc:	08010c94 	ori	zero,at,1074
 80103c0:	08010a50 	cmplti	zero,at,1065
 80103c4:	08010c94 	ori	zero,at,1074
 80103c8:	08010c94 	ori	zero,at,1074
 80103cc:	08010c94 	ori	zero,at,1074
 80103d0:	08010c94 	ori	zero,at,1074
 80103d4:	08010c94 	ori	zero,at,1074
 80103d8:	08010c94 	ori	zero,at,1074
 80103dc:	08010c94 	ori	zero,at,1074
 80103e0:	08010c94 	ori	zero,at,1074
 80103e4:	08010c94 	ori	zero,at,1074
 80103e8:	08010c94 	ori	zero,at,1074
 80103ec:	080104e4 	muli	zero,at,1043
 80103f0:	08010c94 	ori	zero,at,1074
 80103f4:	08010c94 	ori	zero,at,1074
 80103f8:	08010c94 	ori	zero,at,1074
 80103fc:	08010c94 	ori	zero,at,1074
 8010400:	08010c94 	ori	zero,at,1074
 8010404:	080104a8 	cmpgeui	zero,at,1042
 8010408:	08010c94 	ori	zero,at,1074
 801040c:	08010c94 	ori	zero,at,1074
 8010410:	08010990 	cmplti	zero,at,1062
 8010414:	08010c94 	ori	zero,at,1074
 8010418:	08010c94 	ori	zero,at,1074
 801041c:	08010c94 	ori	zero,at,1074
 8010420:	08010c94 	ori	zero,at,1074
 8010424:	08010c94 	ori	zero,at,1074
 8010428:	08010c94 	ori	zero,at,1074
 801042c:	08010c94 	ori	zero,at,1074
 8010430:	08010c94 	ori	zero,at,1074
 8010434:	08010c94 	ori	zero,at,1074
 8010438:	08010c94 	ori	zero,at,1074
 801043c:	080109e8 	cmpgeui	zero,at,1063
 8010440:	08010b80 	call	8010b8 <__alt_mem_sdram-0x77fef48>
 8010444:	08010c94 	ori	zero,at,1074
 8010448:	08010c94 	ori	zero,at,1074
 801044c:	08010c94 	ori	zero,at,1074
 8010450:	08010c08 	cmpgei	zero,at,1072
 8010454:	08010b80 	call	8010b8 <__alt_mem_sdram-0x77fef48>
 8010458:	08010c94 	ori	zero,at,1074
 801045c:	08010c94 	ori	zero,at,1074
 8010460:	08010c14 	ori	zero,at,1072
 8010464:	08010c94 	ori	zero,at,1074
 8010468:	08010ad4 	ori	zero,at,1067
 801046c:	080104e8 	cmpgeui	zero,at,1043
 8010470:	08010bbc 	xorhi	zero,at,1070
 8010474:	08010bfc 	xorhi	zero,at,1071
 8010478:	08010c94 	ori	zero,at,1074
 801047c:	08010b20 	cmpeqi	zero,at,1068
 8010480:	08010c94 	ori	zero,at,1074
 8010484:	080104ac 	andhi	zero,at,1042
 8010488:	08010c94 	ori	zero,at,1074
 801048c:	08010c94 	ori	zero,at,1074
 8010490:	08010c24 	muli	zero,at,1072
 8010494:	42000204 	addi	r8,r8,8
 8010498:	dac12217 	ldw	r11,1160(sp)
 801049c:	5c97883a 	add	r11,r11,r18
 80104a0:	dac12215 	stw	r11,1160(sp)
 80104a4:	003f8c06 	br	80102d8 <__alt_data_end+0xfc0102d8>
 80104a8:	ad400414 	ori	r21,r21,16
 80104ac:	a880080c 	andi	r2,r21,32
 80104b0:	10012f1e 	bne	r2,zero,8010970 <___vfiprintf_internal_r+0x7e0>
 80104b4:	a880040c 	andi	r2,r21,16
 80104b8:	1001ff1e 	bne	r2,zero,8010cb8 <___vfiprintf_internal_r+0xb28>
 80104bc:	a880100c 	andi	r2,r21,64
 80104c0:	1001fd26 	beq	r2,zero,8010cb8 <___vfiprintf_internal_r+0xb28>
 80104c4:	da812117 	ldw	r10,1156(sp)
 80104c8:	002d883a 	mov	r22,zero
 80104cc:	00800044 	movi	r2,1
 80104d0:	5480000b 	ldhu	r18,0(r10)
 80104d4:	52800104 	addi	r10,r10,4
 80104d8:	da812115 	stw	r10,1156(sp)
 80104dc:	9009883a 	mov	r4,r18
 80104e0:	00000a06 	br	801050c <___vfiprintf_internal_r+0x37c>
 80104e4:	ad400414 	ori	r21,r21,16
 80104e8:	a880080c 	andi	r2,r21,32
 80104ec:	10011426 	beq	r2,zero,8010940 <___vfiprintf_internal_r+0x7b0>
 80104f0:	da812117 	ldw	r10,1156(sp)
 80104f4:	0005883a 	mov	r2,zero
 80104f8:	54800017 	ldw	r18,0(r10)
 80104fc:	55800117 	ldw	r22,4(r10)
 8010500:	52800204 	addi	r10,r10,8
 8010504:	da812115 	stw	r10,1156(sp)
 8010508:	9588b03a 	or	r4,r18,r22
 801050c:	d8011d85 	stb	zero,1142(sp)
 8010510:	4823883a 	mov	r17,r9
 8010514:	0019883a 	mov	r12,zero
 8010518:	48000216 	blt	r9,zero,8010524 <___vfiprintf_internal_r+0x394>
 801051c:	00ffdfc4 	movi	r3,-129
 8010520:	a8ea703a 	and	r21,r21,r3
 8010524:	2002221e 	bne	r4,zero,8010db0 <___vfiprintf_internal_r+0xc20>
 8010528:	4802c726 	beq	r9,zero,8011048 <___vfiprintf_internal_r+0xeb8>
 801052c:	10803fcc 	andi	r2,r2,255
 8010530:	00c00044 	movi	r3,1
 8010534:	10c24426 	beq	r2,r3,8010e48 <___vfiprintf_internal_r+0xcb8>
 8010538:	00c00084 	movi	r3,2
 801053c:	10c2cc26 	beq	r2,r3,8011070 <___vfiprintf_internal_r+0xee0>
 8010540:	d8c10a04 	addi	r3,sp,1064
 8010544:	9008d0fa 	srli	r4,r18,3
 8010548:	b00a977a 	slli	r5,r22,29
 801054c:	b02cd0fa 	srli	r22,r22,3
 8010550:	948001cc 	andi	r18,r18,7
 8010554:	90800c04 	addi	r2,r18,48
 8010558:	18ffffc4 	addi	r3,r3,-1
 801055c:	2924b03a 	or	r18,r5,r4
 8010560:	18800005 	stb	r2,0(r3)
 8010564:	9588b03a 	or	r4,r18,r22
 8010568:	203ff61e 	bne	r4,zero,8010544 <__alt_data_end+0xfc010544>
 801056c:	a900004c 	andi	r4,r21,1
 8010570:	d8c12415 	stw	r3,1168(sp)
 8010574:	2002fb1e 	bne	r4,zero,8011164 <___vfiprintf_internal_r+0xfd4>
 8010578:	da811e17 	ldw	r10,1144(sp)
 801057c:	50e3c83a 	sub	r17,r10,r3
 8010580:	8825883a 	mov	r18,r17
 8010584:	8a40010e 	bge	r17,r9,801058c <___vfiprintf_internal_r+0x3fc>
 8010588:	4825883a 	mov	r18,r9
 801058c:	63003fcc 	andi	r12,r12,255
 8010590:	6300201c 	xori	r12,r12,128
 8010594:	633fe004 	addi	r12,r12,-128
 8010598:	60000126 	beq	r12,zero,80105a0 <___vfiprintf_internal_r+0x410>
 801059c:	94800044 	addi	r18,r18,1
 80105a0:	ab80008c 	andi	r14,r21,2
 80105a4:	70000126 	beq	r14,zero,80105ac <___vfiprintf_internal_r+0x41c>
 80105a8:	94800084 	addi	r18,r18,2
 80105ac:	ad80210c 	andi	r22,r21,132
 80105b0:	b001df1e 	bne	r22,zero,8010d30 <___vfiprintf_internal_r+0xba0>
 80105b4:	9c8fc83a 	sub	r7,r19,r18
 80105b8:	01c1dd0e 	bge	zero,r7,8010d30 <___vfiprintf_internal_r+0xba0>
 80105bc:	03000404 	movi	r12,16
 80105c0:	d8811c17 	ldw	r2,1136(sp)
 80105c4:	61c3920e 	bge	r12,r7,8011410 <___vfiprintf_internal_r+0x1280>
 80105c8:	028200b4 	movhi	r10,2050
 80105cc:	52867304 	addi	r10,r10,6604
 80105d0:	dc012915 	stw	r16,1188(sp)
 80105d4:	d9811b17 	ldw	r6,1132(sp)
 80105d8:	da812315 	stw	r10,1164(sp)
 80105dc:	00c001c4 	movi	r3,7
 80105e0:	da412515 	stw	r9,1172(sp)
 80105e4:	db812815 	stw	r14,1184(sp)
 80105e8:	3821883a 	mov	r16,r7
 80105ec:	00000506 	br	8010604 <___vfiprintf_internal_r+0x474>
 80105f0:	31400084 	addi	r5,r6,2
 80105f4:	42000204 	addi	r8,r8,8
 80105f8:	200d883a 	mov	r6,r4
 80105fc:	843ffc04 	addi	r16,r16,-16
 8010600:	64000d0e 	bge	r12,r16,8010638 <___vfiprintf_internal_r+0x4a8>
 8010604:	10800404 	addi	r2,r2,16
 8010608:	31000044 	addi	r4,r6,1
 801060c:	47000015 	stw	fp,0(r8)
 8010610:	43000115 	stw	r12,4(r8)
 8010614:	d8811c15 	stw	r2,1136(sp)
 8010618:	d9011b15 	stw	r4,1132(sp)
 801061c:	193ff40e 	bge	r3,r4,80105f0 <__alt_data_end+0xfc0105f0>
 8010620:	1001b51e 	bne	r2,zero,8010cf8 <___vfiprintf_internal_r+0xb68>
 8010624:	843ffc04 	addi	r16,r16,-16
 8010628:	000d883a 	mov	r6,zero
 801062c:	01400044 	movi	r5,1
 8010630:	d811883a 	mov	r8,sp
 8010634:	643ff316 	blt	r12,r16,8010604 <__alt_data_end+0xfc010604>
 8010638:	800f883a 	mov	r7,r16
 801063c:	da412517 	ldw	r9,1172(sp)
 8010640:	db812817 	ldw	r14,1184(sp)
 8010644:	dc012917 	ldw	r16,1188(sp)
 8010648:	dac12317 	ldw	r11,1164(sp)
 801064c:	3887883a 	add	r3,r7,r2
 8010650:	41c00115 	stw	r7,4(r8)
 8010654:	42c00015 	stw	r11,0(r8)
 8010658:	d8c11c15 	stw	r3,1136(sp)
 801065c:	d9411b15 	stw	r5,1132(sp)
 8010660:	008001c4 	movi	r2,7
 8010664:	11429316 	blt	r2,r5,80110b4 <___vfiprintf_internal_r+0xf24>
 8010668:	d9011d87 	ldb	r4,1142(sp)
 801066c:	42000204 	addi	r8,r8,8
 8010670:	28800044 	addi	r2,r5,1
 8010674:	2001b31e 	bne	r4,zero,8010d44 <___vfiprintf_internal_r+0xbb4>
 8010678:	70000c26 	beq	r14,zero,80106ac <___vfiprintf_internal_r+0x51c>
 801067c:	d9011d04 	addi	r4,sp,1140
 8010680:	18c00084 	addi	r3,r3,2
 8010684:	41000015 	stw	r4,0(r8)
 8010688:	01000084 	movi	r4,2
 801068c:	41000115 	stw	r4,4(r8)
 8010690:	d8c11c15 	stw	r3,1136(sp)
 8010694:	d8811b15 	stw	r2,1132(sp)
 8010698:	010001c4 	movi	r4,7
 801069c:	20826516 	blt	r4,r2,8011034 <___vfiprintf_internal_r+0xea4>
 80106a0:	100b883a 	mov	r5,r2
 80106a4:	42000204 	addi	r8,r8,8
 80106a8:	10800044 	addi	r2,r2,1
 80106ac:	01002004 	movi	r4,128
 80106b0:	b1021a26 	beq	r22,r4,8010f1c <___vfiprintf_internal_r+0xd8c>
 80106b4:	4c6dc83a 	sub	r22,r9,r17
 80106b8:	0580230e 	bge	zero,r22,8010748 <___vfiprintf_internal_r+0x5b8>
 80106bc:	01c00404 	movi	r7,16
 80106c0:	3d83300e 	bge	r7,r22,8011384 <___vfiprintf_internal_r+0x11f4>
 80106c4:	008200b4 	movhi	r2,2050
 80106c8:	10866f04 	addi	r2,r2,6588
 80106cc:	d8812315 	stw	r2,1164(sp)
 80106d0:	030001c4 	movi	r12,7
 80106d4:	00000506 	br	80106ec <___vfiprintf_internal_r+0x55c>
 80106d8:	28800084 	addi	r2,r5,2
 80106dc:	42000204 	addi	r8,r8,8
 80106e0:	200b883a 	mov	r5,r4
 80106e4:	b5bffc04 	addi	r22,r22,-16
 80106e8:	3d800d0e 	bge	r7,r22,8010720 <___vfiprintf_internal_r+0x590>
 80106ec:	18c00404 	addi	r3,r3,16
 80106f0:	29000044 	addi	r4,r5,1
 80106f4:	45c00015 	stw	r23,0(r8)
 80106f8:	41c00115 	stw	r7,4(r8)
 80106fc:	d8c11c15 	stw	r3,1136(sp)
 8010700:	d9011b15 	stw	r4,1132(sp)
 8010704:	613ff40e 	bge	r12,r4,80106d8 <__alt_data_end+0xfc0106d8>
 8010708:	18019b1e 	bne	r3,zero,8010d78 <___vfiprintf_internal_r+0xbe8>
 801070c:	b5bffc04 	addi	r22,r22,-16
 8010710:	000b883a 	mov	r5,zero
 8010714:	00800044 	movi	r2,1
 8010718:	d811883a 	mov	r8,sp
 801071c:	3dbff316 	blt	r7,r22,80106ec <__alt_data_end+0xfc0106ec>
 8010720:	da812317 	ldw	r10,1164(sp)
 8010724:	1d87883a 	add	r3,r3,r22
 8010728:	45800115 	stw	r22,4(r8)
 801072c:	42800015 	stw	r10,0(r8)
 8010730:	d8c11c15 	stw	r3,1136(sp)
 8010734:	d8811b15 	stw	r2,1132(sp)
 8010738:	010001c4 	movi	r4,7
 801073c:	2081dd16 	blt	r4,r2,8010eb4 <___vfiprintf_internal_r+0xd24>
 8010740:	42000204 	addi	r8,r8,8
 8010744:	10800044 	addi	r2,r2,1
 8010748:	da812417 	ldw	r10,1168(sp)
 801074c:	1c47883a 	add	r3,r3,r17
 8010750:	44400115 	stw	r17,4(r8)
 8010754:	42800015 	stw	r10,0(r8)
 8010758:	d8c11c15 	stw	r3,1136(sp)
 801075c:	d8811b15 	stw	r2,1132(sp)
 8010760:	010001c4 	movi	r4,7
 8010764:	2081dc0e 	bge	r4,r2,8010ed8 <___vfiprintf_internal_r+0xd48>
 8010768:	1802611e 	bne	r3,zero,80110f0 <___vfiprintf_internal_r+0xf60>
 801076c:	d8011b15 	stw	zero,1132(sp)
 8010770:	aac0010c 	andi	r11,r21,4
 8010774:	58002726 	beq	r11,zero,8010814 <___vfiprintf_internal_r+0x684>
 8010778:	9ca3c83a 	sub	r17,r19,r18
 801077c:	d811883a 	mov	r8,sp
 8010780:	0443510e 	bge	zero,r17,80114c8 <___vfiprintf_internal_r+0x1338>
 8010784:	01c00404 	movi	r7,16
 8010788:	3c43320e 	bge	r7,r17,8011454 <___vfiprintf_internal_r+0x12c4>
 801078c:	008200b4 	movhi	r2,2050
 8010790:	10867304 	addi	r2,r2,6604
 8010794:	d9011b17 	ldw	r4,1132(sp)
 8010798:	d8812315 	stw	r2,1164(sp)
 801079c:	382d883a 	mov	r22,r7
 80107a0:	054001c4 	movi	r21,7
 80107a4:	00000506 	br	80107bc <___vfiprintf_internal_r+0x62c>
 80107a8:	21400084 	addi	r5,r4,2
 80107ac:	42000204 	addi	r8,r8,8
 80107b0:	1009883a 	mov	r4,r2
 80107b4:	8c7ffc04 	addi	r17,r17,-16
 80107b8:	b4400d0e 	bge	r22,r17,80107f0 <___vfiprintf_internal_r+0x660>
 80107bc:	18c00404 	addi	r3,r3,16
 80107c0:	20800044 	addi	r2,r4,1
 80107c4:	47000015 	stw	fp,0(r8)
 80107c8:	45800115 	stw	r22,4(r8)
 80107cc:	d8c11c15 	stw	r3,1136(sp)
 80107d0:	d8811b15 	stw	r2,1132(sp)
 80107d4:	a8bff40e 	bge	r21,r2,80107a8 <__alt_data_end+0xfc0107a8>
 80107d8:	1801ac1e 	bne	r3,zero,8010e8c <___vfiprintf_internal_r+0xcfc>
 80107dc:	8c7ffc04 	addi	r17,r17,-16
 80107e0:	0009883a 	mov	r4,zero
 80107e4:	01400044 	movi	r5,1
 80107e8:	d811883a 	mov	r8,sp
 80107ec:	b47ff316 	blt	r22,r17,80107bc <__alt_data_end+0xfc0107bc>
 80107f0:	da812317 	ldw	r10,1164(sp)
 80107f4:	1c47883a 	add	r3,r3,r17
 80107f8:	44400115 	stw	r17,4(r8)
 80107fc:	42800015 	stw	r10,0(r8)
 8010800:	d8c11c15 	stw	r3,1136(sp)
 8010804:	d9411b15 	stw	r5,1132(sp)
 8010808:	008001c4 	movi	r2,7
 801080c:	1141b70e 	bge	r2,r5,8010eec <___vfiprintf_internal_r+0xd5c>
 8010810:	1802cf1e 	bne	r3,zero,8011350 <___vfiprintf_internal_r+0x11c0>
 8010814:	94c2ca16 	blt	r18,r19,8011340 <___vfiprintf_internal_r+0x11b0>
 8010818:	dac12217 	ldw	r11,1160(sp)
 801081c:	5c97883a 	add	r11,r11,r18
 8010820:	dac12215 	stw	r11,1160(sp)
 8010824:	d8011b15 	stw	zero,1132(sp)
 8010828:	d811883a 	mov	r8,sp
 801082c:	003e8d06 	br	8010264 <__alt_data_end+0xfc010264>
 8010830:	d9012017 	ldw	r4,1152(sp)
 8010834:	a00b883a 	mov	r5,r20
 8010838:	800a2ac0 	call	800a2ac <__swsetup_r>
 801083c:	10002c1e 	bne	r2,zero,80108f0 <___vfiprintf_internal_r+0x760>
 8010840:	a0c0030b 	ldhu	r3,12(r20)
 8010844:	01000284 	movi	r4,10
 8010848:	1805883a 	mov	r2,r3
 801084c:	1080068c 	andi	r2,r2,26
 8010850:	113e731e 	bne	r2,r4,8010220 <__alt_data_end+0xfc010220>
 8010854:	a080038b 	ldhu	r2,14(r20)
 8010858:	113fffcc 	andi	r4,r2,65535
 801085c:	2120001c 	xori	r4,r4,32768
 8010860:	21200004 	addi	r4,r4,-32768
 8010864:	203e6e16 	blt	r4,zero,8010220 <__alt_data_end+0xfc010220>
 8010868:	a3001917 	ldw	r12,100(r20)
 801086c:	a2c00717 	ldw	r11,28(r20)
 8010870:	a2800917 	ldw	r10,36(r20)
 8010874:	d9012017 	ldw	r4,1152(sp)
 8010878:	d9c12117 	ldw	r7,1156(sp)
 801087c:	02410004 	movi	r9,1024
 8010880:	18ffff4c 	andi	r3,r3,65533
 8010884:	da4b883a 	add	r5,sp,r9
 8010888:	b00d883a 	mov	r6,r22
 801088c:	d8c1030d 	sth	r3,1036(sp)
 8010890:	db011915 	stw	r12,1124(sp)
 8010894:	d881038d 	sth	r2,1038(sp)
 8010898:	dac10715 	stw	r11,1052(sp)
 801089c:	da810915 	stw	r10,1060(sp)
 80108a0:	dec10015 	stw	sp,1024(sp)
 80108a4:	dec10415 	stw	sp,1040(sp)
 80108a8:	da410215 	stw	r9,1032(sp)
 80108ac:	da410515 	stw	r9,1044(sp)
 80108b0:	d8010615 	stw	zero,1048(sp)
 80108b4:	80101900 	call	8010190 <___vfiprintf_internal_r>
 80108b8:	1021883a 	mov	r16,r2
 80108bc:	10000416 	blt	r2,zero,80108d0 <___vfiprintf_internal_r+0x740>
 80108c0:	d9012017 	ldw	r4,1152(sp)
 80108c4:	d9410004 	addi	r5,sp,1024
 80108c8:	800bd040 	call	800bd04 <_fflush_r>
 80108cc:	1002fc1e 	bne	r2,zero,80114c0 <___vfiprintf_internal_r+0x1330>
 80108d0:	d881030b 	ldhu	r2,1036(sp)
 80108d4:	1080100c 	andi	r2,r2,64
 80108d8:	10000326 	beq	r2,zero,80108e8 <___vfiprintf_internal_r+0x758>
 80108dc:	a080030b 	ldhu	r2,12(r20)
 80108e0:	10801014 	ori	r2,r2,64
 80108e4:	a080030d 	sth	r2,12(r20)
 80108e8:	8005883a 	mov	r2,r16
 80108ec:	00000106 	br	80108f4 <___vfiprintf_internal_r+0x764>
 80108f0:	00bfffc4 	movi	r2,-1
 80108f4:	dfc13517 	ldw	ra,1236(sp)
 80108f8:	df013417 	ldw	fp,1232(sp)
 80108fc:	ddc13317 	ldw	r23,1228(sp)
 8010900:	dd813217 	ldw	r22,1224(sp)
 8010904:	dd413117 	ldw	r21,1220(sp)
 8010908:	dd013017 	ldw	r20,1216(sp)
 801090c:	dcc12f17 	ldw	r19,1212(sp)
 8010910:	dc812e17 	ldw	r18,1208(sp)
 8010914:	dc412d17 	ldw	r17,1204(sp)
 8010918:	dc012c17 	ldw	r16,1200(sp)
 801091c:	dec13604 	addi	sp,sp,1240
 8010920:	f800283a 	ret
 8010924:	800c2ac0 	call	800c2ac <__sinit>
 8010928:	003e2b06 	br	80101d8 <__alt_data_end+0xfc0101d8>
 801092c:	04e7c83a 	sub	r19,zero,r19
 8010930:	d8812115 	stw	r2,1156(sp)
 8010934:	ad400114 	ori	r21,r21,4
 8010938:	80c00007 	ldb	r3,0(r16)
 801093c:	003e7306 	br	801030c <__alt_data_end+0xfc01030c>
 8010940:	a880040c 	andi	r2,r21,16
 8010944:	1000e41e 	bne	r2,zero,8010cd8 <___vfiprintf_internal_r+0xb48>
 8010948:	a880100c 	andi	r2,r21,64
 801094c:	1000e226 	beq	r2,zero,8010cd8 <___vfiprintf_internal_r+0xb48>
 8010950:	da812117 	ldw	r10,1156(sp)
 8010954:	002d883a 	mov	r22,zero
 8010958:	0005883a 	mov	r2,zero
 801095c:	5480000b 	ldhu	r18,0(r10)
 8010960:	52800104 	addi	r10,r10,4
 8010964:	da812115 	stw	r10,1156(sp)
 8010968:	9009883a 	mov	r4,r18
 801096c:	003ee706 	br	801050c <__alt_data_end+0xfc01050c>
 8010970:	da812117 	ldw	r10,1156(sp)
 8010974:	00800044 	movi	r2,1
 8010978:	54800017 	ldw	r18,0(r10)
 801097c:	55800117 	ldw	r22,4(r10)
 8010980:	52800204 	addi	r10,r10,8
 8010984:	da812115 	stw	r10,1156(sp)
 8010988:	9588b03a 	or	r4,r18,r22
 801098c:	003edf06 	br	801050c <__alt_data_end+0xfc01050c>
 8010990:	02c200b4 	movhi	r11,2050
 8010994:	5ac5f204 	addi	r11,r11,6088
 8010998:	d9811d85 	stb	r6,1142(sp)
 801099c:	dac12615 	stw	r11,1176(sp)
 80109a0:	a900080c 	andi	r4,r21,32
 80109a4:	d8812117 	ldw	r2,1156(sp)
 80109a8:	2000a526 	beq	r4,zero,8010c40 <___vfiprintf_internal_r+0xab0>
 80109ac:	da812117 	ldw	r10,1156(sp)
 80109b0:	14800017 	ldw	r18,0(r2)
 80109b4:	15800117 	ldw	r22,4(r2)
 80109b8:	52800204 	addi	r10,r10,8
 80109bc:	da812115 	stw	r10,1156(sp)
 80109c0:	a880004c 	andi	r2,r21,1
 80109c4:	1001d926 	beq	r2,zero,801112c <___vfiprintf_internal_r+0xf9c>
 80109c8:	9588b03a 	or	r4,r18,r22
 80109cc:	20024426 	beq	r4,zero,80112e0 <___vfiprintf_internal_r+0x1150>
 80109d0:	00800c04 	movi	r2,48
 80109d4:	d8811d05 	stb	r2,1140(sp)
 80109d8:	d8c11d45 	stb	r3,1141(sp)
 80109dc:	ad400094 	ori	r21,r21,2
 80109e0:	00800084 	movi	r2,2
 80109e4:	003ec906 	br	801050c <__alt_data_end+0xfc01050c>
 80109e8:	da812117 	ldw	r10,1156(sp)
 80109ec:	04800044 	movi	r18,1
 80109f0:	dac10004 	addi	r11,sp,1024
 80109f4:	50800017 	ldw	r2,0(r10)
 80109f8:	52800104 	addi	r10,r10,4
 80109fc:	d8011d85 	stb	zero,1142(sp)
 8010a00:	d8810005 	stb	r2,1024(sp)
 8010a04:	da812115 	stw	r10,1156(sp)
 8010a08:	9023883a 	mov	r17,r18
 8010a0c:	dac12415 	stw	r11,1168(sp)
 8010a10:	0013883a 	mov	r9,zero
 8010a14:	003ee206 	br	80105a0 <__alt_data_end+0xfc0105a0>
 8010a18:	ad402014 	ori	r21,r21,128
 8010a1c:	80c00007 	ldb	r3,0(r16)
 8010a20:	003e3a06 	br	801030c <__alt_data_end+0xfc01030c>
 8010a24:	8015883a 	mov	r10,r16
 8010a28:	0027883a 	mov	r19,zero
 8010a2c:	18bff404 	addi	r2,r3,-48
 8010a30:	50c00007 	ldb	r3,0(r10)
 8010a34:	9cc002a4 	muli	r19,r19,10
 8010a38:	84000044 	addi	r16,r16,1
 8010a3c:	8015883a 	mov	r10,r16
 8010a40:	98a7883a 	add	r19,r19,r2
 8010a44:	18bff404 	addi	r2,r3,-48
 8010a48:	28bff92e 	bgeu	r5,r2,8010a30 <__alt_data_end+0xfc010a30>
 8010a4c:	003e3006 	br	8010310 <__alt_data_end+0xfc010310>
 8010a50:	ad400414 	ori	r21,r21,16
 8010a54:	d9811d85 	stb	r6,1142(sp)
 8010a58:	a880080c 	andi	r2,r21,32
 8010a5c:	d8c12117 	ldw	r3,1156(sp)
 8010a60:	10004b26 	beq	r2,zero,8010b90 <___vfiprintf_internal_r+0xa00>
 8010a64:	da812117 	ldw	r10,1156(sp)
 8010a68:	18800117 	ldw	r2,4(r3)
 8010a6c:	1c800017 	ldw	r18,0(r3)
 8010a70:	52800204 	addi	r10,r10,8
 8010a74:	da812115 	stw	r10,1156(sp)
 8010a78:	102d883a 	mov	r22,r2
 8010a7c:	1001f116 	blt	r2,zero,8011244 <___vfiprintf_internal_r+0x10b4>
 8010a80:	db011d83 	ldbu	r12,1142(sp)
 8010a84:	4823883a 	mov	r17,r9
 8010a88:	00800044 	movi	r2,1
 8010a8c:	9588b03a 	or	r4,r18,r22
 8010a90:	003ea106 	br	8010518 <__alt_data_end+0xfc010518>
 8010a94:	80c00007 	ldb	r3,0(r16)
 8010a98:	82800044 	addi	r10,r16,1
 8010a9c:	1b027f26 	beq	r3,r12,801149c <___vfiprintf_internal_r+0x130c>
 8010aa0:	18bff404 	addi	r2,r3,-48
 8010aa4:	5021883a 	mov	r16,r10
 8010aa8:	0013883a 	mov	r9,zero
 8010aac:	28be1836 	bltu	r5,r2,8010310 <__alt_data_end+0xfc010310>
 8010ab0:	80c00007 	ldb	r3,0(r16)
 8010ab4:	4a4002a4 	muli	r9,r9,10
 8010ab8:	84000044 	addi	r16,r16,1
 8010abc:	1253883a 	add	r9,r2,r9
 8010ac0:	18bff404 	addi	r2,r3,-48
 8010ac4:	28bffa2e 	bgeu	r5,r2,8010ab0 <__alt_data_end+0xfc010ab0>
 8010ac8:	483e110e 	bge	r9,zero,8010310 <__alt_data_end+0xfc010310>
 8010acc:	027fffc4 	movi	r9,-1
 8010ad0:	003e0f06 	br	8010310 <__alt_data_end+0xfc010310>
 8010ad4:	d9811d85 	stb	r6,1142(sp)
 8010ad8:	a880080c 	andi	r2,r21,32
 8010adc:	1001ee26 	beq	r2,zero,8011298 <___vfiprintf_internal_r+0x1108>
 8010ae0:	da812117 	ldw	r10,1156(sp)
 8010ae4:	dac12217 	ldw	r11,1160(sp)
 8010ae8:	50800017 	ldw	r2,0(r10)
 8010aec:	5807d7fa 	srai	r3,r11,31
 8010af0:	52800104 	addi	r10,r10,4
 8010af4:	da812115 	stw	r10,1156(sp)
 8010af8:	12c00015 	stw	r11,0(r2)
 8010afc:	10c00115 	stw	r3,4(r2)
 8010b00:	003dd806 	br	8010264 <__alt_data_end+0xfc010264>
 8010b04:	30803fcc 	andi	r2,r6,255
 8010b08:	1080201c 	xori	r2,r2,128
 8010b0c:	10bfe004 	addi	r2,r2,-128
 8010b10:	1001df1e 	bne	r2,zero,8011290 <___vfiprintf_internal_r+0x1100>
 8010b14:	01800804 	movi	r6,32
 8010b18:	80c00007 	ldb	r3,0(r16)
 8010b1c:	003dfb06 	br	801030c <__alt_data_end+0xfc01030c>
 8010b20:	da812117 	ldw	r10,1156(sp)
 8010b24:	dac12117 	ldw	r11,1156(sp)
 8010b28:	d8011d85 	stb	zero,1142(sp)
 8010b2c:	52800017 	ldw	r10,0(r10)
 8010b30:	5d800104 	addi	r22,r11,4
 8010b34:	da812415 	stw	r10,1168(sp)
 8010b38:	50023b26 	beq	r10,zero,8011428 <___vfiprintf_internal_r+0x1298>
 8010b3c:	d9012417 	ldw	r4,1168(sp)
 8010b40:	48021f16 	blt	r9,zero,80113c0 <___vfiprintf_internal_r+0x1230>
 8010b44:	480d883a 	mov	r6,r9
 8010b48:	000b883a 	mov	r5,zero
 8010b4c:	da012a15 	stw	r8,1192(sp)
 8010b50:	da412b15 	stw	r9,1196(sp)
 8010b54:	800d7a40 	call	800d7a4 <memchr>
 8010b58:	da012a17 	ldw	r8,1192(sp)
 8010b5c:	da412b17 	ldw	r9,1196(sp)
 8010b60:	10024726 	beq	r2,zero,8011480 <___vfiprintf_internal_r+0x12f0>
 8010b64:	d8c12417 	ldw	r3,1168(sp)
 8010b68:	10e3c83a 	sub	r17,r2,r3
 8010b6c:	4c41f616 	blt	r9,r17,8011348 <___vfiprintf_internal_r+0x11b8>
 8010b70:	db011d83 	ldbu	r12,1142(sp)
 8010b74:	dd812115 	stw	r22,1156(sp)
 8010b78:	0013883a 	mov	r9,zero
 8010b7c:	003e8006 	br	8010580 <__alt_data_end+0xfc010580>
 8010b80:	d9811d85 	stb	r6,1142(sp)
 8010b84:	a880080c 	andi	r2,r21,32
 8010b88:	d8c12117 	ldw	r3,1156(sp)
 8010b8c:	103fb51e 	bne	r2,zero,8010a64 <__alt_data_end+0xfc010a64>
 8010b90:	a880040c 	andi	r2,r21,16
 8010b94:	10015e1e 	bne	r2,zero,8011110 <___vfiprintf_internal_r+0xf80>
 8010b98:	a880100c 	andi	r2,r21,64
 8010b9c:	10015c26 	beq	r2,zero,8011110 <___vfiprintf_internal_r+0xf80>
 8010ba0:	1c80000f 	ldh	r18,0(r3)
 8010ba4:	da812117 	ldw	r10,1156(sp)
 8010ba8:	902dd7fa 	srai	r22,r18,31
 8010bac:	52800104 	addi	r10,r10,4
 8010bb0:	da812115 	stw	r10,1156(sp)
 8010bb4:	b005883a 	mov	r2,r22
 8010bb8:	003fb006 	br	8010a7c <__alt_data_end+0xfc010a7c>
 8010bbc:	da812117 	ldw	r10,1156(sp)
 8010bc0:	00800c04 	movi	r2,48
 8010bc4:	02c200b4 	movhi	r11,2050
 8010bc8:	54800017 	ldw	r18,0(r10)
 8010bcc:	d8811d05 	stb	r2,1140(sp)
 8010bd0:	52800104 	addi	r10,r10,4
 8010bd4:	00801e04 	movi	r2,120
 8010bd8:	5ac5f704 	addi	r11,r11,6108
 8010bdc:	d8811d45 	stb	r2,1141(sp)
 8010be0:	002d883a 	mov	r22,zero
 8010be4:	ad400094 	ori	r21,r21,2
 8010be8:	da812115 	stw	r10,1156(sp)
 8010bec:	dac12615 	stw	r11,1176(sp)
 8010bf0:	00800084 	movi	r2,2
 8010bf4:	9009883a 	mov	r4,r18
 8010bf8:	003e4406 	br	801050c <__alt_data_end+0xfc01050c>
 8010bfc:	ad400814 	ori	r21,r21,32
 8010c00:	80c00007 	ldb	r3,0(r16)
 8010c04:	003dc106 	br	801030c <__alt_data_end+0xfc01030c>
 8010c08:	ad401014 	ori	r21,r21,64
 8010c0c:	80c00007 	ldb	r3,0(r16)
 8010c10:	003dbe06 	br	801030c <__alt_data_end+0xfc01030c>
 8010c14:	80c00007 	ldb	r3,0(r16)
 8010c18:	19c1de26 	beq	r3,r7,8011394 <___vfiprintf_internal_r+0x1204>
 8010c1c:	ad400414 	ori	r21,r21,16
 8010c20:	003dba06 	br	801030c <__alt_data_end+0xfc01030c>
 8010c24:	008200b4 	movhi	r2,2050
 8010c28:	1085f704 	addi	r2,r2,6108
 8010c2c:	d8812615 	stw	r2,1176(sp)
 8010c30:	d9811d85 	stb	r6,1142(sp)
 8010c34:	a900080c 	andi	r4,r21,32
 8010c38:	d8812117 	ldw	r2,1156(sp)
 8010c3c:	203f5b1e 	bne	r4,zero,80109ac <__alt_data_end+0xfc0109ac>
 8010c40:	a900040c 	andi	r4,r21,16
 8010c44:	2001a826 	beq	r4,zero,80112e8 <___vfiprintf_internal_r+0x1158>
 8010c48:	dac12117 	ldw	r11,1156(sp)
 8010c4c:	14800017 	ldw	r18,0(r2)
 8010c50:	002d883a 	mov	r22,zero
 8010c54:	5ac00104 	addi	r11,r11,4
 8010c58:	dac12115 	stw	r11,1156(sp)
 8010c5c:	003f5806 	br	80109c0 <__alt_data_end+0xfc0109c0>
 8010c60:	da812117 	ldw	r10,1156(sp)
 8010c64:	54c00017 	ldw	r19,0(r10)
 8010c68:	50800104 	addi	r2,r10,4
 8010c6c:	983f2f16 	blt	r19,zero,801092c <__alt_data_end+0xfc01092c>
 8010c70:	d8812115 	stw	r2,1156(sp)
 8010c74:	80c00007 	ldb	r3,0(r16)
 8010c78:	003da406 	br	801030c <__alt_data_end+0xfc01030c>
 8010c7c:	01800ac4 	movi	r6,43
 8010c80:	80c00007 	ldb	r3,0(r16)
 8010c84:	003da106 	br	801030c <__alt_data_end+0xfc01030c>
 8010c88:	ad400054 	ori	r21,r21,1
 8010c8c:	80c00007 	ldb	r3,0(r16)
 8010c90:	003d9e06 	br	801030c <__alt_data_end+0xfc01030c>
 8010c94:	d9811d85 	stb	r6,1142(sp)
 8010c98:	18007126 	beq	r3,zero,8010e60 <___vfiprintf_internal_r+0xcd0>
 8010c9c:	04800044 	movi	r18,1
 8010ca0:	d8c10005 	stb	r3,1024(sp)
 8010ca4:	d8c10004 	addi	r3,sp,1024
 8010ca8:	d8011d85 	stb	zero,1142(sp)
 8010cac:	9023883a 	mov	r17,r18
 8010cb0:	d8c12415 	stw	r3,1168(sp)
 8010cb4:	003f5606 	br	8010a10 <__alt_data_end+0xfc010a10>
 8010cb8:	dac12117 	ldw	r11,1156(sp)
 8010cbc:	002d883a 	mov	r22,zero
 8010cc0:	00800044 	movi	r2,1
 8010cc4:	5c800017 	ldw	r18,0(r11)
 8010cc8:	5ac00104 	addi	r11,r11,4
 8010ccc:	dac12115 	stw	r11,1156(sp)
 8010cd0:	9009883a 	mov	r4,r18
 8010cd4:	003e0d06 	br	801050c <__alt_data_end+0xfc01050c>
 8010cd8:	dac12117 	ldw	r11,1156(sp)
 8010cdc:	002d883a 	mov	r22,zero
 8010ce0:	0005883a 	mov	r2,zero
 8010ce4:	5c800017 	ldw	r18,0(r11)
 8010ce8:	5ac00104 	addi	r11,r11,4
 8010cec:	dac12115 	stw	r11,1156(sp)
 8010cf0:	9009883a 	mov	r4,r18
 8010cf4:	003e0506 	br	801050c <__alt_data_end+0xfc01050c>
 8010cf8:	d9012017 	ldw	r4,1152(sp)
 8010cfc:	a00b883a 	mov	r5,r20
 8010d00:	d9811a04 	addi	r6,sp,1128
 8010d04:	d8c12a15 	stw	r3,1192(sp)
 8010d08:	db012b15 	stw	r12,1196(sp)
 8010d0c:	801007c0 	call	801007c <__sprint_r.part.0>
 8010d10:	d8c12a17 	ldw	r3,1192(sp)
 8010d14:	db012b17 	ldw	r12,1196(sp)
 8010d18:	1000571e 	bne	r2,zero,8010e78 <___vfiprintf_internal_r+0xce8>
 8010d1c:	d9811b17 	ldw	r6,1132(sp)
 8010d20:	d8811c17 	ldw	r2,1136(sp)
 8010d24:	d811883a 	mov	r8,sp
 8010d28:	31400044 	addi	r5,r6,1
 8010d2c:	003e3306 	br	80105fc <__alt_data_end+0xfc0105fc>
 8010d30:	d9411b17 	ldw	r5,1132(sp)
 8010d34:	d8c11c17 	ldw	r3,1136(sp)
 8010d38:	28800044 	addi	r2,r5,1
 8010d3c:	d9011d87 	ldb	r4,1142(sp)
 8010d40:	203e4d26 	beq	r4,zero,8010678 <__alt_data_end+0xfc010678>
 8010d44:	01000044 	movi	r4,1
 8010d48:	d9411d84 	addi	r5,sp,1142
 8010d4c:	1907883a 	add	r3,r3,r4
 8010d50:	41400015 	stw	r5,0(r8)
 8010d54:	41000115 	stw	r4,4(r8)
 8010d58:	d8c11c15 	stw	r3,1136(sp)
 8010d5c:	d8811b15 	stw	r2,1132(sp)
 8010d60:	014001c4 	movi	r5,7
 8010d64:	2880aa16 	blt	r5,r2,8011010 <___vfiprintf_internal_r+0xe80>
 8010d68:	100b883a 	mov	r5,r2
 8010d6c:	42000204 	addi	r8,r8,8
 8010d70:	10800044 	addi	r2,r2,1
 8010d74:	003e4006 	br	8010678 <__alt_data_end+0xfc010678>
 8010d78:	d9012017 	ldw	r4,1152(sp)
 8010d7c:	a00b883a 	mov	r5,r20
 8010d80:	d9811a04 	addi	r6,sp,1128
 8010d84:	d9c12a15 	stw	r7,1192(sp)
 8010d88:	db012b15 	stw	r12,1196(sp)
 8010d8c:	801007c0 	call	801007c <__sprint_r.part.0>
 8010d90:	d9c12a17 	ldw	r7,1192(sp)
 8010d94:	db012b17 	ldw	r12,1196(sp)
 8010d98:	1000371e 	bne	r2,zero,8010e78 <___vfiprintf_internal_r+0xce8>
 8010d9c:	d9411b17 	ldw	r5,1132(sp)
 8010da0:	d8c11c17 	ldw	r3,1136(sp)
 8010da4:	d811883a 	mov	r8,sp
 8010da8:	28800044 	addi	r2,r5,1
 8010dac:	003e4d06 	br	80106e4 <__alt_data_end+0xfc0106e4>
 8010db0:	10803fcc 	andi	r2,r2,255
 8010db4:	00c00044 	movi	r3,1
 8010db8:	10fddf1e 	bne	r2,r3,8010538 <__alt_data_end+0xfc010538>
 8010dbc:	b000021e 	bne	r22,zero,8010dc8 <___vfiprintf_internal_r+0xc38>
 8010dc0:	00800244 	movi	r2,9
 8010dc4:	1480202e 	bgeu	r2,r18,8010e48 <___vfiprintf_internal_r+0xcb8>
 8010dc8:	dc012515 	stw	r16,1172(sp)
 8010dcc:	dc410a04 	addi	r17,sp,1064
 8010dd0:	9021883a 	mov	r16,r18
 8010dd4:	da012415 	stw	r8,1168(sp)
 8010dd8:	b025883a 	mov	r18,r22
 8010ddc:	da412315 	stw	r9,1164(sp)
 8010de0:	602d883a 	mov	r22,r12
 8010de4:	8009883a 	mov	r4,r16
 8010de8:	900b883a 	mov	r5,r18
 8010dec:	01800284 	movi	r6,10
 8010df0:	000f883a 	mov	r7,zero
 8010df4:	801301c0 	call	801301c <__umoddi3>
 8010df8:	10800c04 	addi	r2,r2,48
 8010dfc:	8c7fffc4 	addi	r17,r17,-1
 8010e00:	8009883a 	mov	r4,r16
 8010e04:	900b883a 	mov	r5,r18
 8010e08:	01800284 	movi	r6,10
 8010e0c:	000f883a 	mov	r7,zero
 8010e10:	88800005 	stb	r2,0(r17)
 8010e14:	8012a5c0 	call	8012a5c <__udivdi3>
 8010e18:	1021883a 	mov	r16,r2
 8010e1c:	10c4b03a 	or	r2,r2,r3
 8010e20:	1825883a 	mov	r18,r3
 8010e24:	103fef1e 	bne	r2,zero,8010de4 <__alt_data_end+0xfc010de4>
 8010e28:	da811e17 	ldw	r10,1144(sp)
 8010e2c:	da012417 	ldw	r8,1168(sp)
 8010e30:	da412317 	ldw	r9,1164(sp)
 8010e34:	dc412415 	stw	r17,1168(sp)
 8010e38:	b019883a 	mov	r12,r22
 8010e3c:	dc012517 	ldw	r16,1172(sp)
 8010e40:	5463c83a 	sub	r17,r10,r17
 8010e44:	003dce06 	br	8010580 <__alt_data_end+0xfc010580>
 8010e48:	94800c04 	addi	r18,r18,48
 8010e4c:	d8c109c4 	addi	r3,sp,1063
 8010e50:	dc8109c5 	stb	r18,1063(sp)
 8010e54:	dc412717 	ldw	r17,1180(sp)
 8010e58:	d8c12415 	stw	r3,1168(sp)
 8010e5c:	003dc806 	br	8010580 <__alt_data_end+0xfc010580>
 8010e60:	d8811c17 	ldw	r2,1136(sp)
 8010e64:	10000426 	beq	r2,zero,8010e78 <___vfiprintf_internal_r+0xce8>
 8010e68:	d9012017 	ldw	r4,1152(sp)
 8010e6c:	a00b883a 	mov	r5,r20
 8010e70:	d9811a04 	addi	r6,sp,1128
 8010e74:	801007c0 	call	801007c <__sprint_r.part.0>
 8010e78:	a080030b 	ldhu	r2,12(r20)
 8010e7c:	1080100c 	andi	r2,r2,64
 8010e80:	103e9b1e 	bne	r2,zero,80108f0 <__alt_data_end+0xfc0108f0>
 8010e84:	d8812217 	ldw	r2,1160(sp)
 8010e88:	003e9a06 	br	80108f4 <__alt_data_end+0xfc0108f4>
 8010e8c:	d9012017 	ldw	r4,1152(sp)
 8010e90:	a00b883a 	mov	r5,r20
 8010e94:	d9811a04 	addi	r6,sp,1128
 8010e98:	801007c0 	call	801007c <__sprint_r.part.0>
 8010e9c:	103ff61e 	bne	r2,zero,8010e78 <__alt_data_end+0xfc010e78>
 8010ea0:	d9011b17 	ldw	r4,1132(sp)
 8010ea4:	d8c11c17 	ldw	r3,1136(sp)
 8010ea8:	d811883a 	mov	r8,sp
 8010eac:	21400044 	addi	r5,r4,1
 8010eb0:	003e4006 	br	80107b4 <__alt_data_end+0xfc0107b4>
 8010eb4:	1800d61e 	bne	r3,zero,8011210 <___vfiprintf_internal_r+0x1080>
 8010eb8:	dac12417 	ldw	r11,1168(sp)
 8010ebc:	00800044 	movi	r2,1
 8010ec0:	dc400115 	stw	r17,4(sp)
 8010ec4:	dac00015 	stw	r11,0(sp)
 8010ec8:	dc411c15 	stw	r17,1136(sp)
 8010ecc:	d8811b15 	stw	r2,1132(sp)
 8010ed0:	8807883a 	mov	r3,r17
 8010ed4:	d811883a 	mov	r8,sp
 8010ed8:	42000204 	addi	r8,r8,8
 8010edc:	aac0010c 	andi	r11,r21,4
 8010ee0:	58000226 	beq	r11,zero,8010eec <___vfiprintf_internal_r+0xd5c>
 8010ee4:	9ca3c83a 	sub	r17,r19,r18
 8010ee8:	047e2616 	blt	zero,r17,8010784 <__alt_data_end+0xfc010784>
 8010eec:	94c0010e 	bge	r18,r19,8010ef4 <___vfiprintf_internal_r+0xd64>
 8010ef0:	9825883a 	mov	r18,r19
 8010ef4:	da812217 	ldw	r10,1160(sp)
 8010ef8:	5495883a 	add	r10,r10,r18
 8010efc:	da812215 	stw	r10,1160(sp)
 8010f00:	183e4826 	beq	r3,zero,8010824 <__alt_data_end+0xfc010824>
 8010f04:	d9012017 	ldw	r4,1152(sp)
 8010f08:	a00b883a 	mov	r5,r20
 8010f0c:	d9811a04 	addi	r6,sp,1128
 8010f10:	801007c0 	call	801007c <__sprint_r.part.0>
 8010f14:	103e4326 	beq	r2,zero,8010824 <__alt_data_end+0xfc010824>
 8010f18:	003fd706 	br	8010e78 <__alt_data_end+0xfc010e78>
 8010f1c:	9cadc83a 	sub	r22,r19,r18
 8010f20:	05bde40e 	bge	zero,r22,80106b4 <__alt_data_end+0xfc0106b4>
 8010f24:	03000404 	movi	r12,16
 8010f28:	6581500e 	bge	r12,r22,801146c <___vfiprintf_internal_r+0x12dc>
 8010f2c:	008200b4 	movhi	r2,2050
 8010f30:	10866f04 	addi	r2,r2,6588
 8010f34:	d8812315 	stw	r2,1164(sp)
 8010f38:	8005883a 	mov	r2,r16
 8010f3c:	038001c4 	movi	r14,7
 8010f40:	b021883a 	mov	r16,r22
 8010f44:	da412515 	stw	r9,1172(sp)
 8010f48:	102d883a 	mov	r22,r2
 8010f4c:	00000506 	br	8010f64 <___vfiprintf_internal_r+0xdd4>
 8010f50:	29000084 	addi	r4,r5,2
 8010f54:	42000204 	addi	r8,r8,8
 8010f58:	100b883a 	mov	r5,r2
 8010f5c:	843ffc04 	addi	r16,r16,-16
 8010f60:	64000d0e 	bge	r12,r16,8010f98 <___vfiprintf_internal_r+0xe08>
 8010f64:	18c00404 	addi	r3,r3,16
 8010f68:	28800044 	addi	r2,r5,1
 8010f6c:	45c00015 	stw	r23,0(r8)
 8010f70:	43000115 	stw	r12,4(r8)
 8010f74:	d8c11c15 	stw	r3,1136(sp)
 8010f78:	d8811b15 	stw	r2,1132(sp)
 8010f7c:	70bff40e 	bge	r14,r2,8010f50 <__alt_data_end+0xfc010f50>
 8010f80:	1800151e 	bne	r3,zero,8010fd8 <___vfiprintf_internal_r+0xe48>
 8010f84:	843ffc04 	addi	r16,r16,-16
 8010f88:	000b883a 	mov	r5,zero
 8010f8c:	01000044 	movi	r4,1
 8010f90:	d811883a 	mov	r8,sp
 8010f94:	643ff316 	blt	r12,r16,8010f64 <__alt_data_end+0xfc010f64>
 8010f98:	da412517 	ldw	r9,1172(sp)
 8010f9c:	b005883a 	mov	r2,r22
 8010fa0:	802d883a 	mov	r22,r16
 8010fa4:	1021883a 	mov	r16,r2
 8010fa8:	da812317 	ldw	r10,1164(sp)
 8010fac:	1d87883a 	add	r3,r3,r22
 8010fb0:	45800115 	stw	r22,4(r8)
 8010fb4:	42800015 	stw	r10,0(r8)
 8010fb8:	d8c11c15 	stw	r3,1136(sp)
 8010fbc:	d9011b15 	stw	r4,1132(sp)
 8010fc0:	008001c4 	movi	r2,7
 8010fc4:	11008d16 	blt	r2,r4,80111fc <___vfiprintf_internal_r+0x106c>
 8010fc8:	42000204 	addi	r8,r8,8
 8010fcc:	20800044 	addi	r2,r4,1
 8010fd0:	200b883a 	mov	r5,r4
 8010fd4:	003db706 	br	80106b4 <__alt_data_end+0xfc0106b4>
 8010fd8:	d9012017 	ldw	r4,1152(sp)
 8010fdc:	a00b883a 	mov	r5,r20
 8010fe0:	d9811a04 	addi	r6,sp,1128
 8010fe4:	db012b15 	stw	r12,1196(sp)
 8010fe8:	db812a15 	stw	r14,1192(sp)
 8010fec:	801007c0 	call	801007c <__sprint_r.part.0>
 8010ff0:	db012b17 	ldw	r12,1196(sp)
 8010ff4:	db812a17 	ldw	r14,1192(sp)
 8010ff8:	103f9f1e 	bne	r2,zero,8010e78 <__alt_data_end+0xfc010e78>
 8010ffc:	d9411b17 	ldw	r5,1132(sp)
 8011000:	d8c11c17 	ldw	r3,1136(sp)
 8011004:	d811883a 	mov	r8,sp
 8011008:	29000044 	addi	r4,r5,1
 801100c:	003fd306 	br	8010f5c <__alt_data_end+0xfc010f5c>
 8011010:	18006c1e 	bne	r3,zero,80111c4 <___vfiprintf_internal_r+0x1034>
 8011014:	70004f26 	beq	r14,zero,8011154 <___vfiprintf_internal_r+0xfc4>
 8011018:	d8811d04 	addi	r2,sp,1140
 801101c:	00c00084 	movi	r3,2
 8011020:	d8800015 	stw	r2,0(sp)
 8011024:	d8c00115 	stw	r3,4(sp)
 8011028:	2005883a 	mov	r2,r4
 801102c:	d811883a 	mov	r8,sp
 8011030:	003d9b06 	br	80106a0 <__alt_data_end+0xfc0106a0>
 8011034:	1800571e 	bne	r3,zero,8011194 <___vfiprintf_internal_r+0x1004>
 8011038:	000b883a 	mov	r5,zero
 801103c:	00800044 	movi	r2,1
 8011040:	d811883a 	mov	r8,sp
 8011044:	003d9906 	br	80106ac <__alt_data_end+0xfc0106ac>
 8011048:	10803fcc 	andi	r2,r2,255
 801104c:	1000251e 	bne	r2,zero,80110e4 <___vfiprintf_internal_r+0xf54>
 8011050:	a880004c 	andi	r2,r21,1
 8011054:	10007826 	beq	r2,zero,8011238 <___vfiprintf_internal_r+0x10a8>
 8011058:	00800c04 	movi	r2,48
 801105c:	d8c109c4 	addi	r3,sp,1063
 8011060:	d88109c5 	stb	r2,1063(sp)
 8011064:	dc412717 	ldw	r17,1180(sp)
 8011068:	d8c12415 	stw	r3,1168(sp)
 801106c:	003d4406 	br	8010580 <__alt_data_end+0xfc010580>
 8011070:	d9012617 	ldw	r4,1176(sp)
 8011074:	dc410a04 	addi	r17,sp,1064
 8011078:	908003cc 	andi	r2,r18,15
 801107c:	b006973a 	slli	r3,r22,28
 8011080:	2085883a 	add	r2,r4,r2
 8011084:	9024d13a 	srli	r18,r18,4
 8011088:	10800003 	ldbu	r2,0(r2)
 801108c:	b02cd13a 	srli	r22,r22,4
 8011090:	8c7fffc4 	addi	r17,r17,-1
 8011094:	1ca4b03a 	or	r18,r3,r18
 8011098:	88800005 	stb	r2,0(r17)
 801109c:	9584b03a 	or	r2,r18,r22
 80110a0:	103ff51e 	bne	r2,zero,8011078 <__alt_data_end+0xfc011078>
 80110a4:	dac11e17 	ldw	r11,1144(sp)
 80110a8:	dc412415 	stw	r17,1168(sp)
 80110ac:	5c63c83a 	sub	r17,r11,r17
 80110b0:	003d3306 	br	8010580 <__alt_data_end+0xfc010580>
 80110b4:	1800941e 	bne	r3,zero,8011308 <___vfiprintf_internal_r+0x1178>
 80110b8:	d8811d87 	ldb	r2,1142(sp)
 80110bc:	10006b26 	beq	r2,zero,801126c <___vfiprintf_internal_r+0x10dc>
 80110c0:	00c00044 	movi	r3,1
 80110c4:	d9011d84 	addi	r4,sp,1142
 80110c8:	1805883a 	mov	r2,r3
 80110cc:	d9000015 	stw	r4,0(sp)
 80110d0:	d8c00115 	stw	r3,4(sp)
 80110d4:	d811883a 	mov	r8,sp
 80110d8:	003f2306 	br	8010d68 <__alt_data_end+0xfc010d68>
 80110dc:	8023883a 	mov	r17,r16
 80110e0:	003c7d06 	br	80102d8 <__alt_data_end+0xfc0102d8>
 80110e4:	da810a04 	addi	r10,sp,1064
 80110e8:	da812415 	stw	r10,1168(sp)
 80110ec:	003d2406 	br	8010580 <__alt_data_end+0xfc010580>
 80110f0:	d9012017 	ldw	r4,1152(sp)
 80110f4:	a00b883a 	mov	r5,r20
 80110f8:	d9811a04 	addi	r6,sp,1128
 80110fc:	801007c0 	call	801007c <__sprint_r.part.0>
 8011100:	103f5d1e 	bne	r2,zero,8010e78 <__alt_data_end+0xfc010e78>
 8011104:	d8c11c17 	ldw	r3,1136(sp)
 8011108:	d811883a 	mov	r8,sp
 801110c:	003f7306 	br	8010edc <__alt_data_end+0xfc010edc>
 8011110:	1c800017 	ldw	r18,0(r3)
 8011114:	dac12117 	ldw	r11,1156(sp)
 8011118:	902dd7fa 	srai	r22,r18,31
 801111c:	5ac00104 	addi	r11,r11,4
 8011120:	dac12115 	stw	r11,1156(sp)
 8011124:	b005883a 	mov	r2,r22
 8011128:	003e5406 	br	8010a7c <__alt_data_end+0xfc010a7c>
 801112c:	00800084 	movi	r2,2
 8011130:	9588b03a 	or	r4,r18,r22
 8011134:	003cf506 	br	801050c <__alt_data_end+0xfc01050c>
 8011138:	d9012017 	ldw	r4,1152(sp)
 801113c:	a00b883a 	mov	r5,r20
 8011140:	d9811a04 	addi	r6,sp,1128
 8011144:	801007c0 	call	801007c <__sprint_r.part.0>
 8011148:	103f4b1e 	bne	r2,zero,8010e78 <__alt_data_end+0xfc010e78>
 801114c:	d811883a 	mov	r8,sp
 8011150:	003cd106 	br	8010498 <__alt_data_end+0xfc010498>
 8011154:	000b883a 	mov	r5,zero
 8011158:	2005883a 	mov	r2,r4
 801115c:	d811883a 	mov	r8,sp
 8011160:	003d5206 	br	80106ac <__alt_data_end+0xfc0106ac>
 8011164:	10803fcc 	andi	r2,r2,255
 8011168:	1080201c 	xori	r2,r2,128
 801116c:	10bfe004 	addi	r2,r2,-128
 8011170:	01000c04 	movi	r4,48
 8011174:	11008e26 	beq	r2,r4,80113b0 <___vfiprintf_internal_r+0x1220>
 8011178:	da812417 	ldw	r10,1168(sp)
 801117c:	dac11e17 	ldw	r11,1144(sp)
 8011180:	193fffc5 	stb	r4,-1(r3)
 8011184:	52bfffc4 	addi	r10,r10,-1
 8011188:	da812415 	stw	r10,1168(sp)
 801118c:	5aa3c83a 	sub	r17,r11,r10
 8011190:	003cfb06 	br	8010580 <__alt_data_end+0xfc010580>
 8011194:	d9012017 	ldw	r4,1152(sp)
 8011198:	a00b883a 	mov	r5,r20
 801119c:	d9811a04 	addi	r6,sp,1128
 80111a0:	da412b15 	stw	r9,1196(sp)
 80111a4:	801007c0 	call	801007c <__sprint_r.part.0>
 80111a8:	da412b17 	ldw	r9,1196(sp)
 80111ac:	103f321e 	bne	r2,zero,8010e78 <__alt_data_end+0xfc010e78>
 80111b0:	d9411b17 	ldw	r5,1132(sp)
 80111b4:	d8c11c17 	ldw	r3,1136(sp)
 80111b8:	d811883a 	mov	r8,sp
 80111bc:	28800044 	addi	r2,r5,1
 80111c0:	003d3a06 	br	80106ac <__alt_data_end+0xfc0106ac>
 80111c4:	d9012017 	ldw	r4,1152(sp)
 80111c8:	a00b883a 	mov	r5,r20
 80111cc:	d9811a04 	addi	r6,sp,1128
 80111d0:	da412b15 	stw	r9,1196(sp)
 80111d4:	db812a15 	stw	r14,1192(sp)
 80111d8:	801007c0 	call	801007c <__sprint_r.part.0>
 80111dc:	da412b17 	ldw	r9,1196(sp)
 80111e0:	db812a17 	ldw	r14,1192(sp)
 80111e4:	103f241e 	bne	r2,zero,8010e78 <__alt_data_end+0xfc010e78>
 80111e8:	d9411b17 	ldw	r5,1132(sp)
 80111ec:	d8c11c17 	ldw	r3,1136(sp)
 80111f0:	d811883a 	mov	r8,sp
 80111f4:	28800044 	addi	r2,r5,1
 80111f8:	003d1f06 	br	8010678 <__alt_data_end+0xfc010678>
 80111fc:	1800781e 	bne	r3,zero,80113e0 <___vfiprintf_internal_r+0x1250>
 8011200:	000b883a 	mov	r5,zero
 8011204:	00800044 	movi	r2,1
 8011208:	d811883a 	mov	r8,sp
 801120c:	003d2906 	br	80106b4 <__alt_data_end+0xfc0106b4>
 8011210:	d9012017 	ldw	r4,1152(sp)
 8011214:	a00b883a 	mov	r5,r20
 8011218:	d9811a04 	addi	r6,sp,1128
 801121c:	801007c0 	call	801007c <__sprint_r.part.0>
 8011220:	103f151e 	bne	r2,zero,8010e78 <__alt_data_end+0xfc010e78>
 8011224:	d8811b17 	ldw	r2,1132(sp)
 8011228:	d8c11c17 	ldw	r3,1136(sp)
 801122c:	d811883a 	mov	r8,sp
 8011230:	10800044 	addi	r2,r2,1
 8011234:	003d4406 	br	8010748 <__alt_data_end+0xfc010748>
 8011238:	dac10a04 	addi	r11,sp,1064
 801123c:	dac12415 	stw	r11,1168(sp)
 8011240:	003ccf06 	br	8010580 <__alt_data_end+0xfc010580>
 8011244:	04a5c83a 	sub	r18,zero,r18
 8011248:	9004c03a 	cmpne	r2,r18,zero
 801124c:	05adc83a 	sub	r22,zero,r22
 8011250:	b0adc83a 	sub	r22,r22,r2
 8011254:	03000b44 	movi	r12,45
 8011258:	db011d85 	stb	r12,1142(sp)
 801125c:	4823883a 	mov	r17,r9
 8011260:	00800044 	movi	r2,1
 8011264:	9588b03a 	or	r4,r18,r22
 8011268:	003cab06 	br	8010518 <__alt_data_end+0xfc010518>
 801126c:	000b883a 	mov	r5,zero
 8011270:	00800044 	movi	r2,1
 8011274:	d811883a 	mov	r8,sp
 8011278:	703d0c26 	beq	r14,zero,80106ac <__alt_data_end+0xfc0106ac>
 801127c:	00c00084 	movi	r3,2
 8011280:	d9011d04 	addi	r4,sp,1140
 8011284:	d9000015 	stw	r4,0(sp)
 8011288:	d8c00115 	stw	r3,4(sp)
 801128c:	003d0406 	br	80106a0 <__alt_data_end+0xfc0106a0>
 8011290:	80c00007 	ldb	r3,0(r16)
 8011294:	003c1d06 	br	801030c <__alt_data_end+0xfc01030c>
 8011298:	a880040c 	andi	r2,r21,16
 801129c:	1000091e 	bne	r2,zero,80112c4 <___vfiprintf_internal_r+0x1134>
 80112a0:	aac0100c 	andi	r11,r21,64
 80112a4:	58000726 	beq	r11,zero,80112c4 <___vfiprintf_internal_r+0x1134>
 80112a8:	da812117 	ldw	r10,1156(sp)
 80112ac:	dac12217 	ldw	r11,1160(sp)
 80112b0:	50800017 	ldw	r2,0(r10)
 80112b4:	52800104 	addi	r10,r10,4
 80112b8:	da812115 	stw	r10,1156(sp)
 80112bc:	12c0000d 	sth	r11,0(r2)
 80112c0:	003be806 	br	8010264 <__alt_data_end+0xfc010264>
 80112c4:	da812117 	ldw	r10,1156(sp)
 80112c8:	dac12217 	ldw	r11,1160(sp)
 80112cc:	50800017 	ldw	r2,0(r10)
 80112d0:	52800104 	addi	r10,r10,4
 80112d4:	da812115 	stw	r10,1156(sp)
 80112d8:	12c00015 	stw	r11,0(r2)
 80112dc:	003be106 	br	8010264 <__alt_data_end+0xfc010264>
 80112e0:	00800084 	movi	r2,2
 80112e4:	003c8906 	br	801050c <__alt_data_end+0xfc01050c>
 80112e8:	a900100c 	andi	r4,r21,64
 80112ec:	20001f26 	beq	r4,zero,801136c <___vfiprintf_internal_r+0x11dc>
 80112f0:	da812117 	ldw	r10,1156(sp)
 80112f4:	1480000b 	ldhu	r18,0(r2)
 80112f8:	002d883a 	mov	r22,zero
 80112fc:	52800104 	addi	r10,r10,4
 8011300:	da812115 	stw	r10,1156(sp)
 8011304:	003dae06 	br	80109c0 <__alt_data_end+0xfc0109c0>
 8011308:	d9012017 	ldw	r4,1152(sp)
 801130c:	a00b883a 	mov	r5,r20
 8011310:	d9811a04 	addi	r6,sp,1128
 8011314:	da412b15 	stw	r9,1196(sp)
 8011318:	db812a15 	stw	r14,1192(sp)
 801131c:	801007c0 	call	801007c <__sprint_r.part.0>
 8011320:	da412b17 	ldw	r9,1196(sp)
 8011324:	db812a17 	ldw	r14,1192(sp)
 8011328:	103ed31e 	bne	r2,zero,8010e78 <__alt_data_end+0xfc010e78>
 801132c:	d9411b17 	ldw	r5,1132(sp)
 8011330:	d8c11c17 	ldw	r3,1136(sp)
 8011334:	d811883a 	mov	r8,sp
 8011338:	28800044 	addi	r2,r5,1
 801133c:	003e7f06 	br	8010d3c <__alt_data_end+0xfc010d3c>
 8011340:	9825883a 	mov	r18,r19
 8011344:	003d3406 	br	8010818 <__alt_data_end+0xfc010818>
 8011348:	4823883a 	mov	r17,r9
 801134c:	003e0806 	br	8010b70 <__alt_data_end+0xfc010b70>
 8011350:	d9012017 	ldw	r4,1152(sp)
 8011354:	a00b883a 	mov	r5,r20
 8011358:	d9811a04 	addi	r6,sp,1128
 801135c:	801007c0 	call	801007c <__sprint_r.part.0>
 8011360:	103ec51e 	bne	r2,zero,8010e78 <__alt_data_end+0xfc010e78>
 8011364:	d8c11c17 	ldw	r3,1136(sp)
 8011368:	003ee006 	br	8010eec <__alt_data_end+0xfc010eec>
 801136c:	dac12117 	ldw	r11,1156(sp)
 8011370:	14800017 	ldw	r18,0(r2)
 8011374:	002d883a 	mov	r22,zero
 8011378:	5ac00104 	addi	r11,r11,4
 801137c:	dac12115 	stw	r11,1156(sp)
 8011380:	003d8f06 	br	80109c0 <__alt_data_end+0xfc0109c0>
 8011384:	02c200b4 	movhi	r11,2050
 8011388:	5ac66f04 	addi	r11,r11,6588
 801138c:	dac12315 	stw	r11,1164(sp)
 8011390:	003ce306 	br	8010720 <__alt_data_end+0xfc010720>
 8011394:	80c00043 	ldbu	r3,1(r16)
 8011398:	ad400814 	ori	r21,r21,32
 801139c:	84000044 	addi	r16,r16,1
 80113a0:	18c03fcc 	andi	r3,r3,255
 80113a4:	18c0201c 	xori	r3,r3,128
 80113a8:	18ffe004 	addi	r3,r3,-128
 80113ac:	003bd706 	br	801030c <__alt_data_end+0xfc01030c>
 80113b0:	dac11e17 	ldw	r11,1144(sp)
 80113b4:	d8c12417 	ldw	r3,1168(sp)
 80113b8:	58e3c83a 	sub	r17,r11,r3
 80113bc:	003c7006 	br	8010580 <__alt_data_end+0xfc010580>
 80113c0:	da012a15 	stw	r8,1192(sp)
 80113c4:	8004afc0 	call	8004afc <strlen>
 80113c8:	1023883a 	mov	r17,r2
 80113cc:	db011d83 	ldbu	r12,1142(sp)
 80113d0:	dd812115 	stw	r22,1156(sp)
 80113d4:	0013883a 	mov	r9,zero
 80113d8:	da012a17 	ldw	r8,1192(sp)
 80113dc:	003c6806 	br	8010580 <__alt_data_end+0xfc010580>
 80113e0:	d9012017 	ldw	r4,1152(sp)
 80113e4:	a00b883a 	mov	r5,r20
 80113e8:	d9811a04 	addi	r6,sp,1128
 80113ec:	da412b15 	stw	r9,1196(sp)
 80113f0:	801007c0 	call	801007c <__sprint_r.part.0>
 80113f4:	da412b17 	ldw	r9,1196(sp)
 80113f8:	103e9f1e 	bne	r2,zero,8010e78 <__alt_data_end+0xfc010e78>
 80113fc:	d9411b17 	ldw	r5,1132(sp)
 8011400:	d8c11c17 	ldw	r3,1136(sp)
 8011404:	d811883a 	mov	r8,sp
 8011408:	28800044 	addi	r2,r5,1
 801140c:	003ca906 	br	80106b4 <__alt_data_end+0xfc0106b4>
 8011410:	d9411b17 	ldw	r5,1132(sp)
 8011414:	010200b4 	movhi	r4,2050
 8011418:	21067304 	addi	r4,r4,6604
 801141c:	d9012315 	stw	r4,1164(sp)
 8011420:	29400044 	addi	r5,r5,1
 8011424:	003c8806 	br	8010648 <__alt_data_end+0xfc010648>
 8011428:	00800184 	movi	r2,6
 801142c:	1240012e 	bgeu	r2,r9,8011434 <___vfiprintf_internal_r+0x12a4>
 8011430:	1013883a 	mov	r9,r2
 8011434:	4823883a 	mov	r17,r9
 8011438:	4825883a 	mov	r18,r9
 801143c:	48001516 	blt	r9,zero,8011494 <___vfiprintf_internal_r+0x1304>
 8011440:	008200b4 	movhi	r2,2050
 8011444:	1085fc04 	addi	r2,r2,6128
 8011448:	dd812115 	stw	r22,1156(sp)
 801144c:	d8812415 	stw	r2,1168(sp)
 8011450:	003d6f06 	br	8010a10 <__alt_data_end+0xfc010a10>
 8011454:	d9411b17 	ldw	r5,1132(sp)
 8011458:	02c200b4 	movhi	r11,2050
 801145c:	5ac67304 	addi	r11,r11,6604
 8011460:	dac12315 	stw	r11,1164(sp)
 8011464:	29400044 	addi	r5,r5,1
 8011468:	003ce106 	br	80107f0 <__alt_data_end+0xfc0107f0>
 801146c:	010200b4 	movhi	r4,2050
 8011470:	21066f04 	addi	r4,r4,6588
 8011474:	d9012315 	stw	r4,1164(sp)
 8011478:	1009883a 	mov	r4,r2
 801147c:	003eca06 	br	8010fa8 <__alt_data_end+0xfc010fa8>
 8011480:	4823883a 	mov	r17,r9
 8011484:	db011d83 	ldbu	r12,1142(sp)
 8011488:	dd812115 	stw	r22,1156(sp)
 801148c:	0013883a 	mov	r9,zero
 8011490:	003c3b06 	br	8010580 <__alt_data_end+0xfc010580>
 8011494:	0025883a 	mov	r18,zero
 8011498:	003fe906 	br	8011440 <__alt_data_end+0xfc011440>
 801149c:	dac12117 	ldw	r11,1156(sp)
 80114a0:	8005883a 	mov	r2,r16
 80114a4:	5021883a 	mov	r16,r10
 80114a8:	5a400017 	ldw	r9,0(r11)
 80114ac:	58c00104 	addi	r3,r11,4
 80114b0:	d8c12115 	stw	r3,1156(sp)
 80114b4:	48000a16 	blt	r9,zero,80114e0 <___vfiprintf_internal_r+0x1350>
 80114b8:	10c00047 	ldb	r3,1(r2)
 80114bc:	003b9306 	br	801030c <__alt_data_end+0xfc01030c>
 80114c0:	043fffc4 	movi	r16,-1
 80114c4:	003d0206 	br	80108d0 <__alt_data_end+0xfc0108d0>
 80114c8:	94c0010e 	bge	r18,r19,80114d0 <___vfiprintf_internal_r+0x1340>
 80114cc:	9825883a 	mov	r18,r19
 80114d0:	da812217 	ldw	r10,1160(sp)
 80114d4:	5495883a 	add	r10,r10,r18
 80114d8:	da812215 	stw	r10,1160(sp)
 80114dc:	003cd106 	br	8010824 <__alt_data_end+0xfc010824>
 80114e0:	027fffc4 	movi	r9,-1
 80114e4:	10c00047 	ldb	r3,1(r2)
 80114e8:	003b8806 	br	801030c <__alt_data_end+0xfc01030c>

080114ec <__vfiprintf_internal>:
 80114ec:	2007883a 	mov	r3,r4
 80114f0:	010200b4 	movhi	r4,2050
 80114f4:	210d4d04 	addi	r4,r4,13620
 80114f8:	21000017 	ldw	r4,0(r4)
 80114fc:	2805883a 	mov	r2,r5
 8011500:	300f883a 	mov	r7,r6
 8011504:	180b883a 	mov	r5,r3
 8011508:	100d883a 	mov	r6,r2
 801150c:	80101901 	jmpi	8010190 <___vfiprintf_internal_r>

08011510 <__swbuf_r>:
 8011510:	defffc04 	addi	sp,sp,-16
 8011514:	dc800215 	stw	r18,8(sp)
 8011518:	dc400115 	stw	r17,4(sp)
 801151c:	dc000015 	stw	r16,0(sp)
 8011520:	dfc00315 	stw	ra,12(sp)
 8011524:	2025883a 	mov	r18,r4
 8011528:	2823883a 	mov	r17,r5
 801152c:	3021883a 	mov	r16,r6
 8011530:	20000226 	beq	r4,zero,801153c <__swbuf_r+0x2c>
 8011534:	20800e17 	ldw	r2,56(r4)
 8011538:	10004126 	beq	r2,zero,8011640 <__swbuf_r+0x130>
 801153c:	80c00617 	ldw	r3,24(r16)
 8011540:	8180030b 	ldhu	r6,12(r16)
 8011544:	80c00215 	stw	r3,8(r16)
 8011548:	30c0020c 	andi	r3,r6,8
 801154c:	18003526 	beq	r3,zero,8011624 <__swbuf_r+0x114>
 8011550:	80c00417 	ldw	r3,16(r16)
 8011554:	18003326 	beq	r3,zero,8011624 <__swbuf_r+0x114>
 8011558:	3088000c 	andi	r2,r6,8192
 801155c:	8c403fcc 	andi	r17,r17,255
 8011560:	10001726 	beq	r2,zero,80115c0 <__swbuf_r+0xb0>
 8011564:	80800017 	ldw	r2,0(r16)
 8011568:	81000517 	ldw	r4,20(r16)
 801156c:	10c7c83a 	sub	r3,r2,r3
 8011570:	19001d0e 	bge	r3,r4,80115e8 <__swbuf_r+0xd8>
 8011574:	18c00044 	addi	r3,r3,1
 8011578:	81400217 	ldw	r5,8(r16)
 801157c:	11000044 	addi	r4,r2,1
 8011580:	81000015 	stw	r4,0(r16)
 8011584:	297fffc4 	addi	r5,r5,-1
 8011588:	81400215 	stw	r5,8(r16)
 801158c:	14400005 	stb	r17,0(r2)
 8011590:	80800517 	ldw	r2,20(r16)
 8011594:	10c01d26 	beq	r2,r3,801160c <__swbuf_r+0xfc>
 8011598:	8080030b 	ldhu	r2,12(r16)
 801159c:	1080004c 	andi	r2,r2,1
 80115a0:	1000181e 	bne	r2,zero,8011604 <__swbuf_r+0xf4>
 80115a4:	8805883a 	mov	r2,r17
 80115a8:	dfc00317 	ldw	ra,12(sp)
 80115ac:	dc800217 	ldw	r18,8(sp)
 80115b0:	dc400117 	ldw	r17,4(sp)
 80115b4:	dc000017 	ldw	r16,0(sp)
 80115b8:	dec00404 	addi	sp,sp,16
 80115bc:	f800283a 	ret
 80115c0:	81001917 	ldw	r4,100(r16)
 80115c4:	00b7ffc4 	movi	r2,-8193
 80115c8:	31880014 	ori	r6,r6,8192
 80115cc:	2084703a 	and	r2,r4,r2
 80115d0:	80801915 	stw	r2,100(r16)
 80115d4:	80800017 	ldw	r2,0(r16)
 80115d8:	81000517 	ldw	r4,20(r16)
 80115dc:	8180030d 	sth	r6,12(r16)
 80115e0:	10c7c83a 	sub	r3,r2,r3
 80115e4:	193fe316 	blt	r3,r4,8011574 <__alt_data_end+0xfc011574>
 80115e8:	9009883a 	mov	r4,r18
 80115ec:	800b883a 	mov	r5,r16
 80115f0:	800bd040 	call	800bd04 <_fflush_r>
 80115f4:	1000091e 	bne	r2,zero,801161c <__swbuf_r+0x10c>
 80115f8:	80800017 	ldw	r2,0(r16)
 80115fc:	00c00044 	movi	r3,1
 8011600:	003fdd06 	br	8011578 <__alt_data_end+0xfc011578>
 8011604:	00800284 	movi	r2,10
 8011608:	88bfe61e 	bne	r17,r2,80115a4 <__alt_data_end+0xfc0115a4>
 801160c:	9009883a 	mov	r4,r18
 8011610:	800b883a 	mov	r5,r16
 8011614:	800bd040 	call	800bd04 <_fflush_r>
 8011618:	103fe226 	beq	r2,zero,80115a4 <__alt_data_end+0xfc0115a4>
 801161c:	00bfffc4 	movi	r2,-1
 8011620:	003fe106 	br	80115a8 <__alt_data_end+0xfc0115a8>
 8011624:	9009883a 	mov	r4,r18
 8011628:	800b883a 	mov	r5,r16
 801162c:	800a2ac0 	call	800a2ac <__swsetup_r>
 8011630:	1000051e 	bne	r2,zero,8011648 <__swbuf_r+0x138>
 8011634:	8180030b 	ldhu	r6,12(r16)
 8011638:	80c00417 	ldw	r3,16(r16)
 801163c:	003fc606 	br	8011558 <__alt_data_end+0xfc011558>
 8011640:	800c2ac0 	call	800c2ac <__sinit>
 8011644:	003fbd06 	br	801153c <__alt_data_end+0xfc01153c>
 8011648:	80c0030b 	ldhu	r3,12(r16)
 801164c:	00bfffc4 	movi	r2,-1
 8011650:	18c01014 	ori	r3,r3,64
 8011654:	80c0030d 	sth	r3,12(r16)
 8011658:	00c00244 	movi	r3,9
 801165c:	90c00015 	stw	r3,0(r18)
 8011660:	003fd106 	br	80115a8 <__alt_data_end+0xfc0115a8>

08011664 <__swbuf>:
 8011664:	00c200b4 	movhi	r3,2050
 8011668:	18cd4d04 	addi	r3,r3,13620
 801166c:	2005883a 	mov	r2,r4
 8011670:	19000017 	ldw	r4,0(r3)
 8011674:	280d883a 	mov	r6,r5
 8011678:	100b883a 	mov	r5,r2
 801167c:	80115101 	jmpi	8011510 <__swbuf_r>

08011680 <_write_r>:
 8011680:	defffd04 	addi	sp,sp,-12
 8011684:	dc000015 	stw	r16,0(sp)
 8011688:	040200b4 	movhi	r16,2050
 801168c:	dc400115 	stw	r17,4(sp)
 8011690:	84143004 	addi	r16,r16,20672
 8011694:	2023883a 	mov	r17,r4
 8011698:	2809883a 	mov	r4,r5
 801169c:	300b883a 	mov	r5,r6
 80116a0:	380d883a 	mov	r6,r7
 80116a4:	dfc00215 	stw	ra,8(sp)
 80116a8:	80000015 	stw	zero,0(r16)
 80116ac:	8001be40 	call	8001be4 <write>
 80116b0:	00ffffc4 	movi	r3,-1
 80116b4:	10c00526 	beq	r2,r3,80116cc <_write_r+0x4c>
 80116b8:	dfc00217 	ldw	ra,8(sp)
 80116bc:	dc400117 	ldw	r17,4(sp)
 80116c0:	dc000017 	ldw	r16,0(sp)
 80116c4:	dec00304 	addi	sp,sp,12
 80116c8:	f800283a 	ret
 80116cc:	80c00017 	ldw	r3,0(r16)
 80116d0:	183ff926 	beq	r3,zero,80116b8 <__alt_data_end+0xfc0116b8>
 80116d4:	88c00015 	stw	r3,0(r17)
 80116d8:	003ff706 	br	80116b8 <__alt_data_end+0xfc0116b8>

080116dc <_close_r>:
 80116dc:	defffd04 	addi	sp,sp,-12
 80116e0:	dc000015 	stw	r16,0(sp)
 80116e4:	040200b4 	movhi	r16,2050
 80116e8:	dc400115 	stw	r17,4(sp)
 80116ec:	84143004 	addi	r16,r16,20672
 80116f0:	2023883a 	mov	r17,r4
 80116f4:	2809883a 	mov	r4,r5
 80116f8:	dfc00215 	stw	ra,8(sp)
 80116fc:	80000015 	stw	zero,0(r16)
 8011700:	80142a40 	call	80142a4 <close>
 8011704:	00ffffc4 	movi	r3,-1
 8011708:	10c00526 	beq	r2,r3,8011720 <_close_r+0x44>
 801170c:	dfc00217 	ldw	ra,8(sp)
 8011710:	dc400117 	ldw	r17,4(sp)
 8011714:	dc000017 	ldw	r16,0(sp)
 8011718:	dec00304 	addi	sp,sp,12
 801171c:	f800283a 	ret
 8011720:	80c00017 	ldw	r3,0(r16)
 8011724:	183ff926 	beq	r3,zero,801170c <__alt_data_end+0xfc01170c>
 8011728:	88c00015 	stw	r3,0(r17)
 801172c:	003ff706 	br	801170c <__alt_data_end+0xfc01170c>

08011730 <_calloc_r>:
 8011730:	298b383a 	mul	r5,r5,r6
 8011734:	defffe04 	addi	sp,sp,-8
 8011738:	dc000015 	stw	r16,0(sp)
 801173c:	dfc00115 	stw	ra,4(sp)
 8011740:	8003f000 	call	8003f00 <_malloc_r>
 8011744:	1021883a 	mov	r16,r2
 8011748:	10002826 	beq	r2,zero,80117ec <_calloc_r+0xbc>
 801174c:	11bfff17 	ldw	r6,-4(r2)
 8011750:	00bfff04 	movi	r2,-4
 8011754:	00c00904 	movi	r3,36
 8011758:	308c703a 	and	r6,r6,r2
 801175c:	308d883a 	add	r6,r6,r2
 8011760:	19801436 	bltu	r3,r6,80117b4 <_calloc_r+0x84>
 8011764:	008004c4 	movi	r2,19
 8011768:	11800936 	bltu	r2,r6,8011790 <_calloc_r+0x60>
 801176c:	8005883a 	mov	r2,r16
 8011770:	10000015 	stw	zero,0(r2)
 8011774:	10000115 	stw	zero,4(r2)
 8011778:	10000215 	stw	zero,8(r2)
 801177c:	8005883a 	mov	r2,r16
 8011780:	dfc00117 	ldw	ra,4(sp)
 8011784:	dc000017 	ldw	r16,0(sp)
 8011788:	dec00204 	addi	sp,sp,8
 801178c:	f800283a 	ret
 8011790:	80000015 	stw	zero,0(r16)
 8011794:	80000115 	stw	zero,4(r16)
 8011798:	008006c4 	movi	r2,27
 801179c:	11800d2e 	bgeu	r2,r6,80117d4 <_calloc_r+0xa4>
 80117a0:	80000215 	stw	zero,8(r16)
 80117a4:	80000315 	stw	zero,12(r16)
 80117a8:	30c00c26 	beq	r6,r3,80117dc <_calloc_r+0xac>
 80117ac:	80800404 	addi	r2,r16,16
 80117b0:	003fef06 	br	8011770 <__alt_data_end+0xfc011770>
 80117b4:	8009883a 	mov	r4,r16
 80117b8:	000b883a 	mov	r5,zero
 80117bc:	800d9c40 	call	800d9c4 <memset>
 80117c0:	8005883a 	mov	r2,r16
 80117c4:	dfc00117 	ldw	ra,4(sp)
 80117c8:	dc000017 	ldw	r16,0(sp)
 80117cc:	dec00204 	addi	sp,sp,8
 80117d0:	f800283a 	ret
 80117d4:	80800204 	addi	r2,r16,8
 80117d8:	003fe506 	br	8011770 <__alt_data_end+0xfc011770>
 80117dc:	80000415 	stw	zero,16(r16)
 80117e0:	80800604 	addi	r2,r16,24
 80117e4:	80000515 	stw	zero,20(r16)
 80117e8:	003fe106 	br	8011770 <__alt_data_end+0xfc011770>
 80117ec:	0005883a 	mov	r2,zero
 80117f0:	003fe306 	br	8011780 <__alt_data_end+0xfc011780>

080117f4 <_fclose_r>:
 80117f4:	28003226 	beq	r5,zero,80118c0 <_fclose_r+0xcc>
 80117f8:	defffc04 	addi	sp,sp,-16
 80117fc:	dc400115 	stw	r17,4(sp)
 8011800:	2023883a 	mov	r17,r4
 8011804:	dc000015 	stw	r16,0(sp)
 8011808:	dfc00315 	stw	ra,12(sp)
 801180c:	dc800215 	stw	r18,8(sp)
 8011810:	2821883a 	mov	r16,r5
 8011814:	800c2bc0 	call	800c2bc <__sfp_lock_acquire>
 8011818:	88000226 	beq	r17,zero,8011824 <_fclose_r+0x30>
 801181c:	88800e17 	ldw	r2,56(r17)
 8011820:	10002926 	beq	r2,zero,80118c8 <_fclose_r+0xd4>
 8011824:	8080030f 	ldh	r2,12(r16)
 8011828:	10002226 	beq	r2,zero,80118b4 <_fclose_r+0xc0>
 801182c:	8809883a 	mov	r4,r17
 8011830:	800b883a 	mov	r5,r16
 8011834:	800bd040 	call	800bd04 <_fflush_r>
 8011838:	1025883a 	mov	r18,r2
 801183c:	80800b17 	ldw	r2,44(r16)
 8011840:	10000426 	beq	r2,zero,8011854 <_fclose_r+0x60>
 8011844:	81400717 	ldw	r5,28(r16)
 8011848:	8809883a 	mov	r4,r17
 801184c:	103ee83a 	callr	r2
 8011850:	10002616 	blt	r2,zero,80118ec <_fclose_r+0xf8>
 8011854:	8080030b 	ldhu	r2,12(r16)
 8011858:	1080200c 	andi	r2,r2,128
 801185c:	10001f1e 	bne	r2,zero,80118dc <_fclose_r+0xe8>
 8011860:	81400c17 	ldw	r5,48(r16)
 8011864:	28000526 	beq	r5,zero,801187c <_fclose_r+0x88>
 8011868:	80801004 	addi	r2,r16,64
 801186c:	28800226 	beq	r5,r2,8011878 <_fclose_r+0x84>
 8011870:	8809883a 	mov	r4,r17
 8011874:	800c4200 	call	800c420 <_free_r>
 8011878:	80000c15 	stw	zero,48(r16)
 801187c:	81401117 	ldw	r5,68(r16)
 8011880:	28000326 	beq	r5,zero,8011890 <_fclose_r+0x9c>
 8011884:	8809883a 	mov	r4,r17
 8011888:	800c4200 	call	800c420 <_free_r>
 801188c:	80001115 	stw	zero,68(r16)
 8011890:	8000030d 	sth	zero,12(r16)
 8011894:	800c2c00 	call	800c2c0 <__sfp_lock_release>
 8011898:	9005883a 	mov	r2,r18
 801189c:	dfc00317 	ldw	ra,12(sp)
 80118a0:	dc800217 	ldw	r18,8(sp)
 80118a4:	dc400117 	ldw	r17,4(sp)
 80118a8:	dc000017 	ldw	r16,0(sp)
 80118ac:	dec00404 	addi	sp,sp,16
 80118b0:	f800283a 	ret
 80118b4:	800c2c00 	call	800c2c0 <__sfp_lock_release>
 80118b8:	0005883a 	mov	r2,zero
 80118bc:	003ff706 	br	801189c <__alt_data_end+0xfc01189c>
 80118c0:	0005883a 	mov	r2,zero
 80118c4:	f800283a 	ret
 80118c8:	8809883a 	mov	r4,r17
 80118cc:	800c2ac0 	call	800c2ac <__sinit>
 80118d0:	8080030f 	ldh	r2,12(r16)
 80118d4:	103fd51e 	bne	r2,zero,801182c <__alt_data_end+0xfc01182c>
 80118d8:	003ff606 	br	80118b4 <__alt_data_end+0xfc0118b4>
 80118dc:	81400417 	ldw	r5,16(r16)
 80118e0:	8809883a 	mov	r4,r17
 80118e4:	800c4200 	call	800c420 <_free_r>
 80118e8:	003fdd06 	br	8011860 <__alt_data_end+0xfc011860>
 80118ec:	04bfffc4 	movi	r18,-1
 80118f0:	003fd806 	br	8011854 <__alt_data_end+0xfc011854>

080118f4 <fclose>:
 80118f4:	008200b4 	movhi	r2,2050
 80118f8:	108d4d04 	addi	r2,r2,13620
 80118fc:	200b883a 	mov	r5,r4
 8011900:	11000017 	ldw	r4,0(r2)
 8011904:	80117f41 	jmpi	80117f4 <_fclose_r>

08011908 <_fputwc_r>:
 8011908:	3080030b 	ldhu	r2,12(r6)
 801190c:	defff804 	addi	sp,sp,-32
 8011910:	dcc00415 	stw	r19,16(sp)
 8011914:	dc800315 	stw	r18,12(sp)
 8011918:	dc000115 	stw	r16,4(sp)
 801191c:	dfc00715 	stw	ra,28(sp)
 8011920:	dd400615 	stw	r21,24(sp)
 8011924:	dd000515 	stw	r20,20(sp)
 8011928:	dc400215 	stw	r17,8(sp)
 801192c:	10c8000c 	andi	r3,r2,8192
 8011930:	3021883a 	mov	r16,r6
 8011934:	2027883a 	mov	r19,r4
 8011938:	2825883a 	mov	r18,r5
 801193c:	1800051e 	bne	r3,zero,8011954 <_fputwc_r+0x4c>
 8011940:	30c01917 	ldw	r3,100(r6)
 8011944:	10880014 	ori	r2,r2,8192
 8011948:	3080030d 	sth	r2,12(r6)
 801194c:	18880014 	ori	r2,r3,8192
 8011950:	30801915 	stw	r2,100(r6)
 8011954:	800d5940 	call	800d594 <__locale_mb_cur_max>
 8011958:	00c00044 	movi	r3,1
 801195c:	10c03e26 	beq	r2,r3,8011a58 <_fputwc_r+0x150>
 8011960:	9809883a 	mov	r4,r19
 8011964:	d80b883a 	mov	r5,sp
 8011968:	900d883a 	mov	r6,r18
 801196c:	81c01704 	addi	r7,r16,92
 8011970:	80127e80 	call	80127e8 <_wcrtomb_r>
 8011974:	1029883a 	mov	r20,r2
 8011978:	00bfffc4 	movi	r2,-1
 801197c:	a0802026 	beq	r20,r2,8011a00 <_fputwc_r+0xf8>
 8011980:	d9400003 	ldbu	r5,0(sp)
 8011984:	a0001c26 	beq	r20,zero,80119f8 <_fputwc_r+0xf0>
 8011988:	0023883a 	mov	r17,zero
 801198c:	05400284 	movi	r21,10
 8011990:	00000906 	br	80119b8 <_fputwc_r+0xb0>
 8011994:	80800017 	ldw	r2,0(r16)
 8011998:	11400005 	stb	r5,0(r2)
 801199c:	80c00017 	ldw	r3,0(r16)
 80119a0:	18c00044 	addi	r3,r3,1
 80119a4:	80c00015 	stw	r3,0(r16)
 80119a8:	8c400044 	addi	r17,r17,1
 80119ac:	dc45883a 	add	r2,sp,r17
 80119b0:	8d00112e 	bgeu	r17,r20,80119f8 <_fputwc_r+0xf0>
 80119b4:	11400003 	ldbu	r5,0(r2)
 80119b8:	80c00217 	ldw	r3,8(r16)
 80119bc:	18ffffc4 	addi	r3,r3,-1
 80119c0:	80c00215 	stw	r3,8(r16)
 80119c4:	183ff30e 	bge	r3,zero,8011994 <__alt_data_end+0xfc011994>
 80119c8:	80800617 	ldw	r2,24(r16)
 80119cc:	18801916 	blt	r3,r2,8011a34 <_fputwc_r+0x12c>
 80119d0:	80800017 	ldw	r2,0(r16)
 80119d4:	11400005 	stb	r5,0(r2)
 80119d8:	80800017 	ldw	r2,0(r16)
 80119dc:	10c00003 	ldbu	r3,0(r2)
 80119e0:	10800044 	addi	r2,r2,1
 80119e4:	1d402326 	beq	r3,r21,8011a74 <_fputwc_r+0x16c>
 80119e8:	80800015 	stw	r2,0(r16)
 80119ec:	8c400044 	addi	r17,r17,1
 80119f0:	dc45883a 	add	r2,sp,r17
 80119f4:	8d3fef36 	bltu	r17,r20,80119b4 <__alt_data_end+0xfc0119b4>
 80119f8:	9005883a 	mov	r2,r18
 80119fc:	00000406 	br	8011a10 <_fputwc_r+0x108>
 8011a00:	80c0030b 	ldhu	r3,12(r16)
 8011a04:	a005883a 	mov	r2,r20
 8011a08:	18c01014 	ori	r3,r3,64
 8011a0c:	80c0030d 	sth	r3,12(r16)
 8011a10:	dfc00717 	ldw	ra,28(sp)
 8011a14:	dd400617 	ldw	r21,24(sp)
 8011a18:	dd000517 	ldw	r20,20(sp)
 8011a1c:	dcc00417 	ldw	r19,16(sp)
 8011a20:	dc800317 	ldw	r18,12(sp)
 8011a24:	dc400217 	ldw	r17,8(sp)
 8011a28:	dc000117 	ldw	r16,4(sp)
 8011a2c:	dec00804 	addi	sp,sp,32
 8011a30:	f800283a 	ret
 8011a34:	9809883a 	mov	r4,r19
 8011a38:	29403fcc 	andi	r5,r5,255
 8011a3c:	800d883a 	mov	r6,r16
 8011a40:	80115100 	call	8011510 <__swbuf_r>
 8011a44:	10bfffe0 	cmpeqi	r2,r2,-1
 8011a48:	10803fcc 	andi	r2,r2,255
 8011a4c:	103fd626 	beq	r2,zero,80119a8 <__alt_data_end+0xfc0119a8>
 8011a50:	00bfffc4 	movi	r2,-1
 8011a54:	003fee06 	br	8011a10 <__alt_data_end+0xfc011a10>
 8011a58:	90ffffc4 	addi	r3,r18,-1
 8011a5c:	01003f84 	movi	r4,254
 8011a60:	20ffbf36 	bltu	r4,r3,8011960 <__alt_data_end+0xfc011960>
 8011a64:	900b883a 	mov	r5,r18
 8011a68:	dc800005 	stb	r18,0(sp)
 8011a6c:	1029883a 	mov	r20,r2
 8011a70:	003fc506 	br	8011988 <__alt_data_end+0xfc011988>
 8011a74:	9809883a 	mov	r4,r19
 8011a78:	a80b883a 	mov	r5,r21
 8011a7c:	800d883a 	mov	r6,r16
 8011a80:	80115100 	call	8011510 <__swbuf_r>
 8011a84:	10bfffe0 	cmpeqi	r2,r2,-1
 8011a88:	003fef06 	br	8011a48 <__alt_data_end+0xfc011a48>

08011a8c <fputwc>:
 8011a8c:	defffc04 	addi	sp,sp,-16
 8011a90:	dc000115 	stw	r16,4(sp)
 8011a94:	040200b4 	movhi	r16,2050
 8011a98:	840d4d04 	addi	r16,r16,13620
 8011a9c:	dc400215 	stw	r17,8(sp)
 8011aa0:	2023883a 	mov	r17,r4
 8011aa4:	81000017 	ldw	r4,0(r16)
 8011aa8:	dfc00315 	stw	ra,12(sp)
 8011aac:	280d883a 	mov	r6,r5
 8011ab0:	20000626 	beq	r4,zero,8011acc <fputwc+0x40>
 8011ab4:	20800e17 	ldw	r2,56(r4)
 8011ab8:	1000041e 	bne	r2,zero,8011acc <fputwc+0x40>
 8011abc:	d9400015 	stw	r5,0(sp)
 8011ac0:	800c2ac0 	call	800c2ac <__sinit>
 8011ac4:	81000017 	ldw	r4,0(r16)
 8011ac8:	d9800017 	ldw	r6,0(sp)
 8011acc:	880b883a 	mov	r5,r17
 8011ad0:	dfc00317 	ldw	ra,12(sp)
 8011ad4:	dc400217 	ldw	r17,8(sp)
 8011ad8:	dc000117 	ldw	r16,4(sp)
 8011adc:	dec00404 	addi	sp,sp,16
 8011ae0:	80119081 	jmpi	8011908 <_fputwc_r>

08011ae4 <_fstat_r>:
 8011ae4:	defffd04 	addi	sp,sp,-12
 8011ae8:	dc000015 	stw	r16,0(sp)
 8011aec:	040200b4 	movhi	r16,2050
 8011af0:	dc400115 	stw	r17,4(sp)
 8011af4:	84143004 	addi	r16,r16,20672
 8011af8:	2023883a 	mov	r17,r4
 8011afc:	2809883a 	mov	r4,r5
 8011b00:	300b883a 	mov	r5,r6
 8011b04:	dfc00215 	stw	ra,8(sp)
 8011b08:	80000015 	stw	zero,0(r16)
 8011b0c:	80143f00 	call	80143f0 <fstat>
 8011b10:	00ffffc4 	movi	r3,-1
 8011b14:	10c00526 	beq	r2,r3,8011b2c <_fstat_r+0x48>
 8011b18:	dfc00217 	ldw	ra,8(sp)
 8011b1c:	dc400117 	ldw	r17,4(sp)
 8011b20:	dc000017 	ldw	r16,0(sp)
 8011b24:	dec00304 	addi	sp,sp,12
 8011b28:	f800283a 	ret
 8011b2c:	80c00017 	ldw	r3,0(r16)
 8011b30:	183ff926 	beq	r3,zero,8011b18 <__alt_data_end+0xfc011b18>
 8011b34:	88c00015 	stw	r3,0(r17)
 8011b38:	003ff706 	br	8011b18 <__alt_data_end+0xfc011b18>

08011b3c <__sfvwrite_r>:
 8011b3c:	30800217 	ldw	r2,8(r6)
 8011b40:	10004526 	beq	r2,zero,8011c58 <__sfvwrite_r+0x11c>
 8011b44:	28c0030b 	ldhu	r3,12(r5)
 8011b48:	defff404 	addi	sp,sp,-48
 8011b4c:	dd400715 	stw	r21,28(sp)
 8011b50:	dcc00515 	stw	r19,20(sp)
 8011b54:	dc000215 	stw	r16,8(sp)
 8011b58:	dfc00b15 	stw	ra,44(sp)
 8011b5c:	df000a15 	stw	fp,40(sp)
 8011b60:	ddc00915 	stw	r23,36(sp)
 8011b64:	dd800815 	stw	r22,32(sp)
 8011b68:	dd000615 	stw	r20,24(sp)
 8011b6c:	dc800415 	stw	r18,16(sp)
 8011b70:	dc400315 	stw	r17,12(sp)
 8011b74:	1880020c 	andi	r2,r3,8
 8011b78:	2821883a 	mov	r16,r5
 8011b7c:	202b883a 	mov	r21,r4
 8011b80:	3027883a 	mov	r19,r6
 8011b84:	10002526 	beq	r2,zero,8011c1c <__sfvwrite_r+0xe0>
 8011b88:	28800417 	ldw	r2,16(r5)
 8011b8c:	10002326 	beq	r2,zero,8011c1c <__sfvwrite_r+0xe0>
 8011b90:	1880008c 	andi	r2,r3,2
 8011b94:	9c400017 	ldw	r17,0(r19)
 8011b98:	10003126 	beq	r2,zero,8011c60 <__sfvwrite_r+0x124>
 8011b9c:	0029883a 	mov	r20,zero
 8011ba0:	0025883a 	mov	r18,zero
 8011ba4:	05810004 	movi	r22,1024
 8011ba8:	a00d883a 	mov	r6,r20
 8011bac:	a809883a 	mov	r4,r21
 8011bb0:	90002526 	beq	r18,zero,8011c48 <__sfvwrite_r+0x10c>
 8011bb4:	900f883a 	mov	r7,r18
 8011bb8:	81400717 	ldw	r5,28(r16)
 8011bbc:	b480012e 	bgeu	r22,r18,8011bc4 <__sfvwrite_r+0x88>
 8011bc0:	01c10004 	movi	r7,1024
 8011bc4:	80800917 	ldw	r2,36(r16)
 8011bc8:	103ee83a 	callr	r2
 8011bcc:	0080510e 	bge	zero,r2,8011d14 <__sfvwrite_r+0x1d8>
 8011bd0:	98c00217 	ldw	r3,8(r19)
 8011bd4:	a0a9883a 	add	r20,r20,r2
 8011bd8:	90a5c83a 	sub	r18,r18,r2
 8011bdc:	1885c83a 	sub	r2,r3,r2
 8011be0:	98800215 	stw	r2,8(r19)
 8011be4:	103ff01e 	bne	r2,zero,8011ba8 <__alt_data_end+0xfc011ba8>
 8011be8:	0005883a 	mov	r2,zero
 8011bec:	dfc00b17 	ldw	ra,44(sp)
 8011bf0:	df000a17 	ldw	fp,40(sp)
 8011bf4:	ddc00917 	ldw	r23,36(sp)
 8011bf8:	dd800817 	ldw	r22,32(sp)
 8011bfc:	dd400717 	ldw	r21,28(sp)
 8011c00:	dd000617 	ldw	r20,24(sp)
 8011c04:	dcc00517 	ldw	r19,20(sp)
 8011c08:	dc800417 	ldw	r18,16(sp)
 8011c0c:	dc400317 	ldw	r17,12(sp)
 8011c10:	dc000217 	ldw	r16,8(sp)
 8011c14:	dec00c04 	addi	sp,sp,48
 8011c18:	f800283a 	ret
 8011c1c:	a809883a 	mov	r4,r21
 8011c20:	800b883a 	mov	r5,r16
 8011c24:	800a2ac0 	call	800a2ac <__swsetup_r>
 8011c28:	80c0030b 	ldhu	r3,12(r16)
 8011c2c:	103fd826 	beq	r2,zero,8011b90 <__alt_data_end+0xfc011b90>
 8011c30:	18c01014 	ori	r3,r3,64
 8011c34:	80c0030d 	sth	r3,12(r16)
 8011c38:	00c00244 	movi	r3,9
 8011c3c:	00bfffc4 	movi	r2,-1
 8011c40:	a8c00015 	stw	r3,0(r21)
 8011c44:	003fe906 	br	8011bec <__alt_data_end+0xfc011bec>
 8011c48:	8d000017 	ldw	r20,0(r17)
 8011c4c:	8c800117 	ldw	r18,4(r17)
 8011c50:	8c400204 	addi	r17,r17,8
 8011c54:	003fd406 	br	8011ba8 <__alt_data_end+0xfc011ba8>
 8011c58:	0005883a 	mov	r2,zero
 8011c5c:	f800283a 	ret
 8011c60:	1880004c 	andi	r2,r3,1
 8011c64:	1000301e 	bne	r2,zero,8011d28 <__sfvwrite_r+0x1ec>
 8011c68:	002f883a 	mov	r23,zero
 8011c6c:	0025883a 	mov	r18,zero
 8011c70:	90001c26 	beq	r18,zero,8011ce4 <__sfvwrite_r+0x1a8>
 8011c74:	1880800c 	andi	r2,r3,512
 8011c78:	85000217 	ldw	r20,8(r16)
 8011c7c:	10006c26 	beq	r2,zero,8011e30 <__sfvwrite_r+0x2f4>
 8011c80:	a02d883a 	mov	r22,r20
 8011c84:	95008536 	bltu	r18,r20,8011e9c <__sfvwrite_r+0x360>
 8011c88:	1881200c 	andi	r2,r3,1152
 8011c8c:	10009d1e 	bne	r2,zero,8011f04 <__sfvwrite_r+0x3c8>
 8011c90:	81000017 	ldw	r4,0(r16)
 8011c94:	a039883a 	mov	fp,r20
 8011c98:	9029883a 	mov	r20,r18
 8011c9c:	b80b883a 	mov	r5,r23
 8011ca0:	b00d883a 	mov	r6,r22
 8011ca4:	80120900 	call	8012090 <memmove>
 8011ca8:	80c00217 	ldw	r3,8(r16)
 8011cac:	81000017 	ldw	r4,0(r16)
 8011cb0:	9005883a 	mov	r2,r18
 8011cb4:	1f39c83a 	sub	fp,r3,fp
 8011cb8:	258f883a 	add	r7,r4,r22
 8011cbc:	87000215 	stw	fp,8(r16)
 8011cc0:	81c00015 	stw	r7,0(r16)
 8011cc4:	98c00217 	ldw	r3,8(r19)
 8011cc8:	b8af883a 	add	r23,r23,r2
 8011ccc:	90a5c83a 	sub	r18,r18,r2
 8011cd0:	1d05c83a 	sub	r2,r3,r20
 8011cd4:	98800215 	stw	r2,8(r19)
 8011cd8:	103fc326 	beq	r2,zero,8011be8 <__alt_data_end+0xfc011be8>
 8011cdc:	80c0030b 	ldhu	r3,12(r16)
 8011ce0:	903fe41e 	bne	r18,zero,8011c74 <__alt_data_end+0xfc011c74>
 8011ce4:	8dc00017 	ldw	r23,0(r17)
 8011ce8:	8c800117 	ldw	r18,4(r17)
 8011cec:	8c400204 	addi	r17,r17,8
 8011cf0:	003fdf06 	br	8011c70 <__alt_data_end+0xfc011c70>
 8011cf4:	80122480 	call	8012248 <_realloc_r>
 8011cf8:	102d883a 	mov	r22,r2
 8011cfc:	1000a01e 	bne	r2,zero,8011f80 <__sfvwrite_r+0x444>
 8011d00:	81400417 	ldw	r5,16(r16)
 8011d04:	a809883a 	mov	r4,r21
 8011d08:	800c4200 	call	800c420 <_free_r>
 8011d0c:	00800304 	movi	r2,12
 8011d10:	a8800015 	stw	r2,0(r21)
 8011d14:	80c0030b 	ldhu	r3,12(r16)
 8011d18:	00bfffc4 	movi	r2,-1
 8011d1c:	18c01014 	ori	r3,r3,64
 8011d20:	80c0030d 	sth	r3,12(r16)
 8011d24:	003fb106 	br	8011bec <__alt_data_end+0xfc011bec>
 8011d28:	0029883a 	mov	r20,zero
 8011d2c:	0011883a 	mov	r8,zero
 8011d30:	0039883a 	mov	fp,zero
 8011d34:	0025883a 	mov	r18,zero
 8011d38:	90001f26 	beq	r18,zero,8011db8 <__sfvwrite_r+0x27c>
 8011d3c:	40006826 	beq	r8,zero,8011ee0 <__sfvwrite_r+0x3a4>
 8011d40:	a02f883a 	mov	r23,r20
 8011d44:	9500012e 	bgeu	r18,r20,8011d4c <__sfvwrite_r+0x210>
 8011d48:	902f883a 	mov	r23,r18
 8011d4c:	81000017 	ldw	r4,0(r16)
 8011d50:	80800417 	ldw	r2,16(r16)
 8011d54:	b82d883a 	mov	r22,r23
 8011d58:	81800217 	ldw	r6,8(r16)
 8011d5c:	81c00517 	ldw	r7,20(r16)
 8011d60:	1100022e 	bgeu	r2,r4,8011d6c <__sfvwrite_r+0x230>
 8011d64:	31c7883a 	add	r3,r6,r7
 8011d68:	1dc01816 	blt	r3,r23,8011dcc <__sfvwrite_r+0x290>
 8011d6c:	b9c03f16 	blt	r23,r7,8011e6c <__sfvwrite_r+0x330>
 8011d70:	80800917 	ldw	r2,36(r16)
 8011d74:	81400717 	ldw	r5,28(r16)
 8011d78:	a809883a 	mov	r4,r21
 8011d7c:	da000115 	stw	r8,4(sp)
 8011d80:	e00d883a 	mov	r6,fp
 8011d84:	103ee83a 	callr	r2
 8011d88:	102d883a 	mov	r22,r2
 8011d8c:	da000117 	ldw	r8,4(sp)
 8011d90:	00bfe00e 	bge	zero,r2,8011d14 <__alt_data_end+0xfc011d14>
 8011d94:	a5a9c83a 	sub	r20,r20,r22
 8011d98:	a0001f26 	beq	r20,zero,8011e18 <__sfvwrite_r+0x2dc>
 8011d9c:	98800217 	ldw	r2,8(r19)
 8011da0:	e5b9883a 	add	fp,fp,r22
 8011da4:	95a5c83a 	sub	r18,r18,r22
 8011da8:	15adc83a 	sub	r22,r2,r22
 8011dac:	9d800215 	stw	r22,8(r19)
 8011db0:	b03f8d26 	beq	r22,zero,8011be8 <__alt_data_end+0xfc011be8>
 8011db4:	903fe11e 	bne	r18,zero,8011d3c <__alt_data_end+0xfc011d3c>
 8011db8:	8f000017 	ldw	fp,0(r17)
 8011dbc:	8c800117 	ldw	r18,4(r17)
 8011dc0:	0011883a 	mov	r8,zero
 8011dc4:	8c400204 	addi	r17,r17,8
 8011dc8:	003fdb06 	br	8011d38 <__alt_data_end+0xfc011d38>
 8011dcc:	180d883a 	mov	r6,r3
 8011dd0:	e00b883a 	mov	r5,fp
 8011dd4:	da000115 	stw	r8,4(sp)
 8011dd8:	d8c00015 	stw	r3,0(sp)
 8011ddc:	80120900 	call	8012090 <memmove>
 8011de0:	d8c00017 	ldw	r3,0(sp)
 8011de4:	80800017 	ldw	r2,0(r16)
 8011de8:	a809883a 	mov	r4,r21
 8011dec:	800b883a 	mov	r5,r16
 8011df0:	10c5883a 	add	r2,r2,r3
 8011df4:	80800015 	stw	r2,0(r16)
 8011df8:	d8c00015 	stw	r3,0(sp)
 8011dfc:	800bd040 	call	800bd04 <_fflush_r>
 8011e00:	d8c00017 	ldw	r3,0(sp)
 8011e04:	da000117 	ldw	r8,4(sp)
 8011e08:	103fc21e 	bne	r2,zero,8011d14 <__alt_data_end+0xfc011d14>
 8011e0c:	182d883a 	mov	r22,r3
 8011e10:	a5a9c83a 	sub	r20,r20,r22
 8011e14:	a03fe11e 	bne	r20,zero,8011d9c <__alt_data_end+0xfc011d9c>
 8011e18:	a809883a 	mov	r4,r21
 8011e1c:	800b883a 	mov	r5,r16
 8011e20:	800bd040 	call	800bd04 <_fflush_r>
 8011e24:	103fbb1e 	bne	r2,zero,8011d14 <__alt_data_end+0xfc011d14>
 8011e28:	0011883a 	mov	r8,zero
 8011e2c:	003fdb06 	br	8011d9c <__alt_data_end+0xfc011d9c>
 8011e30:	81000017 	ldw	r4,0(r16)
 8011e34:	80800417 	ldw	r2,16(r16)
 8011e38:	1100012e 	bgeu	r2,r4,8011e40 <__sfvwrite_r+0x304>
 8011e3c:	a4805a36 	bltu	r20,r18,8011fa8 <__sfvwrite_r+0x46c>
 8011e40:	81c00517 	ldw	r7,20(r16)
 8011e44:	91c01a36 	bltu	r18,r7,8011eb0 <__sfvwrite_r+0x374>
 8011e48:	80800917 	ldw	r2,36(r16)
 8011e4c:	81400717 	ldw	r5,28(r16)
 8011e50:	a809883a 	mov	r4,r21
 8011e54:	b80d883a 	mov	r6,r23
 8011e58:	103ee83a 	callr	r2
 8011e5c:	1029883a 	mov	r20,r2
 8011e60:	00bfac0e 	bge	zero,r2,8011d14 <__alt_data_end+0xfc011d14>
 8011e64:	a005883a 	mov	r2,r20
 8011e68:	003f9606 	br	8011cc4 <__alt_data_end+0xfc011cc4>
 8011e6c:	b80d883a 	mov	r6,r23
 8011e70:	e00b883a 	mov	r5,fp
 8011e74:	da000115 	stw	r8,4(sp)
 8011e78:	80120900 	call	8012090 <memmove>
 8011e7c:	80800217 	ldw	r2,8(r16)
 8011e80:	80c00017 	ldw	r3,0(r16)
 8011e84:	da000117 	ldw	r8,4(sp)
 8011e88:	15c5c83a 	sub	r2,r2,r23
 8011e8c:	1def883a 	add	r23,r3,r23
 8011e90:	80800215 	stw	r2,8(r16)
 8011e94:	85c00015 	stw	r23,0(r16)
 8011e98:	003fbe06 	br	8011d94 <__alt_data_end+0xfc011d94>
 8011e9c:	81000017 	ldw	r4,0(r16)
 8011ea0:	9039883a 	mov	fp,r18
 8011ea4:	9029883a 	mov	r20,r18
 8011ea8:	902d883a 	mov	r22,r18
 8011eac:	003f7b06 	br	8011c9c <__alt_data_end+0xfc011c9c>
 8011eb0:	b80b883a 	mov	r5,r23
 8011eb4:	900d883a 	mov	r6,r18
 8011eb8:	80120900 	call	8012090 <memmove>
 8011ebc:	80c00217 	ldw	r3,8(r16)
 8011ec0:	80800017 	ldw	r2,0(r16)
 8011ec4:	9029883a 	mov	r20,r18
 8011ec8:	1c87c83a 	sub	r3,r3,r18
 8011ecc:	1485883a 	add	r2,r2,r18
 8011ed0:	80800015 	stw	r2,0(r16)
 8011ed4:	80c00215 	stw	r3,8(r16)
 8011ed8:	9005883a 	mov	r2,r18
 8011edc:	003f7906 	br	8011cc4 <__alt_data_end+0xfc011cc4>
 8011ee0:	e009883a 	mov	r4,fp
 8011ee4:	01400284 	movi	r5,10
 8011ee8:	900d883a 	mov	r6,r18
 8011eec:	800d7a40 	call	800d7a4 <memchr>
 8011ef0:	10003826 	beq	r2,zero,8011fd4 <__sfvwrite_r+0x498>
 8011ef4:	10800044 	addi	r2,r2,1
 8011ef8:	1729c83a 	sub	r20,r2,fp
 8011efc:	02000044 	movi	r8,1
 8011f00:	003f8f06 	br	8011d40 <__alt_data_end+0xfc011d40>
 8011f04:	80800517 	ldw	r2,20(r16)
 8011f08:	81400417 	ldw	r5,16(r16)
 8011f0c:	87000017 	ldw	fp,0(r16)
 8011f10:	10a9883a 	add	r20,r2,r2
 8011f14:	a085883a 	add	r2,r20,r2
 8011f18:	1028d7fa 	srli	r20,r2,31
 8011f1c:	e179c83a 	sub	fp,fp,r5
 8011f20:	e1000044 	addi	r4,fp,1
 8011f24:	a085883a 	add	r2,r20,r2
 8011f28:	1029d07a 	srai	r20,r2,1
 8011f2c:	2485883a 	add	r2,r4,r18
 8011f30:	a00d883a 	mov	r6,r20
 8011f34:	a080022e 	bgeu	r20,r2,8011f40 <__sfvwrite_r+0x404>
 8011f38:	1029883a 	mov	r20,r2
 8011f3c:	100d883a 	mov	r6,r2
 8011f40:	18c1000c 	andi	r3,r3,1024
 8011f44:	a809883a 	mov	r4,r21
 8011f48:	183f6a26 	beq	r3,zero,8011cf4 <__alt_data_end+0xfc011cf4>
 8011f4c:	300b883a 	mov	r5,r6
 8011f50:	8003f000 	call	8003f00 <_malloc_r>
 8011f54:	102d883a 	mov	r22,r2
 8011f58:	103f6c26 	beq	r2,zero,8011d0c <__alt_data_end+0xfc011d0c>
 8011f5c:	81400417 	ldw	r5,16(r16)
 8011f60:	1009883a 	mov	r4,r2
 8011f64:	e00d883a 	mov	r6,fp
 8011f68:	800d88c0 	call	800d88c <memcpy>
 8011f6c:	8080030b 	ldhu	r2,12(r16)
 8011f70:	00fedfc4 	movi	r3,-1153
 8011f74:	10c4703a 	and	r2,r2,r3
 8011f78:	10802014 	ori	r2,r2,128
 8011f7c:	8080030d 	sth	r2,12(r16)
 8011f80:	b709883a 	add	r4,r22,fp
 8011f84:	a707c83a 	sub	r3,r20,fp
 8011f88:	85800415 	stw	r22,16(r16)
 8011f8c:	85000515 	stw	r20,20(r16)
 8011f90:	81000015 	stw	r4,0(r16)
 8011f94:	9039883a 	mov	fp,r18
 8011f98:	80c00215 	stw	r3,8(r16)
 8011f9c:	9029883a 	mov	r20,r18
 8011fa0:	902d883a 	mov	r22,r18
 8011fa4:	003f3d06 	br	8011c9c <__alt_data_end+0xfc011c9c>
 8011fa8:	b80b883a 	mov	r5,r23
 8011fac:	a00d883a 	mov	r6,r20
 8011fb0:	80120900 	call	8012090 <memmove>
 8011fb4:	80800017 	ldw	r2,0(r16)
 8011fb8:	a809883a 	mov	r4,r21
 8011fbc:	800b883a 	mov	r5,r16
 8011fc0:	1505883a 	add	r2,r2,r20
 8011fc4:	80800015 	stw	r2,0(r16)
 8011fc8:	800bd040 	call	800bd04 <_fflush_r>
 8011fcc:	103fa526 	beq	r2,zero,8011e64 <__alt_data_end+0xfc011e64>
 8011fd0:	003f5006 	br	8011d14 <__alt_data_end+0xfc011d14>
 8011fd4:	95000044 	addi	r20,r18,1
 8011fd8:	02000044 	movi	r8,1
 8011fdc:	003f5806 	br	8011d40 <__alt_data_end+0xfc011d40>

08011fe0 <_isatty_r>:
 8011fe0:	defffd04 	addi	sp,sp,-12
 8011fe4:	dc000015 	stw	r16,0(sp)
 8011fe8:	040200b4 	movhi	r16,2050
 8011fec:	dc400115 	stw	r17,4(sp)
 8011ff0:	84143004 	addi	r16,r16,20672
 8011ff4:	2023883a 	mov	r17,r4
 8011ff8:	2809883a 	mov	r4,r5
 8011ffc:	dfc00215 	stw	ra,8(sp)
 8012000:	80000015 	stw	zero,0(r16)
 8012004:	80146e40 	call	80146e4 <isatty>
 8012008:	00ffffc4 	movi	r3,-1
 801200c:	10c00526 	beq	r2,r3,8012024 <_isatty_r+0x44>
 8012010:	dfc00217 	ldw	ra,8(sp)
 8012014:	dc400117 	ldw	r17,4(sp)
 8012018:	dc000017 	ldw	r16,0(sp)
 801201c:	dec00304 	addi	sp,sp,12
 8012020:	f800283a 	ret
 8012024:	80c00017 	ldw	r3,0(r16)
 8012028:	183ff926 	beq	r3,zero,8012010 <__alt_data_end+0xfc012010>
 801202c:	88c00015 	stw	r3,0(r17)
 8012030:	003ff706 	br	8012010 <__alt_data_end+0xfc012010>

08012034 <_lseek_r>:
 8012034:	defffd04 	addi	sp,sp,-12
 8012038:	dc000015 	stw	r16,0(sp)
 801203c:	040200b4 	movhi	r16,2050
 8012040:	dc400115 	stw	r17,4(sp)
 8012044:	84143004 	addi	r16,r16,20672
 8012048:	2023883a 	mov	r17,r4
 801204c:	2809883a 	mov	r4,r5
 8012050:	300b883a 	mov	r5,r6
 8012054:	380d883a 	mov	r6,r7
 8012058:	dfc00215 	stw	ra,8(sp)
 801205c:	80000015 	stw	zero,0(r16)
 8012060:	80148bc0 	call	80148bc <lseek>
 8012064:	00ffffc4 	movi	r3,-1
 8012068:	10c00526 	beq	r2,r3,8012080 <_lseek_r+0x4c>
 801206c:	dfc00217 	ldw	ra,8(sp)
 8012070:	dc400117 	ldw	r17,4(sp)
 8012074:	dc000017 	ldw	r16,0(sp)
 8012078:	dec00304 	addi	sp,sp,12
 801207c:	f800283a 	ret
 8012080:	80c00017 	ldw	r3,0(r16)
 8012084:	183ff926 	beq	r3,zero,801206c <__alt_data_end+0xfc01206c>
 8012088:	88c00015 	stw	r3,0(r17)
 801208c:	003ff706 	br	801206c <__alt_data_end+0xfc01206c>

08012090 <memmove>:
 8012090:	2005883a 	mov	r2,r4
 8012094:	29000b2e 	bgeu	r5,r4,80120c4 <memmove+0x34>
 8012098:	298f883a 	add	r7,r5,r6
 801209c:	21c0092e 	bgeu	r4,r7,80120c4 <memmove+0x34>
 80120a0:	2187883a 	add	r3,r4,r6
 80120a4:	198bc83a 	sub	r5,r3,r6
 80120a8:	30004b26 	beq	r6,zero,80121d8 <memmove+0x148>
 80120ac:	39ffffc4 	addi	r7,r7,-1
 80120b0:	39000003 	ldbu	r4,0(r7)
 80120b4:	18ffffc4 	addi	r3,r3,-1
 80120b8:	19000005 	stb	r4,0(r3)
 80120bc:	197ffb1e 	bne	r3,r5,80120ac <__alt_data_end+0xfc0120ac>
 80120c0:	f800283a 	ret
 80120c4:	00c003c4 	movi	r3,15
 80120c8:	1980412e 	bgeu	r3,r6,80121d0 <memmove+0x140>
 80120cc:	1146b03a 	or	r3,r2,r5
 80120d0:	18c000cc 	andi	r3,r3,3
 80120d4:	1800411e 	bne	r3,zero,80121dc <memmove+0x14c>
 80120d8:	33fffc04 	addi	r15,r6,-16
 80120dc:	781ed13a 	srli	r15,r15,4
 80120e0:	28c00104 	addi	r3,r5,4
 80120e4:	13400104 	addi	r13,r2,4
 80120e8:	781c913a 	slli	r14,r15,4
 80120ec:	2b000204 	addi	r12,r5,8
 80120f0:	12c00204 	addi	r11,r2,8
 80120f4:	73800504 	addi	r14,r14,20
 80120f8:	2a800304 	addi	r10,r5,12
 80120fc:	12400304 	addi	r9,r2,12
 8012100:	2b9d883a 	add	r14,r5,r14
 8012104:	2811883a 	mov	r8,r5
 8012108:	100f883a 	mov	r7,r2
 801210c:	41000017 	ldw	r4,0(r8)
 8012110:	39c00404 	addi	r7,r7,16
 8012114:	18c00404 	addi	r3,r3,16
 8012118:	393ffc15 	stw	r4,-16(r7)
 801211c:	193ffc17 	ldw	r4,-16(r3)
 8012120:	6b400404 	addi	r13,r13,16
 8012124:	5ac00404 	addi	r11,r11,16
 8012128:	693ffc15 	stw	r4,-16(r13)
 801212c:	61000017 	ldw	r4,0(r12)
 8012130:	4a400404 	addi	r9,r9,16
 8012134:	42000404 	addi	r8,r8,16
 8012138:	593ffc15 	stw	r4,-16(r11)
 801213c:	51000017 	ldw	r4,0(r10)
 8012140:	63000404 	addi	r12,r12,16
 8012144:	52800404 	addi	r10,r10,16
 8012148:	493ffc15 	stw	r4,-16(r9)
 801214c:	1bbfef1e 	bne	r3,r14,801210c <__alt_data_end+0xfc01210c>
 8012150:	79000044 	addi	r4,r15,1
 8012154:	2008913a 	slli	r4,r4,4
 8012158:	328003cc 	andi	r10,r6,15
 801215c:	02c000c4 	movi	r11,3
 8012160:	1107883a 	add	r3,r2,r4
 8012164:	290b883a 	add	r5,r5,r4
 8012168:	5a801e2e 	bgeu	r11,r10,80121e4 <memmove+0x154>
 801216c:	1813883a 	mov	r9,r3
 8012170:	2811883a 	mov	r8,r5
 8012174:	500f883a 	mov	r7,r10
 8012178:	41000017 	ldw	r4,0(r8)
 801217c:	4a400104 	addi	r9,r9,4
 8012180:	39ffff04 	addi	r7,r7,-4
 8012184:	493fff15 	stw	r4,-4(r9)
 8012188:	42000104 	addi	r8,r8,4
 801218c:	59fffa36 	bltu	r11,r7,8012178 <__alt_data_end+0xfc012178>
 8012190:	513fff04 	addi	r4,r10,-4
 8012194:	2008d0ba 	srli	r4,r4,2
 8012198:	318000cc 	andi	r6,r6,3
 801219c:	21000044 	addi	r4,r4,1
 80121a0:	2109883a 	add	r4,r4,r4
 80121a4:	2109883a 	add	r4,r4,r4
 80121a8:	1907883a 	add	r3,r3,r4
 80121ac:	290b883a 	add	r5,r5,r4
 80121b0:	30000926 	beq	r6,zero,80121d8 <memmove+0x148>
 80121b4:	198d883a 	add	r6,r3,r6
 80121b8:	29c00003 	ldbu	r7,0(r5)
 80121bc:	18c00044 	addi	r3,r3,1
 80121c0:	29400044 	addi	r5,r5,1
 80121c4:	19ffffc5 	stb	r7,-1(r3)
 80121c8:	19bffb1e 	bne	r3,r6,80121b8 <__alt_data_end+0xfc0121b8>
 80121cc:	f800283a 	ret
 80121d0:	1007883a 	mov	r3,r2
 80121d4:	003ff606 	br	80121b0 <__alt_data_end+0xfc0121b0>
 80121d8:	f800283a 	ret
 80121dc:	1007883a 	mov	r3,r2
 80121e0:	003ff406 	br	80121b4 <__alt_data_end+0xfc0121b4>
 80121e4:	500d883a 	mov	r6,r10
 80121e8:	003ff106 	br	80121b0 <__alt_data_end+0xfc0121b0>

080121ec <_read_r>:
 80121ec:	defffd04 	addi	sp,sp,-12
 80121f0:	dc000015 	stw	r16,0(sp)
 80121f4:	040200b4 	movhi	r16,2050
 80121f8:	dc400115 	stw	r17,4(sp)
 80121fc:	84143004 	addi	r16,r16,20672
 8012200:	2023883a 	mov	r17,r4
 8012204:	2809883a 	mov	r4,r5
 8012208:	300b883a 	mov	r5,r6
 801220c:	380d883a 	mov	r6,r7
 8012210:	dfc00215 	stw	ra,8(sp)
 8012214:	80000015 	stw	zero,0(r16)
 8012218:	8014a980 	call	8014a98 <read>
 801221c:	00ffffc4 	movi	r3,-1
 8012220:	10c00526 	beq	r2,r3,8012238 <_read_r+0x4c>
 8012224:	dfc00217 	ldw	ra,8(sp)
 8012228:	dc400117 	ldw	r17,4(sp)
 801222c:	dc000017 	ldw	r16,0(sp)
 8012230:	dec00304 	addi	sp,sp,12
 8012234:	f800283a 	ret
 8012238:	80c00017 	ldw	r3,0(r16)
 801223c:	183ff926 	beq	r3,zero,8012224 <__alt_data_end+0xfc012224>
 8012240:	88c00015 	stw	r3,0(r17)
 8012244:	003ff706 	br	8012224 <__alt_data_end+0xfc012224>

08012248 <_realloc_r>:
 8012248:	defff604 	addi	sp,sp,-40
 801224c:	dcc00315 	stw	r19,12(sp)
 8012250:	dc400115 	stw	r17,4(sp)
 8012254:	dfc00915 	stw	ra,36(sp)
 8012258:	df000815 	stw	fp,32(sp)
 801225c:	ddc00715 	stw	r23,28(sp)
 8012260:	dd800615 	stw	r22,24(sp)
 8012264:	dd400515 	stw	r21,20(sp)
 8012268:	dd000415 	stw	r20,16(sp)
 801226c:	dc800215 	stw	r18,8(sp)
 8012270:	dc000015 	stw	r16,0(sp)
 8012274:	2827883a 	mov	r19,r5
 8012278:	3023883a 	mov	r17,r6
 801227c:	2800bf26 	beq	r5,zero,801257c <_realloc_r+0x334>
 8012280:	2025883a 	mov	r18,r4
 8012284:	8014a080 	call	8014a08 <__malloc_lock>
 8012288:	98ffff17 	ldw	r3,-4(r19)
 801228c:	01bfff04 	movi	r6,-4
 8012290:	890002c4 	addi	r4,r17,11
 8012294:	01c00584 	movi	r7,22
 8012298:	9d7ffe04 	addi	r21,r19,-8
 801229c:	19a0703a 	and	r16,r3,r6
 80122a0:	39003f2e 	bgeu	r7,r4,80123a0 <_realloc_r+0x158>
 80122a4:	053ffe04 	movi	r20,-8
 80122a8:	2528703a 	and	r20,r4,r20
 80122ac:	a00f883a 	mov	r7,r20
 80122b0:	a0008216 	blt	r20,zero,80124bc <_realloc_r+0x274>
 80122b4:	a4408136 	bltu	r20,r17,80124bc <_realloc_r+0x274>
 80122b8:	81c03c0e 	bge	r16,r7,80123ac <_realloc_r+0x164>
 80122bc:	070200b4 	movhi	fp,2050
 80122c0:	e7068a04 	addi	fp,fp,6696
 80122c4:	e1000217 	ldw	r4,8(fp)
 80122c8:	ac05883a 	add	r2,r21,r16
 80122cc:	2080bf26 	beq	r4,r2,80125cc <_realloc_r+0x384>
 80122d0:	11000117 	ldw	r4,4(r2)
 80122d4:	023fff84 	movi	r8,-2
 80122d8:	2210703a 	and	r8,r4,r8
 80122dc:	1211883a 	add	r8,r2,r8
 80122e0:	41400117 	ldw	r5,4(r8)
 80122e4:	2940004c 	andi	r5,r5,1
 80122e8:	28004a1e 	bne	r5,zero,8012414 <_realloc_r+0x1cc>
 80122ec:	017fff04 	movi	r5,-4
 80122f0:	2148703a 	and	r4,r4,r5
 80122f4:	2409883a 	add	r4,r4,r16
 80122f8:	21c0ad0e 	bge	r4,r7,80125b0 <_realloc_r+0x368>
 80122fc:	18c0004c 	andi	r3,r3,1
 8012300:	18007f1e 	bne	r3,zero,8012500 <_realloc_r+0x2b8>
 8012304:	9dfffe17 	ldw	r23,-8(r19)
 8012308:	adefc83a 	sub	r23,r21,r23
 801230c:	bd800117 	ldw	r22,4(r23)
 8012310:	b14a703a 	and	r5,r22,r5
 8012314:	216d883a 	add	r22,r4,r5
 8012318:	b1c04516 	blt	r22,r7,8012430 <_realloc_r+0x1e8>
 801231c:	10c00317 	ldw	r3,12(r2)
 8012320:	10800217 	ldw	r2,8(r2)
 8012324:	81bfff04 	addi	r6,r16,-4
 8012328:	bc400204 	addi	r17,r23,8
 801232c:	10c00315 	stw	r3,12(r2)
 8012330:	18800215 	stw	r2,8(r3)
 8012334:	b9400217 	ldw	r5,8(r23)
 8012338:	b8c00317 	ldw	r3,12(r23)
 801233c:	00800904 	movi	r2,36
 8012340:	28c00315 	stw	r3,12(r5)
 8012344:	19400215 	stw	r5,8(r3)
 8012348:	1180ef36 	bltu	r2,r6,8012708 <_realloc_r+0x4c0>
 801234c:	008004c4 	movi	r2,19
 8012350:	1180da2e 	bgeu	r2,r6,80126bc <_realloc_r+0x474>
 8012354:	98800017 	ldw	r2,0(r19)
 8012358:	b8800215 	stw	r2,8(r23)
 801235c:	98800117 	ldw	r2,4(r19)
 8012360:	b8800315 	stw	r2,12(r23)
 8012364:	008006c4 	movi	r2,27
 8012368:	1180fc2e 	bgeu	r2,r6,801275c <_realloc_r+0x514>
 801236c:	98800217 	ldw	r2,8(r19)
 8012370:	b8800415 	stw	r2,16(r23)
 8012374:	98800317 	ldw	r2,12(r19)
 8012378:	b8800515 	stw	r2,20(r23)
 801237c:	00800904 	movi	r2,36
 8012380:	3080421e 	bne	r6,r2,801248c <_realloc_r+0x244>
 8012384:	98800417 	ldw	r2,16(r19)
 8012388:	9cc00604 	addi	r19,r19,24
 801238c:	b8c00804 	addi	r3,r23,32
 8012390:	b8800615 	stw	r2,24(r23)
 8012394:	98bfff17 	ldw	r2,-4(r19)
 8012398:	b8800715 	stw	r2,28(r23)
 801239c:	00003d06 	br	8012494 <_realloc_r+0x24c>
 80123a0:	01c00404 	movi	r7,16
 80123a4:	3829883a 	mov	r20,r7
 80123a8:	003fc206 	br	80122b4 <__alt_data_end+0xfc0122b4>
 80123ac:	9823883a 	mov	r17,r19
 80123b0:	850fc83a 	sub	r7,r16,r20
 80123b4:	008003c4 	movi	r2,15
 80123b8:	18c0004c 	andi	r3,r3,1
 80123bc:	11c04336 	bltu	r2,r7,80124cc <_realloc_r+0x284>
 80123c0:	1c06b03a 	or	r3,r3,r16
 80123c4:	a8c00115 	stw	r3,4(r21)
 80123c8:	ac21883a 	add	r16,r21,r16
 80123cc:	80c00117 	ldw	r3,4(r16)
 80123d0:	18c00054 	ori	r3,r3,1
 80123d4:	80c00115 	stw	r3,4(r16)
 80123d8:	9009883a 	mov	r4,r18
 80123dc:	8014a280 	call	8014a28 <__malloc_unlock>
 80123e0:	8805883a 	mov	r2,r17
 80123e4:	dfc00917 	ldw	ra,36(sp)
 80123e8:	df000817 	ldw	fp,32(sp)
 80123ec:	ddc00717 	ldw	r23,28(sp)
 80123f0:	dd800617 	ldw	r22,24(sp)
 80123f4:	dd400517 	ldw	r21,20(sp)
 80123f8:	dd000417 	ldw	r20,16(sp)
 80123fc:	dcc00317 	ldw	r19,12(sp)
 8012400:	dc800217 	ldw	r18,8(sp)
 8012404:	dc400117 	ldw	r17,4(sp)
 8012408:	dc000017 	ldw	r16,0(sp)
 801240c:	dec00a04 	addi	sp,sp,40
 8012410:	f800283a 	ret
 8012414:	18c0004c 	andi	r3,r3,1
 8012418:	1800391e 	bne	r3,zero,8012500 <_realloc_r+0x2b8>
 801241c:	9dfffe17 	ldw	r23,-8(r19)
 8012420:	00bfff04 	movi	r2,-4
 8012424:	adefc83a 	sub	r23,r21,r23
 8012428:	b9400117 	ldw	r5,4(r23)
 801242c:	288a703a 	and	r5,r5,r2
 8012430:	2c2d883a 	add	r22,r5,r16
 8012434:	b1c03216 	blt	r22,r7,8012500 <_realloc_r+0x2b8>
 8012438:	b8800317 	ldw	r2,12(r23)
 801243c:	b8c00217 	ldw	r3,8(r23)
 8012440:	81bfff04 	addi	r6,r16,-4
 8012444:	01000904 	movi	r4,36
 8012448:	18800315 	stw	r2,12(r3)
 801244c:	10c00215 	stw	r3,8(r2)
 8012450:	bc400204 	addi	r17,r23,8
 8012454:	2180ac36 	bltu	r4,r6,8012708 <_realloc_r+0x4c0>
 8012458:	008004c4 	movi	r2,19
 801245c:	1180972e 	bgeu	r2,r6,80126bc <_realloc_r+0x474>
 8012460:	98800017 	ldw	r2,0(r19)
 8012464:	b8800215 	stw	r2,8(r23)
 8012468:	98800117 	ldw	r2,4(r19)
 801246c:	b8800315 	stw	r2,12(r23)
 8012470:	008006c4 	movi	r2,27
 8012474:	1180b92e 	bgeu	r2,r6,801275c <_realloc_r+0x514>
 8012478:	98800217 	ldw	r2,8(r19)
 801247c:	b8800415 	stw	r2,16(r23)
 8012480:	98800317 	ldw	r2,12(r19)
 8012484:	b8800515 	stw	r2,20(r23)
 8012488:	313fbe26 	beq	r6,r4,8012384 <__alt_data_end+0xfc012384>
 801248c:	b8c00604 	addi	r3,r23,24
 8012490:	9cc00404 	addi	r19,r19,16
 8012494:	98800017 	ldw	r2,0(r19)
 8012498:	b021883a 	mov	r16,r22
 801249c:	b82b883a 	mov	r21,r23
 80124a0:	18800015 	stw	r2,0(r3)
 80124a4:	98800117 	ldw	r2,4(r19)
 80124a8:	18800115 	stw	r2,4(r3)
 80124ac:	98800217 	ldw	r2,8(r19)
 80124b0:	18800215 	stw	r2,8(r3)
 80124b4:	b8c00117 	ldw	r3,4(r23)
 80124b8:	003fbd06 	br	80123b0 <__alt_data_end+0xfc0123b0>
 80124bc:	00800304 	movi	r2,12
 80124c0:	90800015 	stw	r2,0(r18)
 80124c4:	0005883a 	mov	r2,zero
 80124c8:	003fc606 	br	80123e4 <__alt_data_end+0xfc0123e4>
 80124cc:	1d06b03a 	or	r3,r3,r20
 80124d0:	ad0b883a 	add	r5,r21,r20
 80124d4:	a8c00115 	stw	r3,4(r21)
 80124d8:	38800054 	ori	r2,r7,1
 80124dc:	28800115 	stw	r2,4(r5)
 80124e0:	29cf883a 	add	r7,r5,r7
 80124e4:	38800117 	ldw	r2,4(r7)
 80124e8:	9009883a 	mov	r4,r18
 80124ec:	29400204 	addi	r5,r5,8
 80124f0:	10800054 	ori	r2,r2,1
 80124f4:	38800115 	stw	r2,4(r7)
 80124f8:	800c4200 	call	800c420 <_free_r>
 80124fc:	003fb606 	br	80123d8 <__alt_data_end+0xfc0123d8>
 8012500:	880b883a 	mov	r5,r17
 8012504:	9009883a 	mov	r4,r18
 8012508:	8003f000 	call	8003f00 <_malloc_r>
 801250c:	1023883a 	mov	r17,r2
 8012510:	1000aa26 	beq	r2,zero,80127bc <_realloc_r+0x574>
 8012514:	98ffff17 	ldw	r3,-4(r19)
 8012518:	113ffe04 	addi	r4,r2,-8
 801251c:	00bfff84 	movi	r2,-2
 8012520:	1884703a 	and	r2,r3,r2
 8012524:	a885883a 	add	r2,r21,r2
 8012528:	20808626 	beq	r4,r2,8012744 <_realloc_r+0x4fc>
 801252c:	81bfff04 	addi	r6,r16,-4
 8012530:	00800904 	movi	r2,36
 8012534:	11807036 	bltu	r2,r6,80126f8 <_realloc_r+0x4b0>
 8012538:	00c004c4 	movi	r3,19
 801253c:	19805636 	bltu	r3,r6,8012698 <_realloc_r+0x450>
 8012540:	8805883a 	mov	r2,r17
 8012544:	9807883a 	mov	r3,r19
 8012548:	19000017 	ldw	r4,0(r3)
 801254c:	11000015 	stw	r4,0(r2)
 8012550:	19000117 	ldw	r4,4(r3)
 8012554:	11000115 	stw	r4,4(r2)
 8012558:	18c00217 	ldw	r3,8(r3)
 801255c:	10c00215 	stw	r3,8(r2)
 8012560:	980b883a 	mov	r5,r19
 8012564:	9009883a 	mov	r4,r18
 8012568:	800c4200 	call	800c420 <_free_r>
 801256c:	9009883a 	mov	r4,r18
 8012570:	8014a280 	call	8014a28 <__malloc_unlock>
 8012574:	8805883a 	mov	r2,r17
 8012578:	003f9a06 	br	80123e4 <__alt_data_end+0xfc0123e4>
 801257c:	300b883a 	mov	r5,r6
 8012580:	dfc00917 	ldw	ra,36(sp)
 8012584:	df000817 	ldw	fp,32(sp)
 8012588:	ddc00717 	ldw	r23,28(sp)
 801258c:	dd800617 	ldw	r22,24(sp)
 8012590:	dd400517 	ldw	r21,20(sp)
 8012594:	dd000417 	ldw	r20,16(sp)
 8012598:	dcc00317 	ldw	r19,12(sp)
 801259c:	dc800217 	ldw	r18,8(sp)
 80125a0:	dc400117 	ldw	r17,4(sp)
 80125a4:	dc000017 	ldw	r16,0(sp)
 80125a8:	dec00a04 	addi	sp,sp,40
 80125ac:	8003f001 	jmpi	8003f00 <_malloc_r>
 80125b0:	11400317 	ldw	r5,12(r2)
 80125b4:	10800217 	ldw	r2,8(r2)
 80125b8:	9823883a 	mov	r17,r19
 80125bc:	2021883a 	mov	r16,r4
 80125c0:	11400315 	stw	r5,12(r2)
 80125c4:	28800215 	stw	r2,8(r5)
 80125c8:	003f7906 	br	80123b0 <__alt_data_end+0xfc0123b0>
 80125cc:	21000117 	ldw	r4,4(r4)
 80125d0:	00bfff04 	movi	r2,-4
 80125d4:	a1800404 	addi	r6,r20,16
 80125d8:	2088703a 	and	r4,r4,r2
 80125dc:	2409883a 	add	r4,r4,r16
 80125e0:	2180380e 	bge	r4,r6,80126c4 <_realloc_r+0x47c>
 80125e4:	18c0004c 	andi	r3,r3,1
 80125e8:	183fc51e 	bne	r3,zero,8012500 <__alt_data_end+0xfc012500>
 80125ec:	9dfffe17 	ldw	r23,-8(r19)
 80125f0:	adefc83a 	sub	r23,r21,r23
 80125f4:	b9400117 	ldw	r5,4(r23)
 80125f8:	288a703a 	and	r5,r5,r2
 80125fc:	216d883a 	add	r22,r4,r5
 8012600:	b1bf8b16 	blt	r22,r6,8012430 <__alt_data_end+0xfc012430>
 8012604:	b8800317 	ldw	r2,12(r23)
 8012608:	b8c00217 	ldw	r3,8(r23)
 801260c:	81bfff04 	addi	r6,r16,-4
 8012610:	01000904 	movi	r4,36
 8012614:	18800315 	stw	r2,12(r3)
 8012618:	10c00215 	stw	r3,8(r2)
 801261c:	bc400204 	addi	r17,r23,8
 8012620:	21805a36 	bltu	r4,r6,801278c <_realloc_r+0x544>
 8012624:	008004c4 	movi	r2,19
 8012628:	1180562e 	bgeu	r2,r6,8012784 <_realloc_r+0x53c>
 801262c:	98800017 	ldw	r2,0(r19)
 8012630:	b8800215 	stw	r2,8(r23)
 8012634:	98800117 	ldw	r2,4(r19)
 8012638:	b8800315 	stw	r2,12(r23)
 801263c:	008006c4 	movi	r2,27
 8012640:	11805636 	bltu	r2,r6,801279c <_realloc_r+0x554>
 8012644:	b8800404 	addi	r2,r23,16
 8012648:	9cc00204 	addi	r19,r19,8
 801264c:	98c00017 	ldw	r3,0(r19)
 8012650:	10c00015 	stw	r3,0(r2)
 8012654:	98c00117 	ldw	r3,4(r19)
 8012658:	10c00115 	stw	r3,4(r2)
 801265c:	98c00217 	ldw	r3,8(r19)
 8012660:	10c00215 	stw	r3,8(r2)
 8012664:	bd07883a 	add	r3,r23,r20
 8012668:	b505c83a 	sub	r2,r22,r20
 801266c:	e0c00215 	stw	r3,8(fp)
 8012670:	10800054 	ori	r2,r2,1
 8012674:	18800115 	stw	r2,4(r3)
 8012678:	b8800117 	ldw	r2,4(r23)
 801267c:	9009883a 	mov	r4,r18
 8012680:	1080004c 	andi	r2,r2,1
 8012684:	a0a8b03a 	or	r20,r20,r2
 8012688:	bd000115 	stw	r20,4(r23)
 801268c:	8014a280 	call	8014a28 <__malloc_unlock>
 8012690:	8805883a 	mov	r2,r17
 8012694:	003f5306 	br	80123e4 <__alt_data_end+0xfc0123e4>
 8012698:	98c00017 	ldw	r3,0(r19)
 801269c:	88c00015 	stw	r3,0(r17)
 80126a0:	98c00117 	ldw	r3,4(r19)
 80126a4:	88c00115 	stw	r3,4(r17)
 80126a8:	00c006c4 	movi	r3,27
 80126ac:	19801d36 	bltu	r3,r6,8012724 <_realloc_r+0x4dc>
 80126b0:	88800204 	addi	r2,r17,8
 80126b4:	98c00204 	addi	r3,r19,8
 80126b8:	003fa306 	br	8012548 <__alt_data_end+0xfc012548>
 80126bc:	8807883a 	mov	r3,r17
 80126c0:	003f7406 	br	8012494 <__alt_data_end+0xfc012494>
 80126c4:	ad2b883a 	add	r21,r21,r20
 80126c8:	2505c83a 	sub	r2,r4,r20
 80126cc:	e5400215 	stw	r21,8(fp)
 80126d0:	10800054 	ori	r2,r2,1
 80126d4:	a8800115 	stw	r2,4(r21)
 80126d8:	98bfff17 	ldw	r2,-4(r19)
 80126dc:	9009883a 	mov	r4,r18
 80126e0:	1080004c 	andi	r2,r2,1
 80126e4:	a0a8b03a 	or	r20,r20,r2
 80126e8:	9d3fff15 	stw	r20,-4(r19)
 80126ec:	8014a280 	call	8014a28 <__malloc_unlock>
 80126f0:	9805883a 	mov	r2,r19
 80126f4:	003f3b06 	br	80123e4 <__alt_data_end+0xfc0123e4>
 80126f8:	8809883a 	mov	r4,r17
 80126fc:	980b883a 	mov	r5,r19
 8012700:	80120900 	call	8012090 <memmove>
 8012704:	003f9606 	br	8012560 <__alt_data_end+0xfc012560>
 8012708:	8809883a 	mov	r4,r17
 801270c:	980b883a 	mov	r5,r19
 8012710:	80120900 	call	8012090 <memmove>
 8012714:	b8c00117 	ldw	r3,4(r23)
 8012718:	b021883a 	mov	r16,r22
 801271c:	b82b883a 	mov	r21,r23
 8012720:	003f2306 	br	80123b0 <__alt_data_end+0xfc0123b0>
 8012724:	98c00217 	ldw	r3,8(r19)
 8012728:	88c00215 	stw	r3,8(r17)
 801272c:	98c00317 	ldw	r3,12(r19)
 8012730:	88c00315 	stw	r3,12(r17)
 8012734:	30800c26 	beq	r6,r2,8012768 <_realloc_r+0x520>
 8012738:	88800404 	addi	r2,r17,16
 801273c:	98c00404 	addi	r3,r19,16
 8012740:	003f8106 	br	8012548 <__alt_data_end+0xfc012548>
 8012744:	893fff17 	ldw	r4,-4(r17)
 8012748:	00bfff04 	movi	r2,-4
 801274c:	9823883a 	mov	r17,r19
 8012750:	2084703a 	and	r2,r4,r2
 8012754:	80a1883a 	add	r16,r16,r2
 8012758:	003f1506 	br	80123b0 <__alt_data_end+0xfc0123b0>
 801275c:	b8c00404 	addi	r3,r23,16
 8012760:	9cc00204 	addi	r19,r19,8
 8012764:	003f4b06 	br	8012494 <__alt_data_end+0xfc012494>
 8012768:	99000417 	ldw	r4,16(r19)
 801276c:	88800604 	addi	r2,r17,24
 8012770:	98c00604 	addi	r3,r19,24
 8012774:	89000415 	stw	r4,16(r17)
 8012778:	99000517 	ldw	r4,20(r19)
 801277c:	89000515 	stw	r4,20(r17)
 8012780:	003f7106 	br	8012548 <__alt_data_end+0xfc012548>
 8012784:	8805883a 	mov	r2,r17
 8012788:	003fb006 	br	801264c <__alt_data_end+0xfc01264c>
 801278c:	8809883a 	mov	r4,r17
 8012790:	980b883a 	mov	r5,r19
 8012794:	80120900 	call	8012090 <memmove>
 8012798:	003fb206 	br	8012664 <__alt_data_end+0xfc012664>
 801279c:	98800217 	ldw	r2,8(r19)
 80127a0:	b8800415 	stw	r2,16(r23)
 80127a4:	98800317 	ldw	r2,12(r19)
 80127a8:	b8800515 	stw	r2,20(r23)
 80127ac:	31000726 	beq	r6,r4,80127cc <_realloc_r+0x584>
 80127b0:	b8800604 	addi	r2,r23,24
 80127b4:	9cc00404 	addi	r19,r19,16
 80127b8:	003fa406 	br	801264c <__alt_data_end+0xfc01264c>
 80127bc:	9009883a 	mov	r4,r18
 80127c0:	8014a280 	call	8014a28 <__malloc_unlock>
 80127c4:	0005883a 	mov	r2,zero
 80127c8:	003f0606 	br	80123e4 <__alt_data_end+0xfc0123e4>
 80127cc:	98c00417 	ldw	r3,16(r19)
 80127d0:	9cc00604 	addi	r19,r19,24
 80127d4:	b8800804 	addi	r2,r23,32
 80127d8:	b8c00615 	stw	r3,24(r23)
 80127dc:	98ffff17 	ldw	r3,-4(r19)
 80127e0:	b8c00715 	stw	r3,28(r23)
 80127e4:	003f9906 	br	801264c <__alt_data_end+0xfc01264c>

080127e8 <_wcrtomb_r>:
 80127e8:	defff604 	addi	sp,sp,-40
 80127ec:	008200b4 	movhi	r2,2050
 80127f0:	dc800815 	stw	r18,32(sp)
 80127f4:	dc400715 	stw	r17,28(sp)
 80127f8:	dc000615 	stw	r16,24(sp)
 80127fc:	108d4f04 	addi	r2,r2,13628
 8012800:	dfc00915 	stw	ra,36(sp)
 8012804:	2021883a 	mov	r16,r4
 8012808:	3823883a 	mov	r17,r7
 801280c:	14800017 	ldw	r18,0(r2)
 8012810:	28001426 	beq	r5,zero,8012864 <_wcrtomb_r+0x7c>
 8012814:	d9400415 	stw	r5,16(sp)
 8012818:	d9800515 	stw	r6,20(sp)
 801281c:	800d5880 	call	800d588 <__locale_charset>
 8012820:	d9400417 	ldw	r5,16(sp)
 8012824:	d9800517 	ldw	r6,20(sp)
 8012828:	8009883a 	mov	r4,r16
 801282c:	dc400015 	stw	r17,0(sp)
 8012830:	100f883a 	mov	r7,r2
 8012834:	903ee83a 	callr	r18
 8012838:	00ffffc4 	movi	r3,-1
 801283c:	10c0031e 	bne	r2,r3,801284c <_wcrtomb_r+0x64>
 8012840:	88000015 	stw	zero,0(r17)
 8012844:	00c02284 	movi	r3,138
 8012848:	80c00015 	stw	r3,0(r16)
 801284c:	dfc00917 	ldw	ra,36(sp)
 8012850:	dc800817 	ldw	r18,32(sp)
 8012854:	dc400717 	ldw	r17,28(sp)
 8012858:	dc000617 	ldw	r16,24(sp)
 801285c:	dec00a04 	addi	sp,sp,40
 8012860:	f800283a 	ret
 8012864:	800d5880 	call	800d588 <__locale_charset>
 8012868:	8009883a 	mov	r4,r16
 801286c:	dc400015 	stw	r17,0(sp)
 8012870:	d9400104 	addi	r5,sp,4
 8012874:	000d883a 	mov	r6,zero
 8012878:	100f883a 	mov	r7,r2
 801287c:	903ee83a 	callr	r18
 8012880:	003fed06 	br	8012838 <__alt_data_end+0xfc012838>

08012884 <wcrtomb>:
 8012884:	defff504 	addi	sp,sp,-44
 8012888:	dc400515 	stw	r17,20(sp)
 801288c:	dc000415 	stw	r16,16(sp)
 8012890:	dfc00a15 	stw	ra,40(sp)
 8012894:	dd400915 	stw	r21,36(sp)
 8012898:	dd000815 	stw	r20,32(sp)
 801289c:	dcc00715 	stw	r19,28(sp)
 80128a0:	dc800615 	stw	r18,24(sp)
 80128a4:	2021883a 	mov	r16,r4
 80128a8:	3023883a 	mov	r17,r6
 80128ac:	20001d26 	beq	r4,zero,8012924 <wcrtomb+0xa0>
 80128b0:	048200b4 	movhi	r18,2050
 80128b4:	948d4d04 	addi	r18,r18,13620
 80128b8:	008200b4 	movhi	r2,2050
 80128bc:	95400017 	ldw	r21,0(r18)
 80128c0:	108d4f04 	addi	r2,r2,13628
 80128c4:	15000017 	ldw	r20,0(r2)
 80128c8:	2827883a 	mov	r19,r5
 80128cc:	800d5880 	call	800d588 <__locale_charset>
 80128d0:	a809883a 	mov	r4,r21
 80128d4:	dc400015 	stw	r17,0(sp)
 80128d8:	800b883a 	mov	r5,r16
 80128dc:	980d883a 	mov	r6,r19
 80128e0:	100f883a 	mov	r7,r2
 80128e4:	a03ee83a 	callr	r20
 80128e8:	00ffffc4 	movi	r3,-1
 80128ec:	10c0041e 	bne	r2,r3,8012900 <wcrtomb+0x7c>
 80128f0:	90c00017 	ldw	r3,0(r18)
 80128f4:	01002284 	movi	r4,138
 80128f8:	88000015 	stw	zero,0(r17)
 80128fc:	19000015 	stw	r4,0(r3)
 8012900:	dfc00a17 	ldw	ra,40(sp)
 8012904:	dd400917 	ldw	r21,36(sp)
 8012908:	dd000817 	ldw	r20,32(sp)
 801290c:	dcc00717 	ldw	r19,28(sp)
 8012910:	dc800617 	ldw	r18,24(sp)
 8012914:	dc400517 	ldw	r17,20(sp)
 8012918:	dc000417 	ldw	r16,16(sp)
 801291c:	dec00b04 	addi	sp,sp,44
 8012920:	f800283a 	ret
 8012924:	048200b4 	movhi	r18,2050
 8012928:	948d4d04 	addi	r18,r18,13620
 801292c:	008200b4 	movhi	r2,2050
 8012930:	94c00017 	ldw	r19,0(r18)
 8012934:	108d4f04 	addi	r2,r2,13628
 8012938:	14000017 	ldw	r16,0(r2)
 801293c:	800d5880 	call	800d588 <__locale_charset>
 8012940:	9809883a 	mov	r4,r19
 8012944:	dc400015 	stw	r17,0(sp)
 8012948:	d9400104 	addi	r5,sp,4
 801294c:	000d883a 	mov	r6,zero
 8012950:	100f883a 	mov	r7,r2
 8012954:	803ee83a 	callr	r16
 8012958:	003fe306 	br	80128e8 <__alt_data_end+0xfc0128e8>

0801295c <__ascii_wctomb>:
 801295c:	28000526 	beq	r5,zero,8012974 <__ascii_wctomb+0x18>
 8012960:	00803fc4 	movi	r2,255
 8012964:	11800536 	bltu	r2,r6,801297c <__ascii_wctomb+0x20>
 8012968:	29800005 	stb	r6,0(r5)
 801296c:	00800044 	movi	r2,1
 8012970:	f800283a 	ret
 8012974:	0005883a 	mov	r2,zero
 8012978:	f800283a 	ret
 801297c:	00802284 	movi	r2,138
 8012980:	20800015 	stw	r2,0(r4)
 8012984:	00bfffc4 	movi	r2,-1
 8012988:	f800283a 	ret

0801298c <_wctomb_r>:
 801298c:	008200b4 	movhi	r2,2050
 8012990:	defff904 	addi	sp,sp,-28
 8012994:	108d4f04 	addi	r2,r2,13628
 8012998:	dfc00615 	stw	ra,24(sp)
 801299c:	dc400515 	stw	r17,20(sp)
 80129a0:	dc000415 	stw	r16,16(sp)
 80129a4:	3823883a 	mov	r17,r7
 80129a8:	14000017 	ldw	r16,0(r2)
 80129ac:	d9000115 	stw	r4,4(sp)
 80129b0:	d9400215 	stw	r5,8(sp)
 80129b4:	d9800315 	stw	r6,12(sp)
 80129b8:	800d5880 	call	800d588 <__locale_charset>
 80129bc:	d9000117 	ldw	r4,4(sp)
 80129c0:	d9400217 	ldw	r5,8(sp)
 80129c4:	d9800317 	ldw	r6,12(sp)
 80129c8:	dc400015 	stw	r17,0(sp)
 80129cc:	100f883a 	mov	r7,r2
 80129d0:	803ee83a 	callr	r16
 80129d4:	dfc00617 	ldw	ra,24(sp)
 80129d8:	dc400517 	ldw	r17,20(sp)
 80129dc:	dc000417 	ldw	r16,16(sp)
 80129e0:	dec00704 	addi	sp,sp,28
 80129e4:	f800283a 	ret

080129e8 <__fixunsdfsi>:
 80129e8:	defffd04 	addi	sp,sp,-12
 80129ec:	000d883a 	mov	r6,zero
 80129f0:	01d07834 	movhi	r7,16864
 80129f4:	dc400115 	stw	r17,4(sp)
 80129f8:	dc000015 	stw	r16,0(sp)
 80129fc:	dfc00215 	stw	ra,8(sp)
 8012a00:	2023883a 	mov	r17,r4
 8012a04:	2821883a 	mov	r16,r5
 8012a08:	800321c0 	call	800321c <__gedf2>
 8012a0c:	1000080e 	bge	r2,zero,8012a30 <__fixunsdfsi+0x48>
 8012a10:	8809883a 	mov	r4,r17
 8012a14:	800b883a 	mov	r5,r16
 8012a18:	8003bcc0 	call	8003bcc <__fixdfsi>
 8012a1c:	dfc00217 	ldw	ra,8(sp)
 8012a20:	dc400117 	ldw	r17,4(sp)
 8012a24:	dc000017 	ldw	r16,0(sp)
 8012a28:	dec00304 	addi	sp,sp,12
 8012a2c:	f800283a 	ret
 8012a30:	000d883a 	mov	r6,zero
 8012a34:	01d07834 	movhi	r7,16864
 8012a38:	8809883a 	mov	r4,r17
 8012a3c:	800b883a 	mov	r5,r16
 8012a40:	80032fc0 	call	80032fc <__subdf3>
 8012a44:	180b883a 	mov	r5,r3
 8012a48:	1009883a 	mov	r4,r2
 8012a4c:	8003bcc0 	call	8003bcc <__fixdfsi>
 8012a50:	00e00034 	movhi	r3,32768
 8012a54:	10c5883a 	add	r2,r2,r3
 8012a58:	003ff006 	br	8012a1c <__alt_data_end+0xfc012a1c>

08012a5c <__udivdi3>:
 8012a5c:	defff504 	addi	sp,sp,-44
 8012a60:	dcc00415 	stw	r19,16(sp)
 8012a64:	dc000115 	stw	r16,4(sp)
 8012a68:	dfc00a15 	stw	ra,40(sp)
 8012a6c:	df000915 	stw	fp,36(sp)
 8012a70:	ddc00815 	stw	r23,32(sp)
 8012a74:	dd800715 	stw	r22,28(sp)
 8012a78:	dd400615 	stw	r21,24(sp)
 8012a7c:	dd000515 	stw	r20,20(sp)
 8012a80:	dc800315 	stw	r18,12(sp)
 8012a84:	dc400215 	stw	r17,8(sp)
 8012a88:	2027883a 	mov	r19,r4
 8012a8c:	2821883a 	mov	r16,r5
 8012a90:	3800421e 	bne	r7,zero,8012b9c <__udivdi3+0x140>
 8012a94:	3025883a 	mov	r18,r6
 8012a98:	2023883a 	mov	r17,r4
 8012a9c:	2980542e 	bgeu	r5,r6,8012bf0 <__udivdi3+0x194>
 8012aa0:	00bfffd4 	movui	r2,65535
 8012aa4:	282d883a 	mov	r22,r5
 8012aa8:	1180a836 	bltu	r2,r6,8012d4c <__udivdi3+0x2f0>
 8012aac:	00803fc4 	movi	r2,255
 8012ab0:	1181422e 	bgeu	r2,r6,8012fbc <__udivdi3+0x560>
 8012ab4:	00800204 	movi	r2,8
 8012ab8:	1007883a 	mov	r3,r2
 8012abc:	3084d83a 	srl	r2,r6,r2
 8012ac0:	010200b4 	movhi	r4,2050
 8012ac4:	2105a004 	addi	r4,r4,5760
 8012ac8:	2085883a 	add	r2,r4,r2
 8012acc:	10800003 	ldbu	r2,0(r2)
 8012ad0:	10c7883a 	add	r3,r2,r3
 8012ad4:	00800804 	movi	r2,32
 8012ad8:	10c5c83a 	sub	r2,r2,r3
 8012adc:	10000526 	beq	r2,zero,8012af4 <__udivdi3+0x98>
 8012ae0:	80a0983a 	sll	r16,r16,r2
 8012ae4:	98c6d83a 	srl	r3,r19,r3
 8012ae8:	30a4983a 	sll	r18,r6,r2
 8012aec:	98a2983a 	sll	r17,r19,r2
 8012af0:	80ecb03a 	or	r22,r16,r3
 8012af4:	902ad43a 	srli	r21,r18,16
 8012af8:	b009883a 	mov	r4,r22
 8012afc:	953fffcc 	andi	r20,r18,65535
 8012b00:	a80b883a 	mov	r5,r21
 8012b04:	8003eac0 	call	8003eac <__umodsi3>
 8012b08:	b009883a 	mov	r4,r22
 8012b0c:	a80b883a 	mov	r5,r21
 8012b10:	1027883a 	mov	r19,r2
 8012b14:	8003ea40 	call	8003ea4 <__udivsi3>
 8012b18:	1021883a 	mov	r16,r2
 8012b1c:	8806d43a 	srli	r3,r17,16
 8012b20:	9804943a 	slli	r2,r19,16
 8012b24:	8527383a 	mul	r19,r16,r20
 8012b28:	10c4b03a 	or	r2,r2,r3
 8012b2c:	14c0052e 	bgeu	r2,r19,8012b44 <__udivdi3+0xe8>
 8012b30:	1485883a 	add	r2,r2,r18
 8012b34:	80ffffc4 	addi	r3,r16,-1
 8012b38:	14800136 	bltu	r2,r18,8012b40 <__udivdi3+0xe4>
 8012b3c:	14c13436 	bltu	r2,r19,8013010 <__udivdi3+0x5b4>
 8012b40:	1821883a 	mov	r16,r3
 8012b44:	14e7c83a 	sub	r19,r2,r19
 8012b48:	9809883a 	mov	r4,r19
 8012b4c:	a80b883a 	mov	r5,r21
 8012b50:	8003eac0 	call	8003eac <__umodsi3>
 8012b54:	102d883a 	mov	r22,r2
 8012b58:	9809883a 	mov	r4,r19
 8012b5c:	a80b883a 	mov	r5,r21
 8012b60:	8003ea40 	call	8003ea4 <__udivsi3>
 8012b64:	b02c943a 	slli	r22,r22,16
 8012b68:	1529383a 	mul	r20,r2,r20
 8012b6c:	8c7fffcc 	andi	r17,r17,65535
 8012b70:	b462b03a 	or	r17,r22,r17
 8012b74:	8d00052e 	bgeu	r17,r20,8012b8c <__udivdi3+0x130>
 8012b78:	8ca3883a 	add	r17,r17,r18
 8012b7c:	10ffffc4 	addi	r3,r2,-1
 8012b80:	8c80f636 	bltu	r17,r18,8012f5c <__udivdi3+0x500>
 8012b84:	8d00f52e 	bgeu	r17,r20,8012f5c <__udivdi3+0x500>
 8012b88:	10bfff84 	addi	r2,r2,-2
 8012b8c:	8020943a 	slli	r16,r16,16
 8012b90:	0007883a 	mov	r3,zero
 8012b94:	1404b03a 	or	r2,r2,r16
 8012b98:	00005b06 	br	8012d08 <__udivdi3+0x2ac>
 8012b9c:	29c05836 	bltu	r5,r7,8012d00 <__udivdi3+0x2a4>
 8012ba0:	00bfffd4 	movui	r2,65535
 8012ba4:	11c0642e 	bgeu	r2,r7,8012d38 <__udivdi3+0x2dc>
 8012ba8:	00804034 	movhi	r2,256
 8012bac:	10bfffc4 	addi	r2,r2,-1
 8012bb0:	11c0f32e 	bgeu	r2,r7,8012f80 <__udivdi3+0x524>
 8012bb4:	00c00604 	movi	r3,24
 8012bb8:	180b883a 	mov	r5,r3
 8012bbc:	38c6d83a 	srl	r3,r7,r3
 8012bc0:	008200b4 	movhi	r2,2050
 8012bc4:	1085a004 	addi	r2,r2,5760
 8012bc8:	10c7883a 	add	r3,r2,r3
 8012bcc:	18c00003 	ldbu	r3,0(r3)
 8012bd0:	01000804 	movi	r4,32
 8012bd4:	1947883a 	add	r3,r3,r5
 8012bd8:	20e5c83a 	sub	r18,r4,r3
 8012bdc:	9000661e 	bne	r18,zero,8012d78 <__udivdi3+0x31c>
 8012be0:	3c00f936 	bltu	r7,r16,8012fc8 <__udivdi3+0x56c>
 8012be4:	9985403a 	cmpgeu	r2,r19,r6
 8012be8:	0007883a 	mov	r3,zero
 8012bec:	00004606 	br	8012d08 <__udivdi3+0x2ac>
 8012bf0:	3000041e 	bne	r6,zero,8012c04 <__udivdi3+0x1a8>
 8012bf4:	01000044 	movi	r4,1
 8012bf8:	000b883a 	mov	r5,zero
 8012bfc:	8003ea40 	call	8003ea4 <__udivsi3>
 8012c00:	1025883a 	mov	r18,r2
 8012c04:	00bfffd4 	movui	r2,65535
 8012c08:	1480562e 	bgeu	r2,r18,8012d64 <__udivdi3+0x308>
 8012c0c:	00804034 	movhi	r2,256
 8012c10:	10bfffc4 	addi	r2,r2,-1
 8012c14:	1480e32e 	bgeu	r2,r18,8012fa4 <__udivdi3+0x548>
 8012c18:	00800604 	movi	r2,24
 8012c1c:	1007883a 	mov	r3,r2
 8012c20:	9084d83a 	srl	r2,r18,r2
 8012c24:	010200b4 	movhi	r4,2050
 8012c28:	2105a004 	addi	r4,r4,5760
 8012c2c:	2085883a 	add	r2,r4,r2
 8012c30:	10800003 	ldbu	r2,0(r2)
 8012c34:	10c5883a 	add	r2,r2,r3
 8012c38:	00c00804 	movi	r3,32
 8012c3c:	1887c83a 	sub	r3,r3,r2
 8012c40:	1800911e 	bne	r3,zero,8012e88 <__udivdi3+0x42c>
 8012c44:	9028d43a 	srli	r20,r18,16
 8012c48:	84a1c83a 	sub	r16,r16,r18
 8012c4c:	957fffcc 	andi	r21,r18,65535
 8012c50:	00c00044 	movi	r3,1
 8012c54:	8009883a 	mov	r4,r16
 8012c58:	a00b883a 	mov	r5,r20
 8012c5c:	d8c00015 	stw	r3,0(sp)
 8012c60:	8003eac0 	call	8003eac <__umodsi3>
 8012c64:	8009883a 	mov	r4,r16
 8012c68:	a00b883a 	mov	r5,r20
 8012c6c:	1027883a 	mov	r19,r2
 8012c70:	8003ea40 	call	8003ea4 <__udivsi3>
 8012c74:	1021883a 	mov	r16,r2
 8012c78:	880cd43a 	srli	r6,r17,16
 8012c7c:	9804943a 	slli	r2,r19,16
 8012c80:	8567383a 	mul	r19,r16,r21
 8012c84:	d8c00017 	ldw	r3,0(sp)
 8012c88:	1188b03a 	or	r4,r2,r6
 8012c8c:	24c0052e 	bgeu	r4,r19,8012ca4 <__udivdi3+0x248>
 8012c90:	2489883a 	add	r4,r4,r18
 8012c94:	80bfffc4 	addi	r2,r16,-1
 8012c98:	24800136 	bltu	r4,r18,8012ca0 <__udivdi3+0x244>
 8012c9c:	24c0d936 	bltu	r4,r19,8013004 <__udivdi3+0x5a8>
 8012ca0:	1021883a 	mov	r16,r2
 8012ca4:	24e7c83a 	sub	r19,r4,r19
 8012ca8:	9809883a 	mov	r4,r19
 8012cac:	a00b883a 	mov	r5,r20
 8012cb0:	d8c00015 	stw	r3,0(sp)
 8012cb4:	8003eac0 	call	8003eac <__umodsi3>
 8012cb8:	102d883a 	mov	r22,r2
 8012cbc:	9809883a 	mov	r4,r19
 8012cc0:	a00b883a 	mov	r5,r20
 8012cc4:	8003ea40 	call	8003ea4 <__udivsi3>
 8012cc8:	b02c943a 	slli	r22,r22,16
 8012ccc:	156b383a 	mul	r21,r2,r21
 8012cd0:	8c7fffcc 	andi	r17,r17,65535
 8012cd4:	b462b03a 	or	r17,r22,r17
 8012cd8:	d8c00017 	ldw	r3,0(sp)
 8012cdc:	8d40052e 	bgeu	r17,r21,8012cf4 <__udivdi3+0x298>
 8012ce0:	8ca3883a 	add	r17,r17,r18
 8012ce4:	113fffc4 	addi	r4,r2,-1
 8012ce8:	8c809a36 	bltu	r17,r18,8012f54 <__udivdi3+0x4f8>
 8012cec:	8d40992e 	bgeu	r17,r21,8012f54 <__udivdi3+0x4f8>
 8012cf0:	10bfff84 	addi	r2,r2,-2
 8012cf4:	8020943a 	slli	r16,r16,16
 8012cf8:	1404b03a 	or	r2,r2,r16
 8012cfc:	00000206 	br	8012d08 <__udivdi3+0x2ac>
 8012d00:	0007883a 	mov	r3,zero
 8012d04:	0005883a 	mov	r2,zero
 8012d08:	dfc00a17 	ldw	ra,40(sp)
 8012d0c:	df000917 	ldw	fp,36(sp)
 8012d10:	ddc00817 	ldw	r23,32(sp)
 8012d14:	dd800717 	ldw	r22,28(sp)
 8012d18:	dd400617 	ldw	r21,24(sp)
 8012d1c:	dd000517 	ldw	r20,20(sp)
 8012d20:	dcc00417 	ldw	r19,16(sp)
 8012d24:	dc800317 	ldw	r18,12(sp)
 8012d28:	dc400217 	ldw	r17,8(sp)
 8012d2c:	dc000117 	ldw	r16,4(sp)
 8012d30:	dec00b04 	addi	sp,sp,44
 8012d34:	f800283a 	ret
 8012d38:	00803fc4 	movi	r2,255
 8012d3c:	11c0932e 	bgeu	r2,r7,8012f8c <__udivdi3+0x530>
 8012d40:	00c00204 	movi	r3,8
 8012d44:	180b883a 	mov	r5,r3
 8012d48:	003f9c06 	br	8012bbc <__alt_data_end+0xfc012bbc>
 8012d4c:	00804034 	movhi	r2,256
 8012d50:	10bfffc4 	addi	r2,r2,-1
 8012d54:	1180902e 	bgeu	r2,r6,8012f98 <__udivdi3+0x53c>
 8012d58:	00800604 	movi	r2,24
 8012d5c:	1007883a 	mov	r3,r2
 8012d60:	003f5606 	br	8012abc <__alt_data_end+0xfc012abc>
 8012d64:	00803fc4 	movi	r2,255
 8012d68:	1480912e 	bgeu	r2,r18,8012fb0 <__udivdi3+0x554>
 8012d6c:	00800204 	movi	r2,8
 8012d70:	1007883a 	mov	r3,r2
 8012d74:	003faa06 	br	8012c20 <__alt_data_end+0xfc012c20>
 8012d78:	30eed83a 	srl	r23,r6,r3
 8012d7c:	3c8e983a 	sll	r7,r7,r18
 8012d80:	80f8d83a 	srl	fp,r16,r3
 8012d84:	98c6d83a 	srl	r3,r19,r3
 8012d88:	3deeb03a 	or	r23,r7,r23
 8012d8c:	b828d43a 	srli	r20,r23,16
 8012d90:	84a0983a 	sll	r16,r16,r18
 8012d94:	e009883a 	mov	r4,fp
 8012d98:	a00b883a 	mov	r5,r20
 8012d9c:	80e2b03a 	or	r17,r16,r3
 8012da0:	34aa983a 	sll	r21,r6,r18
 8012da4:	8003eac0 	call	8003eac <__umodsi3>
 8012da8:	e009883a 	mov	r4,fp
 8012dac:	a00b883a 	mov	r5,r20
 8012db0:	102d883a 	mov	r22,r2
 8012db4:	8003ea40 	call	8003ea4 <__udivsi3>
 8012db8:	1021883a 	mov	r16,r2
 8012dbc:	bf3fffcc 	andi	fp,r23,65535
 8012dc0:	b004943a 	slli	r2,r22,16
 8012dc4:	8808d43a 	srli	r4,r17,16
 8012dc8:	872d383a 	mul	r22,r16,fp
 8012dcc:	1104b03a 	or	r2,r2,r4
 8012dd0:	1580042e 	bgeu	r2,r22,8012de4 <__udivdi3+0x388>
 8012dd4:	15c5883a 	add	r2,r2,r23
 8012dd8:	80ffffc4 	addi	r3,r16,-1
 8012ddc:	15c0812e 	bgeu	r2,r23,8012fe4 <__udivdi3+0x588>
 8012de0:	1821883a 	mov	r16,r3
 8012de4:	15adc83a 	sub	r22,r2,r22
 8012de8:	b009883a 	mov	r4,r22
 8012dec:	a00b883a 	mov	r5,r20
 8012df0:	8003eac0 	call	8003eac <__umodsi3>
 8012df4:	a00b883a 	mov	r5,r20
 8012df8:	b009883a 	mov	r4,r22
 8012dfc:	d8800015 	stw	r2,0(sp)
 8012e00:	8003ea40 	call	8003ea4 <__udivsi3>
 8012e04:	d8c00017 	ldw	r3,0(sp)
 8012e08:	170b383a 	mul	r5,r2,fp
 8012e0c:	8c7fffcc 	andi	r17,r17,65535
 8012e10:	1806943a 	slli	r3,r3,16
 8012e14:	1c46b03a 	or	r3,r3,r17
 8012e18:	1940042e 	bgeu	r3,r5,8012e2c <__udivdi3+0x3d0>
 8012e1c:	1dc7883a 	add	r3,r3,r23
 8012e20:	113fffc4 	addi	r4,r2,-1
 8012e24:	1dc06b2e 	bgeu	r3,r23,8012fd4 <__udivdi3+0x578>
 8012e28:	2005883a 	mov	r2,r4
 8012e2c:	8020943a 	slli	r16,r16,16
 8012e30:	a9ffffcc 	andi	r7,r21,65535
 8012e34:	a82ad43a 	srli	r21,r21,16
 8012e38:	1404b03a 	or	r2,r2,r16
 8012e3c:	113fffcc 	andi	r4,r2,65535
 8012e40:	100cd43a 	srli	r6,r2,16
 8012e44:	21d3383a 	mul	r9,r4,r7
 8012e48:	2549383a 	mul	r4,r4,r21
 8012e4c:	31cf383a 	mul	r7,r6,r7
 8012e50:	4810d43a 	srli	r8,r9,16
 8012e54:	1947c83a 	sub	r3,r3,r5
 8012e58:	3909883a 	add	r4,r7,r4
 8012e5c:	2209883a 	add	r4,r4,r8
 8012e60:	354d383a 	mul	r6,r6,r21
 8012e64:	21c0022e 	bgeu	r4,r7,8012e70 <__udivdi3+0x414>
 8012e68:	01400074 	movhi	r5,1
 8012e6c:	314d883a 	add	r6,r6,r5
 8012e70:	202ad43a 	srli	r21,r4,16
 8012e74:	354d883a 	add	r6,r6,r21
 8012e78:	19803f36 	bltu	r3,r6,8012f78 <__udivdi3+0x51c>
 8012e7c:	19803926 	beq	r3,r6,8012f64 <__udivdi3+0x508>
 8012e80:	0007883a 	mov	r3,zero
 8012e84:	003fa006 	br	8012d08 <__alt_data_end+0xfc012d08>
 8012e88:	90e4983a 	sll	r18,r18,r3
 8012e8c:	80aad83a 	srl	r21,r16,r2
 8012e90:	80e0983a 	sll	r16,r16,r3
 8012e94:	9028d43a 	srli	r20,r18,16
 8012e98:	9884d83a 	srl	r2,r19,r2
 8012e9c:	a809883a 	mov	r4,r21
 8012ea0:	a00b883a 	mov	r5,r20
 8012ea4:	80acb03a 	or	r22,r16,r2
 8012ea8:	98e2983a 	sll	r17,r19,r3
 8012eac:	8003eac0 	call	8003eac <__umodsi3>
 8012eb0:	a809883a 	mov	r4,r21
 8012eb4:	a00b883a 	mov	r5,r20
 8012eb8:	1021883a 	mov	r16,r2
 8012ebc:	8003ea40 	call	8003ea4 <__udivsi3>
 8012ec0:	957fffcc 	andi	r21,r18,65535
 8012ec4:	8020943a 	slli	r16,r16,16
 8012ec8:	b00ad43a 	srli	r5,r22,16
 8012ecc:	1567383a 	mul	r19,r2,r21
 8012ed0:	102f883a 	mov	r23,r2
 8012ed4:	8148b03a 	or	r4,r16,r5
 8012ed8:	24c0062e 	bgeu	r4,r19,8012ef4 <__udivdi3+0x498>
 8012edc:	2489883a 	add	r4,r4,r18
 8012ee0:	10bfffc4 	addi	r2,r2,-1
 8012ee4:	24804536 	bltu	r4,r18,8012ffc <__udivdi3+0x5a0>
 8012ee8:	24c0442e 	bgeu	r4,r19,8012ffc <__udivdi3+0x5a0>
 8012eec:	bdffff84 	addi	r23,r23,-2
 8012ef0:	2489883a 	add	r4,r4,r18
 8012ef4:	24e7c83a 	sub	r19,r4,r19
 8012ef8:	9809883a 	mov	r4,r19
 8012efc:	a00b883a 	mov	r5,r20
 8012f00:	8003eac0 	call	8003eac <__umodsi3>
 8012f04:	1021883a 	mov	r16,r2
 8012f08:	9809883a 	mov	r4,r19
 8012f0c:	a00b883a 	mov	r5,r20
 8012f10:	8003ea40 	call	8003ea4 <__udivsi3>
 8012f14:	8020943a 	slli	r16,r16,16
 8012f18:	1007883a 	mov	r3,r2
 8012f1c:	1545383a 	mul	r2,r2,r21
 8012f20:	b13fffcc 	andi	r4,r22,65535
 8012f24:	8108b03a 	or	r4,r16,r4
 8012f28:	2080062e 	bgeu	r4,r2,8012f44 <__udivdi3+0x4e8>
 8012f2c:	2489883a 	add	r4,r4,r18
 8012f30:	197fffc4 	addi	r5,r3,-1
 8012f34:	24802f36 	bltu	r4,r18,8012ff4 <__udivdi3+0x598>
 8012f38:	20802e2e 	bgeu	r4,r2,8012ff4 <__udivdi3+0x598>
 8012f3c:	18ffff84 	addi	r3,r3,-2
 8012f40:	2489883a 	add	r4,r4,r18
 8012f44:	b82e943a 	slli	r23,r23,16
 8012f48:	20a1c83a 	sub	r16,r4,r2
 8012f4c:	1dc6b03a 	or	r3,r3,r23
 8012f50:	003f4006 	br	8012c54 <__alt_data_end+0xfc012c54>
 8012f54:	2005883a 	mov	r2,r4
 8012f58:	003f6606 	br	8012cf4 <__alt_data_end+0xfc012cf4>
 8012f5c:	1805883a 	mov	r2,r3
 8012f60:	003f0a06 	br	8012b8c <__alt_data_end+0xfc012b8c>
 8012f64:	2006943a 	slli	r3,r4,16
 8012f68:	9c88983a 	sll	r4,r19,r18
 8012f6c:	4a7fffcc 	andi	r9,r9,65535
 8012f70:	1a47883a 	add	r3,r3,r9
 8012f74:	20ffc22e 	bgeu	r4,r3,8012e80 <__alt_data_end+0xfc012e80>
 8012f78:	10bfffc4 	addi	r2,r2,-1
 8012f7c:	003fc006 	br	8012e80 <__alt_data_end+0xfc012e80>
 8012f80:	00c00404 	movi	r3,16
 8012f84:	180b883a 	mov	r5,r3
 8012f88:	003f0c06 	br	8012bbc <__alt_data_end+0xfc012bbc>
 8012f8c:	0007883a 	mov	r3,zero
 8012f90:	000b883a 	mov	r5,zero
 8012f94:	003f0906 	br	8012bbc <__alt_data_end+0xfc012bbc>
 8012f98:	00800404 	movi	r2,16
 8012f9c:	1007883a 	mov	r3,r2
 8012fa0:	003ec606 	br	8012abc <__alt_data_end+0xfc012abc>
 8012fa4:	00800404 	movi	r2,16
 8012fa8:	1007883a 	mov	r3,r2
 8012fac:	003f1c06 	br	8012c20 <__alt_data_end+0xfc012c20>
 8012fb0:	0005883a 	mov	r2,zero
 8012fb4:	0007883a 	mov	r3,zero
 8012fb8:	003f1906 	br	8012c20 <__alt_data_end+0xfc012c20>
 8012fbc:	0005883a 	mov	r2,zero
 8012fc0:	0007883a 	mov	r3,zero
 8012fc4:	003ebd06 	br	8012abc <__alt_data_end+0xfc012abc>
 8012fc8:	0007883a 	mov	r3,zero
 8012fcc:	00800044 	movi	r2,1
 8012fd0:	003f4d06 	br	8012d08 <__alt_data_end+0xfc012d08>
 8012fd4:	197f942e 	bgeu	r3,r5,8012e28 <__alt_data_end+0xfc012e28>
 8012fd8:	10bfff84 	addi	r2,r2,-2
 8012fdc:	1dc7883a 	add	r3,r3,r23
 8012fe0:	003f9206 	br	8012e2c <__alt_data_end+0xfc012e2c>
 8012fe4:	15bf7e2e 	bgeu	r2,r22,8012de0 <__alt_data_end+0xfc012de0>
 8012fe8:	843fff84 	addi	r16,r16,-2
 8012fec:	15c5883a 	add	r2,r2,r23
 8012ff0:	003f7c06 	br	8012de4 <__alt_data_end+0xfc012de4>
 8012ff4:	2807883a 	mov	r3,r5
 8012ff8:	003fd206 	br	8012f44 <__alt_data_end+0xfc012f44>
 8012ffc:	102f883a 	mov	r23,r2
 8013000:	003fbc06 	br	8012ef4 <__alt_data_end+0xfc012ef4>
 8013004:	843fff84 	addi	r16,r16,-2
 8013008:	2489883a 	add	r4,r4,r18
 801300c:	003f2506 	br	8012ca4 <__alt_data_end+0xfc012ca4>
 8013010:	843fff84 	addi	r16,r16,-2
 8013014:	1485883a 	add	r2,r2,r18
 8013018:	003eca06 	br	8012b44 <__alt_data_end+0xfc012b44>

0801301c <__umoddi3>:
 801301c:	defff404 	addi	sp,sp,-48
 8013020:	ddc00915 	stw	r23,36(sp)
 8013024:	dc400315 	stw	r17,12(sp)
 8013028:	dc000215 	stw	r16,8(sp)
 801302c:	dfc00b15 	stw	ra,44(sp)
 8013030:	df000a15 	stw	fp,40(sp)
 8013034:	dd800815 	stw	r22,32(sp)
 8013038:	dd400715 	stw	r21,28(sp)
 801303c:	dd000615 	stw	r20,24(sp)
 8013040:	dcc00515 	stw	r19,20(sp)
 8013044:	dc800415 	stw	r18,16(sp)
 8013048:	2021883a 	mov	r16,r4
 801304c:	2823883a 	mov	r17,r5
 8013050:	282f883a 	mov	r23,r5
 8013054:	3800381e 	bne	r7,zero,8013138 <__umoddi3+0x11c>
 8013058:	3027883a 	mov	r19,r6
 801305c:	2029883a 	mov	r20,r4
 8013060:	29804e2e 	bgeu	r5,r6,801319c <__umoddi3+0x180>
 8013064:	00bfffd4 	movui	r2,65535
 8013068:	11809c36 	bltu	r2,r6,80132dc <__umoddi3+0x2c0>
 801306c:	00803fc4 	movi	r2,255
 8013070:	11813b2e 	bgeu	r2,r6,8013560 <__umoddi3+0x544>
 8013074:	01400204 	movi	r5,8
 8013078:	2805883a 	mov	r2,r5
 801307c:	314ad83a 	srl	r5,r6,r5
 8013080:	00c200b4 	movhi	r3,2050
 8013084:	18c5a004 	addi	r3,r3,5760
 8013088:	194b883a 	add	r5,r3,r5
 801308c:	29000003 	ldbu	r4,0(r5)
 8013090:	2089883a 	add	r4,r4,r2
 8013094:	00800804 	movi	r2,32
 8013098:	1105c83a 	sub	r2,r2,r4
 801309c:	1000ec26 	beq	r2,zero,8013450 <__umoddi3+0x434>
 80130a0:	88a2983a 	sll	r17,r17,r2
 80130a4:	8108d83a 	srl	r4,r16,r4
 80130a8:	30a6983a 	sll	r19,r6,r2
 80130ac:	80a8983a 	sll	r20,r16,r2
 80130b0:	1025883a 	mov	r18,r2
 80130b4:	892eb03a 	or	r23,r17,r4
 80130b8:	982cd43a 	srli	r22,r19,16
 80130bc:	b809883a 	mov	r4,r23
 80130c0:	9d7fffcc 	andi	r21,r19,65535
 80130c4:	b00b883a 	mov	r5,r22
 80130c8:	8003eac0 	call	8003eac <__umodsi3>
 80130cc:	b809883a 	mov	r4,r23
 80130d0:	b00b883a 	mov	r5,r22
 80130d4:	1021883a 	mov	r16,r2
 80130d8:	8003ea40 	call	8003ea4 <__udivsi3>
 80130dc:	8020943a 	slli	r16,r16,16
 80130e0:	a00cd43a 	srli	r6,r20,16
 80130e4:	1545383a 	mul	r2,r2,r21
 80130e8:	8188b03a 	or	r4,r16,r6
 80130ec:	2080042e 	bgeu	r4,r2,8013100 <__umoddi3+0xe4>
 80130f0:	24c9883a 	add	r4,r4,r19
 80130f4:	24c00236 	bltu	r4,r19,8013100 <__umoddi3+0xe4>
 80130f8:	2080012e 	bgeu	r4,r2,8013100 <__umoddi3+0xe4>
 80130fc:	24c9883a 	add	r4,r4,r19
 8013100:	20a3c83a 	sub	r17,r4,r2
 8013104:	8809883a 	mov	r4,r17
 8013108:	b00b883a 	mov	r5,r22
 801310c:	8003eac0 	call	8003eac <__umodsi3>
 8013110:	8809883a 	mov	r4,r17
 8013114:	b00b883a 	mov	r5,r22
 8013118:	1021883a 	mov	r16,r2
 801311c:	8003ea40 	call	8003ea4 <__udivsi3>
 8013120:	8006943a 	slli	r3,r16,16
 8013124:	1545383a 	mul	r2,r2,r21
 8013128:	a13fffcc 	andi	r4,r20,65535
 801312c:	1906b03a 	or	r3,r3,r4
 8013130:	1880532e 	bgeu	r3,r2,8013280 <__umoddi3+0x264>
 8013134:	00004e06 	br	8013270 <__umoddi3+0x254>
 8013138:	29c05536 	bltu	r5,r7,8013290 <__umoddi3+0x274>
 801313c:	00bfffd4 	movui	r2,65535
 8013140:	11c0612e 	bgeu	r2,r7,80132c8 <__umoddi3+0x2ac>
 8013144:	00804034 	movhi	r2,256
 8013148:	10bfffc4 	addi	r2,r2,-1
 801314c:	11c0f82e 	bgeu	r2,r7,8013530 <__umoddi3+0x514>
 8013150:	01400604 	movi	r5,24
 8013154:	282b883a 	mov	r21,r5
 8013158:	394ad83a 	srl	r5,r7,r5
 801315c:	00c200b4 	movhi	r3,2050
 8013160:	18c5a004 	addi	r3,r3,5760
 8013164:	194b883a 	add	r5,r3,r5
 8013168:	28800003 	ldbu	r2,0(r5)
 801316c:	00c00804 	movi	r3,32
 8013170:	156b883a 	add	r21,r2,r21
 8013174:	1d69c83a 	sub	r20,r3,r21
 8013178:	a000631e 	bne	r20,zero,8013308 <__umoddi3+0x2ec>
 801317c:	3c400136 	bltu	r7,r17,8013184 <__umoddi3+0x168>
 8013180:	81810436 	bltu	r16,r6,8013594 <__umoddi3+0x578>
 8013184:	8185c83a 	sub	r2,r16,r6
 8013188:	89e3c83a 	sub	r17,r17,r7
 801318c:	8087803a 	cmpltu	r3,r16,r2
 8013190:	88efc83a 	sub	r23,r17,r3
 8013194:	b807883a 	mov	r3,r23
 8013198:	00003f06 	br	8013298 <__umoddi3+0x27c>
 801319c:	3000041e 	bne	r6,zero,80131b0 <__umoddi3+0x194>
 80131a0:	01000044 	movi	r4,1
 80131a4:	000b883a 	mov	r5,zero
 80131a8:	8003ea40 	call	8003ea4 <__udivsi3>
 80131ac:	1027883a 	mov	r19,r2
 80131b0:	00bfffd4 	movui	r2,65535
 80131b4:	14c04f2e 	bgeu	r2,r19,80132f4 <__umoddi3+0x2d8>
 80131b8:	00804034 	movhi	r2,256
 80131bc:	10bfffc4 	addi	r2,r2,-1
 80131c0:	14c0e42e 	bgeu	r2,r19,8013554 <__umoddi3+0x538>
 80131c4:	00800604 	movi	r2,24
 80131c8:	1007883a 	mov	r3,r2
 80131cc:	9884d83a 	srl	r2,r19,r2
 80131d0:	010200b4 	movhi	r4,2050
 80131d4:	2105a004 	addi	r4,r4,5760
 80131d8:	2085883a 	add	r2,r4,r2
 80131dc:	11000003 	ldbu	r4,0(r2)
 80131e0:	00800804 	movi	r2,32
 80131e4:	20c7883a 	add	r3,r4,r3
 80131e8:	10c5c83a 	sub	r2,r2,r3
 80131ec:	10009a1e 	bne	r2,zero,8013458 <__umoddi3+0x43c>
 80131f0:	982cd43a 	srli	r22,r19,16
 80131f4:	8ce3c83a 	sub	r17,r17,r19
 80131f8:	9c3fffcc 	andi	r16,r19,65535
 80131fc:	0025883a 	mov	r18,zero
 8013200:	8809883a 	mov	r4,r17
 8013204:	b00b883a 	mov	r5,r22
 8013208:	8003eac0 	call	8003eac <__umodsi3>
 801320c:	8809883a 	mov	r4,r17
 8013210:	b00b883a 	mov	r5,r22
 8013214:	102b883a 	mov	r21,r2
 8013218:	8003ea40 	call	8003ea4 <__udivsi3>
 801321c:	a806943a 	slli	r3,r21,16
 8013220:	a008d43a 	srli	r4,r20,16
 8013224:	1405383a 	mul	r2,r2,r16
 8013228:	190cb03a 	or	r6,r3,r4
 801322c:	3080032e 	bgeu	r6,r2,801323c <__umoddi3+0x220>
 8013230:	34cd883a 	add	r6,r6,r19
 8013234:	34c00136 	bltu	r6,r19,801323c <__umoddi3+0x220>
 8013238:	3080d436 	bltu	r6,r2,801358c <__umoddi3+0x570>
 801323c:	30abc83a 	sub	r21,r6,r2
 8013240:	a809883a 	mov	r4,r21
 8013244:	b00b883a 	mov	r5,r22
 8013248:	8003eac0 	call	8003eac <__umodsi3>
 801324c:	1023883a 	mov	r17,r2
 8013250:	a809883a 	mov	r4,r21
 8013254:	b00b883a 	mov	r5,r22
 8013258:	8003ea40 	call	8003ea4 <__udivsi3>
 801325c:	8822943a 	slli	r17,r17,16
 8013260:	1405383a 	mul	r2,r2,r16
 8013264:	a13fffcc 	andi	r4,r20,65535
 8013268:	8906b03a 	or	r3,r17,r4
 801326c:	1880042e 	bgeu	r3,r2,8013280 <__umoddi3+0x264>
 8013270:	1cc7883a 	add	r3,r3,r19
 8013274:	1cc00236 	bltu	r3,r19,8013280 <__umoddi3+0x264>
 8013278:	1880012e 	bgeu	r3,r2,8013280 <__umoddi3+0x264>
 801327c:	1cc7883a 	add	r3,r3,r19
 8013280:	1887c83a 	sub	r3,r3,r2
 8013284:	1c84d83a 	srl	r2,r3,r18
 8013288:	0007883a 	mov	r3,zero
 801328c:	00000206 	br	8013298 <__umoddi3+0x27c>
 8013290:	2005883a 	mov	r2,r4
 8013294:	2807883a 	mov	r3,r5
 8013298:	dfc00b17 	ldw	ra,44(sp)
 801329c:	df000a17 	ldw	fp,40(sp)
 80132a0:	ddc00917 	ldw	r23,36(sp)
 80132a4:	dd800817 	ldw	r22,32(sp)
 80132a8:	dd400717 	ldw	r21,28(sp)
 80132ac:	dd000617 	ldw	r20,24(sp)
 80132b0:	dcc00517 	ldw	r19,20(sp)
 80132b4:	dc800417 	ldw	r18,16(sp)
 80132b8:	dc400317 	ldw	r17,12(sp)
 80132bc:	dc000217 	ldw	r16,8(sp)
 80132c0:	dec00c04 	addi	sp,sp,48
 80132c4:	f800283a 	ret
 80132c8:	00803fc4 	movi	r2,255
 80132cc:	11c0952e 	bgeu	r2,r7,8013524 <__umoddi3+0x508>
 80132d0:	01400204 	movi	r5,8
 80132d4:	282b883a 	mov	r21,r5
 80132d8:	003f9f06 	br	8013158 <__alt_data_end+0xfc013158>
 80132dc:	00804034 	movhi	r2,256
 80132e0:	10bfffc4 	addi	r2,r2,-1
 80132e4:	1180952e 	bgeu	r2,r6,801353c <__umoddi3+0x520>
 80132e8:	01400604 	movi	r5,24
 80132ec:	2805883a 	mov	r2,r5
 80132f0:	003f6206 	br	801307c <__alt_data_end+0xfc01307c>
 80132f4:	00803fc4 	movi	r2,255
 80132f8:	14c0932e 	bgeu	r2,r19,8013548 <__umoddi3+0x52c>
 80132fc:	00800204 	movi	r2,8
 8013300:	1007883a 	mov	r3,r2
 8013304:	003fb106 	br	80131cc <__alt_data_end+0xfc0131cc>
 8013308:	3548d83a 	srl	r4,r6,r21
 801330c:	3d0e983a 	sll	r7,r7,r20
 8013310:	8d10983a 	sll	r8,r17,r20
 8013314:	8d6cd83a 	srl	r22,r17,r21
 8013318:	3922b03a 	or	r17,r7,r4
 801331c:	882ed43a 	srli	r23,r17,16
 8013320:	8564d83a 	srl	r18,r16,r21
 8013324:	b009883a 	mov	r4,r22
 8013328:	b80b883a 	mov	r5,r23
 801332c:	44a4b03a 	or	r18,r8,r18
 8013330:	3526983a 	sll	r19,r6,r20
 8013334:	8003eac0 	call	8003eac <__umodsi3>
 8013338:	b009883a 	mov	r4,r22
 801333c:	b80b883a 	mov	r5,r23
 8013340:	1039883a 	mov	fp,r2
 8013344:	8003ea40 	call	8003ea4 <__udivsi3>
 8013348:	102d883a 	mov	r22,r2
 801334c:	8a3fffcc 	andi	r8,r17,65535
 8013350:	e004943a 	slli	r2,fp,16
 8013354:	900cd43a 	srli	r6,r18,16
 8013358:	b239383a 	mul	fp,r22,r8
 801335c:	8520983a 	sll	r16,r16,r20
 8013360:	118ab03a 	or	r5,r2,r6
 8013364:	2f00042e 	bgeu	r5,fp,8013378 <__umoddi3+0x35c>
 8013368:	2c4b883a 	add	r5,r5,r17
 801336c:	b0bfffc4 	addi	r2,r22,-1
 8013370:	2c40822e 	bgeu	r5,r17,801357c <__umoddi3+0x560>
 8013374:	102d883a 	mov	r22,r2
 8013378:	2f39c83a 	sub	fp,r5,fp
 801337c:	e009883a 	mov	r4,fp
 8013380:	b80b883a 	mov	r5,r23
 8013384:	da000115 	stw	r8,4(sp)
 8013388:	8003eac0 	call	8003eac <__umodsi3>
 801338c:	e009883a 	mov	r4,fp
 8013390:	b80b883a 	mov	r5,r23
 8013394:	d8800015 	stw	r2,0(sp)
 8013398:	8003ea40 	call	8003ea4 <__udivsi3>
 801339c:	d9800017 	ldw	r6,0(sp)
 80133a0:	da000117 	ldw	r8,4(sp)
 80133a4:	94bfffcc 	andi	r18,r18,65535
 80133a8:	300c943a 	slli	r6,r6,16
 80133ac:	1209383a 	mul	r4,r2,r8
 80133b0:	3490b03a 	or	r8,r6,r18
 80133b4:	4100042e 	bgeu	r8,r4,80133c8 <__umoddi3+0x3ac>
 80133b8:	4451883a 	add	r8,r8,r17
 80133bc:	10ffffc4 	addi	r3,r2,-1
 80133c0:	44406a2e 	bgeu	r8,r17,801356c <__umoddi3+0x550>
 80133c4:	1805883a 	mov	r2,r3
 80133c8:	b012943a 	slli	r9,r22,16
 80133cc:	9abfffcc 	andi	r10,r19,65535
 80133d0:	980ed43a 	srli	r7,r19,16
 80133d4:	124ab03a 	or	r5,r2,r9
 80133d8:	2a7fffcc 	andi	r9,r5,65535
 80133dc:	280ad43a 	srli	r5,r5,16
 80133e0:	4a8d383a 	mul	r6,r9,r10
 80133e4:	49d3383a 	mul	r9,r9,r7
 80133e8:	2a95383a 	mul	r10,r5,r10
 80133ec:	3004d43a 	srli	r2,r6,16
 80133f0:	4111c83a 	sub	r8,r8,r4
 80133f4:	5253883a 	add	r9,r10,r9
 80133f8:	4893883a 	add	r9,r9,r2
 80133fc:	29cb383a 	mul	r5,r5,r7
 8013400:	4a80022e 	bgeu	r9,r10,801340c <__umoddi3+0x3f0>
 8013404:	00800074 	movhi	r2,1
 8013408:	288b883a 	add	r5,r5,r2
 801340c:	4808d43a 	srli	r4,r9,16
 8013410:	4812943a 	slli	r9,r9,16
 8013414:	31bfffcc 	andi	r6,r6,65535
 8013418:	290b883a 	add	r5,r5,r4
 801341c:	498d883a 	add	r6,r9,r6
 8013420:	41403a36 	bltu	r8,r5,801350c <__umoddi3+0x4f0>
 8013424:	41405d26 	beq	r8,r5,801359c <__umoddi3+0x580>
 8013428:	4149c83a 	sub	r4,r8,r5
 801342c:	300f883a 	mov	r7,r6
 8013430:	81cfc83a 	sub	r7,r16,r7
 8013434:	81c7803a 	cmpltu	r3,r16,r7
 8013438:	20c7c83a 	sub	r3,r4,r3
 801343c:	1d44983a 	sll	r2,r3,r21
 8013440:	3d0ed83a 	srl	r7,r7,r20
 8013444:	1d06d83a 	srl	r3,r3,r20
 8013448:	11c4b03a 	or	r2,r2,r7
 801344c:	003f9206 	br	8013298 <__alt_data_end+0xfc013298>
 8013450:	0025883a 	mov	r18,zero
 8013454:	003f1806 	br	80130b8 <__alt_data_end+0xfc0130b8>
 8013458:	98a6983a 	sll	r19,r19,r2
 801345c:	88e8d83a 	srl	r20,r17,r3
 8013460:	80c6d83a 	srl	r3,r16,r3
 8013464:	982cd43a 	srli	r22,r19,16
 8013468:	88a2983a 	sll	r17,r17,r2
 801346c:	a009883a 	mov	r4,r20
 8013470:	b00b883a 	mov	r5,r22
 8013474:	88eab03a 	or	r21,r17,r3
 8013478:	1025883a 	mov	r18,r2
 801347c:	8003eac0 	call	8003eac <__umodsi3>
 8013480:	a009883a 	mov	r4,r20
 8013484:	b00b883a 	mov	r5,r22
 8013488:	1023883a 	mov	r17,r2
 801348c:	8003ea40 	call	8003ea4 <__udivsi3>
 8013490:	9f3fffcc 	andi	fp,r19,65535
 8013494:	8822943a 	slli	r17,r17,16
 8013498:	a80ad43a 	srli	r5,r21,16
 801349c:	1705383a 	mul	r2,r2,fp
 80134a0:	84a8983a 	sll	r20,r16,r18
 80134a4:	8948b03a 	or	r4,r17,r5
 80134a8:	2080042e 	bgeu	r4,r2,80134bc <__umoddi3+0x4a0>
 80134ac:	24c9883a 	add	r4,r4,r19
 80134b0:	24c00236 	bltu	r4,r19,80134bc <__umoddi3+0x4a0>
 80134b4:	2080012e 	bgeu	r4,r2,80134bc <__umoddi3+0x4a0>
 80134b8:	24c9883a 	add	r4,r4,r19
 80134bc:	20afc83a 	sub	r23,r4,r2
 80134c0:	b809883a 	mov	r4,r23
 80134c4:	b00b883a 	mov	r5,r22
 80134c8:	8003eac0 	call	8003eac <__umodsi3>
 80134cc:	1023883a 	mov	r17,r2
 80134d0:	b809883a 	mov	r4,r23
 80134d4:	b00b883a 	mov	r5,r22
 80134d8:	8003ea40 	call	8003ea4 <__udivsi3>
 80134dc:	8822943a 	slli	r17,r17,16
 80134e0:	1705383a 	mul	r2,r2,fp
 80134e4:	a93fffcc 	andi	r4,r21,65535
 80134e8:	8908b03a 	or	r4,r17,r4
 80134ec:	2080042e 	bgeu	r4,r2,8013500 <__umoddi3+0x4e4>
 80134f0:	24c9883a 	add	r4,r4,r19
 80134f4:	24c00236 	bltu	r4,r19,8013500 <__umoddi3+0x4e4>
 80134f8:	2080012e 	bgeu	r4,r2,8013500 <__umoddi3+0x4e4>
 80134fc:	24c9883a 	add	r4,r4,r19
 8013500:	20a3c83a 	sub	r17,r4,r2
 8013504:	e021883a 	mov	r16,fp
 8013508:	003f3d06 	br	8013200 <__alt_data_end+0xfc013200>
 801350c:	34cfc83a 	sub	r7,r6,r19
 8013510:	2c4bc83a 	sub	r5,r5,r17
 8013514:	31cd803a 	cmpltu	r6,r6,r7
 8013518:	298dc83a 	sub	r6,r5,r6
 801351c:	4189c83a 	sub	r4,r8,r6
 8013520:	003fc306 	br	8013430 <__alt_data_end+0xfc013430>
 8013524:	000b883a 	mov	r5,zero
 8013528:	002b883a 	mov	r21,zero
 801352c:	003f0a06 	br	8013158 <__alt_data_end+0xfc013158>
 8013530:	01400404 	movi	r5,16
 8013534:	282b883a 	mov	r21,r5
 8013538:	003f0706 	br	8013158 <__alt_data_end+0xfc013158>
 801353c:	01400404 	movi	r5,16
 8013540:	2805883a 	mov	r2,r5
 8013544:	003ecd06 	br	801307c <__alt_data_end+0xfc01307c>
 8013548:	0005883a 	mov	r2,zero
 801354c:	0007883a 	mov	r3,zero
 8013550:	003f1e06 	br	80131cc <__alt_data_end+0xfc0131cc>
 8013554:	00800404 	movi	r2,16
 8013558:	1007883a 	mov	r3,r2
 801355c:	003f1b06 	br	80131cc <__alt_data_end+0xfc0131cc>
 8013560:	000b883a 	mov	r5,zero
 8013564:	0005883a 	mov	r2,zero
 8013568:	003ec406 	br	801307c <__alt_data_end+0xfc01307c>
 801356c:	413f952e 	bgeu	r8,r4,80133c4 <__alt_data_end+0xfc0133c4>
 8013570:	10bfff84 	addi	r2,r2,-2
 8013574:	4451883a 	add	r8,r8,r17
 8013578:	003f9306 	br	80133c8 <__alt_data_end+0xfc0133c8>
 801357c:	2f3f7d2e 	bgeu	r5,fp,8013374 <__alt_data_end+0xfc013374>
 8013580:	b5bfff84 	addi	r22,r22,-2
 8013584:	2c4b883a 	add	r5,r5,r17
 8013588:	003f7b06 	br	8013378 <__alt_data_end+0xfc013378>
 801358c:	34cd883a 	add	r6,r6,r19
 8013590:	003f2a06 	br	801323c <__alt_data_end+0xfc01323c>
 8013594:	8005883a 	mov	r2,r16
 8013598:	003efe06 	br	8013194 <__alt_data_end+0xfc013194>
 801359c:	81bfdb36 	bltu	r16,r6,801350c <__alt_data_end+0xfc01350c>
 80135a0:	300f883a 	mov	r7,r6
 80135a4:	0009883a 	mov	r4,zero
 80135a8:	003fa106 	br	8013430 <__alt_data_end+0xfc013430>

080135ac <__eqsf2>:
 80135ac:	2006d5fa 	srli	r3,r4,23
 80135b0:	280cd5fa 	srli	r6,r5,23
 80135b4:	01c02034 	movhi	r7,128
 80135b8:	39ffffc4 	addi	r7,r7,-1
 80135bc:	18c03fcc 	andi	r3,r3,255
 80135c0:	02003fc4 	movi	r8,255
 80135c4:	3904703a 	and	r2,r7,r4
 80135c8:	31803fcc 	andi	r6,r6,255
 80135cc:	394e703a 	and	r7,r7,r5
 80135d0:	2008d7fa 	srli	r4,r4,31
 80135d4:	280ad7fa 	srli	r5,r5,31
 80135d8:	1a000c26 	beq	r3,r8,801360c <__eqsf2+0x60>
 80135dc:	02003fc4 	movi	r8,255
 80135e0:	32000326 	beq	r6,r8,80135f0 <__eqsf2+0x44>
 80135e4:	19800426 	beq	r3,r6,80135f8 <__eqsf2+0x4c>
 80135e8:	00800044 	movi	r2,1
 80135ec:	f800283a 	ret
 80135f0:	383ffd1e 	bne	r7,zero,80135e8 <__alt_data_end+0xfc0135e8>
 80135f4:	19bffc1e 	bne	r3,r6,80135e8 <__alt_data_end+0xfc0135e8>
 80135f8:	11fffb1e 	bne	r2,r7,80135e8 <__alt_data_end+0xfc0135e8>
 80135fc:	21400626 	beq	r4,r5,8013618 <__eqsf2+0x6c>
 8013600:	183ff91e 	bne	r3,zero,80135e8 <__alt_data_end+0xfc0135e8>
 8013604:	1004c03a 	cmpne	r2,r2,zero
 8013608:	f800283a 	ret
 801360c:	103ff326 	beq	r2,zero,80135dc <__alt_data_end+0xfc0135dc>
 8013610:	00800044 	movi	r2,1
 8013614:	f800283a 	ret
 8013618:	0005883a 	mov	r2,zero
 801361c:	f800283a 	ret

08013620 <__gesf2>:
 8013620:	2004d5fa 	srli	r2,r4,23
 8013624:	2806d5fa 	srli	r3,r5,23
 8013628:	01802034 	movhi	r6,128
 801362c:	31bfffc4 	addi	r6,r6,-1
 8013630:	10803fcc 	andi	r2,r2,255
 8013634:	01c03fc4 	movi	r7,255
 8013638:	3110703a 	and	r8,r6,r4
 801363c:	18c03fcc 	andi	r3,r3,255
 8013640:	314c703a 	and	r6,r6,r5
 8013644:	2008d7fa 	srli	r4,r4,31
 8013648:	280ad7fa 	srli	r5,r5,31
 801364c:	11c00926 	beq	r2,r7,8013674 <__gesf2+0x54>
 8013650:	19c01226 	beq	r3,r7,801369c <__gesf2+0x7c>
 8013654:	1000091e 	bne	r2,zero,801367c <__gesf2+0x5c>
 8013658:	4013003a 	cmpeq	r9,r8,zero
 801365c:	480f883a 	mov	r7,r9
 8013660:	1800091e 	bne	r3,zero,8013688 <__gesf2+0x68>
 8013664:	3000081e 	bne	r6,zero,8013688 <__gesf2+0x68>
 8013668:	48001026 	beq	r9,zero,80136ac <__gesf2+0x8c>
 801366c:	0005883a 	mov	r2,zero
 8013670:	f800283a 	ret
 8013674:	4000161e 	bne	r8,zero,80136d0 <__gesf2+0xb0>
 8013678:	18800826 	beq	r3,r2,801369c <__gesf2+0x7c>
 801367c:	1800091e 	bne	r3,zero,80136a4 <__gesf2+0x84>
 8013680:	000f883a 	mov	r7,zero
 8013684:	30000926 	beq	r6,zero,80136ac <__gesf2+0x8c>
 8013688:	29403fcc 	andi	r5,r5,255
 801368c:	38000626 	beq	r7,zero,80136a8 <__gesf2+0x88>
 8013690:	2800071e 	bne	r5,zero,80136b0 <__gesf2+0x90>
 8013694:	00bfffc4 	movi	r2,-1
 8013698:	f800283a 	ret
 801369c:	30000c1e 	bne	r6,zero,80136d0 <__gesf2+0xb0>
 80136a0:	103fed26 	beq	r2,zero,8013658 <__alt_data_end+0xfc013658>
 80136a4:	29403fcc 	andi	r5,r5,255
 80136a8:	21400326 	beq	r4,r5,80136b8 <__gesf2+0x98>
 80136ac:	203ff91e 	bne	r4,zero,8013694 <__alt_data_end+0xfc013694>
 80136b0:	00800044 	movi	r2,1
 80136b4:	f800283a 	ret
 80136b8:	18bffc16 	blt	r3,r2,80136ac <__alt_data_end+0xfc0136ac>
 80136bc:	10c00216 	blt	r2,r3,80136c8 <__gesf2+0xa8>
 80136c0:	323ffa36 	bltu	r6,r8,80136ac <__alt_data_end+0xfc0136ac>
 80136c4:	41bfe92e 	bgeu	r8,r6,801366c <__alt_data_end+0xfc01366c>
 80136c8:	203ff226 	beq	r4,zero,8013694 <__alt_data_end+0xfc013694>
 80136cc:	003ff806 	br	80136b0 <__alt_data_end+0xfc0136b0>
 80136d0:	00bfff84 	movi	r2,-2
 80136d4:	f800283a 	ret

080136d8 <__lesf2>:
 80136d8:	2004d5fa 	srli	r2,r4,23
 80136dc:	280cd5fa 	srli	r6,r5,23
 80136e0:	00c02034 	movhi	r3,128
 80136e4:	18ffffc4 	addi	r3,r3,-1
 80136e8:	10803fcc 	andi	r2,r2,255
 80136ec:	01c03fc4 	movi	r7,255
 80136f0:	1910703a 	and	r8,r3,r4
 80136f4:	31803fcc 	andi	r6,r6,255
 80136f8:	1946703a 	and	r3,r3,r5
 80136fc:	2008d7fa 	srli	r4,r4,31
 8013700:	280ad7fa 	srli	r5,r5,31
 8013704:	11c00a26 	beq	r2,r7,8013730 <__lesf2+0x58>
 8013708:	31c01526 	beq	r6,r7,8013760 <__lesf2+0x88>
 801370c:	10000a1e 	bne	r2,zero,8013738 <__lesf2+0x60>
 8013710:	4013003a 	cmpeq	r9,r8,zero
 8013714:	480f883a 	mov	r7,r9
 8013718:	30000d26 	beq	r6,zero,8013750 <__lesf2+0x78>
 801371c:	29403fcc 	andi	r5,r5,255
 8013720:	38001426 	beq	r7,zero,8013774 <__lesf2+0x9c>
 8013724:	2800081e 	bne	r5,zero,8013748 <__lesf2+0x70>
 8013728:	00bfffc4 	movi	r2,-1
 801372c:	f800283a 	ret
 8013730:	40000c1e 	bne	r8,zero,8013764 <__lesf2+0x8c>
 8013734:	30800a26 	beq	r6,r2,8013760 <__lesf2+0x88>
 8013738:	30000d1e 	bne	r6,zero,8013770 <__lesf2+0x98>
 801373c:	000f883a 	mov	r7,zero
 8013740:	183ff61e 	bne	r3,zero,801371c <__alt_data_end+0xfc01371c>
 8013744:	203ff81e 	bne	r4,zero,8013728 <__alt_data_end+0xfc013728>
 8013748:	00800044 	movi	r2,1
 801374c:	f800283a 	ret
 8013750:	183ff21e 	bne	r3,zero,801371c <__alt_data_end+0xfc01371c>
 8013754:	483ffb26 	beq	r9,zero,8013744 <__alt_data_end+0xfc013744>
 8013758:	0005883a 	mov	r2,zero
 801375c:	f800283a 	ret
 8013760:	18000226 	beq	r3,zero,801376c <__lesf2+0x94>
 8013764:	00800084 	movi	r2,2
 8013768:	f800283a 	ret
 801376c:	103fe826 	beq	r2,zero,8013710 <__alt_data_end+0xfc013710>
 8013770:	29403fcc 	andi	r5,r5,255
 8013774:	217ff31e 	bne	r4,r5,8013744 <__alt_data_end+0xfc013744>
 8013778:	30bff216 	blt	r6,r2,8013744 <__alt_data_end+0xfc013744>
 801377c:	11800216 	blt	r2,r6,8013788 <__lesf2+0xb0>
 8013780:	1a3ff036 	bltu	r3,r8,8013744 <__alt_data_end+0xfc013744>
 8013784:	40fff42e 	bgeu	r8,r3,8013758 <__alt_data_end+0xfc013758>
 8013788:	203fe726 	beq	r4,zero,8013728 <__alt_data_end+0xfc013728>
 801378c:	003fee06 	br	8013748 <__alt_data_end+0xfc013748>

08013790 <__eqdf2>:
 8013790:	2804d53a 	srli	r2,r5,20
 8013794:	3806d53a 	srli	r3,r7,20
 8013798:	02000434 	movhi	r8,16
 801379c:	423fffc4 	addi	r8,r8,-1
 80137a0:	1081ffcc 	andi	r2,r2,2047
 80137a4:	0241ffc4 	movi	r9,2047
 80137a8:	2a14703a 	and	r10,r5,r8
 80137ac:	18c1ffcc 	andi	r3,r3,2047
 80137b0:	3a10703a 	and	r8,r7,r8
 80137b4:	280ad7fa 	srli	r5,r5,31
 80137b8:	380ed7fa 	srli	r7,r7,31
 80137bc:	12400f26 	beq	r2,r9,80137fc <__eqdf2+0x6c>
 80137c0:	0241ffc4 	movi	r9,2047
 80137c4:	1a400326 	beq	r3,r9,80137d4 <__eqdf2+0x44>
 80137c8:	10c00526 	beq	r2,r3,80137e0 <__eqdf2+0x50>
 80137cc:	00800044 	movi	r2,1
 80137d0:	f800283a 	ret
 80137d4:	4192b03a 	or	r9,r8,r6
 80137d8:	483ffc1e 	bne	r9,zero,80137cc <__alt_data_end+0xfc0137cc>
 80137dc:	10fffb1e 	bne	r2,r3,80137cc <__alt_data_end+0xfc0137cc>
 80137e0:	523ffa1e 	bne	r10,r8,80137cc <__alt_data_end+0xfc0137cc>
 80137e4:	21bff91e 	bne	r4,r6,80137cc <__alt_data_end+0xfc0137cc>
 80137e8:	29c00826 	beq	r5,r7,801380c <__eqdf2+0x7c>
 80137ec:	103ff71e 	bne	r2,zero,80137cc <__alt_data_end+0xfc0137cc>
 80137f0:	5104b03a 	or	r2,r10,r4
 80137f4:	1004c03a 	cmpne	r2,r2,zero
 80137f8:	f800283a 	ret
 80137fc:	5112b03a 	or	r9,r10,r4
 8013800:	483fef26 	beq	r9,zero,80137c0 <__alt_data_end+0xfc0137c0>
 8013804:	00800044 	movi	r2,1
 8013808:	f800283a 	ret
 801380c:	0005883a 	mov	r2,zero
 8013810:	f800283a 	ret

08013814 <__ledf2>:
 8013814:	2804d53a 	srli	r2,r5,20
 8013818:	3810d53a 	srli	r8,r7,20
 801381c:	00c00434 	movhi	r3,16
 8013820:	18ffffc4 	addi	r3,r3,-1
 8013824:	0241ffc4 	movi	r9,2047
 8013828:	1081ffcc 	andi	r2,r2,2047
 801382c:	28d4703a 	and	r10,r5,r3
 8013830:	4250703a 	and	r8,r8,r9
 8013834:	38c6703a 	and	r3,r7,r3
 8013838:	280ad7fa 	srli	r5,r5,31
 801383c:	380ed7fa 	srli	r7,r7,31
 8013840:	12400b26 	beq	r2,r9,8013870 <__ledf2+0x5c>
 8013844:	42401926 	beq	r8,r9,80138ac <__ledf2+0x98>
 8013848:	10000c1e 	bne	r2,zero,801387c <__ledf2+0x68>
 801384c:	5112b03a 	or	r9,r10,r4
 8013850:	4813003a 	cmpeq	r9,r9,zero
 8013854:	4817883a 	mov	r11,r9
 8013858:	40000f26 	beq	r8,zero,8013898 <__ledf2+0x84>
 801385c:	39c03fcc 	andi	r7,r7,255
 8013860:	58001826 	beq	r11,zero,80138c4 <__ledf2+0xb0>
 8013864:	38000a1e 	bne	r7,zero,8013890 <__ledf2+0x7c>
 8013868:	00bfffc4 	movi	r2,-1
 801386c:	f800283a 	ret
 8013870:	5112b03a 	or	r9,r10,r4
 8013874:	48000f1e 	bne	r9,zero,80138b4 <__ledf2+0xa0>
 8013878:	40800c26 	beq	r8,r2,80138ac <__ledf2+0x98>
 801387c:	4000101e 	bne	r8,zero,80138c0 <__ledf2+0xac>
 8013880:	1992b03a 	or	r9,r3,r6
 8013884:	0017883a 	mov	r11,zero
 8013888:	483ff41e 	bne	r9,zero,801385c <__alt_data_end+0xfc01385c>
 801388c:	283ff61e 	bne	r5,zero,8013868 <__alt_data_end+0xfc013868>
 8013890:	00800044 	movi	r2,1
 8013894:	f800283a 	ret
 8013898:	1998b03a 	or	r12,r3,r6
 801389c:	603fef1e 	bne	r12,zero,801385c <__alt_data_end+0xfc01385c>
 80138a0:	483ffa26 	beq	r9,zero,801388c <__alt_data_end+0xfc01388c>
 80138a4:	0005883a 	mov	r2,zero
 80138a8:	f800283a 	ret
 80138ac:	1992b03a 	or	r9,r3,r6
 80138b0:	48000226 	beq	r9,zero,80138bc <__ledf2+0xa8>
 80138b4:	00800084 	movi	r2,2
 80138b8:	f800283a 	ret
 80138bc:	103fe326 	beq	r2,zero,801384c <__alt_data_end+0xfc01384c>
 80138c0:	39c03fcc 	andi	r7,r7,255
 80138c4:	29fff11e 	bne	r5,r7,801388c <__alt_data_end+0xfc01388c>
 80138c8:	40bff016 	blt	r8,r2,801388c <__alt_data_end+0xfc01388c>
 80138cc:	12000316 	blt	r2,r8,80138dc <__ledf2+0xc8>
 80138d0:	1abfee36 	bltu	r3,r10,801388c <__alt_data_end+0xfc01388c>
 80138d4:	50c00326 	beq	r10,r3,80138e4 <__ledf2+0xd0>
 80138d8:	50fff22e 	bgeu	r10,r3,80138a4 <__alt_data_end+0xfc0138a4>
 80138dc:	283fe226 	beq	r5,zero,8013868 <__alt_data_end+0xfc013868>
 80138e0:	003feb06 	br	8013890 <__alt_data_end+0xfc013890>
 80138e4:	313fe936 	bltu	r6,r4,801388c <__alt_data_end+0xfc01388c>
 80138e8:	21bfee2e 	bgeu	r4,r6,80138a4 <__alt_data_end+0xfc0138a4>
 80138ec:	283fde26 	beq	r5,zero,8013868 <__alt_data_end+0xfc013868>
 80138f0:	003fe706 	br	8013890 <__alt_data_end+0xfc013890>

080138f4 <__muldf3>:
 80138f4:	defff204 	addi	sp,sp,-56
 80138f8:	2804d53a 	srli	r2,r5,20
 80138fc:	dd800a15 	stw	r22,40(sp)
 8013900:	282cd7fa 	srli	r22,r5,31
 8013904:	dc000415 	stw	r16,16(sp)
 8013908:	04000434 	movhi	r16,16
 801390c:	df000c15 	stw	fp,48(sp)
 8013910:	dd000815 	stw	r20,32(sp)
 8013914:	dcc00715 	stw	r19,28(sp)
 8013918:	dc800615 	stw	r18,24(sp)
 801391c:	dc400515 	stw	r17,20(sp)
 8013920:	843fffc4 	addi	r16,r16,-1
 8013924:	dfc00d15 	stw	ra,52(sp)
 8013928:	ddc00b15 	stw	r23,44(sp)
 801392c:	dd400915 	stw	r21,36(sp)
 8013930:	1501ffcc 	andi	r20,r2,2047
 8013934:	2023883a 	mov	r17,r4
 8013938:	2025883a 	mov	r18,r4
 801393c:	2c20703a 	and	r16,r5,r16
 8013940:	b027883a 	mov	r19,r22
 8013944:	b7003fcc 	andi	fp,r22,255
 8013948:	a0005926 	beq	r20,zero,8013ab0 <__muldf3+0x1bc>
 801394c:	0081ffc4 	movi	r2,2047
 8013950:	a0803426 	beq	r20,r2,8013a24 <__muldf3+0x130>
 8013954:	84000434 	orhi	r16,r16,16
 8013958:	2004d77a 	srli	r2,r4,29
 801395c:	802090fa 	slli	r16,r16,3
 8013960:	202490fa 	slli	r18,r4,3
 8013964:	a53f0044 	addi	r20,r20,-1023
 8013968:	80a0b03a 	or	r16,r16,r2
 801396c:	002b883a 	mov	r21,zero
 8013970:	0015883a 	mov	r10,zero
 8013974:	3812d53a 	srli	r9,r7,20
 8013978:	3806d7fa 	srli	r3,r7,31
 801397c:	02000434 	movhi	r8,16
 8013980:	423fffc4 	addi	r8,r8,-1
 8013984:	4941ffcc 	andi	r5,r9,2047
 8013988:	302f883a 	mov	r23,r6
 801398c:	3a22703a 	and	r17,r7,r8
 8013990:	1ac03fcc 	andi	r11,r3,255
 8013994:	28006226 	beq	r5,zero,8013b20 <__muldf3+0x22c>
 8013998:	0081ffc4 	movi	r2,2047
 801399c:	28805a26 	beq	r5,r2,8013b08 <__muldf3+0x214>
 80139a0:	8a000434 	orhi	r8,r17,16
 80139a4:	3004d77a 	srli	r2,r6,29
 80139a8:	401090fa 	slli	r8,r8,3
 80139ac:	302e90fa 	slli	r23,r6,3
 80139b0:	297f0044 	addi	r5,r5,-1023
 80139b4:	40a2b03a 	or	r17,r8,r2
 80139b8:	0013883a 	mov	r9,zero
 80139bc:	4d4cb03a 	or	r6,r9,r21
 80139c0:	300c90ba 	slli	r6,r6,2
 80139c4:	02020074 	movhi	r8,2049
 80139c8:	420e7904 	addi	r8,r8,14820
 80139cc:	320d883a 	add	r6,r6,r8
 80139d0:	31800017 	ldw	r6,0(r6)
 80139d4:	a14b883a 	add	r5,r20,r5
 80139d8:	1dacf03a 	xor	r22,r3,r22
 80139dc:	2b000044 	addi	r12,r5,1
 80139e0:	3000683a 	jmp	r6
 80139e4:	08013c20 	cmpeqi	zero,at,1264
 80139e8:	08013c0c 	andi	zero,at,1264
 80139ec:	08013c0c 	andi	zero,at,1264
 80139f0:	08013bf8 	rdprs	zero,at,1263
 80139f4:	08013a40 	call	8013a4 <__alt_mem_sdram-0x77fec5c>
 80139f8:	08013a40 	call	8013a4 <__alt_mem_sdram-0x77fec5c>
 80139fc:	08013be0 	cmpeqi	zero,at,1263
 8013a00:	08013bf8 	rdprs	zero,at,1263
 8013a04:	08013a40 	call	8013a4 <__alt_mem_sdram-0x77fec5c>
 8013a08:	08013be0 	cmpeqi	zero,at,1263
 8013a0c:	08013a40 	call	8013a4 <__alt_mem_sdram-0x77fec5c>
 8013a10:	08013bf8 	rdprs	zero,at,1263
 8013a14:	08013a44 	addi	zero,at,1257
 8013a18:	08013a44 	addi	zero,at,1257
 8013a1c:	08013a44 	addi	zero,at,1257
 8013a20:	08013e1c 	xori	zero,at,1272
 8013a24:	8104b03a 	or	r2,r16,r4
 8013a28:	10006a1e 	bne	r2,zero,8013bd4 <__muldf3+0x2e0>
 8013a2c:	05400204 	movi	r21,8
 8013a30:	0021883a 	mov	r16,zero
 8013a34:	0025883a 	mov	r18,zero
 8013a38:	02800084 	movi	r10,2
 8013a3c:	003fcd06 	br	8013974 <__alt_data_end+0xfc013974>
 8013a40:	b039883a 	mov	fp,r22
 8013a44:	00800084 	movi	r2,2
 8013a48:	50804e1e 	bne	r10,r2,8013b84 <__muldf3+0x290>
 8013a4c:	e4c0004c 	andi	r19,fp,1
 8013a50:	0101ffc4 	movi	r4,2047
 8013a54:	0021883a 	mov	r16,zero
 8013a58:	0025883a 	mov	r18,zero
 8013a5c:	2008953a 	slli	r4,r4,20
 8013a60:	98c03fcc 	andi	r3,r19,255
 8013a64:	01400434 	movhi	r5,16
 8013a68:	297fffc4 	addi	r5,r5,-1
 8013a6c:	180697fa 	slli	r3,r3,31
 8013a70:	8160703a 	and	r16,r16,r5
 8013a74:	8120b03a 	or	r16,r16,r4
 8013a78:	80c6b03a 	or	r3,r16,r3
 8013a7c:	9005883a 	mov	r2,r18
 8013a80:	dfc00d17 	ldw	ra,52(sp)
 8013a84:	df000c17 	ldw	fp,48(sp)
 8013a88:	ddc00b17 	ldw	r23,44(sp)
 8013a8c:	dd800a17 	ldw	r22,40(sp)
 8013a90:	dd400917 	ldw	r21,36(sp)
 8013a94:	dd000817 	ldw	r20,32(sp)
 8013a98:	dcc00717 	ldw	r19,28(sp)
 8013a9c:	dc800617 	ldw	r18,24(sp)
 8013aa0:	dc400517 	ldw	r17,20(sp)
 8013aa4:	dc000417 	ldw	r16,16(sp)
 8013aa8:	dec00e04 	addi	sp,sp,56
 8013aac:	f800283a 	ret
 8013ab0:	8104b03a 	or	r2,r16,r4
 8013ab4:	10004226 	beq	r2,zero,8013bc0 <__muldf3+0x2cc>
 8013ab8:	8000f926 	beq	r16,zero,8013ea0 <__muldf3+0x5ac>
 8013abc:	8009883a 	mov	r4,r16
 8013ac0:	d9800315 	stw	r6,12(sp)
 8013ac4:	d9c00015 	stw	r7,0(sp)
 8013ac8:	8003d240 	call	8003d24 <__clzsi2>
 8013acc:	d9800317 	ldw	r6,12(sp)
 8013ad0:	d9c00017 	ldw	r7,0(sp)
 8013ad4:	1007883a 	mov	r3,r2
 8013ad8:	01000a04 	movi	r4,40
 8013adc:	18bffe04 	addi	r2,r3,-8
 8013ae0:	20c9c83a 	sub	r4,r4,r3
 8013ae4:	80a0983a 	sll	r16,r16,r2
 8013ae8:	8908d83a 	srl	r4,r17,r4
 8013aec:	88a4983a 	sll	r18,r17,r2
 8013af0:	2420b03a 	or	r16,r4,r16
 8013af4:	017f0344 	movi	r5,-1011
 8013af8:	28e9c83a 	sub	r20,r5,r3
 8013afc:	002b883a 	mov	r21,zero
 8013b00:	0015883a 	mov	r10,zero
 8013b04:	003f9b06 	br	8013974 <__alt_data_end+0xfc013974>
 8013b08:	8984b03a 	or	r2,r17,r6
 8013b0c:	10002a1e 	bne	r2,zero,8013bb8 <__muldf3+0x2c4>
 8013b10:	0023883a 	mov	r17,zero
 8013b14:	002f883a 	mov	r23,zero
 8013b18:	02400084 	movi	r9,2
 8013b1c:	003fa706 	br	80139bc <__alt_data_end+0xfc0139bc>
 8013b20:	8984b03a 	or	r2,r17,r6
 8013b24:	10002026 	beq	r2,zero,8013ba8 <__muldf3+0x2b4>
 8013b28:	8800cc26 	beq	r17,zero,8013e5c <__muldf3+0x568>
 8013b2c:	8809883a 	mov	r4,r17
 8013b30:	d8c00215 	stw	r3,8(sp)
 8013b34:	d9800315 	stw	r6,12(sp)
 8013b38:	da800015 	stw	r10,0(sp)
 8013b3c:	dac00115 	stw	r11,4(sp)
 8013b40:	8003d240 	call	8003d24 <__clzsi2>
 8013b44:	d8c00217 	ldw	r3,8(sp)
 8013b48:	d9800317 	ldw	r6,12(sp)
 8013b4c:	da800017 	ldw	r10,0(sp)
 8013b50:	dac00117 	ldw	r11,4(sp)
 8013b54:	1009883a 	mov	r4,r2
 8013b58:	01400a04 	movi	r5,40
 8013b5c:	25fffe04 	addi	r23,r4,-8
 8013b60:	290bc83a 	sub	r5,r5,r4
 8013b64:	8dd0983a 	sll	r8,r17,r23
 8013b68:	314ad83a 	srl	r5,r6,r5
 8013b6c:	35ee983a 	sll	r23,r6,r23
 8013b70:	2a22b03a 	or	r17,r5,r8
 8013b74:	017f0344 	movi	r5,-1011
 8013b78:	290bc83a 	sub	r5,r5,r4
 8013b7c:	0013883a 	mov	r9,zero
 8013b80:	003f8e06 	br	80139bc <__alt_data_end+0xfc0139bc>
 8013b84:	008000c4 	movi	r2,3
 8013b88:	50811d26 	beq	r10,r2,8014000 <__muldf3+0x70c>
 8013b8c:	00800044 	movi	r2,1
 8013b90:	5080e01e 	bne	r10,r2,8013f14 <__muldf3+0x620>
 8013b94:	e0a6703a 	and	r19,fp,r2
 8013b98:	0009883a 	mov	r4,zero
 8013b9c:	0021883a 	mov	r16,zero
 8013ba0:	0025883a 	mov	r18,zero
 8013ba4:	003fad06 	br	8013a5c <__alt_data_end+0xfc013a5c>
 8013ba8:	0023883a 	mov	r17,zero
 8013bac:	002f883a 	mov	r23,zero
 8013bb0:	02400044 	movi	r9,1
 8013bb4:	003f8106 	br	80139bc <__alt_data_end+0xfc0139bc>
 8013bb8:	024000c4 	movi	r9,3
 8013bbc:	003f7f06 	br	80139bc <__alt_data_end+0xfc0139bc>
 8013bc0:	05400104 	movi	r21,4
 8013bc4:	0021883a 	mov	r16,zero
 8013bc8:	0025883a 	mov	r18,zero
 8013bcc:	02800044 	movi	r10,1
 8013bd0:	003f6806 	br	8013974 <__alt_data_end+0xfc013974>
 8013bd4:	05400304 	movi	r21,12
 8013bd8:	028000c4 	movi	r10,3
 8013bdc:	003f6506 	br	8013974 <__alt_data_end+0xfc013974>
 8013be0:	04000434 	movhi	r16,16
 8013be4:	0027883a 	mov	r19,zero
 8013be8:	843fffc4 	addi	r16,r16,-1
 8013bec:	04bfffc4 	movi	r18,-1
 8013bf0:	0101ffc4 	movi	r4,2047
 8013bf4:	003f9906 	br	8013a5c <__alt_data_end+0xfc013a5c>
 8013bf8:	8821883a 	mov	r16,r17
 8013bfc:	b825883a 	mov	r18,r23
 8013c00:	5839883a 	mov	fp,r11
 8013c04:	4815883a 	mov	r10,r9
 8013c08:	003f8e06 	br	8013a44 <__alt_data_end+0xfc013a44>
 8013c0c:	8821883a 	mov	r16,r17
 8013c10:	b825883a 	mov	r18,r23
 8013c14:	b039883a 	mov	fp,r22
 8013c18:	4815883a 	mov	r10,r9
 8013c1c:	003f8906 	br	8013a44 <__alt_data_end+0xfc013a44>
 8013c20:	b80cd43a 	srli	r6,r23,16
 8013c24:	9006d43a 	srli	r3,r18,16
 8013c28:	90bfffcc 	andi	r2,r18,65535
 8013c2c:	bdffffcc 	andi	r23,r23,65535
 8013c30:	b891383a 	mul	r8,r23,r2
 8013c34:	b8c9383a 	mul	r4,r23,r3
 8013c38:	309b383a 	mul	r13,r6,r2
 8013c3c:	400ed43a 	srli	r7,r8,16
 8013c40:	30df383a 	mul	r15,r6,r3
 8013c44:	235b883a 	add	r13,r4,r13
 8013c48:	69db883a 	add	r13,r13,r7
 8013c4c:	6900022e 	bgeu	r13,r4,8013c58 <__muldf3+0x364>
 8013c50:	01000074 	movhi	r4,1
 8013c54:	791f883a 	add	r15,r15,r4
 8013c58:	8828d43a 	srli	r20,r17,16
 8013c5c:	8c7fffcc 	andi	r17,r17,65535
 8013c60:	888f383a 	mul	r7,r17,r2
 8013c64:	88d3383a 	mul	r9,r17,r3
 8013c68:	a0a5383a 	mul	r18,r20,r2
 8013c6c:	3816d43a 	srli	r11,r7,16
 8013c70:	6814943a 	slli	r10,r13,16
 8013c74:	4ca5883a 	add	r18,r9,r18
 8013c78:	423fffcc 	andi	r8,r8,65535
 8013c7c:	92e5883a 	add	r18,r18,r11
 8013c80:	6808d43a 	srli	r4,r13,16
 8013c84:	5215883a 	add	r10,r10,r8
 8013c88:	a0c7383a 	mul	r3,r20,r3
 8013c8c:	9240022e 	bgeu	r18,r9,8013c98 <__muldf3+0x3a4>
 8013c90:	00800074 	movhi	r2,1
 8013c94:	1887883a 	add	r3,r3,r2
 8013c98:	802ad43a 	srli	r21,r16,16
 8013c9c:	80bfffcc 	andi	r2,r16,65535
 8013ca0:	b893383a 	mul	r9,r23,r2
 8013ca4:	3091383a 	mul	r8,r6,r2
 8013ca8:	bd6f383a 	mul	r23,r23,r21
 8013cac:	9026943a 	slli	r19,r18,16
 8013cb0:	481ad43a 	srli	r13,r9,16
 8013cb4:	9024d43a 	srli	r18,r18,16
 8013cb8:	39ffffcc 	andi	r7,r7,65535
 8013cbc:	ba11883a 	add	r8,r23,r8
 8013cc0:	99e7883a 	add	r19,r19,r7
 8013cc4:	4351883a 	add	r8,r8,r13
 8013cc8:	1c97883a 	add	r11,r3,r18
 8013ccc:	354d383a 	mul	r6,r6,r21
 8013cd0:	9925883a 	add	r18,r19,r4
 8013cd4:	45c0022e 	bgeu	r8,r23,8013ce0 <__muldf3+0x3ec>
 8013cd8:	00c00074 	movhi	r3,1
 8013cdc:	30cd883a 	add	r6,r6,r3
 8013ce0:	8889383a 	mul	r4,r17,r2
 8013ce4:	8d63383a 	mul	r17,r17,r21
 8013ce8:	a085383a 	mul	r2,r20,r2
 8013cec:	200ed43a 	srli	r7,r4,16
 8013cf0:	401cd43a 	srli	r14,r8,16
 8013cf4:	401a943a 	slli	r13,r8,16
 8013cf8:	8885883a 	add	r2,r17,r2
 8013cfc:	4a3fffcc 	andi	r8,r9,65535
 8013d00:	11c5883a 	add	r2,r2,r7
 8013d04:	339d883a 	add	r14,r6,r14
 8013d08:	6a11883a 	add	r8,r13,r8
 8013d0c:	a561383a 	mul	r16,r20,r21
 8013d10:	1440022e 	bgeu	r2,r17,8013d1c <__muldf3+0x428>
 8013d14:	00c00074 	movhi	r3,1
 8013d18:	80e1883a 	add	r16,r16,r3
 8013d1c:	1006943a 	slli	r3,r2,16
 8013d20:	213fffcc 	andi	r4,r4,65535
 8013d24:	93db883a 	add	r13,r18,r15
 8013d28:	1909883a 	add	r4,r3,r4
 8013d2c:	22c7883a 	add	r3,r4,r11
 8013d30:	6cd3803a 	cmpltu	r9,r13,r19
 8013d34:	6a09883a 	add	r4,r13,r8
 8013d38:	1a5b883a 	add	r13,r3,r9
 8013d3c:	2211803a 	cmpltu	r8,r4,r8
 8013d40:	734d883a 	add	r6,r14,r13
 8013d44:	100ed43a 	srli	r7,r2,16
 8013d48:	6a53803a 	cmpltu	r9,r13,r9
 8013d4c:	3205883a 	add	r2,r6,r8
 8013d50:	1ac7803a 	cmpltu	r3,r3,r11
 8013d54:	1211803a 	cmpltu	r8,r2,r8
 8013d58:	48c6b03a 	or	r3,r9,r3
 8013d5c:	338d803a 	cmpltu	r6,r6,r14
 8013d60:	19c7883a 	add	r3,r3,r7
 8013d64:	418cb03a 	or	r6,r8,r6
 8013d68:	1987883a 	add	r3,r3,r6
 8013d6c:	2024927a 	slli	r18,r4,9
 8013d70:	1c07883a 	add	r3,r3,r16
 8013d74:	1806927a 	slli	r3,r3,9
 8013d78:	1020d5fa 	srli	r16,r2,23
 8013d7c:	2008d5fa 	srli	r4,r4,23
 8013d80:	9294b03a 	or	r10,r18,r10
 8013d84:	1004927a 	slli	r2,r2,9
 8013d88:	5024c03a 	cmpne	r18,r10,zero
 8013d8c:	1c20b03a 	or	r16,r3,r16
 8013d90:	9108b03a 	or	r4,r18,r4
 8013d94:	80c0402c 	andhi	r3,r16,256
 8013d98:	20a4b03a 	or	r18,r4,r2
 8013d9c:	18000726 	beq	r3,zero,8013dbc <__muldf3+0x4c8>
 8013da0:	9006d07a 	srli	r3,r18,1
 8013da4:	800897fa 	slli	r4,r16,31
 8013da8:	9080004c 	andi	r2,r18,1
 8013dac:	8020d07a 	srli	r16,r16,1
 8013db0:	10c4b03a 	or	r2,r2,r3
 8013db4:	1124b03a 	or	r18,r2,r4
 8013db8:	600b883a 	mov	r5,r12
 8013dbc:	2900ffc4 	addi	r4,r5,1023
 8013dc0:	01004b0e 	bge	zero,r4,8013ef0 <__muldf3+0x5fc>
 8013dc4:	908001cc 	andi	r2,r18,7
 8013dc8:	10000726 	beq	r2,zero,8013de8 <__muldf3+0x4f4>
 8013dcc:	90c003cc 	andi	r3,r18,15
 8013dd0:	00800104 	movi	r2,4
 8013dd4:	18800426 	beq	r3,r2,8013de8 <__muldf3+0x4f4>
 8013dd8:	9087883a 	add	r3,r18,r2
 8013ddc:	1c85803a 	cmpltu	r2,r3,r18
 8013de0:	80a1883a 	add	r16,r16,r2
 8013de4:	1825883a 	mov	r18,r3
 8013de8:	8080402c 	andhi	r2,r16,256
 8013dec:	10000426 	beq	r2,zero,8013e00 <__muldf3+0x50c>
 8013df0:	00bfc034 	movhi	r2,65280
 8013df4:	10bfffc4 	addi	r2,r2,-1
 8013df8:	29010004 	addi	r4,r5,1024
 8013dfc:	80a0703a 	and	r16,r16,r2
 8013e00:	0081ff84 	movi	r2,2046
 8013e04:	1100320e 	bge	r2,r4,8013ed0 <__muldf3+0x5dc>
 8013e08:	b4c0004c 	andi	r19,r22,1
 8013e0c:	0101ffc4 	movi	r4,2047
 8013e10:	0021883a 	mov	r16,zero
 8013e14:	0025883a 	mov	r18,zero
 8013e18:	003f1006 	br	8013a5c <__alt_data_end+0xfc013a5c>
 8013e1c:	8080022c 	andhi	r2,r16,8
 8013e20:	10000926 	beq	r2,zero,8013e48 <__muldf3+0x554>
 8013e24:	8880022c 	andhi	r2,r17,8
 8013e28:	1000071e 	bne	r2,zero,8013e48 <__muldf3+0x554>
 8013e2c:	00800434 	movhi	r2,16
 8013e30:	8c000234 	orhi	r16,r17,8
 8013e34:	10bfffc4 	addi	r2,r2,-1
 8013e38:	1827883a 	mov	r19,r3
 8013e3c:	80a0703a 	and	r16,r16,r2
 8013e40:	b825883a 	mov	r18,r23
 8013e44:	003f6a06 	br	8013bf0 <__alt_data_end+0xfc013bf0>
 8013e48:	00800434 	movhi	r2,16
 8013e4c:	84000234 	orhi	r16,r16,8
 8013e50:	10bfffc4 	addi	r2,r2,-1
 8013e54:	80a0703a 	and	r16,r16,r2
 8013e58:	003f6506 	br	8013bf0 <__alt_data_end+0xfc013bf0>
 8013e5c:	3009883a 	mov	r4,r6
 8013e60:	d8c00215 	stw	r3,8(sp)
 8013e64:	d9800315 	stw	r6,12(sp)
 8013e68:	da800015 	stw	r10,0(sp)
 8013e6c:	dac00115 	stw	r11,4(sp)
 8013e70:	8003d240 	call	8003d24 <__clzsi2>
 8013e74:	11000804 	addi	r4,r2,32
 8013e78:	014009c4 	movi	r5,39
 8013e7c:	d8c00217 	ldw	r3,8(sp)
 8013e80:	d9800317 	ldw	r6,12(sp)
 8013e84:	da800017 	ldw	r10,0(sp)
 8013e88:	dac00117 	ldw	r11,4(sp)
 8013e8c:	293f320e 	bge	r5,r4,8013b58 <__alt_data_end+0xfc013b58>
 8013e90:	10bffe04 	addi	r2,r2,-8
 8013e94:	b8a2983a 	sll	r17,r23,r2
 8013e98:	002f883a 	mov	r23,zero
 8013e9c:	003f3506 	br	8013b74 <__alt_data_end+0xfc013b74>
 8013ea0:	d9800315 	stw	r6,12(sp)
 8013ea4:	d9c00015 	stw	r7,0(sp)
 8013ea8:	8003d240 	call	8003d24 <__clzsi2>
 8013eac:	10c00804 	addi	r3,r2,32
 8013eb0:	010009c4 	movi	r4,39
 8013eb4:	d9800317 	ldw	r6,12(sp)
 8013eb8:	d9c00017 	ldw	r7,0(sp)
 8013ebc:	20ff060e 	bge	r4,r3,8013ad8 <__alt_data_end+0xfc013ad8>
 8013ec0:	10bffe04 	addi	r2,r2,-8
 8013ec4:	88a0983a 	sll	r16,r17,r2
 8013ec8:	0025883a 	mov	r18,zero
 8013ecc:	003f0906 	br	8013af4 <__alt_data_end+0xfc013af4>
 8013ed0:	9004d0fa 	srli	r2,r18,3
 8013ed4:	8024977a 	slli	r18,r16,29
 8013ed8:	8020927a 	slli	r16,r16,9
 8013edc:	2101ffcc 	andi	r4,r4,2047
 8013ee0:	90a4b03a 	or	r18,r18,r2
 8013ee4:	8020d33a 	srli	r16,r16,12
 8013ee8:	b4c0004c 	andi	r19,r22,1
 8013eec:	003edb06 	br	8013a5c <__alt_data_end+0xfc013a5c>
 8013ef0:	00ff0084 	movi	r3,-1022
 8013ef4:	1947c83a 	sub	r3,r3,r5
 8013ef8:	00800e04 	movi	r2,56
 8013efc:	10c0080e 	bge	r2,r3,8013f20 <__muldf3+0x62c>
 8013f00:	b4c0004c 	andi	r19,r22,1
 8013f04:	0009883a 	mov	r4,zero
 8013f08:	0021883a 	mov	r16,zero
 8013f0c:	0025883a 	mov	r18,zero
 8013f10:	003ed206 	br	8013a5c <__alt_data_end+0xfc013a5c>
 8013f14:	600b883a 	mov	r5,r12
 8013f18:	e02d883a 	mov	r22,fp
 8013f1c:	003fa706 	br	8013dbc <__alt_data_end+0xfc013dbc>
 8013f20:	008007c4 	movi	r2,31
 8013f24:	10c01816 	blt	r2,r3,8013f88 <__muldf3+0x694>
 8013f28:	29410784 	addi	r5,r5,1054
 8013f2c:	8144983a 	sll	r2,r16,r5
 8013f30:	90c8d83a 	srl	r4,r18,r3
 8013f34:	914a983a 	sll	r5,r18,r5
 8013f38:	80c6d83a 	srl	r3,r16,r3
 8013f3c:	2088b03a 	or	r4,r4,r2
 8013f40:	2804c03a 	cmpne	r2,r5,zero
 8013f44:	2084b03a 	or	r2,r4,r2
 8013f48:	110001cc 	andi	r4,r2,7
 8013f4c:	20000726 	beq	r4,zero,8013f6c <__muldf3+0x678>
 8013f50:	114003cc 	andi	r5,r2,15
 8013f54:	01000104 	movi	r4,4
 8013f58:	29000426 	beq	r5,r4,8013f6c <__muldf3+0x678>
 8013f5c:	11000104 	addi	r4,r2,4
 8013f60:	2085803a 	cmpltu	r2,r4,r2
 8013f64:	1887883a 	add	r3,r3,r2
 8013f68:	2005883a 	mov	r2,r4
 8013f6c:	1900202c 	andhi	r4,r3,128
 8013f70:	20001826 	beq	r4,zero,8013fd4 <__muldf3+0x6e0>
 8013f74:	b4c0004c 	andi	r19,r22,1
 8013f78:	01000044 	movi	r4,1
 8013f7c:	0021883a 	mov	r16,zero
 8013f80:	0025883a 	mov	r18,zero
 8013f84:	003eb506 	br	8013a5c <__alt_data_end+0xfc013a5c>
 8013f88:	00bef884 	movi	r2,-1054
 8013f8c:	1145c83a 	sub	r2,r2,r5
 8013f90:	8088d83a 	srl	r4,r16,r2
 8013f94:	00800804 	movi	r2,32
 8013f98:	18801726 	beq	r3,r2,8013ff8 <__muldf3+0x704>
 8013f9c:	28810f84 	addi	r2,r5,1086
 8013fa0:	8084983a 	sll	r2,r16,r2
 8013fa4:	1484b03a 	or	r2,r2,r18
 8013fa8:	1004c03a 	cmpne	r2,r2,zero
 8013fac:	1104b03a 	or	r2,r2,r4
 8013fb0:	10c001cc 	andi	r3,r2,7
 8013fb4:	18000b1e 	bne	r3,zero,8013fe4 <__muldf3+0x6f0>
 8013fb8:	0021883a 	mov	r16,zero
 8013fbc:	1004d0fa 	srli	r2,r2,3
 8013fc0:	b4c0004c 	andi	r19,r22,1
 8013fc4:	0009883a 	mov	r4,zero
 8013fc8:	10e4b03a 	or	r18,r2,r3
 8013fcc:	003ea306 	br	8013a5c <__alt_data_end+0xfc013a5c>
 8013fd0:	0007883a 	mov	r3,zero
 8013fd4:	1820927a 	slli	r16,r3,9
 8013fd8:	1806977a 	slli	r3,r3,29
 8013fdc:	8020d33a 	srli	r16,r16,12
 8013fe0:	003ff606 	br	8013fbc <__alt_data_end+0xfc013fbc>
 8013fe4:	110003cc 	andi	r4,r2,15
 8013fe8:	00c00104 	movi	r3,4
 8013fec:	20fff826 	beq	r4,r3,8013fd0 <__alt_data_end+0xfc013fd0>
 8013ff0:	0007883a 	mov	r3,zero
 8013ff4:	003fd906 	br	8013f5c <__alt_data_end+0xfc013f5c>
 8013ff8:	0005883a 	mov	r2,zero
 8013ffc:	003fe906 	br	8013fa4 <__alt_data_end+0xfc013fa4>
 8014000:	00800434 	movhi	r2,16
 8014004:	84000234 	orhi	r16,r16,8
 8014008:	10bfffc4 	addi	r2,r2,-1
 801400c:	e4c0004c 	andi	r19,fp,1
 8014010:	80a0703a 	and	r16,r16,r2
 8014014:	003ef606 	br	8013bf0 <__alt_data_end+0xfc013bf0>

08014018 <__floatunsidf>:
 8014018:	defffe04 	addi	sp,sp,-8
 801401c:	dc000015 	stw	r16,0(sp)
 8014020:	dfc00115 	stw	ra,4(sp)
 8014024:	2021883a 	mov	r16,r4
 8014028:	20001026 	beq	r4,zero,801406c <__floatunsidf+0x54>
 801402c:	8003d240 	call	8003d24 <__clzsi2>
 8014030:	01410784 	movi	r5,1054
 8014034:	100d883a 	mov	r6,r2
 8014038:	288bc83a 	sub	r5,r5,r2
 801403c:	00800284 	movi	r2,10
 8014040:	11801616 	blt	r2,r6,801409c <__floatunsidf+0x84>
 8014044:	008002c4 	movi	r2,11
 8014048:	1185c83a 	sub	r2,r2,r6
 801404c:	8084d83a 	srl	r2,r16,r2
 8014050:	00c00434 	movhi	r3,16
 8014054:	31c00544 	addi	r7,r6,21
 8014058:	18ffffc4 	addi	r3,r3,-1
 801405c:	81e0983a 	sll	r16,r16,r7
 8014060:	10cc703a 	and	r6,r2,r3
 8014064:	2941ffcc 	andi	r5,r5,2047
 8014068:	00000206 	br	8014074 <__floatunsidf+0x5c>
 801406c:	000b883a 	mov	r5,zero
 8014070:	000d883a 	mov	r6,zero
 8014074:	280a953a 	slli	r5,r5,20
 8014078:	00c00434 	movhi	r3,16
 801407c:	18ffffc4 	addi	r3,r3,-1
 8014080:	30c6703a 	and	r3,r6,r3
 8014084:	8005883a 	mov	r2,r16
 8014088:	1946b03a 	or	r3,r3,r5
 801408c:	dfc00117 	ldw	ra,4(sp)
 8014090:	dc000017 	ldw	r16,0(sp)
 8014094:	dec00204 	addi	sp,sp,8
 8014098:	f800283a 	ret
 801409c:	31bffd44 	addi	r6,r6,-11
 80140a0:	818c983a 	sll	r6,r16,r6
 80140a4:	00800434 	movhi	r2,16
 80140a8:	10bfffc4 	addi	r2,r2,-1
 80140ac:	2941ffcc 	andi	r5,r5,2047
 80140b0:	0021883a 	mov	r16,zero
 80140b4:	308c703a 	and	r6,r6,r2
 80140b8:	003fee06 	br	8014074 <__alt_data_end+0xfc014074>

080140bc <__truncdfsf2>:
 80140bc:	2810d53a 	srli	r8,r5,20
 80140c0:	01c00434 	movhi	r7,16
 80140c4:	39ffffc4 	addi	r7,r7,-1
 80140c8:	29ce703a 	and	r7,r5,r7
 80140cc:	380e90fa 	slli	r7,r7,3
 80140d0:	4201ffcc 	andi	r8,r8,2047
 80140d4:	200cd77a 	srli	r6,r4,29
 80140d8:	42400044 	addi	r9,r8,1
 80140dc:	4a41ffcc 	andi	r9,r9,2047
 80140e0:	00800044 	movi	r2,1
 80140e4:	398cb03a 	or	r6,r7,r6
 80140e8:	280ad7fa 	srli	r5,r5,31
 80140ec:	200e90fa 	slli	r7,r4,3
 80140f0:	1240230e 	bge	r2,r9,8014180 <__truncdfsf2+0xc4>
 80140f4:	40ff2004 	addi	r3,r8,-896
 80140f8:	00803f84 	movi	r2,254
 80140fc:	10c01516 	blt	r2,r3,8014154 <__truncdfsf2+0x98>
 8014100:	00c02d0e 	bge	zero,r3,80141b8 <__truncdfsf2+0xfc>
 8014104:	200891ba 	slli	r4,r4,6
 8014108:	300c90fa 	slli	r6,r6,3
 801410c:	380ed77a 	srli	r7,r7,29
 8014110:	2008c03a 	cmpne	r4,r4,zero
 8014114:	310cb03a 	or	r6,r6,r4
 8014118:	31ccb03a 	or	r6,r6,r7
 801411c:	308001cc 	andi	r2,r6,7
 8014120:	10000426 	beq	r2,zero,8014134 <__truncdfsf2+0x78>
 8014124:	310003cc 	andi	r4,r6,15
 8014128:	00800104 	movi	r2,4
 801412c:	20800126 	beq	r4,r2,8014134 <__truncdfsf2+0x78>
 8014130:	31800104 	addi	r6,r6,4
 8014134:	3081002c 	andhi	r2,r6,1024
 8014138:	10002326 	beq	r2,zero,80141c8 <__truncdfsf2+0x10c>
 801413c:	18c00044 	addi	r3,r3,1
 8014140:	00803fc4 	movi	r2,255
 8014144:	18800326 	beq	r3,r2,8014154 <__truncdfsf2+0x98>
 8014148:	300c91ba 	slli	r6,r6,6
 801414c:	300cd27a 	srli	r6,r6,9
 8014150:	00000206 	br	801415c <__truncdfsf2+0xa0>
 8014154:	00ffffc4 	movi	r3,-1
 8014158:	000d883a 	mov	r6,zero
 801415c:	18c03fcc 	andi	r3,r3,255
 8014160:	180895fa 	slli	r4,r3,23
 8014164:	00c02034 	movhi	r3,128
 8014168:	280a97fa 	slli	r5,r5,31
 801416c:	18ffffc4 	addi	r3,r3,-1
 8014170:	30c6703a 	and	r3,r6,r3
 8014174:	1906b03a 	or	r3,r3,r4
 8014178:	1944b03a 	or	r2,r3,r5
 801417c:	f800283a 	ret
 8014180:	4000071e 	bne	r8,zero,80141a0 <__truncdfsf2+0xe4>
 8014184:	31ccb03a 	or	r6,r6,r7
 8014188:	30000d1e 	bne	r6,zero,80141c0 <__truncdfsf2+0x104>
 801418c:	0007883a 	mov	r3,zero
 8014190:	00802034 	movhi	r2,128
 8014194:	10bfffc4 	addi	r2,r2,-1
 8014198:	308c703a 	and	r6,r6,r2
 801419c:	003fef06 	br	801415c <__alt_data_end+0xfc01415c>
 80141a0:	31c8b03a 	or	r4,r6,r7
 80141a4:	203feb26 	beq	r4,zero,8014154 <__alt_data_end+0xfc014154>
 80141a8:	300c90fa 	slli	r6,r6,3
 80141ac:	00c03fc4 	movi	r3,255
 80141b0:	31808034 	orhi	r6,r6,512
 80141b4:	003fd906 	br	801411c <__alt_data_end+0xfc01411c>
 80141b8:	00bffa44 	movi	r2,-23
 80141bc:	1880090e 	bge	r3,r2,80141e4 <__truncdfsf2+0x128>
 80141c0:	01800144 	movi	r6,5
 80141c4:	0007883a 	mov	r3,zero
 80141c8:	00803fc4 	movi	r2,255
 80141cc:	300cd0fa 	srli	r6,r6,3
 80141d0:	18bfef1e 	bne	r3,r2,8014190 <__alt_data_end+0xfc014190>
 80141d4:	303fdf26 	beq	r6,zero,8014154 <__alt_data_end+0xfc014154>
 80141d8:	31801034 	orhi	r6,r6,64
 80141dc:	00ffffc4 	movi	r3,-1
 80141e0:	003feb06 	br	8014190 <__alt_data_end+0xfc014190>
 80141e4:	0080e784 	movi	r2,926
 80141e8:	1205c83a 	sub	r2,r2,r8
 80141ec:	00c007c4 	movi	r3,31
 80141f0:	31802034 	orhi	r6,r6,128
 80141f4:	18800916 	blt	r3,r2,801421c <__truncdfsf2+0x160>
 80141f8:	423f2084 	addi	r8,r8,-894
 80141fc:	3a06983a 	sll	r3,r7,r8
 8014200:	3210983a 	sll	r8,r6,r8
 8014204:	388ed83a 	srl	r7,r7,r2
 8014208:	180cc03a 	cmpne	r6,r3,zero
 801420c:	418cb03a 	or	r6,r8,r6
 8014210:	31ccb03a 	or	r6,r6,r7
 8014214:	0007883a 	mov	r3,zero
 8014218:	003fc006 	br	801411c <__alt_data_end+0xfc01411c>
 801421c:	00c0df84 	movi	r3,894
 8014220:	1a07c83a 	sub	r3,r3,r8
 8014224:	01000804 	movi	r4,32
 8014228:	30c6d83a 	srl	r3,r6,r3
 801422c:	11000726 	beq	r2,r4,801424c <__truncdfsf2+0x190>
 8014230:	423f2884 	addi	r8,r8,-862
 8014234:	3210983a 	sll	r8,r6,r8
 8014238:	41ceb03a 	or	r7,r8,r7
 801423c:	380ec03a 	cmpne	r7,r7,zero
 8014240:	38ccb03a 	or	r6,r7,r3
 8014244:	0007883a 	mov	r3,zero
 8014248:	003fb406 	br	801411c <__alt_data_end+0xfc01411c>
 801424c:	0011883a 	mov	r8,zero
 8014250:	003ff906 	br	8014238 <__alt_data_end+0xfc014238>

08014254 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8014254:	defffe04 	addi	sp,sp,-8
 8014258:	dfc00115 	stw	ra,4(sp)
 801425c:	df000015 	stw	fp,0(sp)
 8014260:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8014264:	008200b4 	movhi	r2,2050
 8014268:	108d5504 	addi	r2,r2,13652
 801426c:	10800017 	ldw	r2,0(r2)
 8014270:	10000526 	beq	r2,zero,8014288 <alt_get_errno+0x34>
 8014274:	008200b4 	movhi	r2,2050
 8014278:	108d5504 	addi	r2,r2,13652
 801427c:	10800017 	ldw	r2,0(r2)
 8014280:	103ee83a 	callr	r2
 8014284:	00000206 	br	8014290 <alt_get_errno+0x3c>
 8014288:	008200b4 	movhi	r2,2050
 801428c:	10943004 	addi	r2,r2,20672
}
 8014290:	e037883a 	mov	sp,fp
 8014294:	dfc00117 	ldw	ra,4(sp)
 8014298:	df000017 	ldw	fp,0(sp)
 801429c:	dec00204 	addi	sp,sp,8
 80142a0:	f800283a 	ret

080142a4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 80142a4:	defffb04 	addi	sp,sp,-20
 80142a8:	dfc00415 	stw	ra,16(sp)
 80142ac:	df000315 	stw	fp,12(sp)
 80142b0:	df000304 	addi	fp,sp,12
 80142b4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 80142b8:	e0bfff17 	ldw	r2,-4(fp)
 80142bc:	10000616 	blt	r2,zero,80142d8 <close+0x34>
 80142c0:	e0bfff17 	ldw	r2,-4(fp)
 80142c4:	10c00324 	muli	r3,r2,12
 80142c8:	008200b4 	movhi	r2,2050
 80142cc:	1088c704 	addi	r2,r2,8988
 80142d0:	1885883a 	add	r2,r3,r2
 80142d4:	00000106 	br	80142dc <close+0x38>
 80142d8:	0005883a 	mov	r2,zero
 80142dc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 80142e0:	e0bffd17 	ldw	r2,-12(fp)
 80142e4:	10001926 	beq	r2,zero,801434c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 80142e8:	e0bffd17 	ldw	r2,-12(fp)
 80142ec:	10800017 	ldw	r2,0(r2)
 80142f0:	10800417 	ldw	r2,16(r2)
 80142f4:	10000626 	beq	r2,zero,8014310 <close+0x6c>
 80142f8:	e0bffd17 	ldw	r2,-12(fp)
 80142fc:	10800017 	ldw	r2,0(r2)
 8014300:	10800417 	ldw	r2,16(r2)
 8014304:	e13ffd17 	ldw	r4,-12(fp)
 8014308:	103ee83a 	callr	r2
 801430c:	00000106 	br	8014314 <close+0x70>
 8014310:	0005883a 	mov	r2,zero
 8014314:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8014318:	e13fff17 	ldw	r4,-4(fp)
 801431c:	8014b940 	call	8014b94 <alt_release_fd>
    if (rval < 0)
 8014320:	e0bffe17 	ldw	r2,-8(fp)
 8014324:	1000070e 	bge	r2,zero,8014344 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 8014328:	80142540 	call	8014254 <alt_get_errno>
 801432c:	1007883a 	mov	r3,r2
 8014330:	e0bffe17 	ldw	r2,-8(fp)
 8014334:	0085c83a 	sub	r2,zero,r2
 8014338:	18800015 	stw	r2,0(r3)
      return -1;
 801433c:	00bfffc4 	movi	r2,-1
 8014340:	00000706 	br	8014360 <close+0xbc>
    }
    return 0;
 8014344:	0005883a 	mov	r2,zero
 8014348:	00000506 	br	8014360 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 801434c:	80142540 	call	8014254 <alt_get_errno>
 8014350:	1007883a 	mov	r3,r2
 8014354:	00801444 	movi	r2,81
 8014358:	18800015 	stw	r2,0(r3)
    return -1;
 801435c:	00bfffc4 	movi	r2,-1
  }
}
 8014360:	e037883a 	mov	sp,fp
 8014364:	dfc00117 	ldw	ra,4(sp)
 8014368:	df000017 	ldw	fp,0(sp)
 801436c:	dec00204 	addi	sp,sp,8
 8014370:	f800283a 	ret

08014374 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8014374:	defffc04 	addi	sp,sp,-16
 8014378:	df000315 	stw	fp,12(sp)
 801437c:	df000304 	addi	fp,sp,12
 8014380:	e13ffd15 	stw	r4,-12(fp)
 8014384:	e17ffe15 	stw	r5,-8(fp)
 8014388:	e1bfff15 	stw	r6,-4(fp)
  return len;
 801438c:	e0bfff17 	ldw	r2,-4(fp)
}
 8014390:	e037883a 	mov	sp,fp
 8014394:	df000017 	ldw	fp,0(sp)
 8014398:	dec00104 	addi	sp,sp,4
 801439c:	f800283a 	ret

080143a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80143a0:	defffe04 	addi	sp,sp,-8
 80143a4:	dfc00115 	stw	ra,4(sp)
 80143a8:	df000015 	stw	fp,0(sp)
 80143ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80143b0:	008200b4 	movhi	r2,2050
 80143b4:	108d5504 	addi	r2,r2,13652
 80143b8:	10800017 	ldw	r2,0(r2)
 80143bc:	10000526 	beq	r2,zero,80143d4 <alt_get_errno+0x34>
 80143c0:	008200b4 	movhi	r2,2050
 80143c4:	108d5504 	addi	r2,r2,13652
 80143c8:	10800017 	ldw	r2,0(r2)
 80143cc:	103ee83a 	callr	r2
 80143d0:	00000206 	br	80143dc <alt_get_errno+0x3c>
 80143d4:	008200b4 	movhi	r2,2050
 80143d8:	10943004 	addi	r2,r2,20672
}
 80143dc:	e037883a 	mov	sp,fp
 80143e0:	dfc00117 	ldw	ra,4(sp)
 80143e4:	df000017 	ldw	fp,0(sp)
 80143e8:	dec00204 	addi	sp,sp,8
 80143ec:	f800283a 	ret

080143f0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 80143f0:	defffb04 	addi	sp,sp,-20
 80143f4:	dfc00415 	stw	ra,16(sp)
 80143f8:	df000315 	stw	fp,12(sp)
 80143fc:	df000304 	addi	fp,sp,12
 8014400:	e13ffe15 	stw	r4,-8(fp)
 8014404:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8014408:	e0bffe17 	ldw	r2,-8(fp)
 801440c:	10000616 	blt	r2,zero,8014428 <fstat+0x38>
 8014410:	e0bffe17 	ldw	r2,-8(fp)
 8014414:	10c00324 	muli	r3,r2,12
 8014418:	008200b4 	movhi	r2,2050
 801441c:	1088c704 	addi	r2,r2,8988
 8014420:	1885883a 	add	r2,r3,r2
 8014424:	00000106 	br	801442c <fstat+0x3c>
 8014428:	0005883a 	mov	r2,zero
 801442c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8014430:	e0bffd17 	ldw	r2,-12(fp)
 8014434:	10001026 	beq	r2,zero,8014478 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8014438:	e0bffd17 	ldw	r2,-12(fp)
 801443c:	10800017 	ldw	r2,0(r2)
 8014440:	10800817 	ldw	r2,32(r2)
 8014444:	10000726 	beq	r2,zero,8014464 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 8014448:	e0bffd17 	ldw	r2,-12(fp)
 801444c:	10800017 	ldw	r2,0(r2)
 8014450:	10800817 	ldw	r2,32(r2)
 8014454:	e13ffd17 	ldw	r4,-12(fp)
 8014458:	e17fff17 	ldw	r5,-4(fp)
 801445c:	103ee83a 	callr	r2
 8014460:	00000a06 	br	801448c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 8014464:	e0bfff17 	ldw	r2,-4(fp)
 8014468:	00c80004 	movi	r3,8192
 801446c:	10c00115 	stw	r3,4(r2)
      return 0;
 8014470:	0005883a 	mov	r2,zero
 8014474:	00000506 	br	801448c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8014478:	80143a00 	call	80143a0 <alt_get_errno>
 801447c:	1007883a 	mov	r3,r2
 8014480:	00801444 	movi	r2,81
 8014484:	18800015 	stw	r2,0(r3)
    return -1;
 8014488:	00bfffc4 	movi	r2,-1
  }
}
 801448c:	e037883a 	mov	sp,fp
 8014490:	dfc00117 	ldw	ra,4(sp)
 8014494:	df000017 	ldw	fp,0(sp)
 8014498:	dec00204 	addi	sp,sp,8
 801449c:	f800283a 	ret

080144a0 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
 80144a0:	defff804 	addi	sp,sp,-32
 80144a4:	dfc00715 	stw	ra,28(sp)
 80144a8:	df000615 	stw	fp,24(sp)
 80144ac:	dc000515 	stw	r16,20(sp)
 80144b0:	df000604 	addi	fp,sp,24
 80144b4:	e13ffd15 	stw	r4,-12(fp)
 80144b8:	e17ffe15 	stw	r5,-8(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
 80144bc:	e0bffe17 	ldw	r2,-8(fp)
 80144c0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80144c4:	008200b4 	movhi	r2,2050
 80144c8:	10943c04 	addi	r2,r2,20720
 80144cc:	10800017 	ldw	r2,0(r2)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
 80144d0:	e0bffb15 	stw	r2,-20(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80144d4:	008200b4 	movhi	r2,2050
 80144d8:	10943b04 	addi	r2,r2,20716
 80144dc:	10800017 	ldw	r2,0(r2)
  alt_u32 tick_rate = alt_ticks_per_second ();
 80144e0:	e0bffc15 	stw	r2,-16(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
 80144e4:	e0bffc17 	ldw	r2,-16(fp)
 80144e8:	10006326 	beq	r2,zero,8014678 <gettimeofday+0x1d8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
 80144ec:	d0a6ec17 	ldw	r2,-25680(gp)
 80144f0:	1009883a 	mov	r4,r2
 80144f4:	e0fffb17 	ldw	r3,-20(fp)
 80144f8:	e0bffc17 	ldw	r2,-16(fp)
 80144fc:	1885203a 	divu	r2,r3,r2
 8014500:	2085883a 	add	r2,r4,r2
 8014504:	1007883a 	mov	r3,r2
 8014508:	e0bffd17 	ldw	r2,-12(fp)
 801450c:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
 8014510:	d0a6ed04 	addi	r2,gp,-25676
 8014514:	10800017 	ldw	r2,0(r2)
 8014518:	1021883a 	mov	r16,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
 801451c:	e0bffb17 	ldw	r2,-20(fp)
 8014520:	1013883a 	mov	r9,r2
 8014524:	0015883a 	mov	r10,zero
 8014528:	008003f4 	movhi	r2,15
 801452c:	10909004 	addi	r2,r2,16960
 8014530:	e0fffc17 	ldw	r3,-16(fp)
 8014534:	10c5203a 	divu	r2,r2,r3
 8014538:	100f883a 	mov	r7,r2
 801453c:	0011883a 	mov	r8,zero
 8014540:	4809883a 	mov	r4,r9
 8014544:	500b883a 	mov	r5,r10
 8014548:	380d883a 	mov	r6,r7
 801454c:	400f883a 	mov	r7,r8
 8014550:	8016f640 	call	8016f64 <__muldi3>
 8014554:	100f883a 	mov	r7,r2
 8014558:	1811883a 	mov	r8,r3
 801455c:	380b883a 	mov	r5,r7
 8014560:	400d883a 	mov	r6,r8
 8014564:	008003f4 	movhi	r2,15
 8014568:	10909004 	addi	r2,r2,16960
 801456c:	0007883a 	mov	r3,zero
 8014570:	2809883a 	mov	r4,r5
 8014574:	300b883a 	mov	r5,r6
 8014578:	100d883a 	mov	r6,r2
 801457c:	180f883a 	mov	r7,r3
 8014580:	801301c0 	call	801301c <__umoddi3>
 8014584:	1009883a 	mov	r4,r2
 8014588:	180b883a 	mov	r5,r3
 801458c:	2005883a 	mov	r2,r4
 8014590:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
 8014594:	8085883a 	add	r2,r16,r2
 8014598:	1007883a 	mov	r3,r2
 801459c:	e0bffd17 	ldw	r2,-12(fp)
 80145a0:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 80145a4:	00001406 	br	80145f8 <gettimeofday+0x158>
      if (ptimeval->tv_sec <= 0)
 80145a8:	e0bffd17 	ldw	r2,-12(fp)
 80145ac:	10800017 	ldw	r2,0(r2)
 80145b0:	00800516 	blt	zero,r2,80145c8 <gettimeofday+0x128>
      {
          ptimeval->tv_sec = 0;
 80145b4:	e0bffd17 	ldw	r2,-12(fp)
 80145b8:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
 80145bc:	e0bffd17 	ldw	r2,-12(fp)
 80145c0:	10000115 	stw	zero,4(r2)
          break;
 80145c4:	00000f06 	br	8014604 <gettimeofday+0x164>
      }
      else
      {
          ptimeval->tv_sec--;
 80145c8:	e0bffd17 	ldw	r2,-12(fp)
 80145cc:	10800017 	ldw	r2,0(r2)
 80145d0:	10ffffc4 	addi	r3,r2,-1
 80145d4:	e0bffd17 	ldw	r2,-12(fp)
 80145d8:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
 80145dc:	e0bffd17 	ldw	r2,-12(fp)
 80145e0:	10c00117 	ldw	r3,4(r2)
 80145e4:	008003f4 	movhi	r2,15
 80145e8:	10909004 	addi	r2,r2,16960
 80145ec:	1887883a 	add	r3,r3,r2
 80145f0:	e0bffd17 	ldw	r2,-12(fp)
 80145f4:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 80145f8:	e0bffd17 	ldw	r2,-12(fp)
 80145fc:	10800117 	ldw	r2,4(r2)
 8014600:	103fe916 	blt	r2,zero,80145a8 <__alt_data_end+0xfc0145a8>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 8014604:	00000c06 	br	8014638 <gettimeofday+0x198>
      ptimeval->tv_sec++;
 8014608:	e0bffd17 	ldw	r2,-12(fp)
 801460c:	10800017 	ldw	r2,0(r2)
 8014610:	10c00044 	addi	r3,r2,1
 8014614:	e0bffd17 	ldw	r2,-12(fp)
 8014618:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
 801461c:	e0bffd17 	ldw	r2,-12(fp)
 8014620:	10c00117 	ldw	r3,4(r2)
 8014624:	00bffc74 	movhi	r2,65521
 8014628:	10af7004 	addi	r2,r2,-16960
 801462c:	1887883a 	add	r3,r3,r2
 8014630:	e0bffd17 	ldw	r2,-12(fp)
 8014634:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 8014638:	e0bffd17 	ldw	r2,-12(fp)
 801463c:	10c00117 	ldw	r3,4(r2)
 8014640:	008003f4 	movhi	r2,15
 8014644:	10908fc4 	addi	r2,r2,16959
 8014648:	10ffef16 	blt	r2,r3,8014608 <__alt_data_end+0xfc014608>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
 801464c:	e0bffa17 	ldw	r2,-24(fp)
 8014650:	10000726 	beq	r2,zero,8014670 <gettimeofday+0x1d0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
 8014654:	d0e6ea17 	ldw	r3,-25688(gp)
 8014658:	e0bffa17 	ldw	r2,-24(fp)
 801465c:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
 8014660:	d0a6eb04 	addi	r2,gp,-25684
 8014664:	10c00017 	ldw	r3,0(r2)
 8014668:	e0bffa17 	ldw	r2,-24(fp)
 801466c:	10c00115 	stw	r3,4(r2)
    }

    return 0;
 8014670:	0005883a 	mov	r2,zero
 8014674:	00000106 	br	801467c <gettimeofday+0x1dc>
  }

  return -ENOTSUP;
 8014678:	00bfde84 	movi	r2,-134
}
 801467c:	e6ffff04 	addi	sp,fp,-4
 8014680:	dfc00217 	ldw	ra,8(sp)
 8014684:	df000117 	ldw	fp,4(sp)
 8014688:	dc000017 	ldw	r16,0(sp)
 801468c:	dec00304 	addi	sp,sp,12
 8014690:	f800283a 	ret

08014694 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8014694:	defffe04 	addi	sp,sp,-8
 8014698:	dfc00115 	stw	ra,4(sp)
 801469c:	df000015 	stw	fp,0(sp)
 80146a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80146a4:	008200b4 	movhi	r2,2050
 80146a8:	108d5504 	addi	r2,r2,13652
 80146ac:	10800017 	ldw	r2,0(r2)
 80146b0:	10000526 	beq	r2,zero,80146c8 <alt_get_errno+0x34>
 80146b4:	008200b4 	movhi	r2,2050
 80146b8:	108d5504 	addi	r2,r2,13652
 80146bc:	10800017 	ldw	r2,0(r2)
 80146c0:	103ee83a 	callr	r2
 80146c4:	00000206 	br	80146d0 <alt_get_errno+0x3c>
 80146c8:	008200b4 	movhi	r2,2050
 80146cc:	10943004 	addi	r2,r2,20672
}
 80146d0:	e037883a 	mov	sp,fp
 80146d4:	dfc00117 	ldw	ra,4(sp)
 80146d8:	df000017 	ldw	fp,0(sp)
 80146dc:	dec00204 	addi	sp,sp,8
 80146e0:	f800283a 	ret

080146e4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 80146e4:	deffed04 	addi	sp,sp,-76
 80146e8:	dfc01215 	stw	ra,72(sp)
 80146ec:	df001115 	stw	fp,68(sp)
 80146f0:	df001104 	addi	fp,sp,68
 80146f4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80146f8:	e0bfff17 	ldw	r2,-4(fp)
 80146fc:	10000616 	blt	r2,zero,8014718 <isatty+0x34>
 8014700:	e0bfff17 	ldw	r2,-4(fp)
 8014704:	10c00324 	muli	r3,r2,12
 8014708:	008200b4 	movhi	r2,2050
 801470c:	1088c704 	addi	r2,r2,8988
 8014710:	1885883a 	add	r2,r3,r2
 8014714:	00000106 	br	801471c <isatty+0x38>
 8014718:	0005883a 	mov	r2,zero
 801471c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 8014720:	e0bfef17 	ldw	r2,-68(fp)
 8014724:	10000e26 	beq	r2,zero,8014760 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8014728:	e0bfef17 	ldw	r2,-68(fp)
 801472c:	10800017 	ldw	r2,0(r2)
 8014730:	10800817 	ldw	r2,32(r2)
 8014734:	1000021e 	bne	r2,zero,8014740 <isatty+0x5c>
    {
      return 1;
 8014738:	00800044 	movi	r2,1
 801473c:	00000d06 	br	8014774 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8014740:	e0bff004 	addi	r2,fp,-64
 8014744:	e13fff17 	ldw	r4,-4(fp)
 8014748:	100b883a 	mov	r5,r2
 801474c:	80143f00 	call	80143f0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8014750:	e0bff117 	ldw	r2,-60(fp)
 8014754:	10880020 	cmpeqi	r2,r2,8192
 8014758:	10803fcc 	andi	r2,r2,255
 801475c:	00000506 	br	8014774 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8014760:	80146940 	call	8014694 <alt_get_errno>
 8014764:	1007883a 	mov	r3,r2
 8014768:	00801444 	movi	r2,81
 801476c:	18800015 	stw	r2,0(r3)
    return 0;
 8014770:	0005883a 	mov	r2,zero
  }
}
 8014774:	e037883a 	mov	sp,fp
 8014778:	dfc00117 	ldw	ra,4(sp)
 801477c:	df000017 	ldw	fp,0(sp)
 8014780:	dec00204 	addi	sp,sp,8
 8014784:	f800283a 	ret

08014788 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8014788:	defffc04 	addi	sp,sp,-16
 801478c:	df000315 	stw	fp,12(sp)
 8014790:	df000304 	addi	fp,sp,12
 8014794:	e13ffd15 	stw	r4,-12(fp)
 8014798:	e17ffe15 	stw	r5,-8(fp)
 801479c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 80147a0:	e0fffe17 	ldw	r3,-8(fp)
 80147a4:	e0bffd17 	ldw	r2,-12(fp)
 80147a8:	18800c26 	beq	r3,r2,80147dc <alt_load_section+0x54>
  {
    while( to != end )
 80147ac:	00000806 	br	80147d0 <alt_load_section+0x48>
    {
      *to++ = *from++;
 80147b0:	e0bffe17 	ldw	r2,-8(fp)
 80147b4:	10c00104 	addi	r3,r2,4
 80147b8:	e0fffe15 	stw	r3,-8(fp)
 80147bc:	e0fffd17 	ldw	r3,-12(fp)
 80147c0:	19000104 	addi	r4,r3,4
 80147c4:	e13ffd15 	stw	r4,-12(fp)
 80147c8:	18c00017 	ldw	r3,0(r3)
 80147cc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 80147d0:	e0fffe17 	ldw	r3,-8(fp)
 80147d4:	e0bfff17 	ldw	r2,-4(fp)
 80147d8:	18bff51e 	bne	r3,r2,80147b0 <__alt_data_end+0xfc0147b0>
    {
      *to++ = *from++;
    }
  }
}
 80147dc:	e037883a 	mov	sp,fp
 80147e0:	df000017 	ldw	fp,0(sp)
 80147e4:	dec00104 	addi	sp,sp,4
 80147e8:	f800283a 	ret

080147ec <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 80147ec:	defffe04 	addi	sp,sp,-8
 80147f0:	dfc00115 	stw	ra,4(sp)
 80147f4:	df000015 	stw	fp,0(sp)
 80147f8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 80147fc:	010200b4 	movhi	r4,2050
 8014800:	210d5a04 	addi	r4,r4,13672
 8014804:	014200b4 	movhi	r5,2050
 8014808:	29468a04 	addi	r5,r5,6696
 801480c:	018200b4 	movhi	r6,2050
 8014810:	318d5a04 	addi	r6,r6,13672
 8014814:	80147880 	call	8014788 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8014818:	01020034 	movhi	r4,2048
 801481c:	21000804 	addi	r4,r4,32
 8014820:	01420034 	movhi	r5,2048
 8014824:	29400804 	addi	r5,r5,32
 8014828:	01820034 	movhi	r6,2048
 801482c:	31806f04 	addi	r6,r6,444
 8014830:	80147880 	call	8014788 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8014834:	01020074 	movhi	r4,2049
 8014838:	211bfe04 	addi	r4,r4,28664
 801483c:	01420074 	movhi	r5,2049
 8014840:	295bfe04 	addi	r5,r5,28664
 8014844:	018200b4 	movhi	r6,2050
 8014848:	31868a04 	addi	r6,r6,6696
 801484c:	80147880 	call	8014788 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8014850:	801607c0 	call	801607c <alt_dcache_flush_all>
  alt_icache_flush_all();
 8014854:	80162d40 	call	80162d4 <alt_icache_flush_all>
}
 8014858:	e037883a 	mov	sp,fp
 801485c:	dfc00117 	ldw	ra,4(sp)
 8014860:	df000017 	ldw	fp,0(sp)
 8014864:	dec00204 	addi	sp,sp,8
 8014868:	f800283a 	ret

0801486c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801486c:	defffe04 	addi	sp,sp,-8
 8014870:	dfc00115 	stw	ra,4(sp)
 8014874:	df000015 	stw	fp,0(sp)
 8014878:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801487c:	008200b4 	movhi	r2,2050
 8014880:	108d5504 	addi	r2,r2,13652
 8014884:	10800017 	ldw	r2,0(r2)
 8014888:	10000526 	beq	r2,zero,80148a0 <alt_get_errno+0x34>
 801488c:	008200b4 	movhi	r2,2050
 8014890:	108d5504 	addi	r2,r2,13652
 8014894:	10800017 	ldw	r2,0(r2)
 8014898:	103ee83a 	callr	r2
 801489c:	00000206 	br	80148a8 <alt_get_errno+0x3c>
 80148a0:	008200b4 	movhi	r2,2050
 80148a4:	10943004 	addi	r2,r2,20672
}
 80148a8:	e037883a 	mov	sp,fp
 80148ac:	dfc00117 	ldw	ra,4(sp)
 80148b0:	df000017 	ldw	fp,0(sp)
 80148b4:	dec00204 	addi	sp,sp,8
 80148b8:	f800283a 	ret

080148bc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 80148bc:	defff904 	addi	sp,sp,-28
 80148c0:	dfc00615 	stw	ra,24(sp)
 80148c4:	df000515 	stw	fp,20(sp)
 80148c8:	df000504 	addi	fp,sp,20
 80148cc:	e13ffd15 	stw	r4,-12(fp)
 80148d0:	e17ffe15 	stw	r5,-8(fp)
 80148d4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 80148d8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80148dc:	e0bffd17 	ldw	r2,-12(fp)
 80148e0:	10000616 	blt	r2,zero,80148fc <lseek+0x40>
 80148e4:	e0bffd17 	ldw	r2,-12(fp)
 80148e8:	10c00324 	muli	r3,r2,12
 80148ec:	008200b4 	movhi	r2,2050
 80148f0:	1088c704 	addi	r2,r2,8988
 80148f4:	1885883a 	add	r2,r3,r2
 80148f8:	00000106 	br	8014900 <lseek+0x44>
 80148fc:	0005883a 	mov	r2,zero
 8014900:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 8014904:	e0bffc17 	ldw	r2,-16(fp)
 8014908:	10001026 	beq	r2,zero,801494c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 801490c:	e0bffc17 	ldw	r2,-16(fp)
 8014910:	10800017 	ldw	r2,0(r2)
 8014914:	10800717 	ldw	r2,28(r2)
 8014918:	10000926 	beq	r2,zero,8014940 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 801491c:	e0bffc17 	ldw	r2,-16(fp)
 8014920:	10800017 	ldw	r2,0(r2)
 8014924:	10800717 	ldw	r2,28(r2)
 8014928:	e13ffc17 	ldw	r4,-16(fp)
 801492c:	e17ffe17 	ldw	r5,-8(fp)
 8014930:	e1bfff17 	ldw	r6,-4(fp)
 8014934:	103ee83a 	callr	r2
 8014938:	e0bffb15 	stw	r2,-20(fp)
 801493c:	00000506 	br	8014954 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8014940:	00bfde84 	movi	r2,-134
 8014944:	e0bffb15 	stw	r2,-20(fp)
 8014948:	00000206 	br	8014954 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 801494c:	00bfebc4 	movi	r2,-81
 8014950:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 8014954:	e0bffb17 	ldw	r2,-20(fp)
 8014958:	1000070e 	bge	r2,zero,8014978 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 801495c:	801486c0 	call	801486c <alt_get_errno>
 8014960:	1007883a 	mov	r3,r2
 8014964:	e0bffb17 	ldw	r2,-20(fp)
 8014968:	0085c83a 	sub	r2,zero,r2
 801496c:	18800015 	stw	r2,0(r3)
    rc = -1;
 8014970:	00bfffc4 	movi	r2,-1
 8014974:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 8014978:	e0bffb17 	ldw	r2,-20(fp)
}
 801497c:	e037883a 	mov	sp,fp
 8014980:	dfc00117 	ldw	ra,4(sp)
 8014984:	df000017 	ldw	fp,0(sp)
 8014988:	dec00204 	addi	sp,sp,8
 801498c:	f800283a 	ret

08014990 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8014990:	defffd04 	addi	sp,sp,-12
 8014994:	dfc00215 	stw	ra,8(sp)
 8014998:	df000115 	stw	fp,4(sp)
 801499c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 80149a0:	0009883a 	mov	r4,zero
 80149a4:	8014e780 	call	8014e78 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 80149a8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 80149ac:	8014eac0 	call	8014eac <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 80149b0:	010200b4 	movhi	r4,2050
 80149b4:	21067a04 	addi	r4,r4,6632
 80149b8:	014200b4 	movhi	r5,2050
 80149bc:	29467a04 	addi	r5,r5,6632
 80149c0:	018200b4 	movhi	r6,2050
 80149c4:	31867a04 	addi	r6,r6,6632
 80149c8:	80166940 	call	8016694 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 80149cc:	801618c0 	call	801618c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 80149d0:	01020074 	movhi	r4,2049
 80149d4:	21187a04 	addi	r4,r4,25064
 80149d8:	8016bf40 	call	8016bf4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 80149dc:	d126ee17 	ldw	r4,-25672(gp)
 80149e0:	d0e6ef17 	ldw	r3,-25668(gp)
 80149e4:	d0a6f017 	ldw	r2,-25664(gp)
 80149e8:	180b883a 	mov	r5,r3
 80149ec:	100d883a 	mov	r6,r2
 80149f0:	8000d600 	call	8000d60 <main>
 80149f4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 80149f8:	01000044 	movi	r4,1
 80149fc:	80142a40 	call	80142a4 <close>
  exit (result);
 8014a00:	e13fff17 	ldw	r4,-4(fp)
 8014a04:	8016c080 	call	8016c08 <exit>

08014a08 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8014a08:	defffe04 	addi	sp,sp,-8
 8014a0c:	df000115 	stw	fp,4(sp)
 8014a10:	df000104 	addi	fp,sp,4
 8014a14:	e13fff15 	stw	r4,-4(fp)
}
 8014a18:	e037883a 	mov	sp,fp
 8014a1c:	df000017 	ldw	fp,0(sp)
 8014a20:	dec00104 	addi	sp,sp,4
 8014a24:	f800283a 	ret

08014a28 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8014a28:	defffe04 	addi	sp,sp,-8
 8014a2c:	df000115 	stw	fp,4(sp)
 8014a30:	df000104 	addi	fp,sp,4
 8014a34:	e13fff15 	stw	r4,-4(fp)
}
 8014a38:	e037883a 	mov	sp,fp
 8014a3c:	df000017 	ldw	fp,0(sp)
 8014a40:	dec00104 	addi	sp,sp,4
 8014a44:	f800283a 	ret

08014a48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8014a48:	defffe04 	addi	sp,sp,-8
 8014a4c:	dfc00115 	stw	ra,4(sp)
 8014a50:	df000015 	stw	fp,0(sp)
 8014a54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8014a58:	008200b4 	movhi	r2,2050
 8014a5c:	108d5504 	addi	r2,r2,13652
 8014a60:	10800017 	ldw	r2,0(r2)
 8014a64:	10000526 	beq	r2,zero,8014a7c <alt_get_errno+0x34>
 8014a68:	008200b4 	movhi	r2,2050
 8014a6c:	108d5504 	addi	r2,r2,13652
 8014a70:	10800017 	ldw	r2,0(r2)
 8014a74:	103ee83a 	callr	r2
 8014a78:	00000206 	br	8014a84 <alt_get_errno+0x3c>
 8014a7c:	008200b4 	movhi	r2,2050
 8014a80:	10943004 	addi	r2,r2,20672
}
 8014a84:	e037883a 	mov	sp,fp
 8014a88:	dfc00117 	ldw	ra,4(sp)
 8014a8c:	df000017 	ldw	fp,0(sp)
 8014a90:	dec00204 	addi	sp,sp,8
 8014a94:	f800283a 	ret

08014a98 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8014a98:	defff904 	addi	sp,sp,-28
 8014a9c:	dfc00615 	stw	ra,24(sp)
 8014aa0:	df000515 	stw	fp,20(sp)
 8014aa4:	df000504 	addi	fp,sp,20
 8014aa8:	e13ffd15 	stw	r4,-12(fp)
 8014aac:	e17ffe15 	stw	r5,-8(fp)
 8014ab0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8014ab4:	e0bffd17 	ldw	r2,-12(fp)
 8014ab8:	10000616 	blt	r2,zero,8014ad4 <read+0x3c>
 8014abc:	e0bffd17 	ldw	r2,-12(fp)
 8014ac0:	10c00324 	muli	r3,r2,12
 8014ac4:	008200b4 	movhi	r2,2050
 8014ac8:	1088c704 	addi	r2,r2,8988
 8014acc:	1885883a 	add	r2,r3,r2
 8014ad0:	00000106 	br	8014ad8 <read+0x40>
 8014ad4:	0005883a 	mov	r2,zero
 8014ad8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8014adc:	e0bffb17 	ldw	r2,-20(fp)
 8014ae0:	10002226 	beq	r2,zero,8014b6c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8014ae4:	e0bffb17 	ldw	r2,-20(fp)
 8014ae8:	10800217 	ldw	r2,8(r2)
 8014aec:	108000cc 	andi	r2,r2,3
 8014af0:	10800060 	cmpeqi	r2,r2,1
 8014af4:	1000181e 	bne	r2,zero,8014b58 <read+0xc0>
        (fd->dev->read))
 8014af8:	e0bffb17 	ldw	r2,-20(fp)
 8014afc:	10800017 	ldw	r2,0(r2)
 8014b00:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8014b04:	10001426 	beq	r2,zero,8014b58 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8014b08:	e0bffb17 	ldw	r2,-20(fp)
 8014b0c:	10800017 	ldw	r2,0(r2)
 8014b10:	10800517 	ldw	r2,20(r2)
 8014b14:	e0ffff17 	ldw	r3,-4(fp)
 8014b18:	e13ffb17 	ldw	r4,-20(fp)
 8014b1c:	e17ffe17 	ldw	r5,-8(fp)
 8014b20:	180d883a 	mov	r6,r3
 8014b24:	103ee83a 	callr	r2
 8014b28:	e0bffc15 	stw	r2,-16(fp)
 8014b2c:	e0bffc17 	ldw	r2,-16(fp)
 8014b30:	1000070e 	bge	r2,zero,8014b50 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 8014b34:	8014a480 	call	8014a48 <alt_get_errno>
 8014b38:	1007883a 	mov	r3,r2
 8014b3c:	e0bffc17 	ldw	r2,-16(fp)
 8014b40:	0085c83a 	sub	r2,zero,r2
 8014b44:	18800015 	stw	r2,0(r3)
          return -1;
 8014b48:	00bfffc4 	movi	r2,-1
 8014b4c:	00000c06 	br	8014b80 <read+0xe8>
        }
        return rval;
 8014b50:	e0bffc17 	ldw	r2,-16(fp)
 8014b54:	00000a06 	br	8014b80 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8014b58:	8014a480 	call	8014a48 <alt_get_errno>
 8014b5c:	1007883a 	mov	r3,r2
 8014b60:	00800344 	movi	r2,13
 8014b64:	18800015 	stw	r2,0(r3)
 8014b68:	00000406 	br	8014b7c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8014b6c:	8014a480 	call	8014a48 <alt_get_errno>
 8014b70:	1007883a 	mov	r3,r2
 8014b74:	00801444 	movi	r2,81
 8014b78:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8014b7c:	00bfffc4 	movi	r2,-1
}
 8014b80:	e037883a 	mov	sp,fp
 8014b84:	dfc00117 	ldw	ra,4(sp)
 8014b88:	df000017 	ldw	fp,0(sp)
 8014b8c:	dec00204 	addi	sp,sp,8
 8014b90:	f800283a 	ret

08014b94 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8014b94:	defffe04 	addi	sp,sp,-8
 8014b98:	df000115 	stw	fp,4(sp)
 8014b9c:	df000104 	addi	fp,sp,4
 8014ba0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8014ba4:	e0bfff17 	ldw	r2,-4(fp)
 8014ba8:	108000d0 	cmplti	r2,r2,3
 8014bac:	10000d1e 	bne	r2,zero,8014be4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 8014bb0:	008200b4 	movhi	r2,2050
 8014bb4:	1088c704 	addi	r2,r2,8988
 8014bb8:	e0ffff17 	ldw	r3,-4(fp)
 8014bbc:	18c00324 	muli	r3,r3,12
 8014bc0:	10c5883a 	add	r2,r2,r3
 8014bc4:	10800204 	addi	r2,r2,8
 8014bc8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8014bcc:	008200b4 	movhi	r2,2050
 8014bd0:	1088c704 	addi	r2,r2,8988
 8014bd4:	e0ffff17 	ldw	r3,-4(fp)
 8014bd8:	18c00324 	muli	r3,r3,12
 8014bdc:	10c5883a 	add	r2,r2,r3
 8014be0:	10000015 	stw	zero,0(r2)
  }
}
 8014be4:	e037883a 	mov	sp,fp
 8014be8:	df000017 	ldw	fp,0(sp)
 8014bec:	dec00104 	addi	sp,sp,4
 8014bf0:	f800283a 	ret

08014bf4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8014bf4:	defff904 	addi	sp,sp,-28
 8014bf8:	df000615 	stw	fp,24(sp)
 8014bfc:	df000604 	addi	fp,sp,24
 8014c00:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014c04:	0005303a 	rdctl	r2,status
 8014c08:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014c0c:	e0fffc17 	ldw	r3,-16(fp)
 8014c10:	00bfff84 	movi	r2,-2
 8014c14:	1884703a 	and	r2,r3,r2
 8014c18:	1001703a 	wrctl	status,r2
  
  return context;
 8014c1c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8014c20:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8014c24:	d0a00c17 	ldw	r2,-32720(gp)
 8014c28:	10c000c4 	addi	r3,r2,3
 8014c2c:	00bfff04 	movi	r2,-4
 8014c30:	1884703a 	and	r2,r3,r2
 8014c34:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8014c38:	d0e00c17 	ldw	r3,-32720(gp)
 8014c3c:	e0bfff17 	ldw	r2,-4(fp)
 8014c40:	1887883a 	add	r3,r3,r2
 8014c44:	00830034 	movhi	r2,3072
 8014c48:	10800004 	addi	r2,r2,0
 8014c4c:	10c0062e 	bgeu	r2,r3,8014c68 <sbrk+0x74>
 8014c50:	e0bffa17 	ldw	r2,-24(fp)
 8014c54:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014c58:	e0bffd17 	ldw	r2,-12(fp)
 8014c5c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8014c60:	00bfffc4 	movi	r2,-1
 8014c64:	00000b06 	br	8014c94 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8014c68:	d0a00c17 	ldw	r2,-32720(gp)
 8014c6c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 8014c70:	d0e00c17 	ldw	r3,-32720(gp)
 8014c74:	e0bfff17 	ldw	r2,-4(fp)
 8014c78:	1885883a 	add	r2,r3,r2
 8014c7c:	d0a00c15 	stw	r2,-32720(gp)
 8014c80:	e0bffa17 	ldw	r2,-24(fp)
 8014c84:	e0bffe15 	stw	r2,-8(fp)
 8014c88:	e0bffe17 	ldw	r2,-8(fp)
 8014c8c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8014c90:	e0bffb17 	ldw	r2,-20(fp)
} 
 8014c94:	e037883a 	mov	sp,fp
 8014c98:	df000017 	ldw	fp,0(sp)
 8014c9c:	dec00104 	addi	sp,sp,4
 8014ca0:	f800283a 	ret

08014ca4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8014ca4:	defffa04 	addi	sp,sp,-24
 8014ca8:	df000515 	stw	fp,20(sp)
 8014cac:	df000504 	addi	fp,sp,20
 8014cb0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014cb4:	0005303a 	rdctl	r2,status
 8014cb8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014cbc:	e0fffc17 	ldw	r3,-16(fp)
 8014cc0:	00bfff84 	movi	r2,-2
 8014cc4:	1884703a 	and	r2,r3,r2
 8014cc8:	1001703a 	wrctl	status,r2
  
  return context;
 8014ccc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8014cd0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8014cd4:	e0bfff17 	ldw	r2,-4(fp)
 8014cd8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8014cdc:	e0bffd17 	ldw	r2,-12(fp)
 8014ce0:	10800017 	ldw	r2,0(r2)
 8014ce4:	e0fffd17 	ldw	r3,-12(fp)
 8014ce8:	18c00117 	ldw	r3,4(r3)
 8014cec:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8014cf0:	e0bffd17 	ldw	r2,-12(fp)
 8014cf4:	10800117 	ldw	r2,4(r2)
 8014cf8:	e0fffd17 	ldw	r3,-12(fp)
 8014cfc:	18c00017 	ldw	r3,0(r3)
 8014d00:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8014d04:	e0bffd17 	ldw	r2,-12(fp)
 8014d08:	e0fffd17 	ldw	r3,-12(fp)
 8014d0c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8014d10:	e0bffd17 	ldw	r2,-12(fp)
 8014d14:	e0fffd17 	ldw	r3,-12(fp)
 8014d18:	10c00015 	stw	r3,0(r2)
 8014d1c:	e0bffb17 	ldw	r2,-20(fp)
 8014d20:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014d24:	e0bffe17 	ldw	r2,-8(fp)
 8014d28:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8014d2c:	e037883a 	mov	sp,fp
 8014d30:	df000017 	ldw	fp,0(sp)
 8014d34:	dec00104 	addi	sp,sp,4
 8014d38:	f800283a 	ret

08014d3c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8014d3c:	defffb04 	addi	sp,sp,-20
 8014d40:	dfc00415 	stw	ra,16(sp)
 8014d44:	df000315 	stw	fp,12(sp)
 8014d48:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8014d4c:	d0a00d17 	ldw	r2,-32716(gp)
 8014d50:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8014d54:	d0a6f217 	ldw	r2,-25656(gp)
 8014d58:	10800044 	addi	r2,r2,1
 8014d5c:	d0a6f215 	stw	r2,-25656(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8014d60:	00002e06 	br	8014e1c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8014d64:	e0bffd17 	ldw	r2,-12(fp)
 8014d68:	10800017 	ldw	r2,0(r2)
 8014d6c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8014d70:	e0bffd17 	ldw	r2,-12(fp)
 8014d74:	10800403 	ldbu	r2,16(r2)
 8014d78:	10803fcc 	andi	r2,r2,255
 8014d7c:	10000426 	beq	r2,zero,8014d90 <alt_tick+0x54>
 8014d80:	d0a6f217 	ldw	r2,-25656(gp)
 8014d84:	1000021e 	bne	r2,zero,8014d90 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8014d88:	e0bffd17 	ldw	r2,-12(fp)
 8014d8c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8014d90:	e0bffd17 	ldw	r2,-12(fp)
 8014d94:	10800217 	ldw	r2,8(r2)
 8014d98:	d0e6f217 	ldw	r3,-25656(gp)
 8014d9c:	18801d36 	bltu	r3,r2,8014e14 <alt_tick+0xd8>
 8014da0:	e0bffd17 	ldw	r2,-12(fp)
 8014da4:	10800403 	ldbu	r2,16(r2)
 8014da8:	10803fcc 	andi	r2,r2,255
 8014dac:	1000191e 	bne	r2,zero,8014e14 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8014db0:	e0bffd17 	ldw	r2,-12(fp)
 8014db4:	10800317 	ldw	r2,12(r2)
 8014db8:	e0fffd17 	ldw	r3,-12(fp)
 8014dbc:	18c00517 	ldw	r3,20(r3)
 8014dc0:	1809883a 	mov	r4,r3
 8014dc4:	103ee83a 	callr	r2
 8014dc8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8014dcc:	e0bfff17 	ldw	r2,-4(fp)
 8014dd0:	1000031e 	bne	r2,zero,8014de0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8014dd4:	e13ffd17 	ldw	r4,-12(fp)
 8014dd8:	8014ca40 	call	8014ca4 <alt_alarm_stop>
 8014ddc:	00000d06 	br	8014e14 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8014de0:	e0bffd17 	ldw	r2,-12(fp)
 8014de4:	10c00217 	ldw	r3,8(r2)
 8014de8:	e0bfff17 	ldw	r2,-4(fp)
 8014dec:	1887883a 	add	r3,r3,r2
 8014df0:	e0bffd17 	ldw	r2,-12(fp)
 8014df4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8014df8:	e0bffd17 	ldw	r2,-12(fp)
 8014dfc:	10c00217 	ldw	r3,8(r2)
 8014e00:	d0a6f217 	ldw	r2,-25656(gp)
 8014e04:	1880032e 	bgeu	r3,r2,8014e14 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8014e08:	e0bffd17 	ldw	r2,-12(fp)
 8014e0c:	00c00044 	movi	r3,1
 8014e10:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8014e14:	e0bffe17 	ldw	r2,-8(fp)
 8014e18:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8014e1c:	e0fffd17 	ldw	r3,-12(fp)
 8014e20:	d0a00d04 	addi	r2,gp,-32716
 8014e24:	18bfcf1e 	bne	r3,r2,8014d64 <__alt_data_end+0xfc014d64>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8014e28:	0001883a 	nop
}
 8014e2c:	e037883a 	mov	sp,fp
 8014e30:	dfc00117 	ldw	ra,4(sp)
 8014e34:	df000017 	ldw	fp,0(sp)
 8014e38:	dec00204 	addi	sp,sp,8
 8014e3c:	f800283a 	ret

08014e40 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8014e40:	defffd04 	addi	sp,sp,-12
 8014e44:	dfc00215 	stw	ra,8(sp)
 8014e48:	df000115 	stw	fp,4(sp)
 8014e4c:	df000104 	addi	fp,sp,4
 8014e50:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8014e54:	e13fff17 	ldw	r4,-4(fp)
 8014e58:	014200b4 	movhi	r5,2050
 8014e5c:	294d5204 	addi	r5,r5,13640
 8014e60:	80160e80 	call	80160e8 <alt_dev_llist_insert>
}
 8014e64:	e037883a 	mov	sp,fp
 8014e68:	dfc00117 	ldw	ra,4(sp)
 8014e6c:	df000017 	ldw	fp,0(sp)
 8014e70:	dec00204 	addi	sp,sp,8
 8014e74:	f800283a 	ret

08014e78 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8014e78:	defffd04 	addi	sp,sp,-12
 8014e7c:	dfc00215 	stw	ra,8(sp)
 8014e80:	df000115 	stw	fp,4(sp)
 8014e84:	df000104 	addi	fp,sp,4
 8014e88:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 8014e8c:	80169800 	call	8016980 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8014e90:	00800044 	movi	r2,1
 8014e94:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8014e98:	e037883a 	mov	sp,fp
 8014e9c:	dfc00117 	ldw	ra,4(sp)
 8014ea0:	df000017 	ldw	fp,0(sp)
 8014ea4:	dec00204 	addi	sp,sp,8
 8014ea8:	f800283a 	ret

08014eac <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8014eac:	defffe04 	addi	sp,sp,-8
 8014eb0:	dfc00115 	stw	ra,4(sp)
 8014eb4:	df000015 	stw	fp,0(sp)
 8014eb8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 8014ebc:	01082004 	movi	r4,8320
 8014ec0:	000b883a 	mov	r5,zero
 8014ec4:	01800104 	movi	r6,4
 8014ec8:	01c0fa04 	movi	r7,1000
 8014ecc:	80159dc0 	call	80159dc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8014ed0:	010200b4 	movhi	r4,2050
 8014ed4:	21093104 	addi	r4,r4,9412
 8014ed8:	000b883a 	mov	r5,zero
 8014edc:	01800144 	movi	r6,5
 8014ee0:	80150800 	call	8015080 <altera_avalon_jtag_uart_init>
 8014ee4:	010200b4 	movhi	r4,2050
 8014ee8:	21092704 	addi	r4,r4,9372
 8014eec:	8014e400 	call	8014e40 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 8014ef0:	010200b4 	movhi	r4,2050
 8014ef4:	210d3f04 	addi	r4,r4,13564
 8014ef8:	8015b140 	call	8015b14 <alt_up_character_lcd_init>
 8014efc:	010200b4 	movhi	r4,2050
 8014f00:	210d3f04 	addi	r4,r4,13564
 8014f04:	8014e400 	call	8014e40 <alt_dev_reg>
}
 8014f08:	e037883a 	mov	sp,fp
 8014f0c:	dfc00117 	ldw	ra,4(sp)
 8014f10:	df000017 	ldw	fp,0(sp)
 8014f14:	dec00204 	addi	sp,sp,8
 8014f18:	f800283a 	ret

08014f1c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8014f1c:	defffa04 	addi	sp,sp,-24
 8014f20:	dfc00515 	stw	ra,20(sp)
 8014f24:	df000415 	stw	fp,16(sp)
 8014f28:	df000404 	addi	fp,sp,16
 8014f2c:	e13ffd15 	stw	r4,-12(fp)
 8014f30:	e17ffe15 	stw	r5,-8(fp)
 8014f34:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8014f38:	e0bffd17 	ldw	r2,-12(fp)
 8014f3c:	10800017 	ldw	r2,0(r2)
 8014f40:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8014f44:	e0bffc17 	ldw	r2,-16(fp)
 8014f48:	10c00a04 	addi	r3,r2,40
 8014f4c:	e0bffd17 	ldw	r2,-12(fp)
 8014f50:	10800217 	ldw	r2,8(r2)
 8014f54:	1809883a 	mov	r4,r3
 8014f58:	e17ffe17 	ldw	r5,-8(fp)
 8014f5c:	e1bfff17 	ldw	r6,-4(fp)
 8014f60:	100f883a 	mov	r7,r2
 8014f64:	80155440 	call	8015544 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8014f68:	e037883a 	mov	sp,fp
 8014f6c:	dfc00117 	ldw	ra,4(sp)
 8014f70:	df000017 	ldw	fp,0(sp)
 8014f74:	dec00204 	addi	sp,sp,8
 8014f78:	f800283a 	ret

08014f7c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8014f7c:	defffa04 	addi	sp,sp,-24
 8014f80:	dfc00515 	stw	ra,20(sp)
 8014f84:	df000415 	stw	fp,16(sp)
 8014f88:	df000404 	addi	fp,sp,16
 8014f8c:	e13ffd15 	stw	r4,-12(fp)
 8014f90:	e17ffe15 	stw	r5,-8(fp)
 8014f94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8014f98:	e0bffd17 	ldw	r2,-12(fp)
 8014f9c:	10800017 	ldw	r2,0(r2)
 8014fa0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8014fa4:	e0bffc17 	ldw	r2,-16(fp)
 8014fa8:	10c00a04 	addi	r3,r2,40
 8014fac:	e0bffd17 	ldw	r2,-12(fp)
 8014fb0:	10800217 	ldw	r2,8(r2)
 8014fb4:	1809883a 	mov	r4,r3
 8014fb8:	e17ffe17 	ldw	r5,-8(fp)
 8014fbc:	e1bfff17 	ldw	r6,-4(fp)
 8014fc0:	100f883a 	mov	r7,r2
 8014fc4:	80157500 	call	8015750 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8014fc8:	e037883a 	mov	sp,fp
 8014fcc:	dfc00117 	ldw	ra,4(sp)
 8014fd0:	df000017 	ldw	fp,0(sp)
 8014fd4:	dec00204 	addi	sp,sp,8
 8014fd8:	f800283a 	ret

08014fdc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8014fdc:	defffc04 	addi	sp,sp,-16
 8014fe0:	dfc00315 	stw	ra,12(sp)
 8014fe4:	df000215 	stw	fp,8(sp)
 8014fe8:	df000204 	addi	fp,sp,8
 8014fec:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8014ff0:	e0bfff17 	ldw	r2,-4(fp)
 8014ff4:	10800017 	ldw	r2,0(r2)
 8014ff8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8014ffc:	e0bffe17 	ldw	r2,-8(fp)
 8015000:	10c00a04 	addi	r3,r2,40
 8015004:	e0bfff17 	ldw	r2,-4(fp)
 8015008:	10800217 	ldw	r2,8(r2)
 801500c:	1809883a 	mov	r4,r3
 8015010:	100b883a 	mov	r5,r2
 8015014:	80153f00 	call	80153f0 <altera_avalon_jtag_uart_close>
}
 8015018:	e037883a 	mov	sp,fp
 801501c:	dfc00117 	ldw	ra,4(sp)
 8015020:	df000017 	ldw	fp,0(sp)
 8015024:	dec00204 	addi	sp,sp,8
 8015028:	f800283a 	ret

0801502c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 801502c:	defffa04 	addi	sp,sp,-24
 8015030:	dfc00515 	stw	ra,20(sp)
 8015034:	df000415 	stw	fp,16(sp)
 8015038:	df000404 	addi	fp,sp,16
 801503c:	e13ffd15 	stw	r4,-12(fp)
 8015040:	e17ffe15 	stw	r5,-8(fp)
 8015044:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8015048:	e0bffd17 	ldw	r2,-12(fp)
 801504c:	10800017 	ldw	r2,0(r2)
 8015050:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8015054:	e0bffc17 	ldw	r2,-16(fp)
 8015058:	10800a04 	addi	r2,r2,40
 801505c:	1009883a 	mov	r4,r2
 8015060:	e17ffe17 	ldw	r5,-8(fp)
 8015064:	e1bfff17 	ldw	r6,-4(fp)
 8015068:	80154580 	call	8015458 <altera_avalon_jtag_uart_ioctl>
}
 801506c:	e037883a 	mov	sp,fp
 8015070:	dfc00117 	ldw	ra,4(sp)
 8015074:	df000017 	ldw	fp,0(sp)
 8015078:	dec00204 	addi	sp,sp,8
 801507c:	f800283a 	ret

08015080 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8015080:	defffa04 	addi	sp,sp,-24
 8015084:	dfc00515 	stw	ra,20(sp)
 8015088:	df000415 	stw	fp,16(sp)
 801508c:	df000404 	addi	fp,sp,16
 8015090:	e13ffd15 	stw	r4,-12(fp)
 8015094:	e17ffe15 	stw	r5,-8(fp)
 8015098:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 801509c:	e0bffd17 	ldw	r2,-12(fp)
 80150a0:	00c00044 	movi	r3,1
 80150a4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 80150a8:	e0bffd17 	ldw	r2,-12(fp)
 80150ac:	10800017 	ldw	r2,0(r2)
 80150b0:	10800104 	addi	r2,r2,4
 80150b4:	1007883a 	mov	r3,r2
 80150b8:	e0bffd17 	ldw	r2,-12(fp)
 80150bc:	10800817 	ldw	r2,32(r2)
 80150c0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 80150c4:	e0fffe17 	ldw	r3,-8(fp)
 80150c8:	e0bfff17 	ldw	r2,-4(fp)
 80150cc:	d8000015 	stw	zero,0(sp)
 80150d0:	1809883a 	mov	r4,r3
 80150d4:	100b883a 	mov	r5,r2
 80150d8:	01820074 	movhi	r6,2049
 80150dc:	31945104 	addi	r6,r6,20804
 80150e0:	e1fffd17 	ldw	r7,-12(fp)
 80150e4:	80163040 	call	8016304 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 80150e8:	e0bffd17 	ldw	r2,-12(fp)
 80150ec:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 80150f0:	e0bffd17 	ldw	r2,-12(fp)
 80150f4:	10c00204 	addi	r3,r2,8
 80150f8:	008200b4 	movhi	r2,2050
 80150fc:	10943b04 	addi	r2,r2,20716
 8015100:	10800017 	ldw	r2,0(r2)
 8015104:	1809883a 	mov	r4,r3
 8015108:	100b883a 	mov	r5,r2
 801510c:	01820074 	movhi	r6,2049
 8015110:	3194d204 	addi	r6,r6,21320
 8015114:	e1fffd17 	ldw	r7,-12(fp)
 8015118:	8015f3c0 	call	8015f3c <alt_alarm_start>
 801511c:	1000040e 	bge	r2,zero,8015130 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8015120:	e0fffd17 	ldw	r3,-12(fp)
 8015124:	00a00034 	movhi	r2,32768
 8015128:	10bfffc4 	addi	r2,r2,-1
 801512c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8015130:	e037883a 	mov	sp,fp
 8015134:	dfc00117 	ldw	ra,4(sp)
 8015138:	df000017 	ldw	fp,0(sp)
 801513c:	dec00204 	addi	sp,sp,8
 8015140:	f800283a 	ret

08015144 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8015144:	defff804 	addi	sp,sp,-32
 8015148:	df000715 	stw	fp,28(sp)
 801514c:	df000704 	addi	fp,sp,28
 8015150:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8015154:	e0bfff17 	ldw	r2,-4(fp)
 8015158:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 801515c:	e0bffb17 	ldw	r2,-20(fp)
 8015160:	10800017 	ldw	r2,0(r2)
 8015164:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8015168:	e0bffc17 	ldw	r2,-16(fp)
 801516c:	10800104 	addi	r2,r2,4
 8015170:	10800037 	ldwio	r2,0(r2)
 8015174:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8015178:	e0bffd17 	ldw	r2,-12(fp)
 801517c:	1080c00c 	andi	r2,r2,768
 8015180:	1000011e 	bne	r2,zero,8015188 <altera_avalon_jtag_uart_irq+0x44>
      break;
 8015184:	00006c06 	br	8015338 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8015188:	e0bffd17 	ldw	r2,-12(fp)
 801518c:	1080400c 	andi	r2,r2,256
 8015190:	10003426 	beq	r2,zero,8015264 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8015194:	00800074 	movhi	r2,1
 8015198:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801519c:	e0bffb17 	ldw	r2,-20(fp)
 80151a0:	10800a17 	ldw	r2,40(r2)
 80151a4:	10800044 	addi	r2,r2,1
 80151a8:	1081ffcc 	andi	r2,r2,2047
 80151ac:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 80151b0:	e0bffb17 	ldw	r2,-20(fp)
 80151b4:	10c00b17 	ldw	r3,44(r2)
 80151b8:	e0bffe17 	ldw	r2,-8(fp)
 80151bc:	1880011e 	bne	r3,r2,80151c4 <altera_avalon_jtag_uart_irq+0x80>
          break;
 80151c0:	00001606 	br	801521c <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 80151c4:	e0bffc17 	ldw	r2,-16(fp)
 80151c8:	10800037 	ldwio	r2,0(r2)
 80151cc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 80151d0:	e0bff917 	ldw	r2,-28(fp)
 80151d4:	10a0000c 	andi	r2,r2,32768
 80151d8:	1000011e 	bne	r2,zero,80151e0 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 80151dc:	00000f06 	br	801521c <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 80151e0:	e0bffb17 	ldw	r2,-20(fp)
 80151e4:	10800a17 	ldw	r2,40(r2)
 80151e8:	e0fff917 	ldw	r3,-28(fp)
 80151ec:	1809883a 	mov	r4,r3
 80151f0:	e0fffb17 	ldw	r3,-20(fp)
 80151f4:	1885883a 	add	r2,r3,r2
 80151f8:	10800e04 	addi	r2,r2,56
 80151fc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8015200:	e0bffb17 	ldw	r2,-20(fp)
 8015204:	10800a17 	ldw	r2,40(r2)
 8015208:	10800044 	addi	r2,r2,1
 801520c:	10c1ffcc 	andi	r3,r2,2047
 8015210:	e0bffb17 	ldw	r2,-20(fp)
 8015214:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8015218:	003fe006 	br	801519c <__alt_data_end+0xfc01519c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 801521c:	e0bff917 	ldw	r2,-28(fp)
 8015220:	10bfffec 	andhi	r2,r2,65535
 8015224:	10000f26 	beq	r2,zero,8015264 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8015228:	e0bffb17 	ldw	r2,-20(fp)
 801522c:	10c00817 	ldw	r3,32(r2)
 8015230:	00bfff84 	movi	r2,-2
 8015234:	1886703a 	and	r3,r3,r2
 8015238:	e0bffb17 	ldw	r2,-20(fp)
 801523c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8015240:	e0bffc17 	ldw	r2,-16(fp)
 8015244:	10800104 	addi	r2,r2,4
 8015248:	1007883a 	mov	r3,r2
 801524c:	e0bffb17 	ldw	r2,-20(fp)
 8015250:	10800817 	ldw	r2,32(r2)
 8015254:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8015258:	e0bffc17 	ldw	r2,-16(fp)
 801525c:	10800104 	addi	r2,r2,4
 8015260:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8015264:	e0bffd17 	ldw	r2,-12(fp)
 8015268:	1080800c 	andi	r2,r2,512
 801526c:	10003126 	beq	r2,zero,8015334 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8015270:	e0bffd17 	ldw	r2,-12(fp)
 8015274:	1004d43a 	srli	r2,r2,16
 8015278:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 801527c:	00001406 	br	80152d0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8015280:	e0bffc17 	ldw	r2,-16(fp)
 8015284:	e0fffb17 	ldw	r3,-20(fp)
 8015288:	18c00d17 	ldw	r3,52(r3)
 801528c:	e13ffb17 	ldw	r4,-20(fp)
 8015290:	20c7883a 	add	r3,r4,r3
 8015294:	18c20e04 	addi	r3,r3,2104
 8015298:	18c00003 	ldbu	r3,0(r3)
 801529c:	18c03fcc 	andi	r3,r3,255
 80152a0:	18c0201c 	xori	r3,r3,128
 80152a4:	18ffe004 	addi	r3,r3,-128
 80152a8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80152ac:	e0bffb17 	ldw	r2,-20(fp)
 80152b0:	10800d17 	ldw	r2,52(r2)
 80152b4:	10800044 	addi	r2,r2,1
 80152b8:	10c1ffcc 	andi	r3,r2,2047
 80152bc:	e0bffb17 	ldw	r2,-20(fp)
 80152c0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 80152c4:	e0bffa17 	ldw	r2,-24(fp)
 80152c8:	10bfffc4 	addi	r2,r2,-1
 80152cc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 80152d0:	e0bffa17 	ldw	r2,-24(fp)
 80152d4:	10000526 	beq	r2,zero,80152ec <altera_avalon_jtag_uart_irq+0x1a8>
 80152d8:	e0bffb17 	ldw	r2,-20(fp)
 80152dc:	10c00d17 	ldw	r3,52(r2)
 80152e0:	e0bffb17 	ldw	r2,-20(fp)
 80152e4:	10800c17 	ldw	r2,48(r2)
 80152e8:	18bfe51e 	bne	r3,r2,8015280 <__alt_data_end+0xfc015280>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 80152ec:	e0bffa17 	ldw	r2,-24(fp)
 80152f0:	10001026 	beq	r2,zero,8015334 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 80152f4:	e0bffb17 	ldw	r2,-20(fp)
 80152f8:	10c00817 	ldw	r3,32(r2)
 80152fc:	00bfff44 	movi	r2,-3
 8015300:	1886703a 	and	r3,r3,r2
 8015304:	e0bffb17 	ldw	r2,-20(fp)
 8015308:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801530c:	e0bffb17 	ldw	r2,-20(fp)
 8015310:	10800017 	ldw	r2,0(r2)
 8015314:	10800104 	addi	r2,r2,4
 8015318:	1007883a 	mov	r3,r2
 801531c:	e0bffb17 	ldw	r2,-20(fp)
 8015320:	10800817 	ldw	r2,32(r2)
 8015324:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8015328:	e0bffc17 	ldw	r2,-16(fp)
 801532c:	10800104 	addi	r2,r2,4
 8015330:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8015334:	003f8c06 	br	8015168 <__alt_data_end+0xfc015168>
}
 8015338:	e037883a 	mov	sp,fp
 801533c:	df000017 	ldw	fp,0(sp)
 8015340:	dec00104 	addi	sp,sp,4
 8015344:	f800283a 	ret

08015348 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8015348:	defff804 	addi	sp,sp,-32
 801534c:	df000715 	stw	fp,28(sp)
 8015350:	df000704 	addi	fp,sp,28
 8015354:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8015358:	e0bffb17 	ldw	r2,-20(fp)
 801535c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8015360:	e0bff917 	ldw	r2,-28(fp)
 8015364:	10800017 	ldw	r2,0(r2)
 8015368:	10800104 	addi	r2,r2,4
 801536c:	10800037 	ldwio	r2,0(r2)
 8015370:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8015374:	e0bffa17 	ldw	r2,-24(fp)
 8015378:	1081000c 	andi	r2,r2,1024
 801537c:	10000b26 	beq	r2,zero,80153ac <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8015380:	e0bff917 	ldw	r2,-28(fp)
 8015384:	10800017 	ldw	r2,0(r2)
 8015388:	10800104 	addi	r2,r2,4
 801538c:	1007883a 	mov	r3,r2
 8015390:	e0bff917 	ldw	r2,-28(fp)
 8015394:	10800817 	ldw	r2,32(r2)
 8015398:	10810014 	ori	r2,r2,1024
 801539c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 80153a0:	e0bff917 	ldw	r2,-28(fp)
 80153a4:	10000915 	stw	zero,36(r2)
 80153a8:	00000a06 	br	80153d4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 80153ac:	e0bff917 	ldw	r2,-28(fp)
 80153b0:	10c00917 	ldw	r3,36(r2)
 80153b4:	00a00034 	movhi	r2,32768
 80153b8:	10bfff04 	addi	r2,r2,-4
 80153bc:	10c00536 	bltu	r2,r3,80153d4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 80153c0:	e0bff917 	ldw	r2,-28(fp)
 80153c4:	10800917 	ldw	r2,36(r2)
 80153c8:	10c00044 	addi	r3,r2,1
 80153cc:	e0bff917 	ldw	r2,-28(fp)
 80153d0:	10c00915 	stw	r3,36(r2)
 80153d4:	008200b4 	movhi	r2,2050
 80153d8:	10943b04 	addi	r2,r2,20716
 80153dc:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 80153e0:	e037883a 	mov	sp,fp
 80153e4:	df000017 	ldw	fp,0(sp)
 80153e8:	dec00104 	addi	sp,sp,4
 80153ec:	f800283a 	ret

080153f0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 80153f0:	defffd04 	addi	sp,sp,-12
 80153f4:	df000215 	stw	fp,8(sp)
 80153f8:	df000204 	addi	fp,sp,8
 80153fc:	e13ffe15 	stw	r4,-8(fp)
 8015400:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8015404:	00000506 	br	801541c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8015408:	e0bfff17 	ldw	r2,-4(fp)
 801540c:	1090000c 	andi	r2,r2,16384
 8015410:	10000226 	beq	r2,zero,801541c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8015414:	00bffd44 	movi	r2,-11
 8015418:	00000b06 	br	8015448 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 801541c:	e0bffe17 	ldw	r2,-8(fp)
 8015420:	10c00d17 	ldw	r3,52(r2)
 8015424:	e0bffe17 	ldw	r2,-8(fp)
 8015428:	10800c17 	ldw	r2,48(r2)
 801542c:	18800526 	beq	r3,r2,8015444 <altera_avalon_jtag_uart_close+0x54>
 8015430:	e0bffe17 	ldw	r2,-8(fp)
 8015434:	10c00917 	ldw	r3,36(r2)
 8015438:	e0bffe17 	ldw	r2,-8(fp)
 801543c:	10800117 	ldw	r2,4(r2)
 8015440:	18bff136 	bltu	r3,r2,8015408 <__alt_data_end+0xfc015408>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8015444:	0005883a 	mov	r2,zero
}
 8015448:	e037883a 	mov	sp,fp
 801544c:	df000017 	ldw	fp,0(sp)
 8015450:	dec00104 	addi	sp,sp,4
 8015454:	f800283a 	ret

08015458 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8015458:	defffa04 	addi	sp,sp,-24
 801545c:	df000515 	stw	fp,20(sp)
 8015460:	df000504 	addi	fp,sp,20
 8015464:	e13ffd15 	stw	r4,-12(fp)
 8015468:	e17ffe15 	stw	r5,-8(fp)
 801546c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8015470:	00bff9c4 	movi	r2,-25
 8015474:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8015478:	e0bffe17 	ldw	r2,-8(fp)
 801547c:	10da8060 	cmpeqi	r3,r2,27137
 8015480:	1800031e 	bne	r3,zero,8015490 <altera_avalon_jtag_uart_ioctl+0x38>
 8015484:	109a80a0 	cmpeqi	r2,r2,27138
 8015488:	1000191e 	bne	r2,zero,80154f0 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 801548c:	00002806 	br	8015530 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8015490:	e0bffd17 	ldw	r2,-12(fp)
 8015494:	10c00117 	ldw	r3,4(r2)
 8015498:	00a00034 	movhi	r2,32768
 801549c:	10bfffc4 	addi	r2,r2,-1
 80154a0:	18801226 	beq	r3,r2,80154ec <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 80154a4:	e0bfff17 	ldw	r2,-4(fp)
 80154a8:	10800017 	ldw	r2,0(r2)
 80154ac:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 80154b0:	e0bffc17 	ldw	r2,-16(fp)
 80154b4:	10800090 	cmplti	r2,r2,2
 80154b8:	1000061e 	bne	r2,zero,80154d4 <altera_avalon_jtag_uart_ioctl+0x7c>
 80154bc:	e0fffc17 	ldw	r3,-16(fp)
 80154c0:	00a00034 	movhi	r2,32768
 80154c4:	10bfffc4 	addi	r2,r2,-1
 80154c8:	18800226 	beq	r3,r2,80154d4 <altera_avalon_jtag_uart_ioctl+0x7c>
 80154cc:	e0bffc17 	ldw	r2,-16(fp)
 80154d0:	00000206 	br	80154dc <altera_avalon_jtag_uart_ioctl+0x84>
 80154d4:	00a00034 	movhi	r2,32768
 80154d8:	10bfff84 	addi	r2,r2,-2
 80154dc:	e0fffd17 	ldw	r3,-12(fp)
 80154e0:	18800115 	stw	r2,4(r3)
      rc = 0;
 80154e4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80154e8:	00001106 	br	8015530 <altera_avalon_jtag_uart_ioctl+0xd8>
 80154ec:	00001006 	br	8015530 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 80154f0:	e0bffd17 	ldw	r2,-12(fp)
 80154f4:	10c00117 	ldw	r3,4(r2)
 80154f8:	00a00034 	movhi	r2,32768
 80154fc:	10bfffc4 	addi	r2,r2,-1
 8015500:	18800a26 	beq	r3,r2,801552c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8015504:	e0bffd17 	ldw	r2,-12(fp)
 8015508:	10c00917 	ldw	r3,36(r2)
 801550c:	e0bffd17 	ldw	r2,-12(fp)
 8015510:	10800117 	ldw	r2,4(r2)
 8015514:	1885803a 	cmpltu	r2,r3,r2
 8015518:	10c03fcc 	andi	r3,r2,255
 801551c:	e0bfff17 	ldw	r2,-4(fp)
 8015520:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8015524:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8015528:	00000006 	br	801552c <altera_avalon_jtag_uart_ioctl+0xd4>
 801552c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8015530:	e0bffb17 	ldw	r2,-20(fp)
}
 8015534:	e037883a 	mov	sp,fp
 8015538:	df000017 	ldw	fp,0(sp)
 801553c:	dec00104 	addi	sp,sp,4
 8015540:	f800283a 	ret

08015544 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8015544:	defff304 	addi	sp,sp,-52
 8015548:	dfc00c15 	stw	ra,48(sp)
 801554c:	df000b15 	stw	fp,44(sp)
 8015550:	df000b04 	addi	fp,sp,44
 8015554:	e13ffc15 	stw	r4,-16(fp)
 8015558:	e17ffd15 	stw	r5,-12(fp)
 801555c:	e1bffe15 	stw	r6,-8(fp)
 8015560:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8015564:	e0bffd17 	ldw	r2,-12(fp)
 8015568:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 801556c:	00004906 	br	8015694 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8015570:	e0bffc17 	ldw	r2,-16(fp)
 8015574:	10800a17 	ldw	r2,40(r2)
 8015578:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 801557c:	e0bffc17 	ldw	r2,-16(fp)
 8015580:	10800b17 	ldw	r2,44(r2)
 8015584:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8015588:	e0fff717 	ldw	r3,-36(fp)
 801558c:	e0bff817 	ldw	r2,-32(fp)
 8015590:	18800536 	bltu	r3,r2,80155a8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8015594:	e0fff717 	ldw	r3,-36(fp)
 8015598:	e0bff817 	ldw	r2,-32(fp)
 801559c:	1885c83a 	sub	r2,r3,r2
 80155a0:	e0bff615 	stw	r2,-40(fp)
 80155a4:	00000406 	br	80155b8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 80155a8:	00c20004 	movi	r3,2048
 80155ac:	e0bff817 	ldw	r2,-32(fp)
 80155b0:	1885c83a 	sub	r2,r3,r2
 80155b4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 80155b8:	e0bff617 	ldw	r2,-40(fp)
 80155bc:	1000011e 	bne	r2,zero,80155c4 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 80155c0:	00001d06 	br	8015638 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 80155c4:	e0fffe17 	ldw	r3,-8(fp)
 80155c8:	e0bff617 	ldw	r2,-40(fp)
 80155cc:	1880022e 	bgeu	r3,r2,80155d8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 80155d0:	e0bffe17 	ldw	r2,-8(fp)
 80155d4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 80155d8:	e0bff817 	ldw	r2,-32(fp)
 80155dc:	10800e04 	addi	r2,r2,56
 80155e0:	e0fffc17 	ldw	r3,-16(fp)
 80155e4:	1885883a 	add	r2,r3,r2
 80155e8:	e13ff517 	ldw	r4,-44(fp)
 80155ec:	100b883a 	mov	r5,r2
 80155f0:	e1bff617 	ldw	r6,-40(fp)
 80155f4:	800d88c0 	call	800d88c <memcpy>
      ptr   += n;
 80155f8:	e0fff517 	ldw	r3,-44(fp)
 80155fc:	e0bff617 	ldw	r2,-40(fp)
 8015600:	1885883a 	add	r2,r3,r2
 8015604:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8015608:	e0fffe17 	ldw	r3,-8(fp)
 801560c:	e0bff617 	ldw	r2,-40(fp)
 8015610:	1885c83a 	sub	r2,r3,r2
 8015614:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8015618:	e0fff817 	ldw	r3,-32(fp)
 801561c:	e0bff617 	ldw	r2,-40(fp)
 8015620:	1885883a 	add	r2,r3,r2
 8015624:	10c1ffcc 	andi	r3,r2,2047
 8015628:	e0bffc17 	ldw	r2,-16(fp)
 801562c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8015630:	e0bffe17 	ldw	r2,-8(fp)
 8015634:	00bfce16 	blt	zero,r2,8015570 <__alt_data_end+0xfc015570>

    /* If we read any data then return it */
    if (ptr != buffer)
 8015638:	e0fff517 	ldw	r3,-44(fp)
 801563c:	e0bffd17 	ldw	r2,-12(fp)
 8015640:	18800126 	beq	r3,r2,8015648 <altera_avalon_jtag_uart_read+0x104>
      break;
 8015644:	00001506 	br	801569c <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8015648:	e0bfff17 	ldw	r2,-4(fp)
 801564c:	1090000c 	andi	r2,r2,16384
 8015650:	10000126 	beq	r2,zero,8015658 <altera_avalon_jtag_uart_read+0x114>
      break;
 8015654:	00001106 	br	801569c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8015658:	0001883a 	nop
 801565c:	e0bffc17 	ldw	r2,-16(fp)
 8015660:	10c00a17 	ldw	r3,40(r2)
 8015664:	e0bff717 	ldw	r2,-36(fp)
 8015668:	1880051e 	bne	r3,r2,8015680 <altera_avalon_jtag_uart_read+0x13c>
 801566c:	e0bffc17 	ldw	r2,-16(fp)
 8015670:	10c00917 	ldw	r3,36(r2)
 8015674:	e0bffc17 	ldw	r2,-16(fp)
 8015678:	10800117 	ldw	r2,4(r2)
 801567c:	18bff736 	bltu	r3,r2,801565c <__alt_data_end+0xfc01565c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8015680:	e0bffc17 	ldw	r2,-16(fp)
 8015684:	10c00a17 	ldw	r3,40(r2)
 8015688:	e0bff717 	ldw	r2,-36(fp)
 801568c:	1880011e 	bne	r3,r2,8015694 <altera_avalon_jtag_uart_read+0x150>
      break;
 8015690:	00000206 	br	801569c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8015694:	e0bffe17 	ldw	r2,-8(fp)
 8015698:	00bfb516 	blt	zero,r2,8015570 <__alt_data_end+0xfc015570>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 801569c:	e0fff517 	ldw	r3,-44(fp)
 80156a0:	e0bffd17 	ldw	r2,-12(fp)
 80156a4:	18801826 	beq	r3,r2,8015708 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80156a8:	0005303a 	rdctl	r2,status
 80156ac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80156b0:	e0fffa17 	ldw	r3,-24(fp)
 80156b4:	00bfff84 	movi	r2,-2
 80156b8:	1884703a 	and	r2,r3,r2
 80156bc:	1001703a 	wrctl	status,r2
  
  return context;
 80156c0:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 80156c4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80156c8:	e0bffc17 	ldw	r2,-16(fp)
 80156cc:	10800817 	ldw	r2,32(r2)
 80156d0:	10c00054 	ori	r3,r2,1
 80156d4:	e0bffc17 	ldw	r2,-16(fp)
 80156d8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80156dc:	e0bffc17 	ldw	r2,-16(fp)
 80156e0:	10800017 	ldw	r2,0(r2)
 80156e4:	10800104 	addi	r2,r2,4
 80156e8:	1007883a 	mov	r3,r2
 80156ec:	e0bffc17 	ldw	r2,-16(fp)
 80156f0:	10800817 	ldw	r2,32(r2)
 80156f4:	18800035 	stwio	r2,0(r3)
 80156f8:	e0bff917 	ldw	r2,-28(fp)
 80156fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015700:	e0bffb17 	ldw	r2,-20(fp)
 8015704:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8015708:	e0fff517 	ldw	r3,-44(fp)
 801570c:	e0bffd17 	ldw	r2,-12(fp)
 8015710:	18800426 	beq	r3,r2,8015724 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 8015714:	e0fff517 	ldw	r3,-44(fp)
 8015718:	e0bffd17 	ldw	r2,-12(fp)
 801571c:	1885c83a 	sub	r2,r3,r2
 8015720:	00000606 	br	801573c <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 8015724:	e0bfff17 	ldw	r2,-4(fp)
 8015728:	1090000c 	andi	r2,r2,16384
 801572c:	10000226 	beq	r2,zero,8015738 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 8015730:	00bffd44 	movi	r2,-11
 8015734:	00000106 	br	801573c <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 8015738:	00bffec4 	movi	r2,-5
}
 801573c:	e037883a 	mov	sp,fp
 8015740:	dfc00117 	ldw	ra,4(sp)
 8015744:	df000017 	ldw	fp,0(sp)
 8015748:	dec00204 	addi	sp,sp,8
 801574c:	f800283a 	ret

08015750 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8015750:	defff304 	addi	sp,sp,-52
 8015754:	dfc00c15 	stw	ra,48(sp)
 8015758:	df000b15 	stw	fp,44(sp)
 801575c:	df000b04 	addi	fp,sp,44
 8015760:	e13ffc15 	stw	r4,-16(fp)
 8015764:	e17ffd15 	stw	r5,-12(fp)
 8015768:	e1bffe15 	stw	r6,-8(fp)
 801576c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8015770:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8015774:	e0bffd17 	ldw	r2,-12(fp)
 8015778:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 801577c:	00003806 	br	8015860 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8015780:	e0bffc17 	ldw	r2,-16(fp)
 8015784:	10800c17 	ldw	r2,48(r2)
 8015788:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 801578c:	e0bffc17 	ldw	r2,-16(fp)
 8015790:	10800d17 	ldw	r2,52(r2)
 8015794:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8015798:	e0fff817 	ldw	r3,-32(fp)
 801579c:	e0bff517 	ldw	r2,-44(fp)
 80157a0:	1880062e 	bgeu	r3,r2,80157bc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 80157a4:	e0fff517 	ldw	r3,-44(fp)
 80157a8:	e0bff817 	ldw	r2,-32(fp)
 80157ac:	1885c83a 	sub	r2,r3,r2
 80157b0:	10bfffc4 	addi	r2,r2,-1
 80157b4:	e0bff615 	stw	r2,-40(fp)
 80157b8:	00000b06 	br	80157e8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 80157bc:	e0bff517 	ldw	r2,-44(fp)
 80157c0:	10000526 	beq	r2,zero,80157d8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 80157c4:	00c20004 	movi	r3,2048
 80157c8:	e0bff817 	ldw	r2,-32(fp)
 80157cc:	1885c83a 	sub	r2,r3,r2
 80157d0:	e0bff615 	stw	r2,-40(fp)
 80157d4:	00000406 	br	80157e8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 80157d8:	00c1ffc4 	movi	r3,2047
 80157dc:	e0bff817 	ldw	r2,-32(fp)
 80157e0:	1885c83a 	sub	r2,r3,r2
 80157e4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 80157e8:	e0bff617 	ldw	r2,-40(fp)
 80157ec:	1000011e 	bne	r2,zero,80157f4 <altera_avalon_jtag_uart_write+0xa4>
        break;
 80157f0:	00001d06 	br	8015868 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 80157f4:	e0fffe17 	ldw	r3,-8(fp)
 80157f8:	e0bff617 	ldw	r2,-40(fp)
 80157fc:	1880022e 	bgeu	r3,r2,8015808 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 8015800:	e0bffe17 	ldw	r2,-8(fp)
 8015804:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8015808:	e0bff817 	ldw	r2,-32(fp)
 801580c:	10820e04 	addi	r2,r2,2104
 8015810:	e0fffc17 	ldw	r3,-16(fp)
 8015814:	1885883a 	add	r2,r3,r2
 8015818:	1009883a 	mov	r4,r2
 801581c:	e17ffd17 	ldw	r5,-12(fp)
 8015820:	e1bff617 	ldw	r6,-40(fp)
 8015824:	800d88c0 	call	800d88c <memcpy>
      ptr   += n;
 8015828:	e0fffd17 	ldw	r3,-12(fp)
 801582c:	e0bff617 	ldw	r2,-40(fp)
 8015830:	1885883a 	add	r2,r3,r2
 8015834:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8015838:	e0fffe17 	ldw	r3,-8(fp)
 801583c:	e0bff617 	ldw	r2,-40(fp)
 8015840:	1885c83a 	sub	r2,r3,r2
 8015844:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8015848:	e0fff817 	ldw	r3,-32(fp)
 801584c:	e0bff617 	ldw	r2,-40(fp)
 8015850:	1885883a 	add	r2,r3,r2
 8015854:	10c1ffcc 	andi	r3,r2,2047
 8015858:	e0bffc17 	ldw	r2,-16(fp)
 801585c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8015860:	e0bffe17 	ldw	r2,-8(fp)
 8015864:	00bfc616 	blt	zero,r2,8015780 <__alt_data_end+0xfc015780>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015868:	0005303a 	rdctl	r2,status
 801586c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015870:	e0fffa17 	ldw	r3,-24(fp)
 8015874:	00bfff84 	movi	r2,-2
 8015878:	1884703a 	and	r2,r3,r2
 801587c:	1001703a 	wrctl	status,r2
  
  return context;
 8015880:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8015884:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8015888:	e0bffc17 	ldw	r2,-16(fp)
 801588c:	10800817 	ldw	r2,32(r2)
 8015890:	10c00094 	ori	r3,r2,2
 8015894:	e0bffc17 	ldw	r2,-16(fp)
 8015898:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801589c:	e0bffc17 	ldw	r2,-16(fp)
 80158a0:	10800017 	ldw	r2,0(r2)
 80158a4:	10800104 	addi	r2,r2,4
 80158a8:	1007883a 	mov	r3,r2
 80158ac:	e0bffc17 	ldw	r2,-16(fp)
 80158b0:	10800817 	ldw	r2,32(r2)
 80158b4:	18800035 	stwio	r2,0(r3)
 80158b8:	e0bff917 	ldw	r2,-28(fp)
 80158bc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80158c0:	e0bffb17 	ldw	r2,-20(fp)
 80158c4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 80158c8:	e0bffe17 	ldw	r2,-8(fp)
 80158cc:	0080120e 	bge	zero,r2,8015918 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 80158d0:	e0bfff17 	ldw	r2,-4(fp)
 80158d4:	1090000c 	andi	r2,r2,16384
 80158d8:	10000126 	beq	r2,zero,80158e0 <altera_avalon_jtag_uart_write+0x190>
        break;
 80158dc:	00001006 	br	8015920 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 80158e0:	0001883a 	nop
 80158e4:	e0bffc17 	ldw	r2,-16(fp)
 80158e8:	10c00d17 	ldw	r3,52(r2)
 80158ec:	e0bff517 	ldw	r2,-44(fp)
 80158f0:	1880051e 	bne	r3,r2,8015908 <altera_avalon_jtag_uart_write+0x1b8>
 80158f4:	e0bffc17 	ldw	r2,-16(fp)
 80158f8:	10c00917 	ldw	r3,36(r2)
 80158fc:	e0bffc17 	ldw	r2,-16(fp)
 8015900:	10800117 	ldw	r2,4(r2)
 8015904:	18bff736 	bltu	r3,r2,80158e4 <__alt_data_end+0xfc0158e4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8015908:	e0bffc17 	ldw	r2,-16(fp)
 801590c:	10800917 	ldw	r2,36(r2)
 8015910:	10000126 	beq	r2,zero,8015918 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 8015914:	00000206 	br	8015920 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 8015918:	e0bffe17 	ldw	r2,-8(fp)
 801591c:	00bf9716 	blt	zero,r2,801577c <__alt_data_end+0xfc01577c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8015920:	e0fffd17 	ldw	r3,-12(fp)
 8015924:	e0bff717 	ldw	r2,-36(fp)
 8015928:	18800426 	beq	r3,r2,801593c <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 801592c:	e0fffd17 	ldw	r3,-12(fp)
 8015930:	e0bff717 	ldw	r2,-36(fp)
 8015934:	1885c83a 	sub	r2,r3,r2
 8015938:	00000606 	br	8015954 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 801593c:	e0bfff17 	ldw	r2,-4(fp)
 8015940:	1090000c 	andi	r2,r2,16384
 8015944:	10000226 	beq	r2,zero,8015950 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 8015948:	00bffd44 	movi	r2,-11
 801594c:	00000106 	br	8015954 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8015950:	00bffec4 	movi	r2,-5
}
 8015954:	e037883a 	mov	sp,fp
 8015958:	dfc00117 	ldw	ra,4(sp)
 801595c:	df000017 	ldw	fp,0(sp)
 8015960:	dec00204 	addi	sp,sp,8
 8015964:	f800283a 	ret

08015968 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8015968:	defffa04 	addi	sp,sp,-24
 801596c:	dfc00515 	stw	ra,20(sp)
 8015970:	df000415 	stw	fp,16(sp)
 8015974:	df000404 	addi	fp,sp,16
 8015978:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 801597c:	0007883a 	mov	r3,zero
 8015980:	e0bfff17 	ldw	r2,-4(fp)
 8015984:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8015988:	e0bfff17 	ldw	r2,-4(fp)
 801598c:	10800104 	addi	r2,r2,4
 8015990:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015994:	0005303a 	rdctl	r2,status
 8015998:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801599c:	e0fffd17 	ldw	r3,-12(fp)
 80159a0:	00bfff84 	movi	r2,-2
 80159a4:	1884703a 	and	r2,r3,r2
 80159a8:	1001703a 	wrctl	status,r2
  
  return context;
 80159ac:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 80159b0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 80159b4:	8014d3c0 	call	8014d3c <alt_tick>
 80159b8:	e0bffc17 	ldw	r2,-16(fp)
 80159bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80159c0:	e0bffe17 	ldw	r2,-8(fp)
 80159c4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 80159c8:	e037883a 	mov	sp,fp
 80159cc:	dfc00117 	ldw	ra,4(sp)
 80159d0:	df000017 	ldw	fp,0(sp)
 80159d4:	dec00204 	addi	sp,sp,8
 80159d8:	f800283a 	ret

080159dc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 80159dc:	defff804 	addi	sp,sp,-32
 80159e0:	dfc00715 	stw	ra,28(sp)
 80159e4:	df000615 	stw	fp,24(sp)
 80159e8:	df000604 	addi	fp,sp,24
 80159ec:	e13ffc15 	stw	r4,-16(fp)
 80159f0:	e17ffd15 	stw	r5,-12(fp)
 80159f4:	e1bffe15 	stw	r6,-8(fp)
 80159f8:	e1ffff15 	stw	r7,-4(fp)
 80159fc:	e0bfff17 	ldw	r2,-4(fp)
 8015a00:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8015a04:	008200b4 	movhi	r2,2050
 8015a08:	10943b04 	addi	r2,r2,20716
 8015a0c:	10800017 	ldw	r2,0(r2)
 8015a10:	1000041e 	bne	r2,zero,8015a24 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 8015a14:	008200b4 	movhi	r2,2050
 8015a18:	10943b04 	addi	r2,r2,20716
 8015a1c:	e0fffb17 	ldw	r3,-20(fp)
 8015a20:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8015a24:	e0bffc17 	ldw	r2,-16(fp)
 8015a28:	10800104 	addi	r2,r2,4
 8015a2c:	00c001c4 	movi	r3,7
 8015a30:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 8015a34:	d8000015 	stw	zero,0(sp)
 8015a38:	e13ffd17 	ldw	r4,-12(fp)
 8015a3c:	e17ffe17 	ldw	r5,-8(fp)
 8015a40:	01820074 	movhi	r6,2049
 8015a44:	31965a04 	addi	r6,r6,22888
 8015a48:	e1fffc17 	ldw	r7,-16(fp)
 8015a4c:	80163040 	call	8016304 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8015a50:	e037883a 	mov	sp,fp
 8015a54:	dfc00117 	ldw	ra,4(sp)
 8015a58:	df000017 	ldw	fp,0(sp)
 8015a5c:	dec00204 	addi	sp,sp,8
 8015a60:	f800283a 	ret

08015a64 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 8015a64:	defffc04 	addi	sp,sp,-16
 8015a68:	df000315 	stw	fp,12(sp)
 8015a6c:	df000304 	addi	fp,sp,12
 8015a70:	e13ffe15 	stw	r4,-8(fp)
 8015a74:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 8015a78:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 8015a7c:	e0bfff17 	ldw	r2,-4(fp)
 8015a80:	1000061e 	bne	r2,zero,8015a9c <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
 8015a84:	e0bffe17 	ldw	r2,-8(fp)
 8015a88:	1007883a 	mov	r3,r2
 8015a8c:	e0bffd03 	ldbu	r2,-12(fp)
 8015a90:	1884b03a 	or	r2,r3,r2
 8015a94:	e0bffd05 	stb	r2,-12(fp)
 8015a98:	00000806 	br	8015abc <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
 8015a9c:	e0bffe17 	ldw	r2,-8(fp)
 8015aa0:	1007883a 	mov	r3,r2
 8015aa4:	e0bffd03 	ldbu	r2,-12(fp)
 8015aa8:	1884b03a 	or	r2,r3,r2
 8015aac:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 8015ab0:	e0bffd03 	ldbu	r2,-12(fp)
 8015ab4:	10801014 	ori	r2,r2,64
 8015ab8:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 8015abc:	e0fffd03 	ldbu	r3,-12(fp)
 8015ac0:	00bfe004 	movi	r2,-128
 8015ac4:	1884b03a 	or	r2,r3,r2
}
 8015ac8:	e037883a 	mov	sp,fp
 8015acc:	df000017 	ldw	fp,0(sp)
 8015ad0:	dec00104 	addi	sp,sp,4
 8015ad4:	f800283a 	ret

08015ad8 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 8015ad8:	defffd04 	addi	sp,sp,-12
 8015adc:	df000215 	stw	fp,8(sp)
 8015ae0:	df000204 	addi	fp,sp,8
 8015ae4:	e13ffe15 	stw	r4,-8(fp)
 8015ae8:	2805883a 	mov	r2,r5
 8015aec:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 8015af0:	e0bffe17 	ldw	r2,-8(fp)
 8015af4:	10800a17 	ldw	r2,40(r2)
 8015af8:	1007883a 	mov	r3,r2
 8015afc:	e0bfff03 	ldbu	r2,-4(fp)
 8015b00:	18800025 	stbio	r2,0(r3)
}
 8015b04:	e037883a 	mov	sp,fp
 8015b08:	df000017 	ldw	fp,0(sp)
 8015b0c:	dec00104 	addi	sp,sp,4
 8015b10:	f800283a 	ret

08015b14 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 8015b14:	defffe04 	addi	sp,sp,-8
 8015b18:	df000115 	stw	fp,4(sp)
 8015b1c:	df000104 	addi	fp,sp,4
 8015b20:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 8015b24:	e0bfff17 	ldw	r2,-4(fp)
 8015b28:	10800a17 	ldw	r2,40(r2)
 8015b2c:	1007883a 	mov	r3,r2
 8015b30:	00800044 	movi	r2,1
 8015b34:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 8015b38:	e037883a 	mov	sp,fp
 8015b3c:	df000017 	ldw	fp,0(sp)
 8015b40:	dec00104 	addi	sp,sp,4
 8015b44:	f800283a 	ret

08015b48 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 8015b48:	defffc04 	addi	sp,sp,-16
 8015b4c:	dfc00315 	stw	ra,12(sp)
 8015b50:	df000215 	stw	fp,8(sp)
 8015b54:	df000204 	addi	fp,sp,8
 8015b58:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 8015b5c:	e13fff17 	ldw	r4,-4(fp)
 8015b60:	014200b4 	movhi	r5,2050
 8015b64:	294d5204 	addi	r5,r5,13640
 8015b68:	80162440 	call	8016244 <alt_find_dev>
 8015b6c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 8015b70:	e0bffe17 	ldw	r2,-8(fp)
}
 8015b74:	e037883a 	mov	sp,fp
 8015b78:	dfc00117 	ldw	ra,4(sp)
 8015b7c:	df000017 	ldw	fp,0(sp)
 8015b80:	dec00204 	addi	sp,sp,8
 8015b84:	f800283a 	ret

08015b88 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 8015b88:	defffb04 	addi	sp,sp,-20
 8015b8c:	df000415 	stw	fp,16(sp)
 8015b90:	df000404 	addi	fp,sp,16
 8015b94:	e13ffd15 	stw	r4,-12(fp)
 8015b98:	e17ffe15 	stw	r5,-8(fp)
 8015b9c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 8015ba0:	e03ffc15 	stw	zero,-16(fp)
 8015ba4:	00000f06 	br	8015be4 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 8015ba8:	e0bffd17 	ldw	r2,-12(fp)
 8015bac:	10800a17 	ldw	r2,40(r2)
 8015bb0:	10800044 	addi	r2,r2,1
 8015bb4:	1009883a 	mov	r4,r2
 8015bb8:	e0fffe17 	ldw	r3,-8(fp)
 8015bbc:	e0bffc17 	ldw	r2,-16(fp)
 8015bc0:	1885883a 	add	r2,r3,r2
 8015bc4:	10800003 	ldbu	r2,0(r2)
 8015bc8:	10803fcc 	andi	r2,r2,255
 8015bcc:	1080201c 	xori	r2,r2,128
 8015bd0:	10bfe004 	addi	r2,r2,-128
 8015bd4:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 8015bd8:	e0bffc17 	ldw	r2,-16(fp)
 8015bdc:	10800044 	addi	r2,r2,1
 8015be0:	e0bffc15 	stw	r2,-16(fp)
 8015be4:	e0fffc17 	ldw	r3,-16(fp)
 8015be8:	e0bfff17 	ldw	r2,-4(fp)
 8015bec:	18bfee36 	bltu	r3,r2,8015ba8 <__alt_data_end+0xfc015ba8>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 8015bf0:	e037883a 	mov	sp,fp
 8015bf4:	df000017 	ldw	fp,0(sp)
 8015bf8:	dec00104 	addi	sp,sp,4
 8015bfc:	f800283a 	ret

08015c00 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 8015c00:	defffd04 	addi	sp,sp,-12
 8015c04:	df000215 	stw	fp,8(sp)
 8015c08:	df000204 	addi	fp,sp,8
 8015c0c:	e13ffe15 	stw	r4,-8(fp)
 8015c10:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 8015c14:	00000d06 	br	8015c4c <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 8015c18:	e0bffe17 	ldw	r2,-8(fp)
 8015c1c:	10800a17 	ldw	r2,40(r2)
 8015c20:	10800044 	addi	r2,r2,1
 8015c24:	1007883a 	mov	r3,r2
 8015c28:	e0bfff17 	ldw	r2,-4(fp)
 8015c2c:	10800003 	ldbu	r2,0(r2)
 8015c30:	10803fcc 	andi	r2,r2,255
 8015c34:	1080201c 	xori	r2,r2,128
 8015c38:	10bfe004 	addi	r2,r2,-128
 8015c3c:	18800025 	stbio	r2,0(r3)
		++ptr;
 8015c40:	e0bfff17 	ldw	r2,-4(fp)
 8015c44:	10800044 	addi	r2,r2,1
 8015c48:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 8015c4c:	e0bfff17 	ldw	r2,-4(fp)
 8015c50:	10800003 	ldbu	r2,0(r2)
 8015c54:	10803fcc 	andi	r2,r2,255
 8015c58:	1080201c 	xori	r2,r2,128
 8015c5c:	10bfe004 	addi	r2,r2,-128
 8015c60:	103fed1e 	bne	r2,zero,8015c18 <__alt_data_end+0xfc015c18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 8015c64:	e037883a 	mov	sp,fp
 8015c68:	df000017 	ldw	fp,0(sp)
 8015c6c:	dec00104 	addi	sp,sp,4
 8015c70:	f800283a 	ret

08015c74 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 8015c74:	defffb04 	addi	sp,sp,-20
 8015c78:	dfc00415 	stw	ra,16(sp)
 8015c7c:	df000315 	stw	fp,12(sp)
 8015c80:	df000304 	addi	fp,sp,12
 8015c84:	e13ffd15 	stw	r4,-12(fp)
 8015c88:	e17ffe15 	stw	r5,-8(fp)
 8015c8c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 8015c90:	e0bffd17 	ldw	r2,-12(fp)
 8015c94:	10c00017 	ldw	r3,0(r2)
 8015c98:	e0bfff17 	ldw	r2,-4(fp)
 8015c9c:	1809883a 	mov	r4,r3
 8015ca0:	e17ffe17 	ldw	r5,-8(fp)
 8015ca4:	100d883a 	mov	r6,r2
 8015ca8:	8015b880 	call	8015b88 <alt_up_character_lcd_write>
	return 0;
 8015cac:	0005883a 	mov	r2,zero
}
 8015cb0:	e037883a 	mov	sp,fp
 8015cb4:	dfc00117 	ldw	ra,4(sp)
 8015cb8:	df000017 	ldw	fp,0(sp)
 8015cbc:	dec00204 	addi	sp,sp,8
 8015cc0:	f800283a 	ret

08015cc4 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 8015cc4:	defffa04 	addi	sp,sp,-24
 8015cc8:	dfc00515 	stw	ra,20(sp)
 8015ccc:	df000415 	stw	fp,16(sp)
 8015cd0:	df000404 	addi	fp,sp,16
 8015cd4:	e13ffd15 	stw	r4,-12(fp)
 8015cd8:	e17ffe15 	stw	r5,-8(fp)
 8015cdc:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 8015ce0:	e0bffe17 	ldw	r2,-8(fp)
 8015ce4:	10800a28 	cmpgeui	r2,r2,40
 8015ce8:	1000031e 	bne	r2,zero,8015cf8 <alt_up_character_lcd_set_cursor_pos+0x34>
 8015cec:	e0bfff17 	ldw	r2,-4(fp)
 8015cf0:	108000b0 	cmpltui	r2,r2,2
 8015cf4:	1000021e 	bne	r2,zero,8015d00 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
 8015cf8:	00bfffc4 	movi	r2,-1
 8015cfc:	00000906 	br	8015d24 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 8015d00:	e13ffe17 	ldw	r4,-8(fp)
 8015d04:	e17fff17 	ldw	r5,-4(fp)
 8015d08:	8015a640 	call	8015a64 <get_DDRAM_addr>
 8015d0c:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 8015d10:	e0bffc03 	ldbu	r2,-16(fp)
 8015d14:	e13ffd17 	ldw	r4,-12(fp)
 8015d18:	100b883a 	mov	r5,r2
 8015d1c:	8015ad80 	call	8015ad8 <alt_up_character_lcd_send_cmd>
	return 0;
 8015d20:	0005883a 	mov	r2,zero
}
 8015d24:	e037883a 	mov	sp,fp
 8015d28:	dfc00117 	ldw	ra,4(sp)
 8015d2c:	df000017 	ldw	fp,0(sp)
 8015d30:	dec00204 	addi	sp,sp,8
 8015d34:	f800283a 	ret

08015d38 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 8015d38:	defffb04 	addi	sp,sp,-20
 8015d3c:	dfc00415 	stw	ra,16(sp)
 8015d40:	df000315 	stw	fp,12(sp)
 8015d44:	df000304 	addi	fp,sp,12
 8015d48:	e13ffe15 	stw	r4,-8(fp)
 8015d4c:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 8015d50:	e0bfff17 	ldw	r2,-4(fp)
 8015d54:	1000011e 	bne	r2,zero,8015d5c <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
 8015d58:	00001406 	br	8015dac <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 8015d5c:	e0bfff17 	ldw	r2,-4(fp)
 8015d60:	0080020e 	bge	zero,r2,8015d6c <alt_up_character_lcd_shift_cursor+0x34>
 8015d64:	00800504 	movi	r2,20
 8015d68:	00000106 	br	8015d70 <alt_up_character_lcd_shift_cursor+0x38>
 8015d6c:	00800404 	movi	r2,16
 8015d70:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 8015d74:	e0bfff17 	ldw	r2,-4(fp)
 8015d78:	1000010e 	bge	r2,zero,8015d80 <alt_up_character_lcd_shift_cursor+0x48>
 8015d7c:	0085c83a 	sub	r2,zero,r2
 8015d80:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 8015d84:	00000406 	br	8015d98 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 8015d88:	e0bffd43 	ldbu	r2,-11(fp)
 8015d8c:	e13ffe17 	ldw	r4,-8(fp)
 8015d90:	100b883a 	mov	r5,r2
 8015d94:	8015ad80 	call	8015ad8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 8015d98:	e0bffd03 	ldbu	r2,-12(fp)
 8015d9c:	10ffffc4 	addi	r3,r2,-1
 8015da0:	e0fffd05 	stb	r3,-12(fp)
 8015da4:	10803fcc 	andi	r2,r2,255
 8015da8:	103ff71e 	bne	r2,zero,8015d88 <__alt_data_end+0xfc015d88>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 8015dac:	e037883a 	mov	sp,fp
 8015db0:	dfc00117 	ldw	ra,4(sp)
 8015db4:	df000017 	ldw	fp,0(sp)
 8015db8:	dec00204 	addi	sp,sp,8
 8015dbc:	f800283a 	ret

08015dc0 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 8015dc0:	defffb04 	addi	sp,sp,-20
 8015dc4:	dfc00415 	stw	ra,16(sp)
 8015dc8:	df000315 	stw	fp,12(sp)
 8015dcc:	df000304 	addi	fp,sp,12
 8015dd0:	e13ffe15 	stw	r4,-8(fp)
 8015dd4:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 8015dd8:	e0bfff17 	ldw	r2,-4(fp)
 8015ddc:	1000011e 	bne	r2,zero,8015de4 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
 8015de0:	00001406 	br	8015e34 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 8015de4:	e0bfff17 	ldw	r2,-4(fp)
 8015de8:	0080020e 	bge	zero,r2,8015df4 <alt_up_character_lcd_shift_display+0x34>
 8015dec:	00800704 	movi	r2,28
 8015df0:	00000106 	br	8015df8 <alt_up_character_lcd_shift_display+0x38>
 8015df4:	00800604 	movi	r2,24
 8015df8:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 8015dfc:	e0bfff17 	ldw	r2,-4(fp)
 8015e00:	1000010e 	bge	r2,zero,8015e08 <alt_up_character_lcd_shift_display+0x48>
 8015e04:	0085c83a 	sub	r2,zero,r2
 8015e08:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 8015e0c:	00000406 	br	8015e20 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 8015e10:	e0bffd43 	ldbu	r2,-11(fp)
 8015e14:	e13ffe17 	ldw	r4,-8(fp)
 8015e18:	100b883a 	mov	r5,r2
 8015e1c:	8015ad80 	call	8015ad8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 8015e20:	e0bffd03 	ldbu	r2,-12(fp)
 8015e24:	10ffffc4 	addi	r3,r2,-1
 8015e28:	e0fffd05 	stb	r3,-12(fp)
 8015e2c:	10803fcc 	andi	r2,r2,255
 8015e30:	103ff71e 	bne	r2,zero,8015e10 <__alt_data_end+0xfc015e10>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 8015e34:	e037883a 	mov	sp,fp
 8015e38:	dfc00117 	ldw	ra,4(sp)
 8015e3c:	df000017 	ldw	fp,0(sp)
 8015e40:	dec00204 	addi	sp,sp,8
 8015e44:	f800283a 	ret

08015e48 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 8015e48:	defffa04 	addi	sp,sp,-24
 8015e4c:	dfc00515 	stw	ra,20(sp)
 8015e50:	df000415 	stw	fp,16(sp)
 8015e54:	df000404 	addi	fp,sp,16
 8015e58:	e13ffd15 	stw	r4,-12(fp)
 8015e5c:	e17ffe15 	stw	r5,-8(fp)
 8015e60:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 8015e64:	e0bffe17 	ldw	r2,-8(fp)
 8015e68:	10800a28 	cmpgeui	r2,r2,40
 8015e6c:	1000031e 	bne	r2,zero,8015e7c <alt_up_character_lcd_erase_pos+0x34>
 8015e70:	e0bfff17 	ldw	r2,-4(fp)
 8015e74:	108000b0 	cmpltui	r2,r2,2
 8015e78:	1000021e 	bne	r2,zero,8015e84 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
 8015e7c:	00bfffc4 	movi	r2,-1
 8015e80:	00000f06 	br	8015ec0 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 8015e84:	e13ffe17 	ldw	r4,-8(fp)
 8015e88:	e17fff17 	ldw	r5,-4(fp)
 8015e8c:	8015a640 	call	8015a64 <get_DDRAM_addr>
 8015e90:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 8015e94:	e0bffc03 	ldbu	r2,-16(fp)
 8015e98:	e13ffd17 	ldw	r4,-12(fp)
 8015e9c:	100b883a 	mov	r5,r2
 8015ea0:	8015ad80 	call	8015ad8 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 8015ea4:	e0bffd17 	ldw	r2,-12(fp)
 8015ea8:	10800a17 	ldw	r2,40(r2)
 8015eac:	10800044 	addi	r2,r2,1
 8015eb0:	1007883a 	mov	r3,r2
 8015eb4:	00800084 	movi	r2,2
 8015eb8:	18800025 	stbio	r2,0(r3)
	return 0;
 8015ebc:	0005883a 	mov	r2,zero
}
 8015ec0:	e037883a 	mov	sp,fp
 8015ec4:	dfc00117 	ldw	ra,4(sp)
 8015ec8:	df000017 	ldw	fp,0(sp)
 8015ecc:	dec00204 	addi	sp,sp,8
 8015ed0:	f800283a 	ret

08015ed4 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 8015ed4:	defffd04 	addi	sp,sp,-12
 8015ed8:	dfc00215 	stw	ra,8(sp)
 8015edc:	df000115 	stw	fp,4(sp)
 8015ee0:	df000104 	addi	fp,sp,4
 8015ee4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 8015ee8:	e13fff17 	ldw	r4,-4(fp)
 8015eec:	01400304 	movi	r5,12
 8015ef0:	8015ad80 	call	8015ad8 <alt_up_character_lcd_send_cmd>
}
 8015ef4:	e037883a 	mov	sp,fp
 8015ef8:	dfc00117 	ldw	ra,4(sp)
 8015efc:	df000017 	ldw	fp,0(sp)
 8015f00:	dec00204 	addi	sp,sp,8
 8015f04:	f800283a 	ret

08015f08 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 8015f08:	defffd04 	addi	sp,sp,-12
 8015f0c:	dfc00215 	stw	ra,8(sp)
 8015f10:	df000115 	stw	fp,4(sp)
 8015f14:	df000104 	addi	fp,sp,4
 8015f18:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 8015f1c:	e13fff17 	ldw	r4,-4(fp)
 8015f20:	014003c4 	movi	r5,15
 8015f24:	8015ad80 	call	8015ad8 <alt_up_character_lcd_send_cmd>
}
 8015f28:	e037883a 	mov	sp,fp
 8015f2c:	dfc00117 	ldw	ra,4(sp)
 8015f30:	df000017 	ldw	fp,0(sp)
 8015f34:	dec00204 	addi	sp,sp,8
 8015f38:	f800283a 	ret

08015f3c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8015f3c:	defff504 	addi	sp,sp,-44
 8015f40:	df000a15 	stw	fp,40(sp)
 8015f44:	df000a04 	addi	fp,sp,40
 8015f48:	e13ffc15 	stw	r4,-16(fp)
 8015f4c:	e17ffd15 	stw	r5,-12(fp)
 8015f50:	e1bffe15 	stw	r6,-8(fp)
 8015f54:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8015f58:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8015f5c:	008200b4 	movhi	r2,2050
 8015f60:	10943b04 	addi	r2,r2,20716
 8015f64:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 8015f68:	10003f26 	beq	r2,zero,8016068 <alt_alarm_start+0x12c>
  {
    if (alarm)
 8015f6c:	e0bffc17 	ldw	r2,-16(fp)
 8015f70:	10003b26 	beq	r2,zero,8016060 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 8015f74:	e0bffc17 	ldw	r2,-16(fp)
 8015f78:	e0fffe17 	ldw	r3,-8(fp)
 8015f7c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8015f80:	e0bffc17 	ldw	r2,-16(fp)
 8015f84:	e0ffff17 	ldw	r3,-4(fp)
 8015f88:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015f8c:	0005303a 	rdctl	r2,status
 8015f90:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015f94:	e0fff817 	ldw	r3,-32(fp)
 8015f98:	00bfff84 	movi	r2,-2
 8015f9c:	1884703a 	and	r2,r3,r2
 8015fa0:	1001703a 	wrctl	status,r2
  
  return context;
 8015fa4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 8015fa8:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8015fac:	008200b4 	movhi	r2,2050
 8015fb0:	10943c04 	addi	r2,r2,20720
 8015fb4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 8015fb8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8015fbc:	e0fffd17 	ldw	r3,-12(fp)
 8015fc0:	e0bff617 	ldw	r2,-40(fp)
 8015fc4:	1885883a 	add	r2,r3,r2
 8015fc8:	10c00044 	addi	r3,r2,1
 8015fcc:	e0bffc17 	ldw	r2,-16(fp)
 8015fd0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8015fd4:	e0bffc17 	ldw	r2,-16(fp)
 8015fd8:	10c00217 	ldw	r3,8(r2)
 8015fdc:	e0bff617 	ldw	r2,-40(fp)
 8015fe0:	1880042e 	bgeu	r3,r2,8015ff4 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 8015fe4:	e0bffc17 	ldw	r2,-16(fp)
 8015fe8:	00c00044 	movi	r3,1
 8015fec:	10c00405 	stb	r3,16(r2)
 8015ff0:	00000206 	br	8015ffc <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 8015ff4:	e0bffc17 	ldw	r2,-16(fp)
 8015ff8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8015ffc:	e0fffc17 	ldw	r3,-16(fp)
 8016000:	008200b4 	movhi	r2,2050
 8016004:	108d5704 	addi	r2,r2,13660
 8016008:	e0bff915 	stw	r2,-28(fp)
 801600c:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8016010:	e0bffa17 	ldw	r2,-24(fp)
 8016014:	e0fff917 	ldw	r3,-28(fp)
 8016018:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 801601c:	e0bff917 	ldw	r2,-28(fp)
 8016020:	10c00017 	ldw	r3,0(r2)
 8016024:	e0bffa17 	ldw	r2,-24(fp)
 8016028:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 801602c:	e0bff917 	ldw	r2,-28(fp)
 8016030:	10800017 	ldw	r2,0(r2)
 8016034:	e0fffa17 	ldw	r3,-24(fp)
 8016038:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 801603c:	e0bff917 	ldw	r2,-28(fp)
 8016040:	e0fffa17 	ldw	r3,-24(fp)
 8016044:	10c00015 	stw	r3,0(r2)
 8016048:	e0bff717 	ldw	r2,-36(fp)
 801604c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016050:	e0bffb17 	ldw	r2,-20(fp)
 8016054:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8016058:	0005883a 	mov	r2,zero
 801605c:	00000306 	br	801606c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 8016060:	00bffa84 	movi	r2,-22
 8016064:	00000106 	br	801606c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 8016068:	00bfde84 	movi	r2,-134
  }
}
 801606c:	e037883a 	mov	sp,fp
 8016070:	df000017 	ldw	fp,0(sp)
 8016074:	dec00104 	addi	sp,sp,4
 8016078:	f800283a 	ret

0801607c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 801607c:	deffff04 	addi	sp,sp,-4
 8016080:	df000015 	stw	fp,0(sp)
 8016084:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8016088:	e037883a 	mov	sp,fp
 801608c:	df000017 	ldw	fp,0(sp)
 8016090:	dec00104 	addi	sp,sp,4
 8016094:	f800283a 	ret

08016098 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8016098:	defffe04 	addi	sp,sp,-8
 801609c:	dfc00115 	stw	ra,4(sp)
 80160a0:	df000015 	stw	fp,0(sp)
 80160a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80160a8:	008200b4 	movhi	r2,2050
 80160ac:	108d5504 	addi	r2,r2,13652
 80160b0:	10800017 	ldw	r2,0(r2)
 80160b4:	10000526 	beq	r2,zero,80160cc <alt_get_errno+0x34>
 80160b8:	008200b4 	movhi	r2,2050
 80160bc:	108d5504 	addi	r2,r2,13652
 80160c0:	10800017 	ldw	r2,0(r2)
 80160c4:	103ee83a 	callr	r2
 80160c8:	00000206 	br	80160d4 <alt_get_errno+0x3c>
 80160cc:	008200b4 	movhi	r2,2050
 80160d0:	10943004 	addi	r2,r2,20672
}
 80160d4:	e037883a 	mov	sp,fp
 80160d8:	dfc00117 	ldw	ra,4(sp)
 80160dc:	df000017 	ldw	fp,0(sp)
 80160e0:	dec00204 	addi	sp,sp,8
 80160e4:	f800283a 	ret

080160e8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 80160e8:	defffa04 	addi	sp,sp,-24
 80160ec:	dfc00515 	stw	ra,20(sp)
 80160f0:	df000415 	stw	fp,16(sp)
 80160f4:	df000404 	addi	fp,sp,16
 80160f8:	e13ffe15 	stw	r4,-8(fp)
 80160fc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8016100:	e0bffe17 	ldw	r2,-8(fp)
 8016104:	10000326 	beq	r2,zero,8016114 <alt_dev_llist_insert+0x2c>
 8016108:	e0bffe17 	ldw	r2,-8(fp)
 801610c:	10800217 	ldw	r2,8(r2)
 8016110:	1000061e 	bne	r2,zero,801612c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8016114:	80160980 	call	8016098 <alt_get_errno>
 8016118:	1007883a 	mov	r3,r2
 801611c:	00800584 	movi	r2,22
 8016120:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8016124:	00bffa84 	movi	r2,-22
 8016128:	00001306 	br	8016178 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 801612c:	e0bffe17 	ldw	r2,-8(fp)
 8016130:	e0ffff17 	ldw	r3,-4(fp)
 8016134:	e0fffc15 	stw	r3,-16(fp)
 8016138:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 801613c:	e0bffd17 	ldw	r2,-12(fp)
 8016140:	e0fffc17 	ldw	r3,-16(fp)
 8016144:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8016148:	e0bffc17 	ldw	r2,-16(fp)
 801614c:	10c00017 	ldw	r3,0(r2)
 8016150:	e0bffd17 	ldw	r2,-12(fp)
 8016154:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8016158:	e0bffc17 	ldw	r2,-16(fp)
 801615c:	10800017 	ldw	r2,0(r2)
 8016160:	e0fffd17 	ldw	r3,-12(fp)
 8016164:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8016168:	e0bffc17 	ldw	r2,-16(fp)
 801616c:	e0fffd17 	ldw	r3,-12(fp)
 8016170:	10c00015 	stw	r3,0(r2)

  return 0;  
 8016174:	0005883a 	mov	r2,zero
}
 8016178:	e037883a 	mov	sp,fp
 801617c:	dfc00117 	ldw	ra,4(sp)
 8016180:	df000017 	ldw	fp,0(sp)
 8016184:	dec00204 	addi	sp,sp,8
 8016188:	f800283a 	ret

0801618c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 801618c:	defffd04 	addi	sp,sp,-12
 8016190:	dfc00215 	stw	ra,8(sp)
 8016194:	df000115 	stw	fp,4(sp)
 8016198:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 801619c:	00820074 	movhi	r2,2049
 80161a0:	109bfd04 	addi	r2,r2,28660
 80161a4:	e0bfff15 	stw	r2,-4(fp)
 80161a8:	00000606 	br	80161c4 <_do_ctors+0x38>
        (*ctor) (); 
 80161ac:	e0bfff17 	ldw	r2,-4(fp)
 80161b0:	10800017 	ldw	r2,0(r2)
 80161b4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80161b8:	e0bfff17 	ldw	r2,-4(fp)
 80161bc:	10bfff04 	addi	r2,r2,-4
 80161c0:	e0bfff15 	stw	r2,-4(fp)
 80161c4:	e0ffff17 	ldw	r3,-4(fp)
 80161c8:	00820074 	movhi	r2,2049
 80161cc:	109bfe04 	addi	r2,r2,28664
 80161d0:	18bff62e 	bgeu	r3,r2,80161ac <__alt_data_end+0xfc0161ac>
        (*ctor) (); 
}
 80161d4:	e037883a 	mov	sp,fp
 80161d8:	dfc00117 	ldw	ra,4(sp)
 80161dc:	df000017 	ldw	fp,0(sp)
 80161e0:	dec00204 	addi	sp,sp,8
 80161e4:	f800283a 	ret

080161e8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 80161e8:	defffd04 	addi	sp,sp,-12
 80161ec:	dfc00215 	stw	ra,8(sp)
 80161f0:	df000115 	stw	fp,4(sp)
 80161f4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80161f8:	00820074 	movhi	r2,2049
 80161fc:	109bfd04 	addi	r2,r2,28660
 8016200:	e0bfff15 	stw	r2,-4(fp)
 8016204:	00000606 	br	8016220 <_do_dtors+0x38>
        (*dtor) (); 
 8016208:	e0bfff17 	ldw	r2,-4(fp)
 801620c:	10800017 	ldw	r2,0(r2)
 8016210:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8016214:	e0bfff17 	ldw	r2,-4(fp)
 8016218:	10bfff04 	addi	r2,r2,-4
 801621c:	e0bfff15 	stw	r2,-4(fp)
 8016220:	e0ffff17 	ldw	r3,-4(fp)
 8016224:	00820074 	movhi	r2,2049
 8016228:	109bfe04 	addi	r2,r2,28664
 801622c:	18bff62e 	bgeu	r3,r2,8016208 <__alt_data_end+0xfc016208>
        (*dtor) (); 
}
 8016230:	e037883a 	mov	sp,fp
 8016234:	dfc00117 	ldw	ra,4(sp)
 8016238:	df000017 	ldw	fp,0(sp)
 801623c:	dec00204 	addi	sp,sp,8
 8016240:	f800283a 	ret

08016244 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8016244:	defffa04 	addi	sp,sp,-24
 8016248:	dfc00515 	stw	ra,20(sp)
 801624c:	df000415 	stw	fp,16(sp)
 8016250:	df000404 	addi	fp,sp,16
 8016254:	e13ffe15 	stw	r4,-8(fp)
 8016258:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 801625c:	e0bfff17 	ldw	r2,-4(fp)
 8016260:	10800017 	ldw	r2,0(r2)
 8016264:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8016268:	e13ffe17 	ldw	r4,-8(fp)
 801626c:	8004afc0 	call	8004afc <strlen>
 8016270:	10800044 	addi	r2,r2,1
 8016274:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8016278:	00000d06 	br	80162b0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 801627c:	e0bffc17 	ldw	r2,-16(fp)
 8016280:	10c00217 	ldw	r3,8(r2)
 8016284:	e0bffd17 	ldw	r2,-12(fp)
 8016288:	1809883a 	mov	r4,r3
 801628c:	e17ffe17 	ldw	r5,-8(fp)
 8016290:	100d883a 	mov	r6,r2
 8016294:	8016c400 	call	8016c40 <memcmp>
 8016298:	1000021e 	bne	r2,zero,80162a4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 801629c:	e0bffc17 	ldw	r2,-16(fp)
 80162a0:	00000706 	br	80162c0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 80162a4:	e0bffc17 	ldw	r2,-16(fp)
 80162a8:	10800017 	ldw	r2,0(r2)
 80162ac:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80162b0:	e0fffc17 	ldw	r3,-16(fp)
 80162b4:	e0bfff17 	ldw	r2,-4(fp)
 80162b8:	18bff01e 	bne	r3,r2,801627c <__alt_data_end+0xfc01627c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 80162bc:	0005883a 	mov	r2,zero
}
 80162c0:	e037883a 	mov	sp,fp
 80162c4:	dfc00117 	ldw	ra,4(sp)
 80162c8:	df000017 	ldw	fp,0(sp)
 80162cc:	dec00204 	addi	sp,sp,8
 80162d0:	f800283a 	ret

080162d4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 80162d4:	defffe04 	addi	sp,sp,-8
 80162d8:	dfc00115 	stw	ra,4(sp)
 80162dc:	df000015 	stw	fp,0(sp)
 80162e0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 80162e4:	0009883a 	mov	r4,zero
 80162e8:	01440004 	movi	r5,4096
 80162ec:	8016b680 	call	8016b68 <alt_icache_flush>
#endif
}
 80162f0:	e037883a 	mov	sp,fp
 80162f4:	dfc00117 	ldw	ra,4(sp)
 80162f8:	df000017 	ldw	fp,0(sp)
 80162fc:	dec00204 	addi	sp,sp,8
 8016300:	f800283a 	ret

08016304 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8016304:	defff904 	addi	sp,sp,-28
 8016308:	dfc00615 	stw	ra,24(sp)
 801630c:	df000515 	stw	fp,20(sp)
 8016310:	df000504 	addi	fp,sp,20
 8016314:	e13ffc15 	stw	r4,-16(fp)
 8016318:	e17ffd15 	stw	r5,-12(fp)
 801631c:	e1bffe15 	stw	r6,-8(fp)
 8016320:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8016324:	e0800217 	ldw	r2,8(fp)
 8016328:	d8800015 	stw	r2,0(sp)
 801632c:	e13ffc17 	ldw	r4,-16(fp)
 8016330:	e17ffd17 	ldw	r5,-12(fp)
 8016334:	e1bffe17 	ldw	r6,-8(fp)
 8016338:	e1ffff17 	ldw	r7,-4(fp)
 801633c:	80164e40 	call	80164e4 <alt_iic_isr_register>
}  
 8016340:	e037883a 	mov	sp,fp
 8016344:	dfc00117 	ldw	ra,4(sp)
 8016348:	df000017 	ldw	fp,0(sp)
 801634c:	dec00204 	addi	sp,sp,8
 8016350:	f800283a 	ret

08016354 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8016354:	defff904 	addi	sp,sp,-28
 8016358:	df000615 	stw	fp,24(sp)
 801635c:	df000604 	addi	fp,sp,24
 8016360:	e13ffe15 	stw	r4,-8(fp)
 8016364:	e17fff15 	stw	r5,-4(fp)
 8016368:	e0bfff17 	ldw	r2,-4(fp)
 801636c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016370:	0005303a 	rdctl	r2,status
 8016374:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016378:	e0fffb17 	ldw	r3,-20(fp)
 801637c:	00bfff84 	movi	r2,-2
 8016380:	1884703a 	and	r2,r3,r2
 8016384:	1001703a 	wrctl	status,r2
  
  return context;
 8016388:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 801638c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8016390:	e0bffa17 	ldw	r2,-24(fp)
 8016394:	00c00044 	movi	r3,1
 8016398:	1884983a 	sll	r2,r3,r2
 801639c:	1007883a 	mov	r3,r2
 80163a0:	008200b4 	movhi	r2,2050
 80163a4:	10943d04 	addi	r2,r2,20724
 80163a8:	10800017 	ldw	r2,0(r2)
 80163ac:	1886b03a 	or	r3,r3,r2
 80163b0:	008200b4 	movhi	r2,2050
 80163b4:	10943d04 	addi	r2,r2,20724
 80163b8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80163bc:	008200b4 	movhi	r2,2050
 80163c0:	10943d04 	addi	r2,r2,20724
 80163c4:	10800017 	ldw	r2,0(r2)
 80163c8:	100170fa 	wrctl	ienable,r2
 80163cc:	e0bffc17 	ldw	r2,-16(fp)
 80163d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80163d4:	e0bffd17 	ldw	r2,-12(fp)
 80163d8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80163dc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 80163e0:	0001883a 	nop
}
 80163e4:	e037883a 	mov	sp,fp
 80163e8:	df000017 	ldw	fp,0(sp)
 80163ec:	dec00104 	addi	sp,sp,4
 80163f0:	f800283a 	ret

080163f4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 80163f4:	defff904 	addi	sp,sp,-28
 80163f8:	df000615 	stw	fp,24(sp)
 80163fc:	df000604 	addi	fp,sp,24
 8016400:	e13ffe15 	stw	r4,-8(fp)
 8016404:	e17fff15 	stw	r5,-4(fp)
 8016408:	e0bfff17 	ldw	r2,-4(fp)
 801640c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016410:	0005303a 	rdctl	r2,status
 8016414:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016418:	e0fffb17 	ldw	r3,-20(fp)
 801641c:	00bfff84 	movi	r2,-2
 8016420:	1884703a 	and	r2,r3,r2
 8016424:	1001703a 	wrctl	status,r2
  
  return context;
 8016428:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 801642c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8016430:	e0bffa17 	ldw	r2,-24(fp)
 8016434:	00c00044 	movi	r3,1
 8016438:	1884983a 	sll	r2,r3,r2
 801643c:	0084303a 	nor	r2,zero,r2
 8016440:	1007883a 	mov	r3,r2
 8016444:	008200b4 	movhi	r2,2050
 8016448:	10943d04 	addi	r2,r2,20724
 801644c:	10800017 	ldw	r2,0(r2)
 8016450:	1886703a 	and	r3,r3,r2
 8016454:	008200b4 	movhi	r2,2050
 8016458:	10943d04 	addi	r2,r2,20724
 801645c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8016460:	008200b4 	movhi	r2,2050
 8016464:	10943d04 	addi	r2,r2,20724
 8016468:	10800017 	ldw	r2,0(r2)
 801646c:	100170fa 	wrctl	ienable,r2
 8016470:	e0bffc17 	ldw	r2,-16(fp)
 8016474:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016478:	e0bffd17 	ldw	r2,-12(fp)
 801647c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8016480:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8016484:	0001883a 	nop
}
 8016488:	e037883a 	mov	sp,fp
 801648c:	df000017 	ldw	fp,0(sp)
 8016490:	dec00104 	addi	sp,sp,4
 8016494:	f800283a 	ret

08016498 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8016498:	defffc04 	addi	sp,sp,-16
 801649c:	df000315 	stw	fp,12(sp)
 80164a0:	df000304 	addi	fp,sp,12
 80164a4:	e13ffe15 	stw	r4,-8(fp)
 80164a8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 80164ac:	000530fa 	rdctl	r2,ienable
 80164b0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 80164b4:	e0bfff17 	ldw	r2,-4(fp)
 80164b8:	00c00044 	movi	r3,1
 80164bc:	1884983a 	sll	r2,r3,r2
 80164c0:	1007883a 	mov	r3,r2
 80164c4:	e0bffd17 	ldw	r2,-12(fp)
 80164c8:	1884703a 	and	r2,r3,r2
 80164cc:	1004c03a 	cmpne	r2,r2,zero
 80164d0:	10803fcc 	andi	r2,r2,255
}
 80164d4:	e037883a 	mov	sp,fp
 80164d8:	df000017 	ldw	fp,0(sp)
 80164dc:	dec00104 	addi	sp,sp,4
 80164e0:	f800283a 	ret

080164e4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80164e4:	defff504 	addi	sp,sp,-44
 80164e8:	dfc00a15 	stw	ra,40(sp)
 80164ec:	df000915 	stw	fp,36(sp)
 80164f0:	df000904 	addi	fp,sp,36
 80164f4:	e13ffc15 	stw	r4,-16(fp)
 80164f8:	e17ffd15 	stw	r5,-12(fp)
 80164fc:	e1bffe15 	stw	r6,-8(fp)
 8016500:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8016504:	00bffa84 	movi	r2,-22
 8016508:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 801650c:	e0bffd17 	ldw	r2,-12(fp)
 8016510:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8016514:	e0bff817 	ldw	r2,-32(fp)
 8016518:	10800808 	cmpgei	r2,r2,32
 801651c:	1000271e 	bne	r2,zero,80165bc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016520:	0005303a 	rdctl	r2,status
 8016524:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016528:	e0fffa17 	ldw	r3,-24(fp)
 801652c:	00bfff84 	movi	r2,-2
 8016530:	1884703a 	and	r2,r3,r2
 8016534:	1001703a 	wrctl	status,r2
  
  return context;
 8016538:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 801653c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 8016540:	008200b4 	movhi	r2,2050
 8016544:	10948804 	addi	r2,r2,21024
 8016548:	e0fff817 	ldw	r3,-32(fp)
 801654c:	180690fa 	slli	r3,r3,3
 8016550:	10c5883a 	add	r2,r2,r3
 8016554:	e0fffe17 	ldw	r3,-8(fp)
 8016558:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 801655c:	008200b4 	movhi	r2,2050
 8016560:	10948804 	addi	r2,r2,21024
 8016564:	e0fff817 	ldw	r3,-32(fp)
 8016568:	180690fa 	slli	r3,r3,3
 801656c:	10c5883a 	add	r2,r2,r3
 8016570:	10800104 	addi	r2,r2,4
 8016574:	e0ffff17 	ldw	r3,-4(fp)
 8016578:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 801657c:	e0bffe17 	ldw	r2,-8(fp)
 8016580:	10000526 	beq	r2,zero,8016598 <alt_iic_isr_register+0xb4>
 8016584:	e0bff817 	ldw	r2,-32(fp)
 8016588:	e13ffc17 	ldw	r4,-16(fp)
 801658c:	100b883a 	mov	r5,r2
 8016590:	80163540 	call	8016354 <alt_ic_irq_enable>
 8016594:	00000406 	br	80165a8 <alt_iic_isr_register+0xc4>
 8016598:	e0bff817 	ldw	r2,-32(fp)
 801659c:	e13ffc17 	ldw	r4,-16(fp)
 80165a0:	100b883a 	mov	r5,r2
 80165a4:	80163f40 	call	80163f4 <alt_ic_irq_disable>
 80165a8:	e0bff715 	stw	r2,-36(fp)
 80165ac:	e0bff917 	ldw	r2,-28(fp)
 80165b0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80165b4:	e0bffb17 	ldw	r2,-20(fp)
 80165b8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 80165bc:	e0bff717 	ldw	r2,-36(fp)
}
 80165c0:	e037883a 	mov	sp,fp
 80165c4:	dfc00117 	ldw	ra,4(sp)
 80165c8:	df000017 	ldw	fp,0(sp)
 80165cc:	dec00204 	addi	sp,sp,8
 80165d0:	f800283a 	ret

080165d4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 80165d4:	defff904 	addi	sp,sp,-28
 80165d8:	dfc00615 	stw	ra,24(sp)
 80165dc:	df000515 	stw	fp,20(sp)
 80165e0:	df000504 	addi	fp,sp,20
 80165e4:	e13ffc15 	stw	r4,-16(fp)
 80165e8:	e17ffd15 	stw	r5,-12(fp)
 80165ec:	e1bffe15 	stw	r6,-8(fp)
 80165f0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 80165f4:	e13ffd17 	ldw	r4,-12(fp)
 80165f8:	e17ffe17 	ldw	r5,-8(fp)
 80165fc:	e1bfff17 	ldw	r6,-4(fp)
 8016600:	80168280 	call	8016828 <open>
 8016604:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8016608:	e0bffb17 	ldw	r2,-20(fp)
 801660c:	10001c16 	blt	r2,zero,8016680 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 8016610:	008200b4 	movhi	r2,2050
 8016614:	1088c704 	addi	r2,r2,8988
 8016618:	e0fffb17 	ldw	r3,-20(fp)
 801661c:	18c00324 	muli	r3,r3,12
 8016620:	10c5883a 	add	r2,r2,r3
 8016624:	10c00017 	ldw	r3,0(r2)
 8016628:	e0bffc17 	ldw	r2,-16(fp)
 801662c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8016630:	008200b4 	movhi	r2,2050
 8016634:	1088c704 	addi	r2,r2,8988
 8016638:	e0fffb17 	ldw	r3,-20(fp)
 801663c:	18c00324 	muli	r3,r3,12
 8016640:	10c5883a 	add	r2,r2,r3
 8016644:	10800104 	addi	r2,r2,4
 8016648:	10c00017 	ldw	r3,0(r2)
 801664c:	e0bffc17 	ldw	r2,-16(fp)
 8016650:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8016654:	008200b4 	movhi	r2,2050
 8016658:	1088c704 	addi	r2,r2,8988
 801665c:	e0fffb17 	ldw	r3,-20(fp)
 8016660:	18c00324 	muli	r3,r3,12
 8016664:	10c5883a 	add	r2,r2,r3
 8016668:	10800204 	addi	r2,r2,8
 801666c:	10c00017 	ldw	r3,0(r2)
 8016670:	e0bffc17 	ldw	r2,-16(fp)
 8016674:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8016678:	e13ffb17 	ldw	r4,-20(fp)
 801667c:	8014b940 	call	8014b94 <alt_release_fd>
  }
} 
 8016680:	e037883a 	mov	sp,fp
 8016684:	dfc00117 	ldw	ra,4(sp)
 8016688:	df000017 	ldw	fp,0(sp)
 801668c:	dec00204 	addi	sp,sp,8
 8016690:	f800283a 	ret

08016694 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8016694:	defffb04 	addi	sp,sp,-20
 8016698:	dfc00415 	stw	ra,16(sp)
 801669c:	df000315 	stw	fp,12(sp)
 80166a0:	df000304 	addi	fp,sp,12
 80166a4:	e13ffd15 	stw	r4,-12(fp)
 80166a8:	e17ffe15 	stw	r5,-8(fp)
 80166ac:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80166b0:	010200b4 	movhi	r4,2050
 80166b4:	2108ca04 	addi	r4,r4,9000
 80166b8:	e17ffd17 	ldw	r5,-12(fp)
 80166bc:	01800044 	movi	r6,1
 80166c0:	01c07fc4 	movi	r7,511
 80166c4:	80165d40 	call	80165d4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 80166c8:	010200b4 	movhi	r4,2050
 80166cc:	2108c704 	addi	r4,r4,8988
 80166d0:	e17ffe17 	ldw	r5,-8(fp)
 80166d4:	000d883a 	mov	r6,zero
 80166d8:	01c07fc4 	movi	r7,511
 80166dc:	80165d40 	call	80165d4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 80166e0:	010200b4 	movhi	r4,2050
 80166e4:	2108cd04 	addi	r4,r4,9012
 80166e8:	e17fff17 	ldw	r5,-4(fp)
 80166ec:	01800044 	movi	r6,1
 80166f0:	01c07fc4 	movi	r7,511
 80166f4:	80165d40 	call	80165d4 <alt_open_fd>
}  
 80166f8:	e037883a 	mov	sp,fp
 80166fc:	dfc00117 	ldw	ra,4(sp)
 8016700:	df000017 	ldw	fp,0(sp)
 8016704:	dec00204 	addi	sp,sp,8
 8016708:	f800283a 	ret

0801670c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801670c:	defffe04 	addi	sp,sp,-8
 8016710:	dfc00115 	stw	ra,4(sp)
 8016714:	df000015 	stw	fp,0(sp)
 8016718:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801671c:	008200b4 	movhi	r2,2050
 8016720:	108d5504 	addi	r2,r2,13652
 8016724:	10800017 	ldw	r2,0(r2)
 8016728:	10000526 	beq	r2,zero,8016740 <alt_get_errno+0x34>
 801672c:	008200b4 	movhi	r2,2050
 8016730:	108d5504 	addi	r2,r2,13652
 8016734:	10800017 	ldw	r2,0(r2)
 8016738:	103ee83a 	callr	r2
 801673c:	00000206 	br	8016748 <alt_get_errno+0x3c>
 8016740:	008200b4 	movhi	r2,2050
 8016744:	10943004 	addi	r2,r2,20672
}
 8016748:	e037883a 	mov	sp,fp
 801674c:	dfc00117 	ldw	ra,4(sp)
 8016750:	df000017 	ldw	fp,0(sp)
 8016754:	dec00204 	addi	sp,sp,8
 8016758:	f800283a 	ret

0801675c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 801675c:	defffd04 	addi	sp,sp,-12
 8016760:	df000215 	stw	fp,8(sp)
 8016764:	df000204 	addi	fp,sp,8
 8016768:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 801676c:	e0bfff17 	ldw	r2,-4(fp)
 8016770:	10800217 	ldw	r2,8(r2)
 8016774:	10d00034 	orhi	r3,r2,16384
 8016778:	e0bfff17 	ldw	r2,-4(fp)
 801677c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8016780:	e03ffe15 	stw	zero,-8(fp)
 8016784:	00001d06 	br	80167fc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8016788:	008200b4 	movhi	r2,2050
 801678c:	1088c704 	addi	r2,r2,8988
 8016790:	e0fffe17 	ldw	r3,-8(fp)
 8016794:	18c00324 	muli	r3,r3,12
 8016798:	10c5883a 	add	r2,r2,r3
 801679c:	10c00017 	ldw	r3,0(r2)
 80167a0:	e0bfff17 	ldw	r2,-4(fp)
 80167a4:	10800017 	ldw	r2,0(r2)
 80167a8:	1880111e 	bne	r3,r2,80167f0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80167ac:	008200b4 	movhi	r2,2050
 80167b0:	1088c704 	addi	r2,r2,8988
 80167b4:	e0fffe17 	ldw	r3,-8(fp)
 80167b8:	18c00324 	muli	r3,r3,12
 80167bc:	10c5883a 	add	r2,r2,r3
 80167c0:	10800204 	addi	r2,r2,8
 80167c4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80167c8:	1000090e 	bge	r2,zero,80167f0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 80167cc:	e0bffe17 	ldw	r2,-8(fp)
 80167d0:	10c00324 	muli	r3,r2,12
 80167d4:	008200b4 	movhi	r2,2050
 80167d8:	1088c704 	addi	r2,r2,8988
 80167dc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80167e0:	e0bfff17 	ldw	r2,-4(fp)
 80167e4:	18800226 	beq	r3,r2,80167f0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 80167e8:	00bffcc4 	movi	r2,-13
 80167ec:	00000a06 	br	8016818 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80167f0:	e0bffe17 	ldw	r2,-8(fp)
 80167f4:	10800044 	addi	r2,r2,1
 80167f8:	e0bffe15 	stw	r2,-8(fp)
 80167fc:	008200b4 	movhi	r2,2050
 8016800:	108d5404 	addi	r2,r2,13648
 8016804:	10800017 	ldw	r2,0(r2)
 8016808:	1007883a 	mov	r3,r2
 801680c:	e0bffe17 	ldw	r2,-8(fp)
 8016810:	18bfdd2e 	bgeu	r3,r2,8016788 <__alt_data_end+0xfc016788>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8016814:	0005883a 	mov	r2,zero
}
 8016818:	e037883a 	mov	sp,fp
 801681c:	df000017 	ldw	fp,0(sp)
 8016820:	dec00104 	addi	sp,sp,4
 8016824:	f800283a 	ret

08016828 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8016828:	defff604 	addi	sp,sp,-40
 801682c:	dfc00915 	stw	ra,36(sp)
 8016830:	df000815 	stw	fp,32(sp)
 8016834:	df000804 	addi	fp,sp,32
 8016838:	e13ffd15 	stw	r4,-12(fp)
 801683c:	e17ffe15 	stw	r5,-8(fp)
 8016840:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8016844:	00bfffc4 	movi	r2,-1
 8016848:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 801684c:	00bffb44 	movi	r2,-19
 8016850:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8016854:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8016858:	e13ffd17 	ldw	r4,-12(fp)
 801685c:	014200b4 	movhi	r5,2050
 8016860:	294d5204 	addi	r5,r5,13640
 8016864:	80162440 	call	8016244 <alt_find_dev>
 8016868:	e0bff815 	stw	r2,-32(fp)
 801686c:	e0bff817 	ldw	r2,-32(fp)
 8016870:	1000051e 	bne	r2,zero,8016888 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8016874:	e13ffd17 	ldw	r4,-12(fp)
 8016878:	80169a00 	call	80169a0 <alt_find_file>
 801687c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8016880:	00800044 	movi	r2,1
 8016884:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8016888:	e0bff817 	ldw	r2,-32(fp)
 801688c:	10002926 	beq	r2,zero,8016934 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8016890:	e13ff817 	ldw	r4,-32(fp)
 8016894:	8016ab40 	call	8016ab4 <alt_get_fd>
 8016898:	e0bff915 	stw	r2,-28(fp)
 801689c:	e0bff917 	ldw	r2,-28(fp)
 80168a0:	1000030e 	bge	r2,zero,80168b0 <open+0x88>
    {
      status = index;
 80168a4:	e0bff917 	ldw	r2,-28(fp)
 80168a8:	e0bffa15 	stw	r2,-24(fp)
 80168ac:	00002306 	br	801693c <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 80168b0:	e0bff917 	ldw	r2,-28(fp)
 80168b4:	10c00324 	muli	r3,r2,12
 80168b8:	008200b4 	movhi	r2,2050
 80168bc:	1088c704 	addi	r2,r2,8988
 80168c0:	1885883a 	add	r2,r3,r2
 80168c4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 80168c8:	e0fffe17 	ldw	r3,-8(fp)
 80168cc:	00900034 	movhi	r2,16384
 80168d0:	10bfffc4 	addi	r2,r2,-1
 80168d4:	1886703a 	and	r3,r3,r2
 80168d8:	e0bffc17 	ldw	r2,-16(fp)
 80168dc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 80168e0:	e0bffb17 	ldw	r2,-20(fp)
 80168e4:	1000051e 	bne	r2,zero,80168fc <open+0xd4>
 80168e8:	e13ffc17 	ldw	r4,-16(fp)
 80168ec:	801675c0 	call	801675c <alt_file_locked>
 80168f0:	e0bffa15 	stw	r2,-24(fp)
 80168f4:	e0bffa17 	ldw	r2,-24(fp)
 80168f8:	10001016 	blt	r2,zero,801693c <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 80168fc:	e0bff817 	ldw	r2,-32(fp)
 8016900:	10800317 	ldw	r2,12(r2)
 8016904:	10000826 	beq	r2,zero,8016928 <open+0x100>
 8016908:	e0bff817 	ldw	r2,-32(fp)
 801690c:	10800317 	ldw	r2,12(r2)
 8016910:	e13ffc17 	ldw	r4,-16(fp)
 8016914:	e17ffd17 	ldw	r5,-12(fp)
 8016918:	e1bffe17 	ldw	r6,-8(fp)
 801691c:	e1ffff17 	ldw	r7,-4(fp)
 8016920:	103ee83a 	callr	r2
 8016924:	00000106 	br	801692c <open+0x104>
 8016928:	0005883a 	mov	r2,zero
 801692c:	e0bffa15 	stw	r2,-24(fp)
 8016930:	00000206 	br	801693c <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8016934:	00bffb44 	movi	r2,-19
 8016938:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 801693c:	e0bffa17 	ldw	r2,-24(fp)
 8016940:	1000090e 	bge	r2,zero,8016968 <open+0x140>
  {
    alt_release_fd (index);  
 8016944:	e13ff917 	ldw	r4,-28(fp)
 8016948:	8014b940 	call	8014b94 <alt_release_fd>
    ALT_ERRNO = -status;
 801694c:	801670c0 	call	801670c <alt_get_errno>
 8016950:	1007883a 	mov	r3,r2
 8016954:	e0bffa17 	ldw	r2,-24(fp)
 8016958:	0085c83a 	sub	r2,zero,r2
 801695c:	18800015 	stw	r2,0(r3)
    return -1;
 8016960:	00bfffc4 	movi	r2,-1
 8016964:	00000106 	br	801696c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 8016968:	e0bff917 	ldw	r2,-28(fp)
}
 801696c:	e037883a 	mov	sp,fp
 8016970:	dfc00117 	ldw	ra,4(sp)
 8016974:	df000017 	ldw	fp,0(sp)
 8016978:	dec00204 	addi	sp,sp,8
 801697c:	f800283a 	ret

08016980 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 8016980:	deffff04 	addi	sp,sp,-4
 8016984:	df000015 	stw	fp,0(sp)
 8016988:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 801698c:	000170fa 	wrctl	ienable,zero
}
 8016990:	e037883a 	mov	sp,fp
 8016994:	df000017 	ldw	fp,0(sp)
 8016998:	dec00104 	addi	sp,sp,4
 801699c:	f800283a 	ret

080169a0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 80169a0:	defffb04 	addi	sp,sp,-20
 80169a4:	dfc00415 	stw	ra,16(sp)
 80169a8:	df000315 	stw	fp,12(sp)
 80169ac:	df000304 	addi	fp,sp,12
 80169b0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 80169b4:	008200b4 	movhi	r2,2050
 80169b8:	108d5004 	addi	r2,r2,13632
 80169bc:	10800017 	ldw	r2,0(r2)
 80169c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80169c4:	00003106 	br	8016a8c <alt_find_file+0xec>
  {
    len = strlen(next->name);
 80169c8:	e0bffd17 	ldw	r2,-12(fp)
 80169cc:	10800217 	ldw	r2,8(r2)
 80169d0:	1009883a 	mov	r4,r2
 80169d4:	8004afc0 	call	8004afc <strlen>
 80169d8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 80169dc:	e0bffd17 	ldw	r2,-12(fp)
 80169e0:	10c00217 	ldw	r3,8(r2)
 80169e4:	e0bffe17 	ldw	r2,-8(fp)
 80169e8:	10bfffc4 	addi	r2,r2,-1
 80169ec:	1885883a 	add	r2,r3,r2
 80169f0:	10800003 	ldbu	r2,0(r2)
 80169f4:	10803fcc 	andi	r2,r2,255
 80169f8:	1080201c 	xori	r2,r2,128
 80169fc:	10bfe004 	addi	r2,r2,-128
 8016a00:	10800bd8 	cmpnei	r2,r2,47
 8016a04:	1000031e 	bne	r2,zero,8016a14 <alt_find_file+0x74>
    {
      len -= 1;
 8016a08:	e0bffe17 	ldw	r2,-8(fp)
 8016a0c:	10bfffc4 	addi	r2,r2,-1
 8016a10:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8016a14:	e0bffe17 	ldw	r2,-8(fp)
 8016a18:	e0ffff17 	ldw	r3,-4(fp)
 8016a1c:	1885883a 	add	r2,r3,r2
 8016a20:	10800003 	ldbu	r2,0(r2)
 8016a24:	10803fcc 	andi	r2,r2,255
 8016a28:	1080201c 	xori	r2,r2,128
 8016a2c:	10bfe004 	addi	r2,r2,-128
 8016a30:	10800be0 	cmpeqi	r2,r2,47
 8016a34:	1000081e 	bne	r2,zero,8016a58 <alt_find_file+0xb8>
 8016a38:	e0bffe17 	ldw	r2,-8(fp)
 8016a3c:	e0ffff17 	ldw	r3,-4(fp)
 8016a40:	1885883a 	add	r2,r3,r2
 8016a44:	10800003 	ldbu	r2,0(r2)
 8016a48:	10803fcc 	andi	r2,r2,255
 8016a4c:	1080201c 	xori	r2,r2,128
 8016a50:	10bfe004 	addi	r2,r2,-128
 8016a54:	10000a1e 	bne	r2,zero,8016a80 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 8016a58:	e0bffd17 	ldw	r2,-12(fp)
 8016a5c:	10c00217 	ldw	r3,8(r2)
 8016a60:	e0bffe17 	ldw	r2,-8(fp)
 8016a64:	1809883a 	mov	r4,r3
 8016a68:	e17fff17 	ldw	r5,-4(fp)
 8016a6c:	100d883a 	mov	r6,r2
 8016a70:	8016c400 	call	8016c40 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8016a74:	1000021e 	bne	r2,zero,8016a80 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8016a78:	e0bffd17 	ldw	r2,-12(fp)
 8016a7c:	00000806 	br	8016aa0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 8016a80:	e0bffd17 	ldw	r2,-12(fp)
 8016a84:	10800017 	ldw	r2,0(r2)
 8016a88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8016a8c:	e0fffd17 	ldw	r3,-12(fp)
 8016a90:	008200b4 	movhi	r2,2050
 8016a94:	108d5004 	addi	r2,r2,13632
 8016a98:	18bfcb1e 	bne	r3,r2,80169c8 <__alt_data_end+0xfc0169c8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8016a9c:	0005883a 	mov	r2,zero
}
 8016aa0:	e037883a 	mov	sp,fp
 8016aa4:	dfc00117 	ldw	ra,4(sp)
 8016aa8:	df000017 	ldw	fp,0(sp)
 8016aac:	dec00204 	addi	sp,sp,8
 8016ab0:	f800283a 	ret

08016ab4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8016ab4:	defffc04 	addi	sp,sp,-16
 8016ab8:	df000315 	stw	fp,12(sp)
 8016abc:	df000304 	addi	fp,sp,12
 8016ac0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8016ac4:	00bffa04 	movi	r2,-24
 8016ac8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8016acc:	e03ffd15 	stw	zero,-12(fp)
 8016ad0:	00001d06 	br	8016b48 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 8016ad4:	008200b4 	movhi	r2,2050
 8016ad8:	1088c704 	addi	r2,r2,8988
 8016adc:	e0fffd17 	ldw	r3,-12(fp)
 8016ae0:	18c00324 	muli	r3,r3,12
 8016ae4:	10c5883a 	add	r2,r2,r3
 8016ae8:	10800017 	ldw	r2,0(r2)
 8016aec:	1000131e 	bne	r2,zero,8016b3c <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 8016af0:	008200b4 	movhi	r2,2050
 8016af4:	1088c704 	addi	r2,r2,8988
 8016af8:	e0fffd17 	ldw	r3,-12(fp)
 8016afc:	18c00324 	muli	r3,r3,12
 8016b00:	10c5883a 	add	r2,r2,r3
 8016b04:	e0ffff17 	ldw	r3,-4(fp)
 8016b08:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8016b0c:	008200b4 	movhi	r2,2050
 8016b10:	108d5404 	addi	r2,r2,13648
 8016b14:	10c00017 	ldw	r3,0(r2)
 8016b18:	e0bffd17 	ldw	r2,-12(fp)
 8016b1c:	1880040e 	bge	r3,r2,8016b30 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 8016b20:	008200b4 	movhi	r2,2050
 8016b24:	108d5404 	addi	r2,r2,13648
 8016b28:	e0fffd17 	ldw	r3,-12(fp)
 8016b2c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 8016b30:	e0bffd17 	ldw	r2,-12(fp)
 8016b34:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 8016b38:	00000606 	br	8016b54 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8016b3c:	e0bffd17 	ldw	r2,-12(fp)
 8016b40:	10800044 	addi	r2,r2,1
 8016b44:	e0bffd15 	stw	r2,-12(fp)
 8016b48:	e0bffd17 	ldw	r2,-12(fp)
 8016b4c:	10800810 	cmplti	r2,r2,32
 8016b50:	103fe01e 	bne	r2,zero,8016ad4 <__alt_data_end+0xfc016ad4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8016b54:	e0bffe17 	ldw	r2,-8(fp)
}
 8016b58:	e037883a 	mov	sp,fp
 8016b5c:	df000017 	ldw	fp,0(sp)
 8016b60:	dec00104 	addi	sp,sp,4
 8016b64:	f800283a 	ret

08016b68 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8016b68:	defffb04 	addi	sp,sp,-20
 8016b6c:	df000415 	stw	fp,16(sp)
 8016b70:	df000404 	addi	fp,sp,16
 8016b74:	e13ffe15 	stw	r4,-8(fp)
 8016b78:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 8016b7c:	e0bfff17 	ldw	r2,-4(fp)
 8016b80:	10840070 	cmpltui	r2,r2,4097
 8016b84:	1000021e 	bne	r2,zero,8016b90 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 8016b88:	00840004 	movi	r2,4096
 8016b8c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 8016b90:	e0fffe17 	ldw	r3,-8(fp)
 8016b94:	e0bfff17 	ldw	r2,-4(fp)
 8016b98:	1885883a 	add	r2,r3,r2
 8016b9c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8016ba0:	e0bffe17 	ldw	r2,-8(fp)
 8016ba4:	e0bffc15 	stw	r2,-16(fp)
 8016ba8:	00000506 	br	8016bc0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 8016bac:	e0bffc17 	ldw	r2,-16(fp)
 8016bb0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8016bb4:	e0bffc17 	ldw	r2,-16(fp)
 8016bb8:	10800804 	addi	r2,r2,32
 8016bbc:	e0bffc15 	stw	r2,-16(fp)
 8016bc0:	e0fffc17 	ldw	r3,-16(fp)
 8016bc4:	e0bffd17 	ldw	r2,-12(fp)
 8016bc8:	18bff836 	bltu	r3,r2,8016bac <__alt_data_end+0xfc016bac>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 8016bcc:	e0bffe17 	ldw	r2,-8(fp)
 8016bd0:	108007cc 	andi	r2,r2,31
 8016bd4:	10000226 	beq	r2,zero,8016be0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 8016bd8:	e0bffc17 	ldw	r2,-16(fp)
 8016bdc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 8016be0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 8016be4:	e037883a 	mov	sp,fp
 8016be8:	df000017 	ldw	fp,0(sp)
 8016bec:	dec00104 	addi	sp,sp,4
 8016bf0:	f800283a 	ret

08016bf4 <atexit>:
 8016bf4:	200b883a 	mov	r5,r4
 8016bf8:	000d883a 	mov	r6,zero
 8016bfc:	0009883a 	mov	r4,zero
 8016c00:	000f883a 	mov	r7,zero
 8016c04:	8016cbc1 	jmpi	8016cbc <__register_exitproc>

08016c08 <exit>:
 8016c08:	defffe04 	addi	sp,sp,-8
 8016c0c:	000b883a 	mov	r5,zero
 8016c10:	dc000015 	stw	r16,0(sp)
 8016c14:	dfc00115 	stw	ra,4(sp)
 8016c18:	2021883a 	mov	r16,r4
 8016c1c:	8016dd00 	call	8016dd0 <__call_exitprocs>
 8016c20:	008200b4 	movhi	r2,2050
 8016c24:	108d4c04 	addi	r2,r2,13616
 8016c28:	11000017 	ldw	r4,0(r2)
 8016c2c:	20800f17 	ldw	r2,60(r4)
 8016c30:	10000126 	beq	r2,zero,8016c38 <exit+0x30>
 8016c34:	103ee83a 	callr	r2
 8016c38:	8009883a 	mov	r4,r16
 8016c3c:	8016fc40 	call	8016fc4 <_exit>

08016c40 <memcmp>:
 8016c40:	01c000c4 	movi	r7,3
 8016c44:	3980192e 	bgeu	r7,r6,8016cac <memcmp+0x6c>
 8016c48:	2144b03a 	or	r2,r4,r5
 8016c4c:	11c4703a 	and	r2,r2,r7
 8016c50:	10000f26 	beq	r2,zero,8016c90 <memcmp+0x50>
 8016c54:	20800003 	ldbu	r2,0(r4)
 8016c58:	28c00003 	ldbu	r3,0(r5)
 8016c5c:	10c0151e 	bne	r2,r3,8016cb4 <memcmp+0x74>
 8016c60:	31bfff84 	addi	r6,r6,-2
 8016c64:	01ffffc4 	movi	r7,-1
 8016c68:	00000406 	br	8016c7c <memcmp+0x3c>
 8016c6c:	20800003 	ldbu	r2,0(r4)
 8016c70:	28c00003 	ldbu	r3,0(r5)
 8016c74:	31bfffc4 	addi	r6,r6,-1
 8016c78:	10c00e1e 	bne	r2,r3,8016cb4 <memcmp+0x74>
 8016c7c:	21000044 	addi	r4,r4,1
 8016c80:	29400044 	addi	r5,r5,1
 8016c84:	31fff91e 	bne	r6,r7,8016c6c <__alt_data_end+0xfc016c6c>
 8016c88:	0005883a 	mov	r2,zero
 8016c8c:	f800283a 	ret
 8016c90:	20c00017 	ldw	r3,0(r4)
 8016c94:	28800017 	ldw	r2,0(r5)
 8016c98:	1880041e 	bne	r3,r2,8016cac <memcmp+0x6c>
 8016c9c:	31bfff04 	addi	r6,r6,-4
 8016ca0:	21000104 	addi	r4,r4,4
 8016ca4:	29400104 	addi	r5,r5,4
 8016ca8:	39bff936 	bltu	r7,r6,8016c90 <__alt_data_end+0xfc016c90>
 8016cac:	303fe91e 	bne	r6,zero,8016c54 <__alt_data_end+0xfc016c54>
 8016cb0:	003ff506 	br	8016c88 <__alt_data_end+0xfc016c88>
 8016cb4:	10c5c83a 	sub	r2,r2,r3
 8016cb8:	f800283a 	ret

08016cbc <__register_exitproc>:
 8016cbc:	008200b4 	movhi	r2,2050
 8016cc0:	defffa04 	addi	sp,sp,-24
 8016cc4:	108d4c04 	addi	r2,r2,13616
 8016cc8:	dc000315 	stw	r16,12(sp)
 8016ccc:	14000017 	ldw	r16,0(r2)
 8016cd0:	dc400415 	stw	r17,16(sp)
 8016cd4:	dfc00515 	stw	ra,20(sp)
 8016cd8:	80805217 	ldw	r2,328(r16)
 8016cdc:	2023883a 	mov	r17,r4
 8016ce0:	10003626 	beq	r2,zero,8016dbc <__register_exitproc+0x100>
 8016ce4:	10c00117 	ldw	r3,4(r2)
 8016ce8:	010007c4 	movi	r4,31
 8016cec:	20c00e16 	blt	r4,r3,8016d28 <__register_exitproc+0x6c>
 8016cf0:	1a400044 	addi	r9,r3,1
 8016cf4:	8800211e 	bne	r17,zero,8016d7c <__register_exitproc+0xc0>
 8016cf8:	18c00084 	addi	r3,r3,2
 8016cfc:	18c7883a 	add	r3,r3,r3
 8016d00:	18c7883a 	add	r3,r3,r3
 8016d04:	12400115 	stw	r9,4(r2)
 8016d08:	10c7883a 	add	r3,r2,r3
 8016d0c:	19400015 	stw	r5,0(r3)
 8016d10:	0005883a 	mov	r2,zero
 8016d14:	dfc00517 	ldw	ra,20(sp)
 8016d18:	dc400417 	ldw	r17,16(sp)
 8016d1c:	dc000317 	ldw	r16,12(sp)
 8016d20:	dec00604 	addi	sp,sp,24
 8016d24:	f800283a 	ret
 8016d28:	00820034 	movhi	r2,2048
 8016d2c:	108fb604 	addi	r2,r2,16088
 8016d30:	10002526 	beq	r2,zero,8016dc8 <__register_exitproc+0x10c>
 8016d34:	01006404 	movi	r4,400
 8016d38:	d9400015 	stw	r5,0(sp)
 8016d3c:	d9800115 	stw	r6,4(sp)
 8016d40:	d9c00215 	stw	r7,8(sp)
 8016d44:	8003ed80 	call	8003ed8 <malloc>
 8016d48:	d9400017 	ldw	r5,0(sp)
 8016d4c:	d9800117 	ldw	r6,4(sp)
 8016d50:	d9c00217 	ldw	r7,8(sp)
 8016d54:	10001c26 	beq	r2,zero,8016dc8 <__register_exitproc+0x10c>
 8016d58:	80c05217 	ldw	r3,328(r16)
 8016d5c:	10000115 	stw	zero,4(r2)
 8016d60:	02400044 	movi	r9,1
 8016d64:	10c00015 	stw	r3,0(r2)
 8016d68:	80805215 	stw	r2,328(r16)
 8016d6c:	10006215 	stw	zero,392(r2)
 8016d70:	10006315 	stw	zero,396(r2)
 8016d74:	0007883a 	mov	r3,zero
 8016d78:	883fdf26 	beq	r17,zero,8016cf8 <__alt_data_end+0xfc016cf8>
 8016d7c:	18d1883a 	add	r8,r3,r3
 8016d80:	4211883a 	add	r8,r8,r8
 8016d84:	1211883a 	add	r8,r2,r8
 8016d88:	41802215 	stw	r6,136(r8)
 8016d8c:	01000044 	movi	r4,1
 8016d90:	11806217 	ldw	r6,392(r2)
 8016d94:	20c8983a 	sll	r4,r4,r3
 8016d98:	310cb03a 	or	r6,r6,r4
 8016d9c:	11806215 	stw	r6,392(r2)
 8016da0:	41c04215 	stw	r7,264(r8)
 8016da4:	01800084 	movi	r6,2
 8016da8:	89bfd31e 	bne	r17,r6,8016cf8 <__alt_data_end+0xfc016cf8>
 8016dac:	11806317 	ldw	r6,396(r2)
 8016db0:	3108b03a 	or	r4,r6,r4
 8016db4:	11006315 	stw	r4,396(r2)
 8016db8:	003fcf06 	br	8016cf8 <__alt_data_end+0xfc016cf8>
 8016dbc:	80805304 	addi	r2,r16,332
 8016dc0:	80805215 	stw	r2,328(r16)
 8016dc4:	003fc706 	br	8016ce4 <__alt_data_end+0xfc016ce4>
 8016dc8:	00bfffc4 	movi	r2,-1
 8016dcc:	003fd106 	br	8016d14 <__alt_data_end+0xfc016d14>

08016dd0 <__call_exitprocs>:
 8016dd0:	008200b4 	movhi	r2,2050
 8016dd4:	108d4c04 	addi	r2,r2,13616
 8016dd8:	10800017 	ldw	r2,0(r2)
 8016ddc:	defff404 	addi	sp,sp,-48
 8016de0:	dd800815 	stw	r22,32(sp)
 8016de4:	d8800015 	stw	r2,0(sp)
 8016de8:	10805204 	addi	r2,r2,328
 8016dec:	dd000615 	stw	r20,24(sp)
 8016df0:	dc800415 	stw	r18,16(sp)
 8016df4:	dfc00b15 	stw	ra,44(sp)
 8016df8:	df000a15 	stw	fp,40(sp)
 8016dfc:	ddc00915 	stw	r23,36(sp)
 8016e00:	dd400715 	stw	r21,28(sp)
 8016e04:	dcc00515 	stw	r19,20(sp)
 8016e08:	dc400315 	stw	r17,12(sp)
 8016e0c:	dc000215 	stw	r16,8(sp)
 8016e10:	2025883a 	mov	r18,r4
 8016e14:	2829883a 	mov	r20,r5
 8016e18:	d8800115 	stw	r2,4(sp)
 8016e1c:	05bfffc4 	movi	r22,-1
 8016e20:	d8800017 	ldw	r2,0(sp)
 8016e24:	14c05217 	ldw	r19,328(r2)
 8016e28:	98001d26 	beq	r19,zero,8016ea0 <__call_exitprocs+0xd0>
 8016e2c:	dd400117 	ldw	r21,4(sp)
 8016e30:	98800117 	ldw	r2,4(r19)
 8016e34:	173fffc4 	addi	fp,r2,-1
 8016e38:	e0000d16 	blt	fp,zero,8016e70 <__call_exitprocs+0xa0>
 8016e3c:	14000044 	addi	r16,r2,1
 8016e40:	8421883a 	add	r16,r16,r16
 8016e44:	8421883a 	add	r16,r16,r16
 8016e48:	84402004 	addi	r17,r16,128
 8016e4c:	9c63883a 	add	r17,r19,r17
 8016e50:	9c21883a 	add	r16,r19,r16
 8016e54:	a0001e26 	beq	r20,zero,8016ed0 <__call_exitprocs+0x100>
 8016e58:	80804017 	ldw	r2,256(r16)
 8016e5c:	15001c26 	beq	r2,r20,8016ed0 <__call_exitprocs+0x100>
 8016e60:	e73fffc4 	addi	fp,fp,-1
 8016e64:	843fff04 	addi	r16,r16,-4
 8016e68:	8c7fff04 	addi	r17,r17,-4
 8016e6c:	e5bff91e 	bne	fp,r22,8016e54 <__alt_data_end+0xfc016e54>
 8016e70:	00820034 	movhi	r2,2048
 8016e74:	108fbb04 	addi	r2,r2,16108
 8016e78:	10000926 	beq	r2,zero,8016ea0 <__call_exitprocs+0xd0>
 8016e7c:	98800117 	ldw	r2,4(r19)
 8016e80:	1000311e 	bne	r2,zero,8016f48 <__call_exitprocs+0x178>
 8016e84:	98800017 	ldw	r2,0(r19)
 8016e88:	10003426 	beq	r2,zero,8016f5c <__call_exitprocs+0x18c>
 8016e8c:	9809883a 	mov	r4,r19
 8016e90:	a8800015 	stw	r2,0(r21)
 8016e94:	8003eec0 	call	8003eec <free>
 8016e98:	acc00017 	ldw	r19,0(r21)
 8016e9c:	983fe41e 	bne	r19,zero,8016e30 <__alt_data_end+0xfc016e30>
 8016ea0:	dfc00b17 	ldw	ra,44(sp)
 8016ea4:	df000a17 	ldw	fp,40(sp)
 8016ea8:	ddc00917 	ldw	r23,36(sp)
 8016eac:	dd800817 	ldw	r22,32(sp)
 8016eb0:	dd400717 	ldw	r21,28(sp)
 8016eb4:	dd000617 	ldw	r20,24(sp)
 8016eb8:	dcc00517 	ldw	r19,20(sp)
 8016ebc:	dc800417 	ldw	r18,16(sp)
 8016ec0:	dc400317 	ldw	r17,12(sp)
 8016ec4:	dc000217 	ldw	r16,8(sp)
 8016ec8:	dec00c04 	addi	sp,sp,48
 8016ecc:	f800283a 	ret
 8016ed0:	98800117 	ldw	r2,4(r19)
 8016ed4:	80c00017 	ldw	r3,0(r16)
 8016ed8:	10bfffc4 	addi	r2,r2,-1
 8016edc:	17001526 	beq	r2,fp,8016f34 <__call_exitprocs+0x164>
 8016ee0:	80000015 	stw	zero,0(r16)
 8016ee4:	183fde26 	beq	r3,zero,8016e60 <__alt_data_end+0xfc016e60>
 8016ee8:	00800044 	movi	r2,1
 8016eec:	1708983a 	sll	r4,r2,fp
 8016ef0:	98806217 	ldw	r2,392(r19)
 8016ef4:	9dc00117 	ldw	r23,4(r19)
 8016ef8:	2084703a 	and	r2,r4,r2
 8016efc:	1000061e 	bne	r2,zero,8016f18 <__call_exitprocs+0x148>
 8016f00:	183ee83a 	callr	r3
 8016f04:	98800117 	ldw	r2,4(r19)
 8016f08:	15ffc51e 	bne	r2,r23,8016e20 <__alt_data_end+0xfc016e20>
 8016f0c:	a8800017 	ldw	r2,0(r21)
 8016f10:	14ffd326 	beq	r2,r19,8016e60 <__alt_data_end+0xfc016e60>
 8016f14:	003fc206 	br	8016e20 <__alt_data_end+0xfc016e20>
 8016f18:	98806317 	ldw	r2,396(r19)
 8016f1c:	2084703a 	and	r2,r4,r2
 8016f20:	1000061e 	bne	r2,zero,8016f3c <__call_exitprocs+0x16c>
 8016f24:	89400017 	ldw	r5,0(r17)
 8016f28:	9009883a 	mov	r4,r18
 8016f2c:	183ee83a 	callr	r3
 8016f30:	003ff406 	br	8016f04 <__alt_data_end+0xfc016f04>
 8016f34:	9f000115 	stw	fp,4(r19)
 8016f38:	003fea06 	br	8016ee4 <__alt_data_end+0xfc016ee4>
 8016f3c:	89000017 	ldw	r4,0(r17)
 8016f40:	183ee83a 	callr	r3
 8016f44:	003fef06 	br	8016f04 <__alt_data_end+0xfc016f04>
 8016f48:	98800017 	ldw	r2,0(r19)
 8016f4c:	982b883a 	mov	r21,r19
 8016f50:	1027883a 	mov	r19,r2
 8016f54:	983fb61e 	bne	r19,zero,8016e30 <__alt_data_end+0xfc016e30>
 8016f58:	003fd106 	br	8016ea0 <__alt_data_end+0xfc016ea0>
 8016f5c:	0005883a 	mov	r2,zero
 8016f60:	003ffa06 	br	8016f4c <__alt_data_end+0xfc016f4c>

08016f64 <__muldi3>:
 8016f64:	223fffcc 	andi	r8,r4,65535
 8016f68:	2012d43a 	srli	r9,r4,16
 8016f6c:	32bfffcc 	andi	r10,r6,65535
 8016f70:	3006d43a 	srli	r3,r6,16
 8016f74:	5217383a 	mul	r11,r10,r8
 8016f78:	5255383a 	mul	r10,r10,r9
 8016f7c:	1a05383a 	mul	r2,r3,r8
 8016f80:	5810d43a 	srli	r8,r11,16
 8016f84:	5085883a 	add	r2,r10,r2
 8016f88:	1205883a 	add	r2,r2,r8
 8016f8c:	1a51383a 	mul	r8,r3,r9
 8016f90:	1280022e 	bgeu	r2,r10,8016f9c <__muldi3+0x38>
 8016f94:	00c00074 	movhi	r3,1
 8016f98:	40d1883a 	add	r8,r8,r3
 8016f9c:	1006d43a 	srli	r3,r2,16
 8016fa0:	21cf383a 	mul	r7,r4,r7
 8016fa4:	314b383a 	mul	r5,r6,r5
 8016fa8:	1004943a 	slli	r2,r2,16
 8016fac:	40c7883a 	add	r3,r8,r3
 8016fb0:	5affffcc 	andi	r11,r11,65535
 8016fb4:	3949883a 	add	r4,r7,r5
 8016fb8:	12c5883a 	add	r2,r2,r11
 8016fbc:	20c7883a 	add	r3,r4,r3
 8016fc0:	f800283a 	ret

08016fc4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8016fc4:	defffd04 	addi	sp,sp,-12
 8016fc8:	df000215 	stw	fp,8(sp)
 8016fcc:	df000204 	addi	fp,sp,8
 8016fd0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8016fd4:	0001883a 	nop
 8016fd8:	e0bfff17 	ldw	r2,-4(fp)
 8016fdc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8016fe0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8016fe4:	10000226 	beq	r2,zero,8016ff0 <_exit+0x2c>
    ALT_SIM_FAIL();
 8016fe8:	002af070 	cmpltui	zero,zero,43969
 8016fec:	00000106 	br	8016ff4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8016ff0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8016ff4:	003fff06 	br	8016ff4 <__alt_data_end+0xfc016ff4>
